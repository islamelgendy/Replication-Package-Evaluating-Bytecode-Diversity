Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test001
Start line: 12
End line: 33
Method source code: 
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree0);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = vector3D4.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane6 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D2, vector3D5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side7 = polyhedronsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #6
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: getstatic     #10
38: astore_3
39: aload_3
40: invokevirtual #11
43: astore        4
45: getstatic     #10
48: astore        5
50: aload         5
52: invokevirtual #11
55: astore        6
57: new           #12
60: dup
61: aload_3
62: aload         6
64: invokespecial #13
67: astore        7
69: aload_2
70: aload         7
72: invokevirtual #14
75: astore        8
77: ldc           #15
79: invokestatic  #16
82: goto          87
85: astore        8
87: aload_3
88: invokestatic  #18
91: aload         4
93: invokestatic  #18
96: aload         5
98: invokestatic  #18
101: aload         6
103: invokestatic  #18
106: return
Exception table:
from    to  target type
69    82    85   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test002
Start line: 36
End line: 58
Method source code: 
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree0);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = vector3D4.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane6 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D2, vector3D5);
        plane6.revertSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side8 = polyhedronsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #19
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: getstatic     #10
38: astore_3
39: aload_3
40: invokevirtual #11
43: astore        4
45: getstatic     #10
48: astore        5
50: aload         5
52: invokevirtual #11
55: astore        6
57: new           #12
60: dup
61: aload_3
62: aload         6
64: invokespecial #13
67: astore        7
69: aload         7
71: invokevirtual #20
74: aload_2
75: aload         7
77: invokevirtual #14
80: astore        8
82: ldc           #15
84: invokestatic  #16
87: goto          92
90: astore        8
92: aload_3
93: invokestatic  #18
96: aload         4
98: invokestatic  #18
101: aload         5
103: invokestatic  #18
106: aload         6
108: invokestatic  #18
111: return
Exception table:
from    to  target type
74    87    90   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test003
Start line: 61
End line: 161
Method source code: 
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        int[] intArray54 = new int[] { ' ', 0 };
        int[] intArray60 = new int[] { 'a', '4', (short) 10, (byte) 100, 'a' };
        double double61 = org.apache.commons.math3.util.MathArrays.distance(intArray54, intArray60);
        int[] intArray62 = org.apache.commons.math3.util.MathArrays.copyOf(intArray54);
        euclidean3DBSPTree33.setAttribute((java.lang.Object) intArray62);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[32, 0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[97, 52, 10, 100, 97]");
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 83.24061508662703d + "'", double61 == 83.24061508662703d);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[32, 0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #21
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: iconst_2
417: newarray       int
419: dup
420: iconst_0
421: bipush        32
423: iastore
424: dup
425: iconst_1
426: iconst_0
427: iastore
428: astore        57
430: iconst_5
431: newarray       int
433: dup
434: iconst_0
435: bipush        97
437: iastore
438: dup
439: iconst_1
440: bipush        52
442: iastore
443: dup
444: iconst_2
445: bipush        10
447: iastore
448: dup
449: iconst_3
450: bipush        100
452: iastore
453: dup
454: iconst_4
455: bipush        97
457: iastore
458: astore        58
460: aload         57
462: aload         58
464: invokestatic  #35
467: dstore        59
469: aload         57
471: invokestatic  #36
474: astore        61
476: aload         36
478: aload         61
480: invokevirtual #37
483: aload_1
484: invokestatic  #18
487: aload_2
488: invokestatic  #18
491: aload_3
492: invokestatic  #18
495: aload         4
497: invokestatic  #18
500: aload         6
502: invokestatic  #18
505: aload         7
507: invokestatic  #18
510: aload         8
512: invokestatic  #18
515: aload         9
517: invokestatic  #18
520: aload         10
522: invokestatic  #18
525: aload         11
527: invokestatic  #18
530: dload         13
532: invokestatic  #38
535: invokestatic  #39
538: dload         15
540: invokestatic  #38
543: invokestatic  #39
546: aload         17
548: invokestatic  #18
551: new           #40
554: dup
555: invokespecial #41
558: ldc           #42
560: invokevirtual #43
563: dload         20
565: invokevirtual #44
568: ldc           #45
570: invokevirtual #43
573: dconst_0
574: invokevirtual #44
577: ldc           #42
579: invokevirtual #43
582: invokevirtual #46
585: dload         20
587: dconst_0
588: dcmpl
589: ifne          596
592: iconst_1
593: goto          597
596: iconst_0
597: invokestatic  #47
600: aload         25
602: invokestatic  #18
605: aload         26
607: invokestatic  #18
610: new           #40
613: dup
614: invokespecial #41
617: ldc           #42
619: invokevirtual #43
622: iload         27
624: invokevirtual #48
627: ldc           #45
629: invokevirtual #43
632: iconst_0
633: invokevirtual #48
636: ldc           #42
638: invokevirtual #43
641: invokevirtual #46
644: iload         27
646: ifne          653
649: iconst_1
650: goto          654
653: iconst_0
654: invokestatic  #47
657: new           #40
660: dup
661: invokespecial #41
664: ldc           #42
666: invokevirtual #43
669: dload         30
671: invokevirtual #44
674: ldc           #45
676: invokevirtual #43
679: dconst_0
680: invokevirtual #44
683: ldc           #42
685: invokevirtual #43
688: invokevirtual #46
691: dload         30
693: dconst_0
694: dcmpl
695: ifne          702
698: iconst_1
699: goto          703
702: iconst_0
703: invokestatic  #47
706: aload         35
708: invokestatic  #18
711: aload         36
713: invokestatic  #18
716: new           #40
719: dup
720: invokespecial #41
723: ldc           #42
725: invokevirtual #43
728: iload         37
730: invokevirtual #48
733: ldc           #45
735: invokevirtual #43
738: iconst_0
739: invokevirtual #48
742: ldc           #42
744: invokevirtual #43
747: invokevirtual #46
750: iload         37
752: ifne          759
755: iconst_1
756: goto          760
759: iconst_0
760: invokestatic  #47
763: aload         38
765: invokestatic  #18
768: aload         39
770: invokestatic  #18
773: aload         40
775: invokestatic  #18
778: aload         41
780: invokestatic  #18
783: aload         43
785: invokestatic  #18
788: aload         44
790: invokestatic  #18
793: aload         45
795: invokestatic  #18
798: aload         46
800: invokestatic  #18
803: aload         47
805: invokestatic  #18
808: aload         48
810: invokestatic  #18
813: dload         50
815: invokestatic  #38
818: invokestatic  #39
821: dload         52
823: invokestatic  #38
826: invokestatic  #39
829: aload         54
831: invokestatic  #18
834: aload         55
836: invokestatic  #18
839: aload         57
841: invokestatic  #18
844: aload         57
846: invokestatic  #49
849: ldc           #50
851: invokestatic  #51
854: aload         58
856: invokestatic  #18
859: aload         58
861: invokestatic  #49
864: ldc           #52
866: invokestatic  #51
869: new           #40
872: dup
873: invokespecial #41
876: ldc           #42
878: invokevirtual #43
881: dload         59
883: invokevirtual #44
886: ldc           #45
888: invokevirtual #43
891: ldc2_w        #53
894: invokevirtual #44
897: ldc           #42
899: invokevirtual #43
902: invokevirtual #46
905: dload         59
907: ldc2_w        #53
910: dcmpl
911: ifne          918
914: iconst_1
915: goto          919
918: iconst_0
919: invokestatic  #47
922: aload         61
924: invokestatic  #18
927: aload         61
929: invokestatic  #49
932: ldc           #50
934: invokestatic  #51
937: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test004
Start line: 164
End line: 177
Method source code: 
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> euclidean2DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>) euclidean2DSubHyperplaneList0);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DSubHyperplane2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DSubHyperplane3 = polygonsSet1.intersection(euclidean2DSubHyperplane2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #55
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #56
35: dup
36: aload_1
37: invokespecial #57
40: astore_2
41: aconst_null
42: astore_3
43: aload_2
44: aload_3
45: invokevirtual #58
48: astore        4
50: ldc           #15
52: invokestatic  #16
55: goto          60
58: astore        4
60: return
Exception table:
from    to  target type
43    55    58   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test005
Start line: 180
End line: 229
Method source code: 
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        double double23 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        double double24 = plane15.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane25 = plane15.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion26 = subPlane25.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane27 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane4, euclidean2DRegion26);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion28 = subPlane27.getRemainingRegion();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(subPlane25);
        org.junit.Assert.assertNotNull(euclidean2DRegion26);
        org.junit.Assert.assertNotNull(euclidean2DRegion28);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #59
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: new           #60
58: dup
59: dconst_0
60: ldc2_w        #61
63: invokespecial #63
66: astore        6
68: new           #64
71: dup
72: aload         6
74: dconst_0
75: invokespecial #65
78: astore        7
80: aload         5
82: aload         6
84: invokevirtual #66
87: astore        8
89: getstatic     #10
92: astore        9
94: aload         9
96: invokevirtual #11
99: astore        10
101: getstatic     #10
104: astore        11
106: aload         11
108: invokevirtual #11
111: astore        12
113: new           #12
116: dup
117: aload         9
119: aload         12
121: invokespecial #13
124: astore        13
126: getstatic     #10
129: astore        14
131: aload         14
133: invokevirtual #11
136: astore        15
138: getstatic     #10
141: astore        16
143: aload         16
145: invokevirtual #11
148: astore        17
150: getstatic     #10
153: astore        18
155: aload         18
157: invokevirtual #11
160: astore        19
162: new           #12
165: dup
166: aload         16
168: aload         19
170: invokespecial #13
173: astore        20
175: aload         14
177: aload         19
179: invokevirtual #22
182: dstore        21
184: aload         13
186: aload         19
188: invokevirtual #23
191: dstore        23
193: aload         13
195: invokevirtual #24
198: astore        25
200: aload         25
202: invokevirtual #32
205: astore        26
207: new           #67
210: dup
211: aload         5
213: aload         26
215: invokespecial #68
218: astore        27
220: aload         27
222: invokevirtual #32
225: astore        28
227: aload_1
228: invokestatic  #18
231: aload_2
232: invokestatic  #18
235: aload_3
236: invokestatic  #18
239: aload         4
241: invokestatic  #18
244: aload         8
246: invokestatic  #18
249: aload         9
251: invokestatic  #18
254: aload         10
256: invokestatic  #18
259: aload         11
261: invokestatic  #18
264: aload         12
266: invokestatic  #18
269: aload         14
271: invokestatic  #18
274: aload         15
276: invokestatic  #18
279: aload         16
281: invokestatic  #18
284: aload         17
286: invokestatic  #18
289: aload         18
291: invokestatic  #18
294: aload         19
296: invokestatic  #18
299: dload         21
301: invokestatic  #38
304: invokestatic  #39
307: dload         23
309: invokestatic  #38
312: invokestatic  #39
315: aload         25
317: invokestatic  #18
320: aload         26
322: invokestatic  #18
325: aload         28
327: invokestatic  #18
330: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test006
Start line: 232
End line: 321
Method source code: 
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = plane7.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D14, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        double double26 = vector3D19.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        double double27 = plane18.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane28 = plane18.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion29 = subPlane28.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane30 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane7, euclidean2DRegion29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane45 = plane35.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion46 = subPlane45.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane47 = subPlane45.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane48 = subPlane30.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane45);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane49 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane30);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane30.getRemainingRegion();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(subPlane28);
        org.junit.Assert.assertNotNull(euclidean2DRegion29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(subPlane45);
        org.junit.Assert.assertNotNull(euclidean2DRegion46);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane47);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane48);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #69
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #70
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: new           #60
86: dup
87: dconst_0
88: ldc2_w        #61
91: invokespecial #63
94: astore        10
96: new           #64
99: dup
100: aload         10
102: dconst_0
103: invokespecial #65
106: astore        11
108: aload         9
110: aload         10
112: invokevirtual #66
115: astore        12
117: getstatic     #10
120: astore        13
122: aload         13
124: invokevirtual #11
127: astore        14
129: getstatic     #10
132: astore        15
134: aload         15
136: invokevirtual #11
139: astore        16
141: new           #12
144: dup
145: aload         13
147: aload         16
149: invokespecial #13
152: astore        17
154: getstatic     #10
157: astore        18
159: aload         18
161: invokevirtual #11
164: astore        19
166: getstatic     #10
169: astore        20
171: aload         20
173: invokevirtual #11
176: astore        21
178: getstatic     #10
181: astore        22
183: aload         22
185: invokevirtual #11
188: astore        23
190: new           #12
193: dup
194: aload         20
196: aload         23
198: invokespecial #13
201: astore        24
203: aload         18
205: aload         23
207: invokevirtual #22
210: dstore        25
212: aload         17
214: aload         23
216: invokevirtual #23
219: dstore        27
221: aload         17
223: invokevirtual #24
226: astore        29
228: aload         29
230: invokevirtual #32
233: astore        30
235: new           #67
238: dup
239: aload         9
241: aload         30
243: invokespecial #68
246: astore        31
248: getstatic     #10
251: astore        32
253: aload         32
255: invokevirtual #11
258: astore        33
260: getstatic     #10
263: astore        34
265: aload         34
267: invokevirtual #11
270: astore        35
272: new           #12
275: dup
276: aload         32
278: aload         35
280: invokespecial #13
283: astore        36
285: getstatic     #10
288: astore        37
290: aload         37
292: invokevirtual #11
295: astore        38
297: getstatic     #10
300: astore        39
302: aload         39
304: invokevirtual #11
307: astore        40
309: getstatic     #10
312: astore        41
314: aload         41
316: invokevirtual #11
319: astore        42
321: new           #12
324: dup
325: aload         39
327: aload         42
329: invokespecial #13
332: astore        43
334: aload         37
336: aload         42
338: invokevirtual #22
341: dstore        44
343: aload         36
345: aload         42
347: invokevirtual #23
350: dstore        46
352: aload         36
354: invokevirtual #24
357: astore        48
359: aload         48
361: invokevirtual #32
364: astore        49
366: aload         48
368: invokevirtual #71
371: astore        50
373: aload         31
375: aload         48
377: invokevirtual #72
380: astore        51
382: aload_2
383: aload         31
385: invokevirtual #73
388: astore        52
390: aload         31
392: invokevirtual #32
395: astore        53
397: new           #40
400: dup
401: invokespecial #41
404: ldc           #42
406: invokevirtual #43
409: dload_3
410: invokevirtual #44
413: ldc           #45
415: invokevirtual #43
418: dconst_0
419: invokevirtual #44
422: ldc           #42
424: invokevirtual #43
427: invokevirtual #46
430: dload_3
431: dconst_0
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #47
444: aload         5
446: invokestatic  #18
449: aload         6
451: invokestatic  #18
454: aload         7
456: invokestatic  #18
459: aload         8
461: invokestatic  #18
464: aload         12
466: invokestatic  #18
469: aload         13
471: invokestatic  #18
474: aload         14
476: invokestatic  #18
479: aload         15
481: invokestatic  #18
484: aload         16
486: invokestatic  #18
489: aload         18
491: invokestatic  #18
494: aload         19
496: invokestatic  #18
499: aload         20
501: invokestatic  #18
504: aload         21
506: invokestatic  #18
509: aload         22
511: invokestatic  #18
514: aload         23
516: invokestatic  #18
519: dload         25
521: invokestatic  #38
524: invokestatic  #39
527: dload         27
529: invokestatic  #38
532: invokestatic  #39
535: aload         29
537: invokestatic  #18
540: aload         30
542: invokestatic  #18
545: aload         32
547: invokestatic  #18
550: aload         33
552: invokestatic  #18
555: aload         34
557: invokestatic  #18
560: aload         35
562: invokestatic  #18
565: aload         37
567: invokestatic  #18
570: aload         38
572: invokestatic  #18
575: aload         39
577: invokestatic  #18
580: aload         40
582: invokestatic  #18
585: aload         41
587: invokestatic  #18
590: aload         42
592: invokestatic  #18
595: dload         44
597: invokestatic  #38
600: invokestatic  #39
603: dload         46
605: invokestatic  #38
608: invokestatic  #39
611: aload         48
613: invokestatic  #18
616: aload         49
618: invokestatic  #18
621: aload         50
623: invokestatic  #18
626: aload         51
628: invokestatic  #18
631: aload         52
633: invokestatic  #18
636: aload         53
638: invokestatic  #18
641: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test007
Start line: 324
End line: 420
Method source code: 
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTreeVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            euclidean3DBSPTree23.visit(euclidean3DBSPTreeVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #74
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aconst_null
417: astore        57
419: aload         26
421: aload         57
423: invokevirtual #75
426: ldc           #15
428: invokestatic  #16
431: goto          436
434: astore        58
436: aload_1
437: invokestatic  #18
440: aload_2
441: invokestatic  #18
444: aload_3
445: invokestatic  #18
448: aload         4
450: invokestatic  #18
453: aload         6
455: invokestatic  #18
458: aload         7
460: invokestatic  #18
463: aload         8
465: invokestatic  #18
468: aload         9
470: invokestatic  #18
473: aload         10
475: invokestatic  #18
478: aload         11
480: invokestatic  #18
483: dload         13
485: invokestatic  #38
488: invokestatic  #39
491: dload         15
493: invokestatic  #38
496: invokestatic  #39
499: aload         17
501: invokestatic  #18
504: new           #40
507: dup
508: invokespecial #41
511: ldc           #42
513: invokevirtual #43
516: dload         20
518: invokevirtual #44
521: ldc           #45
523: invokevirtual #43
526: dconst_0
527: invokevirtual #44
530: ldc           #42
532: invokevirtual #43
535: invokevirtual #46
538: dload         20
540: dconst_0
541: dcmpl
542: ifne          549
545: iconst_1
546: goto          550
549: iconst_0
550: invokestatic  #47
553: aload         25
555: invokestatic  #18
558: aload         26
560: invokestatic  #18
563: new           #40
566: dup
567: invokespecial #41
570: ldc           #42
572: invokevirtual #43
575: iload         27
577: invokevirtual #48
580: ldc           #45
582: invokevirtual #43
585: iconst_0
586: invokevirtual #48
589: ldc           #42
591: invokevirtual #43
594: invokevirtual #46
597: iload         27
599: ifne          606
602: iconst_1
603: goto          607
606: iconst_0
607: invokestatic  #47
610: new           #40
613: dup
614: invokespecial #41
617: ldc           #42
619: invokevirtual #43
622: dload         30
624: invokevirtual #44
627: ldc           #45
629: invokevirtual #43
632: dconst_0
633: invokevirtual #44
636: ldc           #42
638: invokevirtual #43
641: invokevirtual #46
644: dload         30
646: dconst_0
647: dcmpl
648: ifne          655
651: iconst_1
652: goto          656
655: iconst_0
656: invokestatic  #47
659: aload         35
661: invokestatic  #18
664: aload         36
666: invokestatic  #18
669: new           #40
672: dup
673: invokespecial #41
676: ldc           #42
678: invokevirtual #43
681: iload         37
683: invokevirtual #48
686: ldc           #45
688: invokevirtual #43
691: iconst_0
692: invokevirtual #48
695: ldc           #42
697: invokevirtual #43
700: invokevirtual #46
703: iload         37
705: ifne          712
708: iconst_1
709: goto          713
712: iconst_0
713: invokestatic  #47
716: aload         38
718: invokestatic  #18
721: aload         39
723: invokestatic  #18
726: aload         40
728: invokestatic  #18
731: aload         41
733: invokestatic  #18
736: aload         43
738: invokestatic  #18
741: aload         44
743: invokestatic  #18
746: aload         45
748: invokestatic  #18
751: aload         46
753: invokestatic  #18
756: aload         47
758: invokestatic  #18
761: aload         48
763: invokestatic  #18
766: dload         50
768: invokestatic  #38
771: invokestatic  #39
774: dload         52
776: invokestatic  #38
779: invokestatic  #39
782: aload         54
784: invokestatic  #18
787: aload         55
789: invokestatic  #18
792: return
Exception table:
from    to  target type
419   431   434   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test008
Start line: 423
End line: 513
Method source code: 
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree52 = euclidean3DBSPTree33.getMinus();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNull(euclidean3DBSPTree52);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #76
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aload         36
418: invokevirtual #77
421: astore        57
423: aload_1
424: invokestatic  #18
427: aload_2
428: invokestatic  #18
431: aload_3
432: invokestatic  #18
435: aload         4
437: invokestatic  #18
440: aload         6
442: invokestatic  #18
445: aload         7
447: invokestatic  #18
450: aload         8
452: invokestatic  #18
455: aload         9
457: invokestatic  #18
460: aload         10
462: invokestatic  #18
465: aload         11
467: invokestatic  #18
470: dload         13
472: invokestatic  #38
475: invokestatic  #39
478: dload         15
480: invokestatic  #38
483: invokestatic  #39
486: aload         17
488: invokestatic  #18
491: new           #40
494: dup
495: invokespecial #41
498: ldc           #42
500: invokevirtual #43
503: dload         20
505: invokevirtual #44
508: ldc           #45
510: invokevirtual #43
513: dconst_0
514: invokevirtual #44
517: ldc           #42
519: invokevirtual #43
522: invokevirtual #46
525: dload         20
527: dconst_0
528: dcmpl
529: ifne          536
532: iconst_1
533: goto          537
536: iconst_0
537: invokestatic  #47
540: aload         25
542: invokestatic  #18
545: aload         26
547: invokestatic  #18
550: new           #40
553: dup
554: invokespecial #41
557: ldc           #42
559: invokevirtual #43
562: iload         27
564: invokevirtual #48
567: ldc           #45
569: invokevirtual #43
572: iconst_0
573: invokevirtual #48
576: ldc           #42
578: invokevirtual #43
581: invokevirtual #46
584: iload         27
586: ifne          593
589: iconst_1
590: goto          594
593: iconst_0
594: invokestatic  #47
597: new           #40
600: dup
601: invokespecial #41
604: ldc           #42
606: invokevirtual #43
609: dload         30
611: invokevirtual #44
614: ldc           #45
616: invokevirtual #43
619: dconst_0
620: invokevirtual #44
623: ldc           #42
625: invokevirtual #43
628: invokevirtual #46
631: dload         30
633: dconst_0
634: dcmpl
635: ifne          642
638: iconst_1
639: goto          643
642: iconst_0
643: invokestatic  #47
646: aload         35
648: invokestatic  #18
651: aload         36
653: invokestatic  #18
656: new           #40
659: dup
660: invokespecial #41
663: ldc           #42
665: invokevirtual #43
668: iload         37
670: invokevirtual #48
673: ldc           #45
675: invokevirtual #43
678: iconst_0
679: invokevirtual #48
682: ldc           #42
684: invokevirtual #43
687: invokevirtual #46
690: iload         37
692: ifne          699
695: iconst_1
696: goto          700
699: iconst_0
700: invokestatic  #47
703: aload         38
705: invokestatic  #18
708: aload         39
710: invokestatic  #18
713: aload         40
715: invokestatic  #18
718: aload         41
720: invokestatic  #18
723: aload         43
725: invokestatic  #18
728: aload         44
730: invokestatic  #18
733: aload         45
735: invokestatic  #18
738: aload         46
740: invokestatic  #18
743: aload         47
745: invokestatic  #18
748: aload         48
750: invokestatic  #18
753: dload         50
755: invokestatic  #38
758: invokestatic  #39
761: dload         52
763: invokestatic  #38
766: invokestatic  #39
769: aload         54
771: invokestatic  #18
774: aload         55
776: invokestatic  #18
779: aload         57
781: invokestatic  #78
784: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test009
Start line: 516
End line: 556
Method source code: 
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.util.MathUtils.checkNotNull((java.lang.Object) euclidean3DSubHyperplane19);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #79
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: aload         23
174: invokestatic  #80
177: new           #40
180: dup
181: invokespecial #41
184: ldc           #42
186: invokevirtual #43
189: dload_3
190: invokevirtual #44
193: ldc           #45
195: invokevirtual #43
198: dconst_0
199: invokevirtual #44
202: ldc           #42
204: invokevirtual #43
207: invokevirtual #46
210: dload_3
211: dconst_0
212: dcmpl
213: ifne          220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #47
224: aload         5
226: invokestatic  #18
229: aload         6
231: invokestatic  #18
234: aload         7
236: invokestatic  #18
239: aload         8
241: invokestatic  #18
244: aload         10
246: invokestatic  #18
249: aload         11
251: invokestatic  #18
254: aload         12
256: invokestatic  #18
259: aload         13
261: invokestatic  #18
264: aload         14
266: invokestatic  #18
269: aload         15
271: invokestatic  #18
274: dload         17
276: invokestatic  #38
279: invokestatic  #39
282: dload         19
284: invokestatic  #38
287: invokestatic  #39
290: aload         21
292: invokestatic  #18
295: aload         22
297: invokestatic  #18
300: aload         23
302: invokestatic  #18
305: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test010
Start line: 559
End line: 653
Method source code: 
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        plane19.revertSelf();
        double double30 = plane4.getOffset(plane19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = plane35.getOrigin();
        double double46 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(plane19);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion48 = plane19.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane49 = plane19.wholeHyperplane();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(euclidean3DRegion48);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane49);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #81
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #20
127: getstatic     #10
130: astore        17
132: aload         17
134: invokevirtual #11
137: astore        18
139: getstatic     #10
142: astore        19
144: aload         19
146: invokevirtual #11
149: astore        20
151: new           #12
154: dup
155: aload         17
157: aload         20
159: invokespecial #13
162: astore        21
164: getstatic     #10
167: astore        22
169: aload         22
171: invokevirtual #11
174: astore        23
176: getstatic     #10
179: astore        24
181: aload         24
183: invokevirtual #11
186: astore        25
188: getstatic     #10
191: astore        26
193: aload         26
195: invokevirtual #11
198: astore        27
200: new           #12
203: dup
204: aload         24
206: aload         27
208: invokespecial #13
211: astore        28
213: aload         22
215: aload         27
217: invokevirtual #22
220: dstore        29
222: aload         21
224: aload         27
226: invokevirtual #23
229: dstore        31
231: aload         21
233: invokevirtual #20
236: aload         5
238: aload         21
240: invokevirtual #82
243: dstore        33
245: getstatic     #10
248: astore        35
250: aload         35
252: invokevirtual #11
255: astore        36
257: getstatic     #10
260: astore        37
262: aload         37
264: invokevirtual #11
267: astore        38
269: new           #12
272: dup
273: aload         35
275: aload         38
277: invokespecial #13
280: astore        39
282: getstatic     #10
285: astore        40
287: aload         40
289: invokevirtual #11
292: astore        41
294: getstatic     #10
297: astore        42
299: aload         42
301: invokevirtual #11
304: astore        43
306: getstatic     #10
309: astore        44
311: aload         44
313: invokevirtual #11
316: astore        45
318: new           #12
321: dup
322: aload         42
324: aload         45
326: invokespecial #13
329: astore        46
331: aload         40
333: aload         45
335: invokevirtual #22
338: dstore        47
340: aload         39
342: aload         45
344: invokevirtual #23
347: dstore        49
349: aload         39
351: invokevirtual #83
354: astore        51
356: aload         21
358: aload         51
360: invokevirtual #23
363: dstore        52
365: new           #12
368: dup
369: aload         21
371: invokespecial #84
374: astore        54
376: aload         21
378: invokevirtual #85
381: astore        55
383: aload         21
385: invokevirtual #24
388: astore        56
390: aload_1
391: invokestatic  #18
394: aload_2
395: invokestatic  #18
398: aload_3
399: invokestatic  #18
402: aload         4
404: invokestatic  #18
407: aload         6
409: invokestatic  #18
412: aload         7
414: invokestatic  #18
417: aload         8
419: invokestatic  #18
422: aload         9
424: invokestatic  #18
427: aload         10
429: invokestatic  #18
432: aload         11
434: invokestatic  #18
437: dload         13
439: invokestatic  #38
442: invokestatic  #39
445: dload         15
447: invokestatic  #38
450: invokestatic  #39
453: aload         17
455: invokestatic  #18
458: aload         18
460: invokestatic  #18
463: aload         19
465: invokestatic  #18
468: aload         20
470: invokestatic  #18
473: aload         22
475: invokestatic  #18
478: aload         23
480: invokestatic  #18
483: aload         24
485: invokestatic  #18
488: aload         25
490: invokestatic  #18
493: aload         26
495: invokestatic  #18
498: aload         27
500: invokestatic  #18
503: dload         29
505: invokestatic  #38
508: invokestatic  #39
511: dload         31
513: invokestatic  #38
516: invokestatic  #39
519: dload         33
521: invokestatic  #38
524: invokestatic  #39
527: aload         35
529: invokestatic  #18
532: aload         36
534: invokestatic  #18
537: aload         37
539: invokestatic  #18
542: aload         38
544: invokestatic  #18
547: aload         40
549: invokestatic  #18
552: aload         41
554: invokestatic  #18
557: aload         42
559: invokestatic  #18
562: aload         43
564: invokestatic  #18
567: aload         44
569: invokestatic  #18
572: aload         45
574: invokestatic  #18
577: dload         47
579: invokestatic  #38
582: invokestatic  #39
585: dload         49
587: invokestatic  #38
590: invokestatic  #39
593: aload         51
595: invokestatic  #18
598: dload         52
600: invokestatic  #38
603: invokestatic  #39
606: aload         55
608: invokestatic  #18
611: aload         56
613: invokestatic  #18
616: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test011
Start line: 656
End line: 673
Method source code: 
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean2 = polygonsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet1);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector3 = polygonsSet0.getBarycenter();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = polygonsSet0.isEmpty(euclidean2DBSPTree4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(euclidean2DVector3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #86
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: new           #56
35: dup
36: invokespecial #87
39: astore_2
40: aload_1
41: aload_2
42: invokevirtual #88
45: istore_3
46: aload_1
47: invokevirtual #89
50: astore        4
52: aconst_null
53: astore        5
55: aload_1
56: aload         5
58: invokevirtual #90
61: istore        6
63: ldc           #15
65: invokestatic  #16
68: goto          73
71: astore        6
73: new           #40
76: dup
77: invokespecial #41
80: ldc           #42
82: invokevirtual #43
85: iload_3
86: invokevirtual #48
89: ldc           #45
91: invokevirtual #43
94: iconst_1
95: invokevirtual #48
98: ldc           #42
100: invokevirtual #43
103: invokevirtual #46
106: iload_3
107: iconst_1
108: if_icmpne     115
111: iconst_1
112: goto          116
115: iconst_0
116: invokestatic  #47
119: aload         4
121: invokestatic  #18
124: return
Exception table:
from    to  target type
55    68    71   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test012
Start line: 676
End line: 772
Method source code: 
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTreeVisitor52 = null;
        // The following exception was thrown during execution in test generation
        try {
            euclidean3DBSPTree33.visit(euclidean3DBSPTreeVisitor52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #91
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aconst_null
417: astore        57
419: aload         36
421: aload         57
423: invokevirtual #75
426: ldc           #15
428: invokestatic  #16
431: goto          436
434: astore        58
436: aload_1
437: invokestatic  #18
440: aload_2
441: invokestatic  #18
444: aload_3
445: invokestatic  #18
448: aload         4
450: invokestatic  #18
453: aload         6
455: invokestatic  #18
458: aload         7
460: invokestatic  #18
463: aload         8
465: invokestatic  #18
468: aload         9
470: invokestatic  #18
473: aload         10
475: invokestatic  #18
478: aload         11
480: invokestatic  #18
483: dload         13
485: invokestatic  #38
488: invokestatic  #39
491: dload         15
493: invokestatic  #38
496: invokestatic  #39
499: aload         17
501: invokestatic  #18
504: new           #40
507: dup
508: invokespecial #41
511: ldc           #42
513: invokevirtual #43
516: dload         20
518: invokevirtual #44
521: ldc           #45
523: invokevirtual #43
526: dconst_0
527: invokevirtual #44
530: ldc           #42
532: invokevirtual #43
535: invokevirtual #46
538: dload         20
540: dconst_0
541: dcmpl
542: ifne          549
545: iconst_1
546: goto          550
549: iconst_0
550: invokestatic  #47
553: aload         25
555: invokestatic  #18
558: aload         26
560: invokestatic  #18
563: new           #40
566: dup
567: invokespecial #41
570: ldc           #42
572: invokevirtual #43
575: iload         27
577: invokevirtual #48
580: ldc           #45
582: invokevirtual #43
585: iconst_0
586: invokevirtual #48
589: ldc           #42
591: invokevirtual #43
594: invokevirtual #46
597: iload         27
599: ifne          606
602: iconst_1
603: goto          607
606: iconst_0
607: invokestatic  #47
610: new           #40
613: dup
614: invokespecial #41
617: ldc           #42
619: invokevirtual #43
622: dload         30
624: invokevirtual #44
627: ldc           #45
629: invokevirtual #43
632: dconst_0
633: invokevirtual #44
636: ldc           #42
638: invokevirtual #43
641: invokevirtual #46
644: dload         30
646: dconst_0
647: dcmpl
648: ifne          655
651: iconst_1
652: goto          656
655: iconst_0
656: invokestatic  #47
659: aload         35
661: invokestatic  #18
664: aload         36
666: invokestatic  #18
669: new           #40
672: dup
673: invokespecial #41
676: ldc           #42
678: invokevirtual #43
681: iload         37
683: invokevirtual #48
686: ldc           #45
688: invokevirtual #43
691: iconst_0
692: invokevirtual #48
695: ldc           #42
697: invokevirtual #43
700: invokevirtual #46
703: iload         37
705: ifne          712
708: iconst_1
709: goto          713
712: iconst_0
713: invokestatic  #47
716: aload         38
718: invokestatic  #18
721: aload         39
723: invokestatic  #18
726: aload         40
728: invokestatic  #18
731: aload         41
733: invokestatic  #18
736: aload         43
738: invokestatic  #18
741: aload         44
743: invokestatic  #18
746: aload         45
748: invokestatic  #18
751: aload         46
753: invokestatic  #18
756: aload         47
758: invokestatic  #18
761: aload         48
763: invokestatic  #18
766: dload         50
768: invokestatic  #38
771: invokestatic  #39
774: dload         52
776: invokestatic  #38
779: invokestatic  #39
782: aload         54
784: invokestatic  #18
787: aload         55
789: invokestatic  #18
792: return
Exception table:
from    to  target type
419   431   434   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test013
Start line: 775
End line: 865
Method source code: 
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        boolean boolean52 = subPlane49.isEmpty();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #92
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aload         54
418: invokevirtual #93
421: istore        57
423: aload_1
424: invokestatic  #18
427: aload_2
428: invokestatic  #18
431: aload_3
432: invokestatic  #18
435: aload         4
437: invokestatic  #18
440: aload         6
442: invokestatic  #18
445: aload         7
447: invokestatic  #18
450: aload         8
452: invokestatic  #18
455: aload         9
457: invokestatic  #18
460: aload         10
462: invokestatic  #18
465: aload         11
467: invokestatic  #18
470: dload         13
472: invokestatic  #38
475: invokestatic  #39
478: dload         15
480: invokestatic  #38
483: invokestatic  #39
486: aload         17
488: invokestatic  #18
491: new           #40
494: dup
495: invokespecial #41
498: ldc           #42
500: invokevirtual #43
503: dload         20
505: invokevirtual #44
508: ldc           #45
510: invokevirtual #43
513: dconst_0
514: invokevirtual #44
517: ldc           #42
519: invokevirtual #43
522: invokevirtual #46
525: dload         20
527: dconst_0
528: dcmpl
529: ifne          536
532: iconst_1
533: goto          537
536: iconst_0
537: invokestatic  #47
540: aload         25
542: invokestatic  #18
545: aload         26
547: invokestatic  #18
550: new           #40
553: dup
554: invokespecial #41
557: ldc           #42
559: invokevirtual #43
562: iload         27
564: invokevirtual #48
567: ldc           #45
569: invokevirtual #43
572: iconst_0
573: invokevirtual #48
576: ldc           #42
578: invokevirtual #43
581: invokevirtual #46
584: iload         27
586: ifne          593
589: iconst_1
590: goto          594
593: iconst_0
594: invokestatic  #47
597: new           #40
600: dup
601: invokespecial #41
604: ldc           #42
606: invokevirtual #43
609: dload         30
611: invokevirtual #44
614: ldc           #45
616: invokevirtual #43
619: dconst_0
620: invokevirtual #44
623: ldc           #42
625: invokevirtual #43
628: invokevirtual #46
631: dload         30
633: dconst_0
634: dcmpl
635: ifne          642
638: iconst_1
639: goto          643
642: iconst_0
643: invokestatic  #47
646: aload         35
648: invokestatic  #18
651: aload         36
653: invokestatic  #18
656: new           #40
659: dup
660: invokespecial #41
663: ldc           #42
665: invokevirtual #43
668: iload         37
670: invokevirtual #48
673: ldc           #45
675: invokevirtual #43
678: iconst_0
679: invokevirtual #48
682: ldc           #42
684: invokevirtual #43
687: invokevirtual #46
690: iload         37
692: ifne          699
695: iconst_1
696: goto          700
699: iconst_0
700: invokestatic  #47
703: aload         38
705: invokestatic  #18
708: aload         39
710: invokestatic  #18
713: aload         40
715: invokestatic  #18
718: aload         41
720: invokestatic  #18
723: aload         43
725: invokestatic  #18
728: aload         44
730: invokestatic  #18
733: aload         45
735: invokestatic  #18
738: aload         46
740: invokestatic  #18
743: aload         47
745: invokestatic  #18
748: aload         48
750: invokestatic  #18
753: dload         50
755: invokestatic  #38
758: invokestatic  #39
761: dload         52
763: invokestatic  #38
766: invokestatic  #39
769: aload         54
771: invokestatic  #18
774: aload         55
776: invokestatic  #18
779: new           #40
782: dup
783: invokespecial #41
786: ldc           #42
788: invokevirtual #43
791: iload         57
793: invokevirtual #48
796: ldc           #45
798: invokevirtual #43
801: iconst_0
802: invokevirtual #48
805: ldc           #42
807: invokevirtual #43
810: invokevirtual #46
813: iload         57
815: ifne          822
818: iconst_1
819: goto          823
822: iconst_0
823: invokestatic  #47
826: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test014
Start line: 868
End line: 957
Method source code: 
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean2 = polygonsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet1);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector3 = polygonsSet0.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line8 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D6, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line13 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D11, (double) 0.0f);
        boolean boolean14 = line8.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        plane19.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane41 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D37, vector3D40);
        double double42 = vector3D35.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        double double43 = plane34.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        plane34.revertSelf();
        double double45 = plane19.getOffset(plane34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = vector3D49.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane51 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D47, vector3D50);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D46, vector3D50);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = plane34.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D50);
        line8.reset(vector2D53, (double) (-127));
        org.apache.commons.math3.geometry.partitioning.Side side56 = polygonsSet0.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(euclidean2DVector3);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertTrue("'" + side56 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side56.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #94
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: new           #56
35: dup
36: invokespecial #87
39: astore_2
40: aload_1
41: aload_2
42: invokevirtual #88
45: istore_3
46: aload_1
47: invokevirtual #89
50: astore        4
52: new           #60
55: dup
56: dconst_0
57: ldc2_w        #61
60: invokespecial #63
63: astore        5
65: new           #64
68: dup
69: aload         5
71: dconst_0
72: invokespecial #65
75: astore        6
77: new           #60
80: dup
81: dconst_0
82: ldc2_w        #61
85: invokespecial #63
88: astore        7
90: new           #64
93: dup
94: aload         7
96: dconst_0
97: invokespecial #65
100: astore        8
102: aload         6
104: aload         8
106: invokevirtual #95
109: istore        9
111: getstatic     #10
114: astore        10
116: aload         10
118: invokevirtual #11
121: astore        11
123: getstatic     #10
126: astore        12
128: aload         12
130: invokevirtual #11
133: astore        13
135: new           #12
138: dup
139: aload         10
141: aload         13
143: invokespecial #13
146: astore        14
148: getstatic     #10
151: astore        15
153: aload         15
155: invokevirtual #11
158: astore        16
160: getstatic     #10
163: astore        17
165: aload         17
167: invokevirtual #11
170: astore        18
172: getstatic     #10
175: astore        19
177: aload         19
179: invokevirtual #11
182: astore        20
184: new           #12
187: dup
188: aload         17
190: aload         20
192: invokespecial #13
195: astore        21
197: aload         15
199: aload         20
201: invokevirtual #22
204: dstore        22
206: aload         14
208: aload         20
210: invokevirtual #23
213: dstore        24
215: aload         14
217: invokevirtual #20
220: getstatic     #10
223: astore        26
225: aload         26
227: invokevirtual #11
230: astore        27
232: getstatic     #10
235: astore        28
237: aload         28
239: invokevirtual #11
242: astore        29
244: new           #12
247: dup
248: aload         26
250: aload         29
252: invokespecial #13
255: astore        30
257: getstatic     #10
260: astore        31
262: aload         31
264: invokevirtual #11
267: astore        32
269: getstatic     #10
272: astore        33
274: aload         33
276: invokevirtual #11
279: astore        34
281: getstatic     #10
284: astore        35
286: aload         35
288: invokevirtual #11
291: astore        36
293: new           #12
296: dup
297: aload         33
299: aload         36
301: invokespecial #13
304: astore        37
306: aload         31
308: aload         36
310: invokevirtual #22
313: dstore        38
315: aload         30
317: aload         36
319: invokevirtual #23
322: dstore        40
324: aload         30
326: invokevirtual #20
329: aload         14
331: aload         30
333: invokevirtual #82
336: dstore        42
338: getstatic     #10
341: astore        44
343: getstatic     #10
346: astore        45
348: aload         45
350: invokevirtual #11
353: astore        46
355: getstatic     #10
358: astore        47
360: aload         47
362: invokevirtual #11
365: astore        48
367: new           #12
370: dup
371: aload         45
373: aload         48
375: invokespecial #13
378: astore        49
380: aload         44
382: aload         48
384: invokestatic  #96
387: astore        50
389: aload         30
391: aload         48
393: invokevirtual #97
396: astore        51
398: aload         6
400: aload         51
402: ldc2_w        #98
405: invokevirtual #100
408: aload_1
409: aload         6
411: invokevirtual #101
414: astore        52
416: new           #40
419: dup
420: invokespecial #41
423: ldc           #42
425: invokevirtual #43
428: iload_3
429: invokevirtual #48
432: ldc           #45
434: invokevirtual #43
437: iconst_1
438: invokevirtual #48
441: ldc           #42
443: invokevirtual #43
446: invokevirtual #46
449: iload_3
450: iconst_1
451: if_icmpne     458
454: iconst_1
455: goto          459
458: iconst_0
459: invokestatic  #47
462: aload         4
464: invokestatic  #18
467: new           #40
470: dup
471: invokespecial #41
474: ldc           #42
476: invokevirtual #43
479: iload         9
481: invokevirtual #48
484: ldc           #45
486: invokevirtual #43
489: iconst_1
490: invokevirtual #48
493: ldc           #42
495: invokevirtual #43
498: invokevirtual #46
501: iload         9
503: iconst_1
504: if_icmpne     511
507: iconst_1
508: goto          512
511: iconst_0
512: invokestatic  #47
515: aload         10
517: invokestatic  #18
520: aload         11
522: invokestatic  #18
525: aload         12
527: invokestatic  #18
530: aload         13
532: invokestatic  #18
535: aload         15
537: invokestatic  #18
540: aload         16
542: invokestatic  #18
545: aload         17
547: invokestatic  #18
550: aload         18
552: invokestatic  #18
555: aload         19
557: invokestatic  #18
560: aload         20
562: invokestatic  #18
565: dload         22
567: invokestatic  #38
570: invokestatic  #39
573: dload         24
575: invokestatic  #38
578: invokestatic  #39
581: aload         26
583: invokestatic  #18
586: aload         27
588: invokestatic  #18
591: aload         28
593: invokestatic  #18
596: aload         29
598: invokestatic  #18
601: aload         31
603: invokestatic  #18
606: aload         32
608: invokestatic  #18
611: aload         33
613: invokestatic  #18
616: aload         34
618: invokestatic  #18
621: aload         35
623: invokestatic  #18
626: aload         36
628: invokestatic  #18
631: dload         38
633: invokestatic  #38
636: invokestatic  #39
639: dload         40
641: invokestatic  #38
644: invokestatic  #39
647: dload         42
649: invokestatic  #38
652: invokestatic  #39
655: aload         44
657: invokestatic  #18
660: aload         45
662: invokestatic  #18
665: aload         46
667: invokestatic  #18
670: aload         47
672: invokestatic  #18
675: aload         48
677: invokestatic  #18
680: aload         50
682: invokestatic  #18
685: aload         51
687: invokestatic  #18
690: new           #40
693: dup
694: invokespecial #41
697: ldc           #42
699: invokevirtual #43
702: aload         52
704: invokevirtual #102
707: ldc           #45
709: invokevirtual #43
712: getstatic     #103
715: invokevirtual #102
718: ldc           #42
720: invokevirtual #43
723: invokevirtual #46
726: aload         52
728: getstatic     #103
731: invokevirtual #104
734: invokestatic  #47
737: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test015
Start line: 960
End line: 965
Method source code: 
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree0 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(euclidean2DBSPTree0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #105
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #56
29: dup
30: aload_1
31: invokespecial #106
34: astore_2
35: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test016
Start line: 968
End line: 1071
Method source code: 
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree52 = euclidean3DBSPTree51.getMinus();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList53 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet54 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList53);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree55 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion56 = polyhedronsSet54.buildNew(euclidean3DBSPTree55);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree58 = polyhedronsSet54.getTree(false);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList59 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet60 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList59);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree62 = polyhedronsSet60.getTree(false);
        euclidean3DBSPTree58.insertInTree(euclidean3DBSPTree62, false);
        euclidean3DBSPTree52.insertInTree(euclidean3DBSPTree62, true);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree52);
        org.junit.Assert.assertNotNull(euclidean3DRegion56);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree58);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree62);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #107
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aload         56
418: invokevirtual #77
421: astore        57
423: new           #25
426: dup
427: invokespecial #26
430: astore        58
432: new           #8
435: dup
436: aload         58
438: invokespecial #27
441: astore        59
443: aconst_null
444: astore        60
446: aload         59
448: aload         60
450: invokevirtual #29
453: astore        61
455: aload         59
457: iconst_0
458: invokevirtual #30
461: astore        62
463: new           #25
466: dup
467: invokespecial #26
470: astore        63
472: new           #8
475: dup
476: aload         63
478: invokespecial #27
481: astore        64
483: aload         64
485: iconst_0
486: invokevirtual #30
489: astore        65
491: aload         62
493: aload         65
495: iconst_0
496: invokevirtual #108
499: aload         57
501: aload         65
503: iconst_1
504: invokevirtual #108
507: aload_1
508: invokestatic  #18
511: aload_2
512: invokestatic  #18
515: aload_3
516: invokestatic  #18
519: aload         4
521: invokestatic  #18
524: aload         6
526: invokestatic  #18
529: aload         7
531: invokestatic  #18
534: aload         8
536: invokestatic  #18
539: aload         9
541: invokestatic  #18
544: aload         10
546: invokestatic  #18
549: aload         11
551: invokestatic  #18
554: dload         13
556: invokestatic  #38
559: invokestatic  #39
562: dload         15
564: invokestatic  #38
567: invokestatic  #39
570: aload         17
572: invokestatic  #18
575: new           #40
578: dup
579: invokespecial #41
582: ldc           #42
584: invokevirtual #43
587: dload         20
589: invokevirtual #44
592: ldc           #45
594: invokevirtual #43
597: dconst_0
598: invokevirtual #44
601: ldc           #42
603: invokevirtual #43
606: invokevirtual #46
609: dload         20
611: dconst_0
612: dcmpl
613: ifne          620
616: iconst_1
617: goto          621
620: iconst_0
621: invokestatic  #47
624: aload         25
626: invokestatic  #18
629: aload         26
631: invokestatic  #18
634: new           #40
637: dup
638: invokespecial #41
641: ldc           #42
643: invokevirtual #43
646: iload         27
648: invokevirtual #48
651: ldc           #45
653: invokevirtual #43
656: iconst_0
657: invokevirtual #48
660: ldc           #42
662: invokevirtual #43
665: invokevirtual #46
668: iload         27
670: ifne          677
673: iconst_1
674: goto          678
677: iconst_0
678: invokestatic  #47
681: new           #40
684: dup
685: invokespecial #41
688: ldc           #42
690: invokevirtual #43
693: dload         30
695: invokevirtual #44
698: ldc           #45
700: invokevirtual #43
703: dconst_0
704: invokevirtual #44
707: ldc           #42
709: invokevirtual #43
712: invokevirtual #46
715: dload         30
717: dconst_0
718: dcmpl
719: ifne          726
722: iconst_1
723: goto          727
726: iconst_0
727: invokestatic  #47
730: aload         35
732: invokestatic  #18
735: aload         36
737: invokestatic  #18
740: new           #40
743: dup
744: invokespecial #41
747: ldc           #42
749: invokevirtual #43
752: iload         37
754: invokevirtual #48
757: ldc           #45
759: invokevirtual #43
762: iconst_0
763: invokevirtual #48
766: ldc           #42
768: invokevirtual #43
771: invokevirtual #46
774: iload         37
776: ifne          783
779: iconst_1
780: goto          784
783: iconst_0
784: invokestatic  #47
787: aload         38
789: invokestatic  #18
792: aload         39
794: invokestatic  #18
797: aload         40
799: invokestatic  #18
802: aload         41
804: invokestatic  #18
807: aload         43
809: invokestatic  #18
812: aload         44
814: invokestatic  #18
817: aload         45
819: invokestatic  #18
822: aload         46
824: invokestatic  #18
827: aload         47
829: invokestatic  #18
832: aload         48
834: invokestatic  #18
837: dload         50
839: invokestatic  #38
842: invokestatic  #39
845: dload         52
847: invokestatic  #38
850: invokestatic  #39
853: aload         54
855: invokestatic  #18
858: aload         55
860: invokestatic  #18
863: aload         57
865: invokestatic  #18
868: aload         61
870: invokestatic  #18
873: aload         62
875: invokestatic  #18
878: aload         65
880: invokestatic  #18
883: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test017
Start line: 1074
End line: 1191
Method source code: 
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane21 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D17, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D16, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D16.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D15, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D25, vector3D28);
        plane29.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D32, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D32.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D31, vector3D39);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector41 = plane29.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D44, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane55 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D51, vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D44.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D42.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane58 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D31, vector3D57);
        plane58.revertSelf();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane60 = subPlane14.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane58);
        boolean boolean61 = subPlane14.isEmpty();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane62 = subPlane14.getHyperplane();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(euclidean2DVector41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane62);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #109
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: getstatic     #10
137: astore        19
139: getstatic     #10
142: astore        20
144: aload         20
146: invokevirtual #11
149: astore        21
151: getstatic     #10
154: astore        22
156: aload         22
158: invokevirtual #11
161: astore        23
163: new           #12
166: dup
167: aload         20
169: aload         23
171: invokespecial #13
174: astore        24
176: aload         19
178: aload         23
180: invokestatic  #96
183: astore        25
185: aload         19
187: invokevirtual #110
190: astore        26
192: aload         18
194: aload         26
196: invokestatic  #96
199: astore        27
201: getstatic     #10
204: astore        28
206: aload         28
208: invokevirtual #11
211: astore        29
213: getstatic     #10
216: astore        30
218: aload         30
220: invokevirtual #11
223: astore        31
225: new           #12
228: dup
229: aload         28
231: aload         31
233: invokespecial #13
236: astore        32
238: aload         32
240: invokevirtual #20
243: getstatic     #10
246: astore        33
248: getstatic     #10
251: astore        34
253: getstatic     #10
256: astore        35
258: aload         35
260: invokevirtual #11
263: astore        36
265: getstatic     #10
268: astore        37
270: aload         37
272: invokevirtual #11
275: astore        38
277: new           #12
280: dup
281: aload         35
283: aload         38
285: invokespecial #13
288: astore        39
290: aload         34
292: aload         38
294: invokestatic  #96
297: astore        40
299: aload         34
301: invokevirtual #110
304: astore        41
306: aload         33
308: aload         41
310: invokestatic  #96
313: astore        42
315: aload         32
317: aload         33
319: invokevirtual #97
322: astore        43
324: getstatic     #10
327: astore        44
329: getstatic     #10
332: astore        45
334: getstatic     #10
337: astore        46
339: aload         46
341: invokevirtual #11
344: astore        47
346: getstatic     #10
349: astore        48
351: aload         48
353: invokevirtual #11
356: astore        49
358: new           #12
361: dup
362: aload         46
364: aload         49
366: invokespecial #13
369: astore        50
371: aload         45
373: aload         49
375: invokestatic  #96
378: astore        51
380: getstatic     #10
383: astore        52
385: aload         52
387: invokevirtual #11
390: astore        53
392: getstatic     #10
395: astore        54
397: aload         54
399: invokevirtual #11
402: astore        55
404: new           #12
407: dup
408: aload         52
410: aload         55
412: invokespecial #13
415: astore        56
417: aload         45
419: aload         55
421: invokevirtual #111
424: astore        57
426: aload         44
428: dconst_1
429: aload         55
431: invokevirtual #112
434: astore        58
436: new           #12
439: dup
440: aload         26
442: aload         33
444: aload         58
446: invokespecial #113
449: astore        59
451: aload         59
453: invokevirtual #20
456: aload         17
458: aload         59
460: invokevirtual #114
463: astore        60
465: aload         17
467: invokevirtual #93
470: istore        61
472: aload         17
474: invokevirtual #71
477: astore        62
479: aload_1
480: invokestatic  #18
483: aload_2
484: invokestatic  #18
487: aload_3
488: invokestatic  #18
491: aload         4
493: invokestatic  #18
496: aload         6
498: invokestatic  #18
501: aload         7
503: invokestatic  #18
506: aload         8
508: invokestatic  #18
511: aload         9
513: invokestatic  #18
516: aload         10
518: invokestatic  #18
521: aload         11
523: invokestatic  #18
526: dload         13
528: invokestatic  #38
531: invokestatic  #39
534: dload         15
536: invokestatic  #38
539: invokestatic  #39
542: aload         17
544: invokestatic  #18
547: aload         18
549: invokestatic  #18
552: aload         19
554: invokestatic  #18
557: aload         20
559: invokestatic  #18
562: aload         21
564: invokestatic  #18
567: aload         22
569: invokestatic  #18
572: aload         23
574: invokestatic  #18
577: aload         25
579: invokestatic  #18
582: aload         26
584: invokestatic  #18
587: aload         27
589: invokestatic  #18
592: aload         28
594: invokestatic  #18
597: aload         29
599: invokestatic  #18
602: aload         30
604: invokestatic  #18
607: aload         31
609: invokestatic  #18
612: aload         33
614: invokestatic  #18
617: aload         34
619: invokestatic  #18
622: aload         35
624: invokestatic  #18
627: aload         36
629: invokestatic  #18
632: aload         37
634: invokestatic  #18
637: aload         38
639: invokestatic  #18
642: aload         40
644: invokestatic  #18
647: aload         41
649: invokestatic  #18
652: aload         42
654: invokestatic  #18
657: aload         43
659: invokestatic  #18
662: aload         44
664: invokestatic  #18
667: aload         45
669: invokestatic  #18
672: aload         46
674: invokestatic  #18
677: aload         47
679: invokestatic  #18
682: aload         48
684: invokestatic  #18
687: aload         49
689: invokestatic  #18
692: aload         51
694: invokestatic  #18
697: aload         52
699: invokestatic  #18
702: aload         53
704: invokestatic  #18
707: aload         54
709: invokestatic  #18
712: aload         55
714: invokestatic  #18
717: aload         57
719: invokestatic  #18
722: aload         58
724: invokestatic  #18
727: aload         60
729: invokestatic  #18
732: new           #40
735: dup
736: invokespecial #41
739: ldc           #42
741: invokevirtual #43
744: iload         61
746: invokevirtual #48
749: ldc           #45
751: invokevirtual #43
754: iconst_0
755: invokevirtual #48
758: ldc           #42
760: invokevirtual #43
763: invokevirtual #46
766: iload         61
768: ifne          775
771: iconst_1
772: goto          776
775: iconst_0
776: invokestatic  #47
779: aload         62
781: invokestatic  #18
784: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test018
Start line: 1194
End line: 1290
Method source code: 
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line4 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D2, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        boolean boolean10 = line4.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line9);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line15 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, (double) 0.0f);
        line9.reset(vector2D13, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D25, vector3D28);
        double double30 = vector3D23.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28);
        double double31 = plane22.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28);
        plane22.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane44 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D40, vector3D43);
        double double45 = vector3D38.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43);
        double double46 = plane37.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43);
        plane37.revertSelf();
        double double48 = plane22.getOffset(plane37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane54 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D50, vector3D53);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D49, vector3D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = plane37.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53);
        double double57 = vector2D13.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D56);
        org.apache.commons.math3.geometry.euclidean.twod.Line line59 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet60 = line59.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree61 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = polygonsSet60.isEmpty(euclidean2DBSPTree61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector2D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(polygonsSet60);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #115
19: aastore
20: invokevirtual #7
23: pop
24: new           #60
27: dup
28: dconst_0
29: ldc2_w        #61
32: invokespecial #63
35: astore_1
36: new           #64
39: dup
40: aload_1
41: dconst_0
42: invokespecial #65
45: astore_2
46: new           #60
49: dup
50: dconst_0
51: ldc2_w        #61
54: invokespecial #63
57: astore_3
58: new           #64
61: dup
62: aload_3
63: dconst_0
64: invokespecial #65
67: astore        4
69: aload_2
70: aload         4
72: invokevirtual #95
75: istore        5
77: new           #60
80: dup
81: dconst_0
82: ldc2_w        #61
85: invokespecial #63
88: astore        6
90: new           #64
93: dup
94: aload         6
96: dconst_0
97: invokespecial #65
100: astore        7
102: aload         4
104: aload         6
106: ldc2_w        #116
109: invokevirtual #100
112: getstatic     #10
115: astore        8
117: aload         8
119: invokevirtual #11
122: astore        9
124: getstatic     #10
127: astore        10
129: aload         10
131: invokevirtual #11
134: astore        11
136: new           #12
139: dup
140: aload         8
142: aload         11
144: invokespecial #13
147: astore        12
149: getstatic     #10
152: astore        13
154: aload         13
156: invokevirtual #11
159: astore        14
161: getstatic     #10
164: astore        15
166: aload         15
168: invokevirtual #11
171: astore        16
173: getstatic     #10
176: astore        17
178: aload         17
180: invokevirtual #11
183: astore        18
185: new           #12
188: dup
189: aload         15
191: aload         18
193: invokespecial #13
196: astore        19
198: aload         13
200: aload         18
202: invokevirtual #22
205: dstore        20
207: aload         12
209: aload         18
211: invokevirtual #23
214: dstore        22
216: aload         12
218: invokevirtual #20
221: getstatic     #10
224: astore        24
226: aload         24
228: invokevirtual #11
231: astore        25
233: getstatic     #10
236: astore        26
238: aload         26
240: invokevirtual #11
243: astore        27
245: new           #12
248: dup
249: aload         24
251: aload         27
253: invokespecial #13
256: astore        28
258: getstatic     #10
261: astore        29
263: aload         29
265: invokevirtual #11
268: astore        30
270: getstatic     #10
273: astore        31
275: aload         31
277: invokevirtual #11
280: astore        32
282: getstatic     #10
285: astore        33
287: aload         33
289: invokevirtual #11
292: astore        34
294: new           #12
297: dup
298: aload         31
300: aload         34
302: invokespecial #13
305: astore        35
307: aload         29
309: aload         34
311: invokevirtual #22
314: dstore        36
316: aload         28
318: aload         34
320: invokevirtual #23
323: dstore        38
325: aload         28
327: invokevirtual #20
330: aload         12
332: aload         28
334: invokevirtual #82
337: dstore        40
339: getstatic     #10
342: astore        42
344: getstatic     #10
347: astore        43
349: aload         43
351: invokevirtual #11
354: astore        44
356: getstatic     #10
359: astore        45
361: aload         45
363: invokevirtual #11
366: astore        46
368: new           #12
371: dup
372: aload         43
374: aload         46
376: invokespecial #13
379: astore        47
381: aload         42
383: aload         46
385: invokestatic  #96
388: astore        48
390: aload         28
392: aload         46
394: invokevirtual #97
397: astore        49
399: aload         6
401: aload         49
403: invokevirtual #118
406: dstore        50
408: new           #64
411: dup
412: aload         6
414: ldc2_w        #119
417: invokespecial #65
420: astore        52
422: aload         52
424: invokevirtual #121
427: astore        53
429: aconst_null
430: astore        54
432: aload         53
434: aload         54
436: invokevirtual #90
439: istore        55
441: ldc           #15
443: invokestatic  #16
446: goto          451
449: astore        55
451: new           #40
454: dup
455: invokespecial #41
458: ldc           #42
460: invokevirtual #43
463: iload         5
465: invokevirtual #48
468: ldc           #45
470: invokevirtual #43
473: iconst_1
474: invokevirtual #48
477: ldc           #42
479: invokevirtual #43
482: invokevirtual #46
485: iload         5
487: iconst_1
488: if_icmpne     495
491: iconst_1
492: goto          496
495: iconst_0
496: invokestatic  #47
499: aload         8
501: invokestatic  #18
504: aload         9
506: invokestatic  #18
509: aload         10
511: invokestatic  #18
514: aload         11
516: invokestatic  #18
519: aload         13
521: invokestatic  #18
524: aload         14
526: invokestatic  #18
529: aload         15
531: invokestatic  #18
534: aload         16
536: invokestatic  #18
539: aload         17
541: invokestatic  #18
544: aload         18
546: invokestatic  #18
549: dload         20
551: invokestatic  #38
554: invokestatic  #39
557: dload         22
559: invokestatic  #38
562: invokestatic  #39
565: aload         24
567: invokestatic  #18
570: aload         25
572: invokestatic  #18
575: aload         26
577: invokestatic  #18
580: aload         27
582: invokestatic  #18
585: aload         29
587: invokestatic  #18
590: aload         30
592: invokestatic  #18
595: aload         31
597: invokestatic  #18
600: aload         32
602: invokestatic  #18
605: aload         33
607: invokestatic  #18
610: aload         34
612: invokestatic  #18
615: dload         36
617: invokestatic  #38
620: invokestatic  #39
623: dload         38
625: invokestatic  #38
628: invokestatic  #39
631: dload         40
633: invokestatic  #38
636: invokestatic  #39
639: aload         42
641: invokestatic  #18
644: aload         43
646: invokestatic  #18
649: aload         44
651: invokestatic  #18
654: aload         45
656: invokestatic  #18
659: aload         46
661: invokestatic  #18
664: aload         48
666: invokestatic  #18
669: aload         49
671: invokestatic  #18
674: dload         50
676: invokestatic  #38
679: invokestatic  #39
682: aload         53
684: invokestatic  #18
687: return
Exception table:
from    to  target type
432   446   449   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test019
Start line: 1293
End line: 1326
Method source code: 
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = plane4.getOrigin();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane15 = plane4.wholeHyperplane();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(subPlane15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #122
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #83
127: astore        17
129: aload         5
131: invokevirtual #24
134: astore        18
136: aload_1
137: invokestatic  #18
140: aload_2
141: invokestatic  #18
144: aload_3
145: invokestatic  #18
148: aload         4
150: invokestatic  #18
153: aload         6
155: invokestatic  #18
158: aload         7
160: invokestatic  #18
163: aload         8
165: invokestatic  #18
168: aload         9
170: invokestatic  #18
173: aload         10
175: invokestatic  #18
178: aload         11
180: invokestatic  #18
183: dload         13
185: invokestatic  #38
188: invokestatic  #39
191: dload         15
193: invokestatic  #38
196: invokestatic  #39
199: aload         17
201: invokestatic  #18
204: aload         18
206: invokestatic  #18
209: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test020
Start line: 1329
End line: 1402
Method source code: 
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane32 = subPlane14.split(euclidean3DHyperplane31);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector33 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double34 = euclidean3DHyperplane31.getOffset(euclidean3DVector33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane32);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #123
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: aload         18
136: invokevirtual #11
139: astore        19
141: getstatic     #10
144: astore        20
146: aload         20
148: invokevirtual #11
151: astore        21
153: new           #12
156: dup
157: aload         18
159: aload         21
161: invokespecial #13
164: astore        22
166: getstatic     #10
169: astore        23
171: aload         23
173: invokevirtual #11
176: astore        24
178: getstatic     #10
181: astore        25
183: aload         25
185: invokevirtual #11
188: astore        26
190: getstatic     #10
193: astore        27
195: aload         27
197: invokevirtual #11
200: astore        28
202: new           #12
205: dup
206: aload         25
208: aload         28
210: invokespecial #13
213: astore        29
215: aload         23
217: aload         28
219: invokevirtual #22
222: dstore        30
224: aload         22
226: aload         28
228: invokevirtual #23
231: dstore        32
233: aload         22
235: invokevirtual #24
238: astore        34
240: aload         34
242: invokevirtual #32
245: astore        35
247: aload         34
249: invokevirtual #71
252: astore        36
254: aload         17
256: aload         36
258: invokevirtual #114
261: astore        37
263: aconst_null
264: astore        38
266: aload         36
268: aload         38
270: invokeinterface #124,  2
275: dstore        39
277: ldc           #15
279: invokestatic  #16
282: goto          287
285: astore        39
287: aload_1
288: invokestatic  #18
291: aload_2
292: invokestatic  #18
295: aload_3
296: invokestatic  #18
299: aload         4
301: invokestatic  #18
304: aload         6
306: invokestatic  #18
309: aload         7
311: invokestatic  #18
314: aload         8
316: invokestatic  #18
319: aload         9
321: invokestatic  #18
324: aload         10
326: invokestatic  #18
329: aload         11
331: invokestatic  #18
334: dload         13
336: invokestatic  #38
339: invokestatic  #39
342: dload         15
344: invokestatic  #38
347: invokestatic  #39
350: aload         17
352: invokestatic  #18
355: aload         18
357: invokestatic  #18
360: aload         19
362: invokestatic  #18
365: aload         20
367: invokestatic  #18
370: aload         21
372: invokestatic  #18
375: aload         23
377: invokestatic  #18
380: aload         24
382: invokestatic  #18
385: aload         25
387: invokestatic  #18
390: aload         26
392: invokestatic  #18
395: aload         27
397: invokestatic  #18
400: aload         28
402: invokestatic  #18
405: dload         30
407: invokestatic  #38
410: invokestatic  #39
413: dload         32
415: invokestatic  #38
418: invokestatic  #39
421: aload         34
423: invokestatic  #18
426: aload         35
428: invokestatic  #18
431: aload         36
433: invokestatic  #18
436: aload         37
438: invokestatic  #18
441: return
Exception table:
from    to  target type
266   282   285   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test021
Start line: 1405
End line: 1495
Method source code: 
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree52 = euclidean3DBSPTree23.getParent();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree52);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #125
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aload         26
418: invokevirtual #126
421: astore        57
423: aload_1
424: invokestatic  #18
427: aload_2
428: invokestatic  #18
431: aload_3
432: invokestatic  #18
435: aload         4
437: invokestatic  #18
440: aload         6
442: invokestatic  #18
445: aload         7
447: invokestatic  #18
450: aload         8
452: invokestatic  #18
455: aload         9
457: invokestatic  #18
460: aload         10
462: invokestatic  #18
465: aload         11
467: invokestatic  #18
470: dload         13
472: invokestatic  #38
475: invokestatic  #39
478: dload         15
480: invokestatic  #38
483: invokestatic  #39
486: aload         17
488: invokestatic  #18
491: new           #40
494: dup
495: invokespecial #41
498: ldc           #42
500: invokevirtual #43
503: dload         20
505: invokevirtual #44
508: ldc           #45
510: invokevirtual #43
513: dconst_0
514: invokevirtual #44
517: ldc           #42
519: invokevirtual #43
522: invokevirtual #46
525: dload         20
527: dconst_0
528: dcmpl
529: ifne          536
532: iconst_1
533: goto          537
536: iconst_0
537: invokestatic  #47
540: aload         25
542: invokestatic  #18
545: aload         26
547: invokestatic  #18
550: new           #40
553: dup
554: invokespecial #41
557: ldc           #42
559: invokevirtual #43
562: iload         27
564: invokevirtual #48
567: ldc           #45
569: invokevirtual #43
572: iconst_0
573: invokevirtual #48
576: ldc           #42
578: invokevirtual #43
581: invokevirtual #46
584: iload         27
586: ifne          593
589: iconst_1
590: goto          594
593: iconst_0
594: invokestatic  #47
597: new           #40
600: dup
601: invokespecial #41
604: ldc           #42
606: invokevirtual #43
609: dload         30
611: invokevirtual #44
614: ldc           #45
616: invokevirtual #43
619: dconst_0
620: invokevirtual #44
623: ldc           #42
625: invokevirtual #43
628: invokevirtual #46
631: dload         30
633: dconst_0
634: dcmpl
635: ifne          642
638: iconst_1
639: goto          643
642: iconst_0
643: invokestatic  #47
646: aload         35
648: invokestatic  #18
651: aload         36
653: invokestatic  #18
656: new           #40
659: dup
660: invokespecial #41
663: ldc           #42
665: invokevirtual #43
668: iload         37
670: invokevirtual #48
673: ldc           #45
675: invokevirtual #43
678: iconst_0
679: invokevirtual #48
682: ldc           #42
684: invokevirtual #43
687: invokevirtual #46
690: iload         37
692: ifne          699
695: iconst_1
696: goto          700
699: iconst_0
700: invokestatic  #47
703: aload         38
705: invokestatic  #18
708: aload         39
710: invokestatic  #18
713: aload         40
715: invokestatic  #18
718: aload         41
720: invokestatic  #18
723: aload         43
725: invokestatic  #18
728: aload         44
730: invokestatic  #18
733: aload         45
735: invokestatic  #18
738: aload         46
740: invokestatic  #18
743: aload         47
745: invokestatic  #18
748: aload         48
750: invokestatic  #18
753: dload         50
755: invokestatic  #38
758: invokestatic  #39
761: dload         52
763: invokestatic  #38
766: invokestatic  #39
769: aload         54
771: invokestatic  #18
774: aload         55
776: invokestatic  #18
779: aload         57
781: invokestatic  #18
784: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test022
Start line: 1498
End line: 1653
Method source code: 
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = plane4.getOrigin();
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line20 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D18, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line25 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D23, (double) 0.0f);
        boolean boolean26 = line20.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane31 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D27, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = vector3D34.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane38 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D34, vector3D37);
        double double39 = vector3D32.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        double double40 = plane31.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        plane31.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = vector3D49.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane53 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D49, vector3D52);
        double double54 = vector3D47.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52);
        double double55 = plane46.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52);
        plane46.revertSelf();
        double double57 = plane31.getOffset(plane46);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D59.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane63 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D59, vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D58, vector3D62);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = plane46.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62);
        line20.reset(vector2D65, (double) (-127));
        double double68 = vector2D65.getNorm();
        org.apache.commons.math3.geometry.Space space69 = vector2D65.getSpace();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D65);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D71.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = vector3D73.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane75 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D71, vector3D74);
        plane75.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D79.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane83 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D79, vector3D82);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D78, vector3D82);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = vector3D78.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D77, vector3D85);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector87 = plane75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D77);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane88 = plane75.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane89 = plane75.copySelf();
        double double90 = plane4.getOffset(plane89);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane91 = plane89.copySelf();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector2D65);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(space69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(euclidean2DVector87);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane88);
        org.junit.Assert.assertNotNull(plane89);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(plane91);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #127
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #83
127: astore        17
129: aload         5
131: invokevirtual #20
134: new           #60
137: dup
138: dconst_0
139: ldc2_w        #61
142: invokespecial #63
145: astore        18
147: new           #64
150: dup
151: aload         18
153: dconst_0
154: invokespecial #65
157: astore        19
159: new           #60
162: dup
163: dconst_0
164: ldc2_w        #61
167: invokespecial #63
170: astore        20
172: new           #64
175: dup
176: aload         20
178: dconst_0
179: invokespecial #65
182: astore        21
184: aload         19
186: aload         21
188: invokevirtual #95
191: istore        22
193: getstatic     #10
196: astore        23
198: aload         23
200: invokevirtual #11
203: astore        24
205: getstatic     #10
208: astore        25
210: aload         25
212: invokevirtual #11
215: astore        26
217: new           #12
220: dup
221: aload         23
223: aload         26
225: invokespecial #13
228: astore        27
230: getstatic     #10
233: astore        28
235: aload         28
237: invokevirtual #11
240: astore        29
242: getstatic     #10
245: astore        30
247: aload         30
249: invokevirtual #11
252: astore        31
254: getstatic     #10
257: astore        32
259: aload         32
261: invokevirtual #11
264: astore        33
266: new           #12
269: dup
270: aload         30
272: aload         33
274: invokespecial #13
277: astore        34
279: aload         28
281: aload         33
283: invokevirtual #22
286: dstore        35
288: aload         27
290: aload         33
292: invokevirtual #23
295: dstore        37
297: aload         27
299: invokevirtual #20
302: getstatic     #10
305: astore        39
307: aload         39
309: invokevirtual #11
312: astore        40
314: getstatic     #10
317: astore        41
319: aload         41
321: invokevirtual #11
324: astore        42
326: new           #12
329: dup
330: aload         39
332: aload         42
334: invokespecial #13
337: astore        43
339: getstatic     #10
342: astore        44
344: aload         44
346: invokevirtual #11
349: astore        45
351: getstatic     #10
354: astore        46
356: aload         46
358: invokevirtual #11
361: astore        47
363: getstatic     #10
366: astore        48
368: aload         48
370: invokevirtual #11
373: astore        49
375: new           #12
378: dup
379: aload         46
381: aload         49
383: invokespecial #13
386: astore        50
388: aload         44
390: aload         49
392: invokevirtual #22
395: dstore        51
397: aload         43
399: aload         49
401: invokevirtual #23
404: dstore        53
406: aload         43
408: invokevirtual #20
411: aload         27
413: aload         43
415: invokevirtual #82
418: dstore        55
420: getstatic     #10
423: astore        57
425: getstatic     #10
428: astore        58
430: aload         58
432: invokevirtual #11
435: astore        59
437: getstatic     #10
440: astore        60
442: aload         60
444: invokevirtual #11
447: astore        61
449: new           #12
452: dup
453: aload         58
455: aload         61
457: invokespecial #13
460: astore        62
462: aload         57
464: aload         61
466: invokestatic  #96
469: astore        63
471: aload         43
473: aload         61
475: invokevirtual #97
478: astore        64
480: aload         19
482: aload         64
484: ldc2_w        #98
487: invokevirtual #100
490: aload         64
492: invokevirtual #128
495: dstore        65
497: aload         64
499: invokevirtual #129
502: astore        67
504: aload         5
506: aload         64
508: invokevirtual #66
511: astore        68
513: getstatic     #10
516: astore        69
518: aload         69
520: invokevirtual #11
523: astore        70
525: getstatic     #10
528: astore        71
530: aload         71
532: invokevirtual #11
535: astore        72
537: new           #12
540: dup
541: aload         69
543: aload         72
545: invokespecial #13
548: astore        73
550: aload         73
552: invokevirtual #20
555: getstatic     #10
558: astore        74
560: getstatic     #10
563: astore        75
565: getstatic     #10
568: astore        76
570: aload         76
572: invokevirtual #11
575: astore        77
577: getstatic     #10
580: astore        78
582: aload         78
584: invokevirtual #11
587: astore        79
589: new           #12
592: dup
593: aload         76
595: aload         79
597: invokespecial #13
600: astore        80
602: aload         75
604: aload         79
606: invokestatic  #96
609: astore        81
611: aload         75
613: invokevirtual #110
616: astore        82
618: aload         74
620: aload         82
622: invokestatic  #96
625: astore        83
627: aload         73
629: aload         74
631: invokevirtual #97
634: astore        84
636: aload         73
638: invokevirtual #24
641: astore        85
643: aload         73
645: invokevirtual #130
648: astore        86
650: aload         5
652: aload         86
654: invokevirtual #82
657: dstore        87
659: aload         86
661: invokevirtual #130
664: astore        89
666: aload_1
667: invokestatic  #18
670: aload_2
671: invokestatic  #18
674: aload_3
675: invokestatic  #18
678: aload         4
680: invokestatic  #18
683: aload         6
685: invokestatic  #18
688: aload         7
690: invokestatic  #18
693: aload         8
695: invokestatic  #18
698: aload         9
700: invokestatic  #18
703: aload         10
705: invokestatic  #18
708: aload         11
710: invokestatic  #18
713: dload         13
715: invokestatic  #38
718: invokestatic  #39
721: dload         15
723: invokestatic  #38
726: invokestatic  #39
729: aload         17
731: invokestatic  #18
734: new           #40
737: dup
738: invokespecial #41
741: ldc           #42
743: invokevirtual #43
746: iload         22
748: invokevirtual #48
751: ldc           #45
753: invokevirtual #43
756: iconst_1
757: invokevirtual #48
760: ldc           #42
762: invokevirtual #43
765: invokevirtual #46
768: iload         22
770: iconst_1
771: if_icmpne     778
774: iconst_1
775: goto          779
778: iconst_0
779: invokestatic  #47
782: aload         23
784: invokestatic  #18
787: aload         24
789: invokestatic  #18
792: aload         25
794: invokestatic  #18
797: aload         26
799: invokestatic  #18
802: aload         28
804: invokestatic  #18
807: aload         29
809: invokestatic  #18
812: aload         30
814: invokestatic  #18
817: aload         31
819: invokestatic  #18
822: aload         32
824: invokestatic  #18
827: aload         33
829: invokestatic  #18
832: dload         35
834: invokestatic  #38
837: invokestatic  #39
840: dload         37
842: invokestatic  #38
845: invokestatic  #39
848: aload         39
850: invokestatic  #18
853: aload         40
855: invokestatic  #18
858: aload         41
860: invokestatic  #18
863: aload         42
865: invokestatic  #18
868: aload         44
870: invokestatic  #18
873: aload         45
875: invokestatic  #18
878: aload         46
880: invokestatic  #18
883: aload         47
885: invokestatic  #18
888: aload         48
890: invokestatic  #18
893: aload         49
895: invokestatic  #18
898: dload         51
900: invokestatic  #38
903: invokestatic  #39
906: dload         53
908: invokestatic  #38
911: invokestatic  #39
914: dload         55
916: invokestatic  #38
919: invokestatic  #39
922: aload         57
924: invokestatic  #18
927: aload         58
929: invokestatic  #18
932: aload         59
934: invokestatic  #18
937: aload         60
939: invokestatic  #18
942: aload         61
944: invokestatic  #18
947: aload         63
949: invokestatic  #18
952: aload         64
954: invokestatic  #18
957: dload         65
959: invokestatic  #38
962: invokestatic  #39
965: aload         67
967: invokestatic  #18
970: aload         68
972: invokestatic  #18
975: aload         69
977: invokestatic  #18
980: aload         70
982: invokestatic  #18
985: aload         71
987: invokestatic  #18
990: aload         72
992: invokestatic  #18
995: aload         74
997: invokestatic  #18
1000: aload         75
1002: invokestatic  #18
1005: aload         76
1007: invokestatic  #18
1010: aload         77
1012: invokestatic  #18
1015: aload         78
1017: invokestatic  #18
1020: aload         79
1022: invokestatic  #18
1025: aload         81
1027: invokestatic  #18
1030: aload         82
1032: invokestatic  #18
1035: aload         83
1037: invokestatic  #18
1040: aload         84
1042: invokestatic  #18
1045: aload         85
1047: invokestatic  #18
1050: aload         86
1052: invokestatic  #18
1055: dload         87
1057: invokestatic  #38
1060: invokestatic  #39
1063: aload         89
1065: invokestatic  #18
1068: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test023
Start line: 1656
End line: 1689
Method source code: 
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane15 = subPlane14.getHyperplane();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #131
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: aload         17
131: invokevirtual #71
134: astore        18
136: aload_1
137: invokestatic  #18
140: aload_2
141: invokestatic  #18
144: aload_3
145: invokestatic  #18
148: aload         4
150: invokestatic  #18
153: aload         6
155: invokestatic  #18
158: aload         7
160: invokestatic  #18
163: aload         8
165: invokestatic  #18
168: aload         9
170: invokestatic  #18
173: aload         10
175: invokestatic  #18
178: aload         11
180: invokestatic  #18
183: dload         13
185: invokestatic  #38
188: invokestatic  #39
191: dload         15
193: invokestatic  #38
196: invokestatic  #39
199: aload         17
201: invokestatic  #18
204: aload         18
206: invokestatic  #18
209: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test024
Start line: 1692
End line: 1791
Method source code: 
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree0 = null;
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree0);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = vector3D4.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane6 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D2, vector3D5);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D9, vector3D12);
        double double14 = vector3D7.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D12);
        double double15 = plane6.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D12);
        plane6.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane21 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D17, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        double double29 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        double double30 = plane21.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        plane21.revertSelf();
        double double32 = plane6.getOffset(plane21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane44 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D40, vector3D43);
        double double45 = vector3D38.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43);
        double double46 = plane37.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = plane37.getOrigin();
        double double48 = plane21.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D47);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(plane21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side50 = polyhedronsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #132
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: getstatic     #10
38: astore_3
39: aload_3
40: invokevirtual #11
43: astore        4
45: getstatic     #10
48: astore        5
50: aload         5
52: invokevirtual #11
55: astore        6
57: new           #12
60: dup
61: aload_3
62: aload         6
64: invokespecial #13
67: astore        7
69: getstatic     #10
72: astore        8
74: aload         8
76: invokevirtual #11
79: astore        9
81: getstatic     #10
84: astore        10
86: aload         10
88: invokevirtual #11
91: astore        11
93: getstatic     #10
96: astore        12
98: aload         12
100: invokevirtual #11
103: astore        13
105: new           #12
108: dup
109: aload         10
111: aload         13
113: invokespecial #13
116: astore        14
118: aload         8
120: aload         13
122: invokevirtual #22
125: dstore        15
127: aload         7
129: aload         13
131: invokevirtual #23
134: dstore        17
136: aload         7
138: invokevirtual #20
141: getstatic     #10
144: astore        19
146: aload         19
148: invokevirtual #11
151: astore        20
153: getstatic     #10
156: astore        21
158: aload         21
160: invokevirtual #11
163: astore        22
165: new           #12
168: dup
169: aload         19
171: aload         22
173: invokespecial #13
176: astore        23
178: getstatic     #10
181: astore        24
183: aload         24
185: invokevirtual #11
188: astore        25
190: getstatic     #10
193: astore        26
195: aload         26
197: invokevirtual #11
200: astore        27
202: getstatic     #10
205: astore        28
207: aload         28
209: invokevirtual #11
212: astore        29
214: new           #12
217: dup
218: aload         26
220: aload         29
222: invokespecial #13
225: astore        30
227: aload         24
229: aload         29
231: invokevirtual #22
234: dstore        31
236: aload         23
238: aload         29
240: invokevirtual #23
243: dstore        33
245: aload         23
247: invokevirtual #20
250: aload         7
252: aload         23
254: invokevirtual #82
257: dstore        35
259: getstatic     #10
262: astore        37
264: aload         37
266: invokevirtual #11
269: astore        38
271: getstatic     #10
274: astore        39
276: aload         39
278: invokevirtual #11
281: astore        40
283: new           #12
286: dup
287: aload         37
289: aload         40
291: invokespecial #13
294: astore        41
296: getstatic     #10
299: astore        42
301: aload         42
303: invokevirtual #11
306: astore        43
308: getstatic     #10
311: astore        44
313: aload         44
315: invokevirtual #11
318: astore        45
320: getstatic     #10
323: astore        46
325: aload         46
327: invokevirtual #11
330: astore        47
332: new           #12
335: dup
336: aload         44
338: aload         47
340: invokespecial #13
343: astore        48
345: aload         42
347: aload         47
349: invokevirtual #22
352: dstore        49
354: aload         41
356: aload         47
358: invokevirtual #23
361: dstore        51
363: aload         41
365: invokevirtual #83
368: astore        53
370: aload         23
372: aload         53
374: invokevirtual #23
377: dstore        54
379: new           #12
382: dup
383: aload         23
385: invokespecial #84
388: astore        56
390: aload_2
391: aload         56
393: invokevirtual #14
396: astore        57
398: ldc           #15
400: invokestatic  #16
403: goto          408
406: astore        57
408: aload_3
409: invokestatic  #18
412: aload         4
414: invokestatic  #18
417: aload         5
419: invokestatic  #18
422: aload         6
424: invokestatic  #18
427: aload         8
429: invokestatic  #18
432: aload         9
434: invokestatic  #18
437: aload         10
439: invokestatic  #18
442: aload         11
444: invokestatic  #18
447: aload         12
449: invokestatic  #18
452: aload         13
454: invokestatic  #18
457: dload         15
459: invokestatic  #38
462: invokestatic  #39
465: dload         17
467: invokestatic  #38
470: invokestatic  #39
473: aload         19
475: invokestatic  #18
478: aload         20
480: invokestatic  #18
483: aload         21
485: invokestatic  #18
488: aload         22
490: invokestatic  #18
493: aload         24
495: invokestatic  #18
498: aload         25
500: invokestatic  #18
503: aload         26
505: invokestatic  #18
508: aload         27
510: invokestatic  #18
513: aload         28
515: invokestatic  #18
518: aload         29
520: invokestatic  #18
523: dload         31
525: invokestatic  #38
528: invokestatic  #39
531: dload         33
533: invokestatic  #38
536: invokestatic  #39
539: dload         35
541: invokestatic  #38
544: invokestatic  #39
547: aload         37
549: invokestatic  #18
552: aload         38
554: invokestatic  #18
557: aload         39
559: invokestatic  #18
562: aload         40
564: invokestatic  #18
567: aload         42
569: invokestatic  #18
572: aload         43
574: invokestatic  #18
577: aload         44
579: invokestatic  #18
582: aload         45
584: invokestatic  #18
587: aload         46
589: invokestatic  #18
592: aload         47
594: invokestatic  #18
597: dload         49
599: invokestatic  #38
602: invokestatic  #39
605: dload         51
607: invokestatic  #38
610: invokestatic  #39
613: aload         53
615: invokestatic  #18
618: dload         54
620: invokestatic  #38
623: invokestatic  #39
626: return
Exception table:
from    to  target type
390   403   406   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test025
Start line: 1794
End line: 1908
Method source code: 
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane24 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D20, vector3D23);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line29 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D27, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = plane24.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        plane35.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        double double58 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        double double59 = plane50.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        plane50.revertSelf();
        double double61 = plane35.getOffset(plane50);
        org.apache.commons.math3.geometry.euclidean.threed.Line line62 = plane24.intersection(plane35);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane63 = subPlane17.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane24);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = plane24.getNormal();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(line62);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane63);
        org.junit.Assert.assertNotNull(vector3D64);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #133
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: getstatic     #10
175: astore        24
177: aload         24
179: invokevirtual #11
182: astore        25
184: getstatic     #10
187: astore        26
189: aload         26
191: invokevirtual #11
194: astore        27
196: new           #12
199: dup
200: aload         24
202: aload         27
204: invokespecial #13
207: astore        28
209: new           #60
212: dup
213: dconst_0
214: ldc2_w        #61
217: invokespecial #63
220: astore        29
222: new           #64
225: dup
226: aload         29
228: dconst_0
229: invokespecial #65
232: astore        30
234: aload         28
236: aload         29
238: invokevirtual #66
241: astore        31
243: getstatic     #10
246: astore        32
248: aload         32
250: invokevirtual #11
253: astore        33
255: getstatic     #10
258: astore        34
260: aload         34
262: invokevirtual #11
265: astore        35
267: new           #12
270: dup
271: aload         32
273: aload         35
275: invokespecial #13
278: astore        36
280: getstatic     #10
283: astore        37
285: aload         37
287: invokevirtual #11
290: astore        38
292: getstatic     #10
295: astore        39
297: aload         39
299: invokevirtual #11
302: astore        40
304: getstatic     #10
307: astore        41
309: aload         41
311: invokevirtual #11
314: astore        42
316: new           #12
319: dup
320: aload         39
322: aload         42
324: invokespecial #13
327: astore        43
329: aload         37
331: aload         42
333: invokevirtual #22
336: dstore        44
338: aload         36
340: aload         42
342: invokevirtual #23
345: dstore        46
347: aload         36
349: invokevirtual #20
352: getstatic     #10
355: astore        48
357: aload         48
359: invokevirtual #11
362: astore        49
364: getstatic     #10
367: astore        50
369: aload         50
371: invokevirtual #11
374: astore        51
376: new           #12
379: dup
380: aload         48
382: aload         51
384: invokespecial #13
387: astore        52
389: getstatic     #10
392: astore        53
394: aload         53
396: invokevirtual #11
399: astore        54
401: getstatic     #10
404: astore        55
406: aload         55
408: invokevirtual #11
411: astore        56
413: getstatic     #10
416: astore        57
418: aload         57
420: invokevirtual #11
423: astore        58
425: new           #12
428: dup
429: aload         55
431: aload         58
433: invokespecial #13
436: astore        59
438: aload         53
440: aload         58
442: invokevirtual #22
445: dstore        60
447: aload         52
449: aload         58
451: invokevirtual #23
454: dstore        62
456: aload         52
458: invokevirtual #20
461: aload         36
463: aload         52
465: invokevirtual #82
468: dstore        64
470: aload         28
472: aload         36
474: invokevirtual #134
477: astore        66
479: aload         21
481: aload         28
483: invokevirtual #114
486: astore        67
488: aload         28
490: invokevirtual #135
493: astore        68
495: new           #40
498: dup
499: invokespecial #41
502: ldc           #42
504: invokevirtual #43
507: dload_3
508: invokevirtual #44
511: ldc           #45
513: invokevirtual #43
516: dconst_0
517: invokevirtual #44
520: ldc           #42
522: invokevirtual #43
525: invokevirtual #46
528: dload_3
529: dconst_0
530: dcmpl
531: ifne          538
534: iconst_1
535: goto          539
538: iconst_0
539: invokestatic  #47
542: aload         5
544: invokestatic  #18
547: aload         6
549: invokestatic  #18
552: aload         7
554: invokestatic  #18
557: aload         8
559: invokestatic  #18
562: aload         10
564: invokestatic  #18
567: aload         11
569: invokestatic  #18
572: aload         12
574: invokestatic  #18
577: aload         13
579: invokestatic  #18
582: aload         14
584: invokestatic  #18
587: aload         15
589: invokestatic  #18
592: dload         17
594: invokestatic  #38
597: invokestatic  #39
600: dload         19
602: invokestatic  #38
605: invokestatic  #39
608: aload         21
610: invokestatic  #18
613: aload         22
615: invokestatic  #18
618: aload         23
620: invokestatic  #18
623: aload         24
625: invokestatic  #18
628: aload         25
630: invokestatic  #18
633: aload         26
635: invokestatic  #18
638: aload         27
640: invokestatic  #18
643: aload         31
645: invokestatic  #18
648: aload         32
650: invokestatic  #18
653: aload         33
655: invokestatic  #18
658: aload         34
660: invokestatic  #18
663: aload         35
665: invokestatic  #18
668: aload         37
670: invokestatic  #18
673: aload         38
675: invokestatic  #18
678: aload         39
680: invokestatic  #18
683: aload         40
685: invokestatic  #18
688: aload         41
690: invokestatic  #18
693: aload         42
695: invokestatic  #18
698: dload         44
700: invokestatic  #38
703: invokestatic  #39
706: dload         46
708: invokestatic  #38
711: invokestatic  #39
714: aload         48
716: invokestatic  #18
719: aload         49
721: invokestatic  #18
724: aload         50
726: invokestatic  #18
729: aload         51
731: invokestatic  #18
734: aload         53
736: invokestatic  #18
739: aload         54
741: invokestatic  #18
744: aload         55
746: invokestatic  #18
749: aload         56
751: invokestatic  #18
754: aload         57
756: invokestatic  #18
759: aload         58
761: invokestatic  #18
764: dload         60
766: invokestatic  #38
769: invokestatic  #39
772: dload         62
774: invokestatic  #38
777: invokestatic  #39
780: dload         64
782: invokestatic  #38
785: invokestatic  #39
788: aload         66
790: invokestatic  #18
793: aload         67
795: invokestatic  #18
798: aload         68
800: invokestatic  #18
803: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test026
Start line: 1911
End line: 1994
Method source code: 
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        double double23 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        double double24 = plane15.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane25 = plane15.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion26 = subPlane25.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane27 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane4, euclidean2DRegion26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        double double40 = vector3D33.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38);
        double double41 = plane32.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane42 = plane32.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion43 = subPlane42.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane44 = subPlane42.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane45 = subPlane27.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane42);
        boolean boolean46 = subPlane42.isEmpty();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(subPlane25);
        org.junit.Assert.assertNotNull(euclidean2DRegion26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(subPlane42);
        org.junit.Assert.assertNotNull(euclidean2DRegion43);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane44);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #136
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: new           #60
58: dup
59: dconst_0
60: ldc2_w        #61
63: invokespecial #63
66: astore        6
68: new           #64
71: dup
72: aload         6
74: dconst_0
75: invokespecial #65
78: astore        7
80: aload         5
82: aload         6
84: invokevirtual #66
87: astore        8
89: getstatic     #10
92: astore        9
94: aload         9
96: invokevirtual #11
99: astore        10
101: getstatic     #10
104: astore        11
106: aload         11
108: invokevirtual #11
111: astore        12
113: new           #12
116: dup
117: aload         9
119: aload         12
121: invokespecial #13
124: astore        13
126: getstatic     #10
129: astore        14
131: aload         14
133: invokevirtual #11
136: astore        15
138: getstatic     #10
141: astore        16
143: aload         16
145: invokevirtual #11
148: astore        17
150: getstatic     #10
153: astore        18
155: aload         18
157: invokevirtual #11
160: astore        19
162: new           #12
165: dup
166: aload         16
168: aload         19
170: invokespecial #13
173: astore        20
175: aload         14
177: aload         19
179: invokevirtual #22
182: dstore        21
184: aload         13
186: aload         19
188: invokevirtual #23
191: dstore        23
193: aload         13
195: invokevirtual #24
198: astore        25
200: aload         25
202: invokevirtual #32
205: astore        26
207: new           #67
210: dup
211: aload         5
213: aload         26
215: invokespecial #68
218: astore        27
220: getstatic     #10
223: astore        28
225: aload         28
227: invokevirtual #11
230: astore        29
232: getstatic     #10
235: astore        30
237: aload         30
239: invokevirtual #11
242: astore        31
244: new           #12
247: dup
248: aload         28
250: aload         31
252: invokespecial #13
255: astore        32
257: getstatic     #10
260: astore        33
262: aload         33
264: invokevirtual #11
267: astore        34
269: getstatic     #10
272: astore        35
274: aload         35
276: invokevirtual #11
279: astore        36
281: getstatic     #10
284: astore        37
286: aload         37
288: invokevirtual #11
291: astore        38
293: new           #12
296: dup
297: aload         35
299: aload         38
301: invokespecial #13
304: astore        39
306: aload         33
308: aload         38
310: invokevirtual #22
313: dstore        40
315: aload         32
317: aload         38
319: invokevirtual #23
322: dstore        42
324: aload         32
326: invokevirtual #24
329: astore        44
331: aload         44
333: invokevirtual #32
336: astore        45
338: aload         44
340: invokevirtual #71
343: astore        46
345: aload         27
347: aload         44
349: invokevirtual #72
352: astore        47
354: aload         44
356: invokevirtual #93
359: istore        48
361: aload_1
362: invokestatic  #18
365: aload_2
366: invokestatic  #18
369: aload_3
370: invokestatic  #18
373: aload         4
375: invokestatic  #18
378: aload         8
380: invokestatic  #18
383: aload         9
385: invokestatic  #18
388: aload         10
390: invokestatic  #18
393: aload         11
395: invokestatic  #18
398: aload         12
400: invokestatic  #18
403: aload         14
405: invokestatic  #18
408: aload         15
410: invokestatic  #18
413: aload         16
415: invokestatic  #18
418: aload         17
420: invokestatic  #18
423: aload         18
425: invokestatic  #18
428: aload         19
430: invokestatic  #18
433: dload         21
435: invokestatic  #38
438: invokestatic  #39
441: dload         23
443: invokestatic  #38
446: invokestatic  #39
449: aload         25
451: invokestatic  #18
454: aload         26
456: invokestatic  #18
459: aload         28
461: invokestatic  #18
464: aload         29
466: invokestatic  #18
469: aload         30
471: invokestatic  #18
474: aload         31
476: invokestatic  #18
479: aload         33
481: invokestatic  #18
484: aload         34
486: invokestatic  #18
489: aload         35
491: invokestatic  #18
494: aload         36
496: invokestatic  #18
499: aload         37
501: invokestatic  #18
504: aload         38
506: invokestatic  #18
509: dload         40
511: invokestatic  #38
514: invokestatic  #39
517: dload         42
519: invokestatic  #38
522: invokestatic  #39
525: aload         44
527: invokestatic  #18
530: aload         45
532: invokestatic  #18
535: aload         46
537: invokestatic  #18
540: aload         47
542: invokestatic  #18
545: new           #40
548: dup
549: invokespecial #41
552: ldc           #42
554: invokevirtual #43
557: iload         48
559: invokevirtual #48
562: ldc           #45
564: invokevirtual #43
567: iconst_0
568: invokevirtual #48
571: ldc           #42
573: invokevirtual #43
576: invokevirtual #46
579: iload         48
581: ifne          588
584: iconst_1
585: goto          589
588: iconst_0
589: invokestatic  #47
592: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test027
Start line: 1997
End line: 2101
Method source code: 
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        plane19.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane41 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D37, vector3D40);
        double double42 = vector3D35.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        double double43 = plane34.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        plane34.revertSelf();
        double double45 = plane19.getOffset(plane34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = vector3D49.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane51 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D47, vector3D50);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D46, vector3D50);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = plane34.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D50);
        double double54 = plane4.getOffset(plane34);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector2D53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #137
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: aload         18
136: invokevirtual #11
139: astore        19
141: getstatic     #10
144: astore        20
146: aload         20
148: invokevirtual #11
151: astore        21
153: new           #12
156: dup
157: aload         18
159: aload         21
161: invokespecial #13
164: astore        22
166: getstatic     #10
169: astore        23
171: aload         23
173: invokevirtual #11
176: astore        24
178: getstatic     #10
181: astore        25
183: aload         25
185: invokevirtual #11
188: astore        26
190: getstatic     #10
193: astore        27
195: aload         27
197: invokevirtual #11
200: astore        28
202: new           #12
205: dup
206: aload         25
208: aload         28
210: invokespecial #13
213: astore        29
215: aload         23
217: aload         28
219: invokevirtual #22
222: dstore        30
224: aload         22
226: aload         28
228: invokevirtual #23
231: dstore        32
233: aload         22
235: invokevirtual #20
238: getstatic     #10
241: astore        34
243: aload         34
245: invokevirtual #11
248: astore        35
250: getstatic     #10
253: astore        36
255: aload         36
257: invokevirtual #11
260: astore        37
262: new           #12
265: dup
266: aload         34
268: aload         37
270: invokespecial #13
273: astore        38
275: getstatic     #10
278: astore        39
280: aload         39
282: invokevirtual #11
285: astore        40
287: getstatic     #10
290: astore        41
292: aload         41
294: invokevirtual #11
297: astore        42
299: getstatic     #10
302: astore        43
304: aload         43
306: invokevirtual #11
309: astore        44
311: new           #12
314: dup
315: aload         41
317: aload         44
319: invokespecial #13
322: astore        45
324: aload         39
326: aload         44
328: invokevirtual #22
331: dstore        46
333: aload         38
335: aload         44
337: invokevirtual #23
340: dstore        48
342: aload         38
344: invokevirtual #20
347: aload         22
349: aload         38
351: invokevirtual #82
354: dstore        50
356: getstatic     #10
359: astore        52
361: getstatic     #10
364: astore        53
366: aload         53
368: invokevirtual #11
371: astore        54
373: getstatic     #10
376: astore        55
378: aload         55
380: invokevirtual #11
383: astore        56
385: new           #12
388: dup
389: aload         53
391: aload         56
393: invokespecial #13
396: astore        57
398: aload         52
400: aload         56
402: invokestatic  #96
405: astore        58
407: aload         38
409: aload         56
411: invokevirtual #97
414: astore        59
416: aload         5
418: aload         38
420: invokevirtual #82
423: dstore        60
425: aload_1
426: invokestatic  #18
429: aload_2
430: invokestatic  #18
433: aload_3
434: invokestatic  #18
437: aload         4
439: invokestatic  #18
442: aload         6
444: invokestatic  #18
447: aload         7
449: invokestatic  #18
452: aload         8
454: invokestatic  #18
457: aload         9
459: invokestatic  #18
462: aload         10
464: invokestatic  #18
467: aload         11
469: invokestatic  #18
472: dload         13
474: invokestatic  #38
477: invokestatic  #39
480: dload         15
482: invokestatic  #38
485: invokestatic  #39
488: aload         17
490: invokestatic  #18
493: aload         18
495: invokestatic  #18
498: aload         19
500: invokestatic  #18
503: aload         20
505: invokestatic  #18
508: aload         21
510: invokestatic  #18
513: aload         23
515: invokestatic  #18
518: aload         24
520: invokestatic  #18
523: aload         25
525: invokestatic  #18
528: aload         26
530: invokestatic  #18
533: aload         27
535: invokestatic  #18
538: aload         28
540: invokestatic  #18
543: dload         30
545: invokestatic  #38
548: invokestatic  #39
551: dload         32
553: invokestatic  #38
556: invokestatic  #39
559: aload         34
561: invokestatic  #18
564: aload         35
566: invokestatic  #18
569: aload         36
571: invokestatic  #18
574: aload         37
576: invokestatic  #18
579: aload         39
581: invokestatic  #18
584: aload         40
586: invokestatic  #18
589: aload         41
591: invokestatic  #18
594: aload         42
596: invokestatic  #18
599: aload         43
601: invokestatic  #18
604: aload         44
606: invokestatic  #18
609: dload         46
611: invokestatic  #38
614: invokestatic  #39
617: dload         48
619: invokestatic  #38
622: invokestatic  #39
625: dload         50
627: invokestatic  #38
630: invokestatic  #39
633: aload         52
635: invokestatic  #18
638: aload         53
640: invokestatic  #18
643: aload         54
645: invokestatic  #18
648: aload         55
650: invokestatic  #18
653: aload         56
655: invokestatic  #18
658: aload         58
660: invokestatic  #18
663: aload         59
665: invokestatic  #18
668: dload         60
670: invokestatic  #38
673: invokestatic  #39
676: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test028
Start line: 2104
End line: 2283
Method source code: 
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane21 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D17, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D16, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D16.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D15, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D25, vector3D28);
        plane29.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D32, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D32.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D31, vector3D39);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector41 = plane29.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D44, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane55 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D51, vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D44.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D42.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane58 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D31, vector3D57);
        plane58.revertSelf();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane60 = subPlane14.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane58);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = vector3D63.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane65 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D61, vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = vector3D66.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D70.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane72 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D68, vector3D71);
        double double73 = vector3D66.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        double double74 = plane65.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane75 = plane65.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D76.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = vector3D78.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane80 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D76, vector3D79);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D83.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D85.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane87 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D83, vector3D86);
        double double88 = vector3D81.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86);
        double double89 = plane80.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane90 = plane80.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion91 = subPlane90.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane92 = subPlane90.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane93 = subPlane75.split(euclidean3DHyperplane92);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane94 = subPlane14.split(euclidean3DHyperplane92);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane95 = euclidean3DHyperplane92.copySelf();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(euclidean2DVector41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(subPlane75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(subPlane90);
        org.junit.Assert.assertNotNull(euclidean2DRegion91);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane92);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane93);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane94);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane95);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #138
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: getstatic     #10
137: astore        19
139: getstatic     #10
142: astore        20
144: aload         20
146: invokevirtual #11
149: astore        21
151: getstatic     #10
154: astore        22
156: aload         22
158: invokevirtual #11
161: astore        23
163: new           #12
166: dup
167: aload         20
169: aload         23
171: invokespecial #13
174: astore        24
176: aload         19
178: aload         23
180: invokestatic  #96
183: astore        25
185: aload         19
187: invokevirtual #110
190: astore        26
192: aload         18
194: aload         26
196: invokestatic  #96
199: astore        27
201: getstatic     #10
204: astore        28
206: aload         28
208: invokevirtual #11
211: astore        29
213: getstatic     #10
216: astore        30
218: aload         30
220: invokevirtual #11
223: astore        31
225: new           #12
228: dup
229: aload         28
231: aload         31
233: invokespecial #13
236: astore        32
238: aload         32
240: invokevirtual #20
243: getstatic     #10
246: astore        33
248: getstatic     #10
251: astore        34
253: getstatic     #10
256: astore        35
258: aload         35
260: invokevirtual #11
263: astore        36
265: getstatic     #10
268: astore        37
270: aload         37
272: invokevirtual #11
275: astore        38
277: new           #12
280: dup
281: aload         35
283: aload         38
285: invokespecial #13
288: astore        39
290: aload         34
292: aload         38
294: invokestatic  #96
297: astore        40
299: aload         34
301: invokevirtual #110
304: astore        41
306: aload         33
308: aload         41
310: invokestatic  #96
313: astore        42
315: aload         32
317: aload         33
319: invokevirtual #97
322: astore        43
324: getstatic     #10
327: astore        44
329: getstatic     #10
332: astore        45
334: getstatic     #10
337: astore        46
339: aload         46
341: invokevirtual #11
344: astore        47
346: getstatic     #10
349: astore        48
351: aload         48
353: invokevirtual #11
356: astore        49
358: new           #12
361: dup
362: aload         46
364: aload         49
366: invokespecial #13
369: astore        50
371: aload         45
373: aload         49
375: invokestatic  #96
378: astore        51
380: getstatic     #10
383: astore        52
385: aload         52
387: invokevirtual #11
390: astore        53
392: getstatic     #10
395: astore        54
397: aload         54
399: invokevirtual #11
402: astore        55
404: new           #12
407: dup
408: aload         52
410: aload         55
412: invokespecial #13
415: astore        56
417: aload         45
419: aload         55
421: invokevirtual #111
424: astore        57
426: aload         44
428: dconst_1
429: aload         55
431: invokevirtual #112
434: astore        58
436: new           #12
439: dup
440: aload         26
442: aload         33
444: aload         58
446: invokespecial #113
449: astore        59
451: aload         59
453: invokevirtual #20
456: aload         17
458: aload         59
460: invokevirtual #114
463: astore        60
465: getstatic     #10
468: astore        61
470: aload         61
472: invokevirtual #11
475: astore        62
477: getstatic     #10
480: astore        63
482: aload         63
484: invokevirtual #11
487: astore        64
489: new           #12
492: dup
493: aload         61
495: aload         64
497: invokespecial #13
500: astore        65
502: getstatic     #10
505: astore        66
507: aload         66
509: invokevirtual #11
512: astore        67
514: getstatic     #10
517: astore        68
519: aload         68
521: invokevirtual #11
524: astore        69
526: getstatic     #10
529: astore        70
531: aload         70
533: invokevirtual #11
536: astore        71
538: new           #12
541: dup
542: aload         68
544: aload         71
546: invokespecial #13
549: astore        72
551: aload         66
553: aload         71
555: invokevirtual #22
558: dstore        73
560: aload         65
562: aload         71
564: invokevirtual #23
567: dstore        75
569: aload         65
571: invokevirtual #24
574: astore        77
576: getstatic     #10
579: astore        78
581: aload         78
583: invokevirtual #11
586: astore        79
588: getstatic     #10
591: astore        80
593: aload         80
595: invokevirtual #11
598: astore        81
600: new           #12
603: dup
604: aload         78
606: aload         81
608: invokespecial #13
611: astore        82
613: getstatic     #10
616: astore        83
618: aload         83
620: invokevirtual #11
623: astore        84
625: getstatic     #10
628: astore        85
630: aload         85
632: invokevirtual #11
635: astore        86
637: getstatic     #10
640: astore        87
642: aload         87
644: invokevirtual #11
647: astore        88
649: new           #12
652: dup
653: aload         85
655: aload         88
657: invokespecial #13
660: astore        89
662: aload         83
664: aload         88
666: invokevirtual #22
669: dstore        90
671: aload         82
673: aload         88
675: invokevirtual #23
678: dstore        92
680: aload         82
682: invokevirtual #24
685: astore        94
687: aload         94
689: invokevirtual #32
692: astore        95
694: aload         94
696: invokevirtual #71
699: astore        96
701: aload         77
703: aload         96
705: invokevirtual #114
708: astore        97
710: aload         17
712: aload         96
714: invokevirtual #114
717: astore        98
719: aload         96
721: invokeinterface #139,  1
726: astore        99
728: aload_1
729: invokestatic  #18
732: aload_2
733: invokestatic  #18
736: aload_3
737: invokestatic  #18
740: aload         4
742: invokestatic  #18
745: aload         6
747: invokestatic  #18
750: aload         7
752: invokestatic  #18
755: aload         8
757: invokestatic  #18
760: aload         9
762: invokestatic  #18
765: aload         10
767: invokestatic  #18
770: aload         11
772: invokestatic  #18
775: dload         13
777: invokestatic  #38
780: invokestatic  #39
783: dload         15
785: invokestatic  #38
788: invokestatic  #39
791: aload         17
793: invokestatic  #18
796: aload         18
798: invokestatic  #18
801: aload         19
803: invokestatic  #18
806: aload         20
808: invokestatic  #18
811: aload         21
813: invokestatic  #18
816: aload         22
818: invokestatic  #18
821: aload         23
823: invokestatic  #18
826: aload         25
828: invokestatic  #18
831: aload         26
833: invokestatic  #18
836: aload         27
838: invokestatic  #18
841: aload         28
843: invokestatic  #18
846: aload         29
848: invokestatic  #18
851: aload         30
853: invokestatic  #18
856: aload         31
858: invokestatic  #18
861: aload         33
863: invokestatic  #18
866: aload         34
868: invokestatic  #18
871: aload         35
873: invokestatic  #18
876: aload         36
878: invokestatic  #18
881: aload         37
883: invokestatic  #18
886: aload         38
888: invokestatic  #18
891: aload         40
893: invokestatic  #18
896: aload         41
898: invokestatic  #18
901: aload         42
903: invokestatic  #18
906: aload         43
908: invokestatic  #18
911: aload         44
913: invokestatic  #18
916: aload         45
918: invokestatic  #18
921: aload         46
923: invokestatic  #18
926: aload         47
928: invokestatic  #18
931: aload         48
933: invokestatic  #18
936: aload         49
938: invokestatic  #18
941: aload         51
943: invokestatic  #18
946: aload         52
948: invokestatic  #18
951: aload         53
953: invokestatic  #18
956: aload         54
958: invokestatic  #18
961: aload         55
963: invokestatic  #18
966: aload         57
968: invokestatic  #18
971: aload         58
973: invokestatic  #18
976: aload         60
978: invokestatic  #18
981: aload         61
983: invokestatic  #18
986: aload         62
988: invokestatic  #18
991: aload         63
993: invokestatic  #18
996: aload         64
998: invokestatic  #18
1001: aload         66
1003: invokestatic  #18
1006: aload         67
1008: invokestatic  #18
1011: aload         68
1013: invokestatic  #18
1016: aload         69
1018: invokestatic  #18
1021: aload         70
1023: invokestatic  #18
1026: aload         71
1028: invokestatic  #18
1031: dload         73
1033: invokestatic  #38
1036: invokestatic  #39
1039: dload         75
1041: invokestatic  #38
1044: invokestatic  #39
1047: aload         77
1049: invokestatic  #18
1052: aload         78
1054: invokestatic  #18
1057: aload         79
1059: invokestatic  #18
1062: aload         80
1064: invokestatic  #18
1067: aload         81
1069: invokestatic  #18
1072: aload         83
1074: invokestatic  #18
1077: aload         84
1079: invokestatic  #18
1082: aload         85
1084: invokestatic  #18
1087: aload         86
1089: invokestatic  #18
1092: aload         87
1094: invokestatic  #18
1097: aload         88
1099: invokestatic  #18
1102: dload         90
1104: invokestatic  #38
1107: invokestatic  #39
1110: dload         92
1112: invokestatic  #38
1115: invokestatic  #39
1118: aload         94
1120: invokestatic  #18
1123: aload         95
1125: invokestatic  #18
1128: aload         96
1130: invokestatic  #18
1133: aload         97
1135: invokestatic  #18
1138: aload         98
1140: invokestatic  #18
1143: aload         99
1145: invokestatic  #18
1148: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test029
Start line: 2286
End line: 2341
Method source code: 
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        double double23 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        double double24 = plane15.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane25 = plane15.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion26 = subPlane25.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane27 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane4, euclidean2DRegion26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = plane4.translate(vector3D28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(subPlane25);
        org.junit.Assert.assertNotNull(euclidean2DRegion26);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #140
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: new           #60
58: dup
59: dconst_0
60: ldc2_w        #61
63: invokespecial #63
66: astore        6
68: new           #64
71: dup
72: aload         6
74: dconst_0
75: invokespecial #65
78: astore        7
80: aload         5
82: aload         6
84: invokevirtual #66
87: astore        8
89: getstatic     #10
92: astore        9
94: aload         9
96: invokevirtual #11
99: astore        10
101: getstatic     #10
104: astore        11
106: aload         11
108: invokevirtual #11
111: astore        12
113: new           #12
116: dup
117: aload         9
119: aload         12
121: invokespecial #13
124: astore        13
126: getstatic     #10
129: astore        14
131: aload         14
133: invokevirtual #11
136: astore        15
138: getstatic     #10
141: astore        16
143: aload         16
145: invokevirtual #11
148: astore        17
150: getstatic     #10
153: astore        18
155: aload         18
157: invokevirtual #11
160: astore        19
162: new           #12
165: dup
166: aload         16
168: aload         19
170: invokespecial #13
173: astore        20
175: aload         14
177: aload         19
179: invokevirtual #22
182: dstore        21
184: aload         13
186: aload         19
188: invokevirtual #23
191: dstore        23
193: aload         13
195: invokevirtual #24
198: astore        25
200: aload         25
202: invokevirtual #32
205: astore        26
207: new           #67
210: dup
211: aload         5
213: aload         26
215: invokespecial #68
218: astore        27
220: aconst_null
221: astore        28
223: aload         5
225: aload         28
227: invokevirtual #141
230: astore        29
232: ldc           #15
234: invokestatic  #16
237: goto          242
240: astore        29
242: aload_1
243: invokestatic  #18
246: aload_2
247: invokestatic  #18
250: aload_3
251: invokestatic  #18
254: aload         4
256: invokestatic  #18
259: aload         8
261: invokestatic  #18
264: aload         9
266: invokestatic  #18
269: aload         10
271: invokestatic  #18
274: aload         11
276: invokestatic  #18
279: aload         12
281: invokestatic  #18
284: aload         14
286: invokestatic  #18
289: aload         15
291: invokestatic  #18
294: aload         16
296: invokestatic  #18
299: aload         17
301: invokestatic  #18
304: aload         18
306: invokestatic  #18
309: aload         19
311: invokestatic  #18
314: dload         21
316: invokestatic  #38
319: invokestatic  #39
322: dload         23
324: invokestatic  #38
327: invokestatic  #39
330: aload         25
332: invokestatic  #18
335: aload         26
337: invokestatic  #18
340: return
Exception table:
from    to  target type
223   237   240   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test030
Start line: 2344
End line: 2360
Method source code: 
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray1 = polygonsSet0.getVertices();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree2 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet3 = polygonsSet0.buildNew(euclidean2DBSPTree2);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = polygonsSet3.isEmpty();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2DArray1);
        org.junit.Assert.assertNotNull(polygonsSet3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #142
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: aload_1
33: invokevirtual #143
36: astore_2
37: aconst_null
38: astore_3
39: aload_1
40: aload_3
41: invokevirtual #144
44: astore        4
46: aload         4
48: invokevirtual #145
51: istore        5
53: ldc           #15
55: invokestatic  #16
58: goto          63
61: astore        5
63: aload_2
64: invokestatic  #18
67: aload         4
69: invokestatic  #18
72: return
Exception table:
from    to  target type
46    58    61   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test031
Start line: 2363
End line: 2446
Method source code: 
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        double double23 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        double double24 = plane15.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane25 = plane15.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion26 = subPlane25.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane27 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane4, euclidean2DRegion26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        double double40 = vector3D33.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38);
        double double41 = plane32.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane42 = plane32.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion43 = subPlane42.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane44 = subPlane42.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane45 = subPlane27.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane42);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion46 = subPlane27.getRemainingRegion();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(subPlane25);
        org.junit.Assert.assertNotNull(euclidean2DRegion26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(subPlane42);
        org.junit.Assert.assertNotNull(euclidean2DRegion43);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane44);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane45);
        org.junit.Assert.assertNotNull(euclidean2DRegion46);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #146
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: new           #60
58: dup
59: dconst_0
60: ldc2_w        #61
63: invokespecial #63
66: astore        6
68: new           #64
71: dup
72: aload         6
74: dconst_0
75: invokespecial #65
78: astore        7
80: aload         5
82: aload         6
84: invokevirtual #66
87: astore        8
89: getstatic     #10
92: astore        9
94: aload         9
96: invokevirtual #11
99: astore        10
101: getstatic     #10
104: astore        11
106: aload         11
108: invokevirtual #11
111: astore        12
113: new           #12
116: dup
117: aload         9
119: aload         12
121: invokespecial #13
124: astore        13
126: getstatic     #10
129: astore        14
131: aload         14
133: invokevirtual #11
136: astore        15
138: getstatic     #10
141: astore        16
143: aload         16
145: invokevirtual #11
148: astore        17
150: getstatic     #10
153: astore        18
155: aload         18
157: invokevirtual #11
160: astore        19
162: new           #12
165: dup
166: aload         16
168: aload         19
170: invokespecial #13
173: astore        20
175: aload         14
177: aload         19
179: invokevirtual #22
182: dstore        21
184: aload         13
186: aload         19
188: invokevirtual #23
191: dstore        23
193: aload         13
195: invokevirtual #24
198: astore        25
200: aload         25
202: invokevirtual #32
205: astore        26
207: new           #67
210: dup
211: aload         5
213: aload         26
215: invokespecial #68
218: astore        27
220: getstatic     #10
223: astore        28
225: aload         28
227: invokevirtual #11
230: astore        29
232: getstatic     #10
235: astore        30
237: aload         30
239: invokevirtual #11
242: astore        31
244: new           #12
247: dup
248: aload         28
250: aload         31
252: invokespecial #13
255: astore        32
257: getstatic     #10
260: astore        33
262: aload         33
264: invokevirtual #11
267: astore        34
269: getstatic     #10
272: astore        35
274: aload         35
276: invokevirtual #11
279: astore        36
281: getstatic     #10
284: astore        37
286: aload         37
288: invokevirtual #11
291: astore        38
293: new           #12
296: dup
297: aload         35
299: aload         38
301: invokespecial #13
304: astore        39
306: aload         33
308: aload         38
310: invokevirtual #22
313: dstore        40
315: aload         32
317: aload         38
319: invokevirtual #23
322: dstore        42
324: aload         32
326: invokevirtual #24
329: astore        44
331: aload         44
333: invokevirtual #32
336: astore        45
338: aload         44
340: invokevirtual #71
343: astore        46
345: aload         27
347: aload         44
349: invokevirtual #72
352: astore        47
354: aload         27
356: invokevirtual #32
359: astore        48
361: aload_1
362: invokestatic  #18
365: aload_2
366: invokestatic  #18
369: aload_3
370: invokestatic  #18
373: aload         4
375: invokestatic  #18
378: aload         8
380: invokestatic  #18
383: aload         9
385: invokestatic  #18
388: aload         10
390: invokestatic  #18
393: aload         11
395: invokestatic  #18
398: aload         12
400: invokestatic  #18
403: aload         14
405: invokestatic  #18
408: aload         15
410: invokestatic  #18
413: aload         16
415: invokestatic  #18
418: aload         17
420: invokestatic  #18
423: aload         18
425: invokestatic  #18
428: aload         19
430: invokestatic  #18
433: dload         21
435: invokestatic  #38
438: invokestatic  #39
441: dload         23
443: invokestatic  #38
446: invokestatic  #39
449: aload         25
451: invokestatic  #18
454: aload         26
456: invokestatic  #18
459: aload         28
461: invokestatic  #18
464: aload         29
466: invokestatic  #18
469: aload         30
471: invokestatic  #18
474: aload         31
476: invokestatic  #18
479: aload         33
481: invokestatic  #18
484: aload         34
486: invokestatic  #18
489: aload         35
491: invokestatic  #18
494: aload         36
496: invokestatic  #18
499: aload         37
501: invokestatic  #18
504: aload         38
506: invokestatic  #18
509: dload         40
511: invokestatic  #38
514: invokestatic  #39
517: dload         42
519: invokestatic  #38
522: invokestatic  #39
525: aload         44
527: invokestatic  #18
530: aload         45
532: invokestatic  #18
535: aload         46
537: invokestatic  #18
540: aload         47
542: invokestatic  #18
545: aload         48
547: invokestatic  #18
550: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test032
Start line: 2449
End line: 2602
Method source code: 
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList22 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet23 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList22);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion25 = polyhedronsSet23.buildNew(euclidean3DBSPTree24);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree27 = polyhedronsSet23.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet28 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree27);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList29 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet30 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList29);
        double double31 = polyhedronsSet30.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree34 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion35 = polyhedronsSet33.buildNew(euclidean3DBSPTree34);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = polyhedronsSet33.getTree(false);
        boolean boolean38 = polyhedronsSet30.isEmpty(euclidean3DBSPTree37);
        boolean boolean39 = polyhedronsSet28.isEmpty(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = euclidean3DBSPTree37.getCut();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion41 = euclidean3DAbstractRegion21.buildNew(euclidean3DBSPTree37);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList42 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet43 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList42);
        double double44 = polyhedronsSet43.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = vector3D54.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane56 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D52, vector3D55);
        double double57 = vector3D50.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        double double58 = plane49.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane59 = plane49.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion60 = subPlane59.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane61 = polyhedronsSet43.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane59);
        double double62 = polyhedronsSet43.getBoundarySize();
        boolean boolean63 = polyhedronsSet43.isEmpty();
        boolean boolean64 = euclidean3DAbstractRegion21.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) polyhedronsSet43);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList65 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet66 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList65);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree67 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion68 = polyhedronsSet66.buildNew(euclidean3DBSPTree67);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree70 = polyhedronsSet66.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D74.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D76.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane78 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D74, vector3D77);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D73, vector3D77);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = vector3D80.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = vector3D82.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane84 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D80, vector3D83);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = vector3D73.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D71.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D83);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet87 = polyhedronsSet66.translate(vector3D86);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree89 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((java.lang.Object) 0.1833403984568501d);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet90 = polyhedronsSet66.buildNew(euclidean3DBSPTree89);
        boolean boolean91 = euclidean3DAbstractRegion21.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) polyhedronsSet66);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DRegion25);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion35);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(euclidean3DSubHyperplane40);
        org.junit.Assert.assertNotNull(euclidean3DRegion41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(subPlane59);
        org.junit.Assert.assertNotNull(euclidean2DRegion60);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclidean3DRegion68);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(polyhedronsSet87);
        org.junit.Assert.assertNotNull(polyhedronsSet90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #147
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: aconst_null
173: astore        24
175: aload_2
176: aload         24
178: invokevirtual #148
181: astore        25
183: new           #25
186: dup
187: invokespecial #26
190: astore        26
192: new           #8
195: dup
196: aload         26
198: invokespecial #27
201: astore        27
203: aconst_null
204: astore        28
206: aload         27
208: aload         28
210: invokevirtual #29
213: astore        29
215: aload         27
217: iconst_0
218: invokevirtual #30
221: astore        30
223: new           #8
226: dup
227: aload         30
229: invokespecial #9
232: astore        31
234: new           #25
237: dup
238: invokespecial #26
241: astore        32
243: new           #8
246: dup
247: aload         32
249: invokespecial #27
252: astore        33
254: aload         33
256: invokevirtual #28
259: dstore        34
261: new           #25
264: dup
265: invokespecial #26
268: astore        36
270: new           #8
273: dup
274: aload         36
276: invokespecial #27
279: astore        37
281: aconst_null
282: astore        38
284: aload         37
286: aload         38
288: invokevirtual #29
291: astore        39
293: aload         37
295: iconst_0
296: invokevirtual #30
299: astore        40
301: aload         33
303: aload         40
305: invokevirtual #31
308: istore        41
310: aload         31
312: aload         40
314: invokevirtual #31
317: istore        42
319: aload         40
321: invokevirtual #149
324: astore        43
326: aload         25
328: aload         40
330: invokevirtual #150
333: astore        44
335: new           #25
338: dup
339: invokespecial #26
342: astore        45
344: new           #8
347: dup
348: aload         45
350: invokespecial #27
353: astore        46
355: aload         46
357: invokevirtual #28
360: dstore        47
362: getstatic     #10
365: astore        49
367: aload         49
369: invokevirtual #11
372: astore        50
374: getstatic     #10
377: astore        51
379: aload         51
381: invokevirtual #11
384: astore        52
386: new           #12
389: dup
390: aload         49
392: aload         52
394: invokespecial #13
397: astore        53
399: getstatic     #10
402: astore        54
404: aload         54
406: invokevirtual #11
409: astore        55
411: getstatic     #10
414: astore        56
416: aload         56
418: invokevirtual #11
421: astore        57
423: getstatic     #10
426: astore        58
428: aload         58
430: invokevirtual #11
433: astore        59
435: new           #12
438: dup
439: aload         56
441: aload         59
443: invokespecial #13
446: astore        60
448: aload         54
450: aload         59
452: invokevirtual #22
455: dstore        61
457: aload         53
459: aload         59
461: invokevirtual #23
464: dstore        63
466: aload         53
468: invokevirtual #24
471: astore        65
473: aload         65
475: invokevirtual #32
478: astore        66
480: aload         46
482: aload         65
484: invokevirtual #73
487: astore        67
489: aload         46
491: invokevirtual #28
494: dstore        68
496: aload         46
498: invokevirtual #151
501: istore        70
503: aload         25
505: aload         46
507: invokevirtual #152
510: istore        71
512: new           #25
515: dup
516: invokespecial #26
519: astore        72
521: new           #8
524: dup
525: aload         72
527: invokespecial #27
530: astore        73
532: aconst_null
533: astore        74
535: aload         73
537: aload         74
539: invokevirtual #29
542: astore        75
544: aload         73
546: iconst_0
547: invokevirtual #30
550: astore        76
552: getstatic     #10
555: astore        77
557: getstatic     #10
560: astore        78
562: getstatic     #10
565: astore        79
567: aload         79
569: invokevirtual #11
572: astore        80
574: getstatic     #10
577: astore        81
579: aload         81
581: invokevirtual #11
584: astore        82
586: new           #12
589: dup
590: aload         79
592: aload         82
594: invokespecial #13
597: astore        83
599: aload         78
601: aload         82
603: invokestatic  #96
606: astore        84
608: getstatic     #10
611: astore        85
613: aload         85
615: invokevirtual #11
618: astore        86
620: getstatic     #10
623: astore        87
625: aload         87
627: invokevirtual #11
630: astore        88
632: new           #12
635: dup
636: aload         85
638: aload         88
640: invokespecial #13
643: astore        89
645: aload         78
647: aload         88
649: invokevirtual #111
652: astore        90
654: aload         77
656: dconst_1
657: aload         88
659: invokevirtual #112
662: astore        91
664: aload         73
666: aload         91
668: invokevirtual #153
671: astore        92
673: new           #33
676: dup
677: ldc2_w        #154
680: invokestatic  #156
683: invokespecial #157
686: astore        93
688: aload         73
690: aload         93
692: invokevirtual #29
695: astore        94
697: aload         25
699: aload         73
701: invokevirtual #152
704: istore        95
706: new           #40
709: dup
710: invokespecial #41
713: ldc           #42
715: invokevirtual #43
718: dload_3
719: invokevirtual #44
722: ldc           #45
724: invokevirtual #43
727: dconst_0
728: invokevirtual #44
731: ldc           #42
733: invokevirtual #43
736: invokevirtual #46
739: dload_3
740: dconst_0
741: dcmpl
742: ifne          749
745: iconst_1
746: goto          750
749: iconst_0
750: invokestatic  #47
753: aload         5
755: invokestatic  #18
758: aload         6
760: invokestatic  #18
763: aload         7
765: invokestatic  #18
768: aload         8
770: invokestatic  #18
773: aload         10
775: invokestatic  #18
778: aload         11
780: invokestatic  #18
783: aload         12
785: invokestatic  #18
788: aload         13
790: invokestatic  #18
793: aload         14
795: invokestatic  #18
798: aload         15
800: invokestatic  #18
803: dload         17
805: invokestatic  #38
808: invokestatic  #39
811: dload         19
813: invokestatic  #38
816: invokestatic  #39
819: aload         21
821: invokestatic  #18
824: aload         22
826: invokestatic  #18
829: aload         23
831: invokestatic  #18
834: aload         25
836: invokestatic  #18
839: aload         29
841: invokestatic  #18
844: aload         30
846: invokestatic  #18
849: new           #40
852: dup
853: invokespecial #41
856: ldc           #42
858: invokevirtual #43
861: dload         34
863: invokevirtual #44
866: ldc           #45
868: invokevirtual #43
871: dconst_0
872: invokevirtual #44
875: ldc           #42
877: invokevirtual #43
880: invokevirtual #46
883: dload         34
885: dconst_0
886: dcmpl
887: ifne          894
890: iconst_1
891: goto          895
894: iconst_0
895: invokestatic  #47
898: aload         39
900: invokestatic  #18
903: aload         40
905: invokestatic  #18
908: new           #40
911: dup
912: invokespecial #41
915: ldc           #42
917: invokevirtual #43
920: iload         41
922: invokevirtual #48
925: ldc           #45
927: invokevirtual #43
930: iconst_0
931: invokevirtual #48
934: ldc           #42
936: invokevirtual #43
939: invokevirtual #46
942: iload         41
944: ifne          951
947: iconst_1
948: goto          952
951: iconst_0
952: invokestatic  #47
955: new           #40
958: dup
959: invokespecial #41
962: ldc           #42
964: invokevirtual #43
967: iload         42
969: invokevirtual #48
972: ldc           #45
974: invokevirtual #43
977: iconst_0
978: invokevirtual #48
981: ldc           #42
983: invokevirtual #43
986: invokevirtual #46
989: iload         42
991: ifne          998
994: iconst_1
995: goto          999
998: iconst_0
999: invokestatic  #47
1002: aload         43
1004: invokestatic  #78
1007: aload         44
1009: invokestatic  #18
1012: new           #40
1015: dup
1016: invokespecial #41
1019: ldc           #42
1021: invokevirtual #43
1024: dload         47
1026: invokevirtual #44
1029: ldc           #45
1031: invokevirtual #43
1034: dconst_0
1035: invokevirtual #44
1038: ldc           #42
1040: invokevirtual #43
1043: invokevirtual #46
1046: dload         47
1048: dconst_0
1049: dcmpl
1050: ifne          1057
1053: iconst_1
1054: goto          1058
1057: iconst_0
1058: invokestatic  #47
1061: aload         49
1063: invokestatic  #18
1066: aload         50
1068: invokestatic  #18
1071: aload         51
1073: invokestatic  #18
1076: aload         52
1078: invokestatic  #18
1081: aload         54
1083: invokestatic  #18
1086: aload         55
1088: invokestatic  #18
1091: aload         56
1093: invokestatic  #18
1096: aload         57
1098: invokestatic  #18
1101: aload         58
1103: invokestatic  #18
1106: aload         59
1108: invokestatic  #18
1111: dload         61
1113: invokestatic  #38
1116: invokestatic  #39
1119: dload         63
1121: invokestatic  #38
1124: invokestatic  #39
1127: aload         65
1129: invokestatic  #18
1132: aload         66
1134: invokestatic  #18
1137: aload         67
1139: invokestatic  #18
1142: new           #40
1145: dup
1146: invokespecial #41
1149: ldc           #42
1151: invokevirtual #43
1154: dload         68
1156: invokevirtual #44
1159: ldc           #45
1161: invokevirtual #43
1164: dconst_0
1165: invokevirtual #44
1168: ldc           #42
1170: invokevirtual #43
1173: invokevirtual #46
1176: dload         68
1178: dconst_0
1179: dcmpl
1180: ifne          1187
1183: iconst_1
1184: goto          1188
1187: iconst_0
1188: invokestatic  #47
1191: new           #40
1194: dup
1195: invokespecial #41
1198: ldc           #42
1200: invokevirtual #43
1203: iload         70
1205: invokevirtual #48
1208: ldc           #45
1210: invokevirtual #43
1213: iconst_0
1214: invokevirtual #48
1217: ldc           #42
1219: invokevirtual #43
1222: invokevirtual #46
1225: iload         70
1227: ifne          1234
1230: iconst_1
1231: goto          1235
1234: iconst_0
1235: invokestatic  #47
1238: new           #40
1241: dup
1242: invokespecial #41
1245: ldc           #42
1247: invokevirtual #43
1250: iload         71
1252: invokevirtual #48
1255: ldc           #45
1257: invokevirtual #43
1260: iconst_1
1261: invokevirtual #48
1264: ldc           #42
1266: invokevirtual #43
1269: invokevirtual #46
1272: iload         71
1274: iconst_1
1275: if_icmpne     1282
1278: iconst_1
1279: goto          1283
1282: iconst_0
1283: invokestatic  #47
1286: aload         75
1288: invokestatic  #18
1291: aload         76
1293: invokestatic  #18
1296: aload         77
1298: invokestatic  #18
1301: aload         78
1303: invokestatic  #18
1306: aload         79
1308: invokestatic  #18
1311: aload         80
1313: invokestatic  #18
1316: aload         81
1318: invokestatic  #18
1321: aload         82
1323: invokestatic  #18
1326: aload         84
1328: invokestatic  #18
1331: aload         85
1333: invokestatic  #18
1336: aload         86
1338: invokestatic  #18
1341: aload         87
1343: invokestatic  #18
1346: aload         88
1348: invokestatic  #18
1351: aload         90
1353: invokestatic  #18
1356: aload         91
1358: invokestatic  #18
1361: aload         92
1363: invokestatic  #18
1366: aload         94
1368: invokestatic  #18
1371: new           #40
1374: dup
1375: invokespecial #41
1378: ldc           #42
1380: invokevirtual #43
1383: iload         95
1385: invokevirtual #48
1388: ldc           #45
1390: invokevirtual #43
1393: iconst_1
1394: invokevirtual #48
1397: ldc           #42
1399: invokevirtual #43
1402: invokevirtual #46
1405: iload         95
1407: iconst_1
1408: if_icmpne     1415
1411: iconst_1
1412: goto          1416
1415: iconst_0
1416: invokestatic  #47
1419: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test033
Start line: 2605
End line: 2620
Method source code: 
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean2 = polygonsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet1);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = polygonsSet0.isEmpty(euclidean2DBSPTree3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #158
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: new           #56
35: dup
36: invokespecial #87
39: astore_2
40: aload_1
41: aload_2
42: invokevirtual #88
45: istore_3
46: aconst_null
47: astore        4
49: aload_1
50: aload         4
52: invokevirtual #90
55: istore        5
57: ldc           #15
59: invokestatic  #16
62: goto          67
65: astore        5
67: new           #40
70: dup
71: invokespecial #41
74: ldc           #42
76: invokevirtual #43
79: iload_3
80: invokevirtual #48
83: ldc           #45
85: invokevirtual #43
88: iconst_1
89: invokevirtual #48
92: ldc           #42
94: invokevirtual #43
97: invokevirtual #46
100: iload_3
101: iconst_1
102: if_icmpne     109
105: iconst_1
106: goto          110
109: iconst_0
110: invokestatic  #47
113: return
Exception table:
from    to  target type
49    62    65   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test034
Start line: 2623
End line: 2664
Method source code: 
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion20 = subPlane17.getRemainingRegion();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean2DRegion20);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #159
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: aload         21
174: invokevirtual #32
177: astore        24
179: new           #40
182: dup
183: invokespecial #41
186: ldc           #42
188: invokevirtual #43
191: dload_3
192: invokevirtual #44
195: ldc           #45
197: invokevirtual #43
200: dconst_0
201: invokevirtual #44
204: ldc           #42
206: invokevirtual #43
209: invokevirtual #46
212: dload_3
213: dconst_0
214: dcmpl
215: ifne          222
218: iconst_1
219: goto          223
222: iconst_0
223: invokestatic  #47
226: aload         5
228: invokestatic  #18
231: aload         6
233: invokestatic  #18
236: aload         7
238: invokestatic  #18
241: aload         8
243: invokestatic  #18
246: aload         10
248: invokestatic  #18
251: aload         11
253: invokestatic  #18
256: aload         12
258: invokestatic  #18
261: aload         13
263: invokestatic  #18
266: aload         14
268: invokestatic  #18
271: aload         15
273: invokestatic  #18
276: dload         17
278: invokestatic  #38
281: invokestatic  #39
284: dload         19
286: invokestatic  #38
289: invokestatic  #39
292: aload         21
294: invokestatic  #18
297: aload         22
299: invokestatic  #18
302: aload         23
304: invokestatic  #18
307: aload         24
309: invokestatic  #18
312: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test035
Start line: 2667
End line: 2673
Method source code: 
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector1 = polygonsSet0.getBarycenter();
        org.junit.Assert.assertNotNull(euclidean2DVector1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #160
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: aload_1
33: invokevirtual #89
36: astore_2
37: aload_2
38: invokestatic  #18
41: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test036
Start line: 2676
End line: 2680
Method source code: 
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet4 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet(1.8163011535675582d, 21.0d, 0.5998406268185329d, (double) 35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #161
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: ldc2_w        #162
31: ldc2_w        #164
34: ldc2_w        #166
37: ldc2_w        #168
40: invokespecial #170
43: astore_1
44: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test037
Start line: 2683
End line: 2735
Method source code: 
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTreeVisitor24 = null;
        // The following exception was thrown during execution in test generation
        try {
            euclidean3DBSPTree23.visit(euclidean3DBSPTreeVisitor24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #171
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: aconst_null
173: astore        24
175: aload_2
176: aload         24
178: invokevirtual #148
181: astore        25
183: aload_2
184: iconst_0
185: invokevirtual #30
188: astore        26
190: aconst_null
191: astore        27
193: aload         26
195: aload         27
197: invokevirtual #75
200: ldc           #15
202: invokestatic  #16
205: goto          210
208: astore        28
210: new           #40
213: dup
214: invokespecial #41
217: ldc           #42
219: invokevirtual #43
222: dload_3
223: invokevirtual #44
226: ldc           #45
228: invokevirtual #43
231: dconst_0
232: invokevirtual #44
235: ldc           #42
237: invokevirtual #43
240: invokevirtual #46
243: dload_3
244: dconst_0
245: dcmpl
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #47
257: aload         5
259: invokestatic  #18
262: aload         6
264: invokestatic  #18
267: aload         7
269: invokestatic  #18
272: aload         8
274: invokestatic  #18
277: aload         10
279: invokestatic  #18
282: aload         11
284: invokestatic  #18
287: aload         12
289: invokestatic  #18
292: aload         13
294: invokestatic  #18
297: aload         14
299: invokestatic  #18
302: aload         15
304: invokestatic  #18
307: dload         17
309: invokestatic  #38
312: invokestatic  #39
315: dload         19
317: invokestatic  #38
320: invokestatic  #39
323: aload         21
325: invokestatic  #18
328: aload         22
330: invokestatic  #18
333: aload         23
335: invokestatic  #18
338: aload         25
340: invokestatic  #18
343: aload         26
345: invokestatic  #18
348: return
Exception table:
from    to  target type
193   205   208   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test038
Start line: 2738
End line: 2798
Method source code: 
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree2 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion3 = polyhedronsSet1.buildNew(euclidean3DBSPTree2);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree5 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet6 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree5);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList7 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet8 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList7);
        double double9 = polyhedronsSet8.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane21 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D17, vector3D20);
        double double22 = vector3D15.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D20);
        double double23 = plane14.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane24 = plane14.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion25 = subPlane24.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane26 = polyhedronsSet8.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane24);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform27 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion28 = polyhedronsSet8.applyTransform(euclidean3DTransform27);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = polyhedronsSet8.getTree(false);
        org.apache.commons.math3.geometry.partitioning.BSPTree.LeafMerger<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DLeafMerger31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree32 = euclidean3DBSPTree5.merge(euclidean3DBSPTree30, euclidean3DLeafMerger31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(euclidean3DRegion3);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(subPlane24);
        org.junit.Assert.assertNotNull(euclidean2DRegion25);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane26);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion28);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree30);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #172
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aconst_null
42: astore_3
43: aload_2
44: aload_3
45: invokevirtual #29
48: astore        4
50: aload_2
51: iconst_0
52: invokevirtual #30
55: astore        5
57: new           #8
60: dup
61: aload         5
63: invokespecial #9
66: astore        6
68: new           #25
71: dup
72: invokespecial #26
75: astore        7
77: new           #8
80: dup
81: aload         7
83: invokespecial #27
86: astore        8
88: aload         8
90: invokevirtual #28
93: dstore        9
95: getstatic     #10
98: astore        11
100: aload         11
102: invokevirtual #11
105: astore        12
107: getstatic     #10
110: astore        13
112: aload         13
114: invokevirtual #11
117: astore        14
119: new           #12
122: dup
123: aload         11
125: aload         14
127: invokespecial #13
130: astore        15
132: getstatic     #10
135: astore        16
137: aload         16
139: invokevirtual #11
142: astore        17
144: getstatic     #10
147: astore        18
149: aload         18
151: invokevirtual #11
154: astore        19
156: getstatic     #10
159: astore        20
161: aload         20
163: invokevirtual #11
166: astore        21
168: new           #12
171: dup
172: aload         18
174: aload         21
176: invokespecial #13
179: astore        22
181: aload         16
183: aload         21
185: invokevirtual #22
188: dstore        23
190: aload         15
192: aload         21
194: invokevirtual #23
197: dstore        25
199: aload         15
201: invokevirtual #24
204: astore        27
206: aload         27
208: invokevirtual #32
211: astore        28
213: aload         8
215: aload         27
217: invokevirtual #73
220: astore        29
222: aconst_null
223: astore        30
225: aload         8
227: aload         30
229: invokevirtual #148
232: astore        31
234: aload         8
236: iconst_0
237: invokevirtual #30
240: astore        32
242: aconst_null
243: astore        33
245: aload         5
247: aload         32
249: aload         33
251: invokevirtual #173
254: astore        34
256: ldc           #15
258: invokestatic  #16
261: goto          266
264: astore        34
266: aload         4
268: invokestatic  #18
271: aload         5
273: invokestatic  #18
276: new           #40
279: dup
280: invokespecial #41
283: ldc           #42
285: invokevirtual #43
288: dload         9
290: invokevirtual #44
293: ldc           #45
295: invokevirtual #43
298: dconst_0
299: invokevirtual #44
302: ldc           #42
304: invokevirtual #43
307: invokevirtual #46
310: dload         9
312: dconst_0
313: dcmpl
314: ifne          321
317: iconst_1
318: goto          322
321: iconst_0
322: invokestatic  #47
325: aload         11
327: invokestatic  #18
330: aload         12
332: invokestatic  #18
335: aload         13
337: invokestatic  #18
340: aload         14
342: invokestatic  #18
345: aload         16
347: invokestatic  #18
350: aload         17
352: invokestatic  #18
355: aload         18
357: invokestatic  #18
360: aload         19
362: invokestatic  #18
365: aload         20
367: invokestatic  #18
370: aload         21
372: invokestatic  #18
375: dload         23
377: invokestatic  #38
380: invokestatic  #39
383: dload         25
385: invokestatic  #38
388: invokestatic  #39
391: aload         27
393: invokestatic  #18
396: aload         28
398: invokestatic  #18
401: aload         29
403: invokestatic  #18
406: aload         31
408: invokestatic  #18
411: aload         32
413: invokestatic  #18
416: return
Exception table:
from    to  target type
245   261   264   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test039
Start line: 2801
End line: 2958
Method source code: 
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0.428182669496151d, 0.0d);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane24 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D20, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D19, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D19.getZero();
        double double27 = vector3D19.getY();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane41 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D37, vector3D40);
        double double42 = vector3D35.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0d, vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D31.subtract(83.24061508662703d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.Line line45 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D19, vector3D31);
        double double46 = vector3D18.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19);
        boolean boolean47 = plane4.contains(vector3D19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane52 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D48, vector3D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line57 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D55, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = plane52.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D55);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D59.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane63 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D59, vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = vector3D66.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane70 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D66, vector3D69);
        double double71 = vector3D64.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69);
        double double72 = plane63.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69);
        plane63.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D74.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D76.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane78 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D74, vector3D77);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D79.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D83.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane85 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D81, vector3D84);
        double double86 = vector3D79.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84);
        double double87 = plane78.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84);
        plane78.revertSelf();
        double double89 = plane63.getOffset(plane78);
        org.apache.commons.math3.geometry.euclidean.threed.Line line90 = plane52.intersection(plane63);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = plane4.intersection(line90);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D92 = line90.getOrigin();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(line90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(vector3D92);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #174
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: aload         5
131: invokevirtual #20
134: new           #175
137: dup
138: ldc2_w        #176
141: dconst_0
142: invokespecial #178
145: astore        18
147: getstatic     #10
150: astore        19
152: getstatic     #10
155: astore        20
157: aload         20
159: invokevirtual #11
162: astore        21
164: getstatic     #10
167: astore        22
169: aload         22
171: invokevirtual #11
174: astore        23
176: new           #12
179: dup
180: aload         20
182: aload         23
184: invokespecial #13
187: astore        24
189: aload         19
191: aload         23
193: invokestatic  #96
196: astore        25
198: aload         19
200: invokevirtual #110
203: astore        26
205: aload         19
207: invokevirtual #179
210: dstore        27
212: getstatic     #10
215: astore        29
217: aload         29
219: invokevirtual #11
222: astore        30
224: getstatic     #10
227: astore        31
229: aload         31
231: invokevirtual #11
234: astore        32
236: new           #12
239: dup
240: aload         29
242: aload         32
244: invokespecial #13
247: astore        33
249: getstatic     #10
252: astore        34
254: aload         34
256: invokevirtual #11
259: astore        35
261: getstatic     #10
264: astore        36
266: aload         36
268: invokevirtual #11
271: astore        37
273: getstatic     #10
276: astore        38
278: aload         38
280: invokevirtual #11
283: astore        39
285: new           #12
288: dup
289: aload         36
291: aload         39
293: invokespecial #13
296: astore        40
298: aload         34
300: aload         39
302: invokevirtual #22
305: dstore        41
307: new           #175
310: dup
311: dconst_1
312: aload         34
314: invokespecial #180
317: astore        43
319: aload         32
321: ldc2_w        #53
324: aload         34
326: invokevirtual #181
329: astore        44
331: new           #182
334: dup
335: aload         19
337: aload         32
339: invokespecial #183
342: astore        45
344: aload         18
346: aload         19
348: invokevirtual #184
351: dstore        46
353: aload         5
355: aload         19
357: invokevirtual #185
360: istore        48
362: getstatic     #10
365: astore        49
367: aload         49
369: invokevirtual #11
372: astore        50
374: getstatic     #10
377: astore        51
379: aload         51
381: invokevirtual #11
384: astore        52
386: new           #12
389: dup
390: aload         49
392: aload         52
394: invokespecial #13
397: astore        53
399: new           #60
402: dup
403: dconst_0
404: ldc2_w        #61
407: invokespecial #63
410: astore        54
412: new           #64
415: dup
416: aload         54
418: dconst_0
419: invokespecial #65
422: astore        55
424: aload         53
426: aload         54
428: invokevirtual #66
431: astore        56
433: getstatic     #10
436: astore        57
438: aload         57
440: invokevirtual #11
443: astore        58
445: getstatic     #10
448: astore        59
450: aload         59
452: invokevirtual #11
455: astore        60
457: new           #12
460: dup
461: aload         57
463: aload         60
465: invokespecial #13
468: astore        61
470: getstatic     #10
473: astore        62
475: aload         62
477: invokevirtual #11
480: astore        63
482: getstatic     #10
485: astore        64
487: aload         64
489: invokevirtual #11
492: astore        65
494: getstatic     #10
497: astore        66
499: aload         66
501: invokevirtual #11
504: astore        67
506: new           #12
509: dup
510: aload         64
512: aload         67
514: invokespecial #13
517: astore        68
519: aload         62
521: aload         67
523: invokevirtual #22
526: dstore        69
528: aload         61
530: aload         67
532: invokevirtual #23
535: dstore        71
537: aload         61
539: invokevirtual #20
542: getstatic     #10
545: astore        73
547: aload         73
549: invokevirtual #11
552: astore        74
554: getstatic     #10
557: astore        75
559: aload         75
561: invokevirtual #11
564: astore        76
566: new           #12
569: dup
570: aload         73
572: aload         76
574: invokespecial #13
577: astore        77
579: getstatic     #10
582: astore        78
584: aload         78
586: invokevirtual #11
589: astore        79
591: getstatic     #10
594: astore        80
596: aload         80
598: invokevirtual #11
601: astore        81
603: getstatic     #10
606: astore        82
608: aload         82
610: invokevirtual #11
613: astore        83
615: new           #12
618: dup
619: aload         80
621: aload         83
623: invokespecial #13
626: astore        84
628: aload         78
630: aload         83
632: invokevirtual #22
635: dstore        85
637: aload         77
639: aload         83
641: invokevirtual #23
644: dstore        87
646: aload         77
648: invokevirtual #20
651: aload         61
653: aload         77
655: invokevirtual #82
658: dstore        89
660: aload         53
662: aload         61
664: invokevirtual #134
667: astore        91
669: aload         5
671: aload         91
673: invokevirtual #186
676: astore        92
678: aload         91
680: invokevirtual #187
683: astore        93
685: aload_1
686: invokestatic  #18
689: aload_2
690: invokestatic  #18
693: aload_3
694: invokestatic  #18
697: aload         4
699: invokestatic  #18
702: aload         6
704: invokestatic  #18
707: aload         7
709: invokestatic  #18
712: aload         8
714: invokestatic  #18
717: aload         9
719: invokestatic  #18
722: aload         10
724: invokestatic  #18
727: aload         11
729: invokestatic  #18
732: dload         13
734: invokestatic  #38
737: invokestatic  #39
740: dload         15
742: invokestatic  #38
745: invokestatic  #39
748: aload         17
750: invokestatic  #18
753: aload         19
755: invokestatic  #18
758: aload         20
760: invokestatic  #18
763: aload         21
765: invokestatic  #18
768: aload         22
770: invokestatic  #18
773: aload         23
775: invokestatic  #18
778: aload         25
780: invokestatic  #18
783: aload         26
785: invokestatic  #18
788: dload         27
790: invokestatic  #38
793: invokestatic  #39
796: aload         29
798: invokestatic  #18
801: aload         30
803: invokestatic  #18
806: aload         31
808: invokestatic  #18
811: aload         32
813: invokestatic  #18
816: aload         34
818: invokestatic  #18
821: aload         35
823: invokestatic  #18
826: aload         36
828: invokestatic  #18
831: aload         37
833: invokestatic  #18
836: aload         38
838: invokestatic  #18
841: aload         39
843: invokestatic  #18
846: dload         41
848: invokestatic  #38
851: invokestatic  #39
854: aload         44
856: invokestatic  #18
859: dload         46
861: invokestatic  #38
864: invokestatic  #39
867: new           #40
870: dup
871: invokespecial #41
874: ldc           #42
876: invokevirtual #43
879: iload         48
881: invokevirtual #48
884: ldc           #45
886: invokevirtual #43
889: iconst_0
890: invokevirtual #48
893: ldc           #42
895: invokevirtual #43
898: invokevirtual #46
901: iload         48
903: ifne          910
906: iconst_1
907: goto          911
910: iconst_0
911: invokestatic  #47
914: aload         49
916: invokestatic  #18
919: aload         50
921: invokestatic  #18
924: aload         51
926: invokestatic  #18
929: aload         52
931: invokestatic  #18
934: aload         56
936: invokestatic  #18
939: aload         57
941: invokestatic  #18
944: aload         58
946: invokestatic  #18
949: aload         59
951: invokestatic  #18
954: aload         60
956: invokestatic  #18
959: aload         62
961: invokestatic  #18
964: aload         63
966: invokestatic  #18
969: aload         64
971: invokestatic  #18
974: aload         65
976: invokestatic  #18
979: aload         66
981: invokestatic  #18
984: aload         67
986: invokestatic  #18
989: dload         69
991: invokestatic  #38
994: invokestatic  #39
997: dload         71
999: invokestatic  #38
1002: invokestatic  #39
1005: aload         73
1007: invokestatic  #18
1010: aload         74
1012: invokestatic  #18
1015: aload         75
1017: invokestatic  #18
1020: aload         76
1022: invokestatic  #18
1025: aload         78
1027: invokestatic  #18
1030: aload         79
1032: invokestatic  #18
1035: aload         80
1037: invokestatic  #18
1040: aload         81
1042: invokestatic  #18
1045: aload         82
1047: invokestatic  #18
1050: aload         83
1052: invokestatic  #18
1055: dload         85
1057: invokestatic  #38
1060: invokestatic  #39
1063: dload         87
1065: invokestatic  #38
1068: invokestatic  #39
1071: dload         89
1073: invokestatic  #38
1076: invokestatic  #39
1079: aload         91
1081: invokestatic  #18
1084: aload         92
1086: invokestatic  #18
1089: aload         93
1091: invokestatic  #18
1094: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test040
Start line: 2961
End line: 3035
Method source code: 
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet37 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree39 = polyhedronsSet37.getTree(true);
        org.apache.commons.math3.util.MathUtils.checkNotNull((java.lang.Object) polyhedronsSet37);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree39);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #188
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: aload         18
136: invokevirtual #11
139: astore        19
141: getstatic     #10
144: astore        20
146: aload         20
148: invokevirtual #11
151: astore        21
153: new           #12
156: dup
157: aload         18
159: aload         21
161: invokespecial #13
164: astore        22
166: getstatic     #10
169: astore        23
171: aload         23
173: invokevirtual #11
176: astore        24
178: getstatic     #10
181: astore        25
183: aload         25
185: invokevirtual #11
188: astore        26
190: getstatic     #10
193: astore        27
195: aload         27
197: invokevirtual #11
200: astore        28
202: new           #12
205: dup
206: aload         25
208: aload         28
210: invokespecial #13
213: astore        29
215: aload         23
217: aload         28
219: invokevirtual #22
222: dstore        30
224: aload         22
226: aload         28
228: invokevirtual #23
231: dstore        32
233: aload         22
235: invokevirtual #24
238: astore        34
240: aload         34
242: invokevirtual #32
245: astore        35
247: aload         34
249: invokevirtual #71
252: astore        36
254: new           #25
257: dup
258: invokespecial #26
261: astore        37
263: aload         37
265: aload         17
267: invokevirtual #189
270: istore        38
272: aload         37
274: aload         34
276: invokevirtual #189
279: istore        39
281: new           #8
284: dup
285: aload         37
287: invokespecial #27
290: astore        40
292: new           #8
295: dup
296: aload         37
298: invokespecial #27
301: astore        41
303: new           #8
306: dup
307: aload         37
309: invokespecial #27
312: astore        42
314: aload         42
316: iconst_1
317: invokevirtual #30
320: astore        43
322: aload         42
324: invokestatic  #80
327: aload_1
328: invokestatic  #18
331: aload_2
332: invokestatic  #18
335: aload_3
336: invokestatic  #18
339: aload         4
341: invokestatic  #18
344: aload         6
346: invokestatic  #18
349: aload         7
351: invokestatic  #18
354: aload         8
356: invokestatic  #18
359: aload         9
361: invokestatic  #18
364: aload         10
366: invokestatic  #18
369: aload         11
371: invokestatic  #18
374: dload         13
376: invokestatic  #38
379: invokestatic  #39
382: dload         15
384: invokestatic  #38
387: invokestatic  #39
390: aload         17
392: invokestatic  #18
395: aload         18
397: invokestatic  #18
400: aload         19
402: invokestatic  #18
405: aload         20
407: invokestatic  #18
410: aload         21
412: invokestatic  #18
415: aload         23
417: invokestatic  #18
420: aload         24
422: invokestatic  #18
425: aload         25
427: invokestatic  #18
430: aload         26
432: invokestatic  #18
435: aload         27
437: invokestatic  #18
440: aload         28
442: invokestatic  #18
445: dload         30
447: invokestatic  #38
450: invokestatic  #39
453: dload         32
455: invokestatic  #38
458: invokestatic  #39
461: aload         34
463: invokestatic  #18
466: aload         35
468: invokestatic  #18
471: aload         36
473: invokestatic  #18
476: new           #40
479: dup
480: invokespecial #41
483: ldc           #42
485: invokevirtual #43
488: iload         38
490: invokevirtual #48
493: ldc           #45
495: invokevirtual #43
498: iconst_1
499: invokevirtual #48
502: ldc           #42
504: invokevirtual #43
507: invokevirtual #46
510: iload         38
512: iconst_1
513: if_icmpne     520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #47
524: new           #40
527: dup
528: invokespecial #41
531: ldc           #42
533: invokevirtual #43
536: iload         39
538: invokevirtual #48
541: ldc           #45
543: invokevirtual #43
546: iconst_1
547: invokevirtual #48
550: ldc           #42
552: invokevirtual #43
555: invokevirtual #46
558: iload         39
560: iconst_1
561: if_icmpne     568
564: iconst_1
565: goto          569
568: iconst_0
569: invokestatic  #47
572: aload         43
574: invokestatic  #18
577: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test041
Start line: 3038
End line: 3107
Method source code: 
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = vector3D1.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane5 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D1, vector3D4);
        plane5.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D9, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D8, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D8.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D15);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector17 = plane5.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D7);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane18 = plane5.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = plane5.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line24 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D22, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line29 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D27, (double) 0.0f);
        boolean boolean30 = line24.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line40 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D38, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = plane35.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D38);
        double double42 = line29.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str46 = vector2D45.toString();
        double double47 = vector2D38.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D45);
        double double48 = vector2D45.getNormInf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = plane19.getPointAt(vector2D45, 1.5232132235179132d);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D51 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(10.0d, vector2D45);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(euclidean2DVector17);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane18);
        org.junit.Assert.assertNotNull(plane19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{0; -0.43}" + "'", str46, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.428182669496151d + "'", double48 == 0.428182669496151d);
        org.junit.Assert.assertNotNull(vector3D50);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #190
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: aload         5
57: invokevirtual #20
60: getstatic     #10
63: astore        6
65: getstatic     #10
68: astore        7
70: getstatic     #10
73: astore        8
75: aload         8
77: invokevirtual #11
80: astore        9
82: getstatic     #10
85: astore        10
87: aload         10
89: invokevirtual #11
92: astore        11
94: new           #12
97: dup
98: aload         8
100: aload         11
102: invokespecial #13
105: astore        12
107: aload         7
109: aload         11
111: invokestatic  #96
114: astore        13
116: aload         7
118: invokevirtual #110
121: astore        14
123: aload         6
125: aload         14
127: invokestatic  #96
130: astore        15
132: aload         5
134: aload         6
136: invokevirtual #97
139: astore        16
141: aload         5
143: invokevirtual #24
146: astore        17
148: aload         5
150: invokevirtual #130
153: astore        18
155: new           #60
158: dup
159: dconst_0
160: ldc2_w        #61
163: invokespecial #63
166: astore        19
168: new           #64
171: dup
172: aload         19
174: dconst_0
175: invokespecial #65
178: astore        20
180: new           #60
183: dup
184: dconst_0
185: ldc2_w        #61
188: invokespecial #63
191: astore        21
193: new           #64
196: dup
197: aload         21
199: dconst_0
200: invokespecial #65
203: astore        22
205: aload         20
207: aload         22
209: invokevirtual #95
212: istore        23
214: getstatic     #10
217: astore        24
219: aload         24
221: invokevirtual #11
224: astore        25
226: getstatic     #10
229: astore        26
231: aload         26
233: invokevirtual #11
236: astore        27
238: new           #12
241: dup
242: aload         24
244: aload         27
246: invokespecial #13
249: astore        28
251: new           #60
254: dup
255: dconst_0
256: ldc2_w        #61
259: invokespecial #63
262: astore        29
264: new           #64
267: dup
268: aload         29
270: dconst_0
271: invokespecial #65
274: astore        30
276: aload         28
278: aload         29
280: invokevirtual #66
283: astore        31
285: aload         22
287: aload         29
289: invokevirtual #191
292: dstore        32
294: new           #60
297: dup
298: dconst_0
299: ldc2_w        #61
302: invokespecial #63
305: astore        34
307: aload         34
309: invokevirtual #192
312: astore        35
314: aload         29
316: aload         34
318: invokevirtual #193
321: dstore        36
323: aload         34
325: invokevirtual #194
328: dstore        38
330: aload         18
332: aload         34
334: ldc2_w        #195
337: invokevirtual #197
340: astore        40
342: new           #60
345: dup
346: ldc2_w        #198
349: aload         34
351: invokespecial #200
354: astore        41
356: aload_1
357: invokestatic  #18
360: aload_2
361: invokestatic  #18
364: aload_3
365: invokestatic  #18
368: aload         4
370: invokestatic  #18
373: aload         6
375: invokestatic  #18
378: aload         7
380: invokestatic  #18
383: aload         8
385: invokestatic  #18
388: aload         9
390: invokestatic  #18
393: aload         10
395: invokestatic  #18
398: aload         11
400: invokestatic  #18
403: aload         13
405: invokestatic  #18
408: aload         14
410: invokestatic  #18
413: aload         15
415: invokestatic  #18
418: aload         16
420: invokestatic  #18
423: aload         17
425: invokestatic  #18
428: aload         18
430: invokestatic  #18
433: new           #40
436: dup
437: invokespecial #41
440: ldc           #42
442: invokevirtual #43
445: iload         23
447: invokevirtual #48
450: ldc           #45
452: invokevirtual #43
455: iconst_1
456: invokevirtual #48
459: ldc           #42
461: invokevirtual #43
464: invokevirtual #46
467: iload         23
469: iconst_1
470: if_icmpne     477
473: iconst_1
474: goto          478
477: iconst_0
478: invokestatic  #47
481: aload         24
483: invokestatic  #18
486: aload         25
488: invokestatic  #18
491: aload         26
493: invokestatic  #18
496: aload         27
498: invokestatic  #18
501: aload         31
503: invokestatic  #18
506: new           #40
509: dup
510: invokespecial #41
513: ldc           #42
515: invokevirtual #43
518: dload         32
520: invokevirtual #44
523: ldc           #45
525: invokevirtual #43
528: dconst_0
529: invokevirtual #44
532: ldc           #42
534: invokevirtual #43
537: invokevirtual #46
540: dload         32
542: dconst_0
543: dcmpl
544: ifne          551
547: iconst_1
548: goto          552
551: iconst_0
552: invokestatic  #47
555: new           #40
558: dup
559: invokespecial #41
562: ldc           #42
564: invokevirtual #43
567: aload         35
569: invokevirtual #43
572: ldc           #201
574: invokevirtual #43
577: invokevirtual #46
580: aload         35
582: ldc           #202
584: invokestatic  #203
587: new           #40
590: dup
591: invokespecial #41
594: ldc           #42
596: invokevirtual #43
599: dload         36
601: invokevirtual #44
604: ldc           #45
606: invokevirtual #43
609: dconst_0
610: invokevirtual #44
613: ldc           #42
615: invokevirtual #43
618: invokevirtual #46
621: dload         36
623: dconst_0
624: dcmpl
625: ifne          632
628: iconst_1
629: goto          633
632: iconst_0
633: invokestatic  #47
636: new           #40
639: dup
640: invokespecial #41
643: ldc           #42
645: invokevirtual #43
648: dload         38
650: invokevirtual #44
653: ldc           #45
655: invokevirtual #43
658: ldc2_w        #176
661: invokevirtual #44
664: ldc           #42
666: invokevirtual #43
669: invokevirtual #46
672: dload         38
674: ldc2_w        #176
677: dcmpl
678: ifne          685
681: iconst_1
682: goto          686
685: iconst_0
686: invokestatic  #47
689: aload         40
691: invokestatic  #18
694: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test042
Start line: 3110
End line: 3154
Method source code: 
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion15 = subPlane14.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane16 = subPlane14.getHyperplane();
        org.apache.commons.math3.util.MathUtils.checkNotNull((java.lang.Object) subPlane14);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side19 = subPlane14.side(euclidean3DHyperplane18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(euclidean2DRegion15);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #204
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: aload         17
131: invokevirtual #32
134: astore        18
136: aload         17
138: invokevirtual #71
141: astore        19
143: aload         17
145: invokestatic  #80
148: aconst_null
149: astore        20
151: aload         17
153: aload         20
155: invokevirtual #205
158: astore        21
160: ldc           #15
162: invokestatic  #16
165: goto          170
168: astore        21
170: aload_1
171: invokestatic  #18
174: aload_2
175: invokestatic  #18
178: aload_3
179: invokestatic  #18
182: aload         4
184: invokestatic  #18
187: aload         6
189: invokestatic  #18
192: aload         7
194: invokestatic  #18
197: aload         8
199: invokestatic  #18
202: aload         9
204: invokestatic  #18
207: aload         10
209: invokestatic  #18
212: aload         11
214: invokestatic  #18
217: dload         13
219: invokestatic  #38
222: invokestatic  #39
225: dload         15
227: invokestatic  #38
230: invokestatic  #39
233: aload         17
235: invokestatic  #18
238: aload         18
240: invokestatic  #18
243: aload         19
245: invokestatic  #18
248: return
Exception table:
from    to  target type
151   165   168   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test043
Start line: 3157
End line: 3264
Method source code: 
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList22 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet23 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList22);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion25 = polyhedronsSet23.buildNew(euclidean3DBSPTree24);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree27 = polyhedronsSet23.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet28 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree27);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList29 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet30 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList29);
        double double31 = polyhedronsSet30.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree34 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion35 = polyhedronsSet33.buildNew(euclidean3DBSPTree34);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = polyhedronsSet33.getTree(false);
        boolean boolean38 = polyhedronsSet30.isEmpty(euclidean3DBSPTree37);
        boolean boolean39 = polyhedronsSet28.isEmpty(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = euclidean3DBSPTree37.getCut();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion41 = euclidean3DAbstractRegion21.buildNew(euclidean3DBSPTree37);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList42 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet43 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList42);
        double double44 = polyhedronsSet43.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = vector3D54.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane56 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D52, vector3D55);
        double double57 = vector3D50.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        double double58 = plane49.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane59 = plane49.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion60 = subPlane59.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane61 = polyhedronsSet43.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane59);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane62 = euclidean3DRegion41.intersection(euclidean3DSubHyperplane61);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DRegion25);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion35);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(euclidean3DSubHyperplane40);
        org.junit.Assert.assertNotNull(euclidean3DRegion41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(subPlane59);
        org.junit.Assert.assertNotNull(euclidean2DRegion60);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane61);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane62);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #206
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: aconst_null
173: astore        24
175: aload_2
176: aload         24
178: invokevirtual #148
181: astore        25
183: new           #25
186: dup
187: invokespecial #26
190: astore        26
192: new           #8
195: dup
196: aload         26
198: invokespecial #27
201: astore        27
203: aconst_null
204: astore        28
206: aload         27
208: aload         28
210: invokevirtual #29
213: astore        29
215: aload         27
217: iconst_0
218: invokevirtual #30
221: astore        30
223: new           #8
226: dup
227: aload         30
229: invokespecial #9
232: astore        31
234: new           #25
237: dup
238: invokespecial #26
241: astore        32
243: new           #8
246: dup
247: aload         32
249: invokespecial #27
252: astore        33
254: aload         33
256: invokevirtual #28
259: dstore        34
261: new           #25
264: dup
265: invokespecial #26
268: astore        36
270: new           #8
273: dup
274: aload         36
276: invokespecial #27
279: astore        37
281: aconst_null
282: astore        38
284: aload         37
286: aload         38
288: invokevirtual #29
291: astore        39
293: aload         37
295: iconst_0
296: invokevirtual #30
299: astore        40
301: aload         33
303: aload         40
305: invokevirtual #31
308: istore        41
310: aload         31
312: aload         40
314: invokevirtual #31
317: istore        42
319: aload         40
321: invokevirtual #149
324: astore        43
326: aload         25
328: aload         40
330: invokevirtual #150
333: astore        44
335: new           #25
338: dup
339: invokespecial #26
342: astore        45
344: new           #8
347: dup
348: aload         45
350: invokespecial #27
353: astore        46
355: aload         46
357: invokevirtual #28
360: dstore        47
362: getstatic     #10
365: astore        49
367: aload         49
369: invokevirtual #11
372: astore        50
374: getstatic     #10
377: astore        51
379: aload         51
381: invokevirtual #11
384: astore        52
386: new           #12
389: dup
390: aload         49
392: aload         52
394: invokespecial #13
397: astore        53
399: getstatic     #10
402: astore        54
404: aload         54
406: invokevirtual #11
409: astore        55
411: getstatic     #10
414: astore        56
416: aload         56
418: invokevirtual #11
421: astore        57
423: getstatic     #10
426: astore        58
428: aload         58
430: invokevirtual #11
433: astore        59
435: new           #12
438: dup
439: aload         56
441: aload         59
443: invokespecial #13
446: astore        60
448: aload         54
450: aload         59
452: invokevirtual #22
455: dstore        61
457: aload         53
459: aload         59
461: invokevirtual #23
464: dstore        63
466: aload         53
468: invokevirtual #24
471: astore        65
473: aload         65
475: invokevirtual #32
478: astore        66
480: aload         46
482: aload         65
484: invokevirtual #73
487: astore        67
489: aload         44
491: aload         67
493: invokeinterface #207,  2
498: astore        68
500: new           #40
503: dup
504: invokespecial #41
507: ldc           #42
509: invokevirtual #43
512: dload_3
513: invokevirtual #44
516: ldc           #45
518: invokevirtual #43
521: dconst_0
522: invokevirtual #44
525: ldc           #42
527: invokevirtual #43
530: invokevirtual #46
533: dload_3
534: dconst_0
535: dcmpl
536: ifne          543
539: iconst_1
540: goto          544
543: iconst_0
544: invokestatic  #47
547: aload         5
549: invokestatic  #18
552: aload         6
554: invokestatic  #18
557: aload         7
559: invokestatic  #18
562: aload         8
564: invokestatic  #18
567: aload         10
569: invokestatic  #18
572: aload         11
574: invokestatic  #18
577: aload         12
579: invokestatic  #18
582: aload         13
584: invokestatic  #18
587: aload         14
589: invokestatic  #18
592: aload         15
594: invokestatic  #18
597: dload         17
599: invokestatic  #38
602: invokestatic  #39
605: dload         19
607: invokestatic  #38
610: invokestatic  #39
613: aload         21
615: invokestatic  #18
618: aload         22
620: invokestatic  #18
623: aload         23
625: invokestatic  #18
628: aload         25
630: invokestatic  #18
633: aload         29
635: invokestatic  #18
638: aload         30
640: invokestatic  #18
643: new           #40
646: dup
647: invokespecial #41
650: ldc           #42
652: invokevirtual #43
655: dload         34
657: invokevirtual #44
660: ldc           #45
662: invokevirtual #43
665: dconst_0
666: invokevirtual #44
669: ldc           #42
671: invokevirtual #43
674: invokevirtual #46
677: dload         34
679: dconst_0
680: dcmpl
681: ifne          688
684: iconst_1
685: goto          689
688: iconst_0
689: invokestatic  #47
692: aload         39
694: invokestatic  #18
697: aload         40
699: invokestatic  #18
702: new           #40
705: dup
706: invokespecial #41
709: ldc           #42
711: invokevirtual #43
714: iload         41
716: invokevirtual #48
719: ldc           #45
721: invokevirtual #43
724: iconst_0
725: invokevirtual #48
728: ldc           #42
730: invokevirtual #43
733: invokevirtual #46
736: iload         41
738: ifne          745
741: iconst_1
742: goto          746
745: iconst_0
746: invokestatic  #47
749: new           #40
752: dup
753: invokespecial #41
756: ldc           #42
758: invokevirtual #43
761: iload         42
763: invokevirtual #48
766: ldc           #45
768: invokevirtual #43
771: iconst_0
772: invokevirtual #48
775: ldc           #42
777: invokevirtual #43
780: invokevirtual #46
783: iload         42
785: ifne          792
788: iconst_1
789: goto          793
792: iconst_0
793: invokestatic  #47
796: aload         43
798: invokestatic  #78
801: aload         44
803: invokestatic  #18
806: new           #40
809: dup
810: invokespecial #41
813: ldc           #42
815: invokevirtual #43
818: dload         47
820: invokevirtual #44
823: ldc           #45
825: invokevirtual #43
828: dconst_0
829: invokevirtual #44
832: ldc           #42
834: invokevirtual #43
837: invokevirtual #46
840: dload         47
842: dconst_0
843: dcmpl
844: ifne          851
847: iconst_1
848: goto          852
851: iconst_0
852: invokestatic  #47
855: aload         49
857: invokestatic  #18
860: aload         50
862: invokestatic  #18
865: aload         51
867: invokestatic  #18
870: aload         52
872: invokestatic  #18
875: aload         54
877: invokestatic  #18
880: aload         55
882: invokestatic  #18
885: aload         56
887: invokestatic  #18
890: aload         57
892: invokestatic  #18
895: aload         58
897: invokestatic  #18
900: aload         59
902: invokestatic  #18
905: dload         61
907: invokestatic  #38
910: invokestatic  #39
913: dload         63
915: invokestatic  #38
918: invokestatic  #39
921: aload         65
923: invokestatic  #18
926: aload         66
928: invokestatic  #18
931: aload         67
933: invokestatic  #18
936: aload         68
938: invokestatic  #18
941: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test044
Start line: 3267
End line: 3337
Method source code: 
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree2 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion3 = polyhedronsSet1.buildNew(euclidean3DBSPTree2);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree5 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D9, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D8, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D8.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D6.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet22 = polyhedronsSet1.translate(vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane27 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        double double35 = vector3D28.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double36 = plane27.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.partitioning.Side side37 = polyhedronsSet22.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane27);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane38 = plane27.wholeHyperplane();
        org.junit.Assert.assertNotNull(euclidean3DRegion3);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(polyhedronsSet22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + side37 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side37.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertNotNull(subPlane38);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #208
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aconst_null
42: astore_3
43: aload_2
44: aload_3
45: invokevirtual #29
48: astore        4
50: aload_2
51: iconst_0
52: invokevirtual #30
55: astore        5
57: getstatic     #10
60: astore        6
62: getstatic     #10
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         7
106: aload         11
108: invokestatic  #96
111: astore        13
113: getstatic     #10
116: astore        14
118: aload         14
120: invokevirtual #11
123: astore        15
125: getstatic     #10
128: astore        16
130: aload         16
132: invokevirtual #11
135: astore        17
137: new           #12
140: dup
141: aload         14
143: aload         17
145: invokespecial #13
148: astore        18
150: aload         7
152: aload         17
154: invokevirtual #111
157: astore        19
159: aload         6
161: dconst_1
162: aload         17
164: invokevirtual #112
167: astore        20
169: aload_2
170: aload         20
172: invokevirtual #153
175: astore        21
177: getstatic     #10
180: astore        22
182: aload         22
184: invokevirtual #11
187: astore        23
189: getstatic     #10
192: astore        24
194: aload         24
196: invokevirtual #11
199: astore        25
201: new           #12
204: dup
205: aload         22
207: aload         25
209: invokespecial #13
212: astore        26
214: getstatic     #10
217: astore        27
219: aload         27
221: invokevirtual #11
224: astore        28
226: getstatic     #10
229: astore        29
231: aload         29
233: invokevirtual #11
236: astore        30
238: getstatic     #10
241: astore        31
243: aload         31
245: invokevirtual #11
248: astore        32
250: new           #12
253: dup
254: aload         29
256: aload         32
258: invokespecial #13
261: astore        33
263: aload         27
265: aload         32
267: invokevirtual #22
270: dstore        34
272: aload         26
274: aload         32
276: invokevirtual #23
279: dstore        36
281: aload         21
283: aload         26
285: invokevirtual #14
288: astore        38
290: aload         26
292: invokevirtual #24
295: astore        39
297: aload         4
299: invokestatic  #18
302: aload         5
304: invokestatic  #18
307: aload         6
309: invokestatic  #18
312: aload         7
314: invokestatic  #18
317: aload         8
319: invokestatic  #18
322: aload         9
324: invokestatic  #18
327: aload         10
329: invokestatic  #18
332: aload         11
334: invokestatic  #18
337: aload         13
339: invokestatic  #18
342: aload         14
344: invokestatic  #18
347: aload         15
349: invokestatic  #18
352: aload         16
354: invokestatic  #18
357: aload         17
359: invokestatic  #18
362: aload         19
364: invokestatic  #18
367: aload         20
369: invokestatic  #18
372: aload         21
374: invokestatic  #18
377: aload         22
379: invokestatic  #18
382: aload         23
384: invokestatic  #18
387: aload         24
389: invokestatic  #18
392: aload         25
394: invokestatic  #18
397: aload         27
399: invokestatic  #18
402: aload         28
404: invokestatic  #18
407: aload         29
409: invokestatic  #18
412: aload         30
414: invokestatic  #18
417: aload         31
419: invokestatic  #18
422: aload         32
424: invokestatic  #18
427: dload         34
429: invokestatic  #38
432: invokestatic  #39
435: dload         36
437: invokestatic  #38
440: invokestatic  #39
443: new           #40
446: dup
447: invokespecial #41
450: ldc           #42
452: invokevirtual #43
455: aload         38
457: invokevirtual #102
460: ldc           #45
462: invokevirtual #43
465: getstatic     #103
468: invokevirtual #102
471: ldc           #42
473: invokevirtual #43
476: invokevirtual #46
479: aload         38
481: getstatic     #103
484: invokevirtual #104
487: invokestatic  #47
490: aload         39
492: invokestatic  #18
495: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test045
Start line: 3340
End line: 3442
Method source code: 
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> euclidean2DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>) euclidean2DSubHyperplaneList0);
        boolean boolean2 = polygonsSet1.isEmpty();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line7 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D5, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        boolean boolean13 = line7.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line12);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line18 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, (double) 0.0f);
        line12.reset(vector2D16, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        double double33 = vector3D26.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        double double34 = plane25.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        plane25.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane40 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D36, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D43, vector3D46);
        double double48 = vector3D41.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        double double49 = plane40.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        plane40.revertSelf();
        double double51 = plane25.getOffset(plane40);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D52, vector3D56);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = plane40.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        double double60 = vector2D16.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Line line62 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet63 = line62.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Side side64 = polygonsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line62);
        double double65 = polygonsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line70 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D68, (double) 0.0f);
        org.apache.commons.math3.geometry.partitioning.Side side71 = polygonsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line70);
        boolean boolean72 = polygonsSet1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(polygonsSet63);
        org.junit.Assert.assertTrue("'" + side64 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side64.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + side71 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side71.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #209
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #56
35: dup
36: aload_1
37: invokespecial #57
40: astore_2
41: aload_2
42: invokevirtual #145
45: istore_3
46: new           #60
49: dup
50: dconst_0
51: ldc2_w        #61
54: invokespecial #63
57: astore        4
59: new           #64
62: dup
63: aload         4
65: dconst_0
66: invokespecial #65
69: astore        5
71: new           #60
74: dup
75: dconst_0
76: ldc2_w        #61
79: invokespecial #63
82: astore        6
84: new           #64
87: dup
88: aload         6
90: dconst_0
91: invokespecial #65
94: astore        7
96: aload         5
98: aload         7
100: invokevirtual #95
103: istore        8
105: new           #60
108: dup
109: dconst_0
110: ldc2_w        #61
113: invokespecial #63
116: astore        9
118: new           #64
121: dup
122: aload         9
124: dconst_0
125: invokespecial #65
128: astore        10
130: aload         7
132: aload         9
134: ldc2_w        #116
137: invokevirtual #100
140: getstatic     #10
143: astore        11
145: aload         11
147: invokevirtual #11
150: astore        12
152: getstatic     #10
155: astore        13
157: aload         13
159: invokevirtual #11
162: astore        14
164: new           #12
167: dup
168: aload         11
170: aload         14
172: invokespecial #13
175: astore        15
177: getstatic     #10
180: astore        16
182: aload         16
184: invokevirtual #11
187: astore        17
189: getstatic     #10
192: astore        18
194: aload         18
196: invokevirtual #11
199: astore        19
201: getstatic     #10
204: astore        20
206: aload         20
208: invokevirtual #11
211: astore        21
213: new           #12
216: dup
217: aload         18
219: aload         21
221: invokespecial #13
224: astore        22
226: aload         16
228: aload         21
230: invokevirtual #22
233: dstore        23
235: aload         15
237: aload         21
239: invokevirtual #23
242: dstore        25
244: aload         15
246: invokevirtual #20
249: getstatic     #10
252: astore        27
254: aload         27
256: invokevirtual #11
259: astore        28
261: getstatic     #10
264: astore        29
266: aload         29
268: invokevirtual #11
271: astore        30
273: new           #12
276: dup
277: aload         27
279: aload         30
281: invokespecial #13
284: astore        31
286: getstatic     #10
289: astore        32
291: aload         32
293: invokevirtual #11
296: astore        33
298: getstatic     #10
301: astore        34
303: aload         34
305: invokevirtual #11
308: astore        35
310: getstatic     #10
313: astore        36
315: aload         36
317: invokevirtual #11
320: astore        37
322: new           #12
325: dup
326: aload         34
328: aload         37
330: invokespecial #13
333: astore        38
335: aload         32
337: aload         37
339: invokevirtual #22
342: dstore        39
344: aload         31
346: aload         37
348: invokevirtual #23
351: dstore        41
353: aload         31
355: invokevirtual #20
358: aload         15
360: aload         31
362: invokevirtual #82
365: dstore        43
367: getstatic     #10
370: astore        45
372: getstatic     #10
375: astore        46
377: aload         46
379: invokevirtual #11
382: astore        47
384: getstatic     #10
387: astore        48
389: aload         48
391: invokevirtual #11
394: astore        49
396: new           #12
399: dup
400: aload         46
402: aload         49
404: invokespecial #13
407: astore        50
409: aload         45
411: aload         49
413: invokestatic  #96
416: astore        51
418: aload         31
420: aload         49
422: invokevirtual #97
425: astore        52
427: aload         9
429: aload         52
431: invokevirtual #118
434: dstore        53
436: new           #64
439: dup
440: aload         9
442: ldc2_w        #119
445: invokespecial #65
448: astore        55
450: aload         55
452: invokevirtual #121
455: astore        56
457: aload_2
458: aload         55
460: invokevirtual #101
463: astore        57
465: aload_2
466: invokevirtual #210
469: dstore        58
471: new           #60
474: dup
475: dconst_0
476: ldc2_w        #61
479: invokespecial #63
482: astore        60
484: new           #64
487: dup
488: aload         60
490: dconst_0
491: invokespecial #65
494: astore        61
496: aload_2
497: aload         61
499: invokevirtual #101
502: astore        62
504: aload_2
505: invokevirtual #145
508: istore        63
510: new           #40
513: dup
514: invokespecial #41
517: ldc           #42
519: invokevirtual #43
522: iload_3
523: invokevirtual #48
526: ldc           #45
528: invokevirtual #43
531: iconst_0
532: invokevirtual #48
535: ldc           #42
537: invokevirtual #43
540: invokevirtual #46
543: iload_3
544: ifne          551
547: iconst_1
548: goto          552
551: iconst_0
552: invokestatic  #47
555: new           #40
558: dup
559: invokespecial #41
562: ldc           #42
564: invokevirtual #43
567: iload         8
569: invokevirtual #48
572: ldc           #45
574: invokevirtual #43
577: iconst_1
578: invokevirtual #48
581: ldc           #42
583: invokevirtual #43
586: invokevirtual #46
589: iload         8
591: iconst_1
592: if_icmpne     599
595: iconst_1
596: goto          600
599: iconst_0
600: invokestatic  #47
603: aload         11
605: invokestatic  #18
608: aload         12
610: invokestatic  #18
613: aload         13
615: invokestatic  #18
618: aload         14
620: invokestatic  #18
623: aload         16
625: invokestatic  #18
628: aload         17
630: invokestatic  #18
633: aload         18
635: invokestatic  #18
638: aload         19
640: invokestatic  #18
643: aload         20
645: invokestatic  #18
648: aload         21
650: invokestatic  #18
653: dload         23
655: invokestatic  #38
658: invokestatic  #39
661: dload         25
663: invokestatic  #38
666: invokestatic  #39
669: aload         27
671: invokestatic  #18
674: aload         28
676: invokestatic  #18
679: aload         29
681: invokestatic  #18
684: aload         30
686: invokestatic  #18
689: aload         32
691: invokestatic  #18
694: aload         33
696: invokestatic  #18
699: aload         34
701: invokestatic  #18
704: aload         35
706: invokestatic  #18
709: aload         36
711: invokestatic  #18
714: aload         37
716: invokestatic  #18
719: dload         39
721: invokestatic  #38
724: invokestatic  #39
727: dload         41
729: invokestatic  #38
732: invokestatic  #39
735: dload         43
737: invokestatic  #38
740: invokestatic  #39
743: aload         45
745: invokestatic  #18
748: aload         46
750: invokestatic  #18
753: aload         47
755: invokestatic  #18
758: aload         48
760: invokestatic  #18
763: aload         49
765: invokestatic  #18
768: aload         51
770: invokestatic  #18
773: aload         52
775: invokestatic  #18
778: dload         53
780: invokestatic  #38
783: invokestatic  #39
786: aload         56
788: invokestatic  #18
791: new           #40
794: dup
795: invokespecial #41
798: ldc           #42
800: invokevirtual #43
803: aload         57
805: invokevirtual #102
808: ldc           #45
810: invokevirtual #43
813: getstatic     #103
816: invokevirtual #102
819: ldc           #42
821: invokevirtual #43
824: invokevirtual #46
827: aload         57
829: getstatic     #103
832: invokevirtual #104
835: invokestatic  #47
838: new           #40
841: dup
842: invokespecial #41
845: ldc           #42
847: invokevirtual #43
850: dload         58
852: invokevirtual #44
855: ldc           #45
857: invokevirtual #43
860: ldc2_w        #212
863: invokevirtual #44
866: ldc           #42
868: invokevirtual #43
871: invokevirtual #46
874: dload         58
876: ldc2_w        #212
879: dcmpl
880: ifne          887
883: iconst_1
884: goto          888
887: iconst_0
888: invokestatic  #47
891: new           #40
894: dup
895: invokespecial #41
898: ldc           #42
900: invokevirtual #43
903: aload         62
905: invokevirtual #102
908: ldc           #45
910: invokevirtual #43
913: getstatic     #103
916: invokevirtual #102
919: ldc           #42
921: invokevirtual #43
924: invokevirtual #46
927: aload         62
929: getstatic     #103
932: invokevirtual #104
935: invokestatic  #47
938: new           #40
941: dup
942: invokespecial #41
945: ldc           #42
947: invokevirtual #43
950: iload         63
952: invokevirtual #48
955: ldc           #45
957: invokevirtual #43
960: iconst_0
961: invokevirtual #48
964: ldc           #42
966: invokevirtual #43
969: invokevirtual #46
972: iload         63
974: ifne          981
977: iconst_1
978: goto          982
981: iconst_0
982: invokestatic  #47
985: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test046
Start line: 3445
End line: 3477
Method source code: 
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line4 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D2, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        boolean boolean10 = line4.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line20 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D18, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = plane15.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D18);
        double double22 = line9.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str26 = vector2D25.toString();
        double double27 = vector2D18.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D25);
        org.apache.commons.math3.geometry.euclidean.twod.Line line29 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D25, 0.0d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet30 = line29.wholeSpace();
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "{0; -0.43}" + "'", str26, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(polygonsSet30);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #214
19: aastore
20: invokevirtual #7
23: pop
24: new           #60
27: dup
28: dconst_0
29: ldc2_w        #61
32: invokespecial #63
35: astore_1
36: new           #64
39: dup
40: aload_1
41: dconst_0
42: invokespecial #65
45: astore_2
46: new           #60
49: dup
50: dconst_0
51: ldc2_w        #61
54: invokespecial #63
57: astore_3
58: new           #64
61: dup
62: aload_3
63: dconst_0
64: invokespecial #65
67: astore        4
69: aload_2
70: aload         4
72: invokevirtual #95
75: istore        5
77: getstatic     #10
80: astore        6
82: aload         6
84: invokevirtual #11
87: astore        7
89: getstatic     #10
92: astore        8
94: aload         8
96: invokevirtual #11
99: astore        9
101: new           #12
104: dup
105: aload         6
107: aload         9
109: invokespecial #13
112: astore        10
114: new           #60
117: dup
118: dconst_0
119: ldc2_w        #61
122: invokespecial #63
125: astore        11
127: new           #64
130: dup
131: aload         11
133: dconst_0
134: invokespecial #65
137: astore        12
139: aload         10
141: aload         11
143: invokevirtual #66
146: astore        13
148: aload         4
150: aload         11
152: invokevirtual #191
155: dstore        14
157: new           #60
160: dup
161: dconst_0
162: ldc2_w        #61
165: invokespecial #63
168: astore        16
170: aload         16
172: invokevirtual #192
175: astore        17
177: aload         11
179: aload         16
181: invokevirtual #193
184: dstore        18
186: new           #64
189: dup
190: aload         16
192: dconst_0
193: invokespecial #65
196: astore        20
198: aload         20
200: invokevirtual #121
203: astore        21
205: new           #40
208: dup
209: invokespecial #41
212: ldc           #42
214: invokevirtual #43
217: iload         5
219: invokevirtual #48
222: ldc           #45
224: invokevirtual #43
227: iconst_1
228: invokevirtual #48
231: ldc           #42
233: invokevirtual #43
236: invokevirtual #46
239: iload         5
241: iconst_1
242: if_icmpne     249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #47
253: aload         6
255: invokestatic  #18
258: aload         7
260: invokestatic  #18
263: aload         8
265: invokestatic  #18
268: aload         9
270: invokestatic  #18
273: aload         13
275: invokestatic  #18
278: new           #40
281: dup
282: invokespecial #41
285: ldc           #42
287: invokevirtual #43
290: dload         14
292: invokevirtual #44
295: ldc           #45
297: invokevirtual #43
300: dconst_0
301: invokevirtual #44
304: ldc           #42
306: invokevirtual #43
309: invokevirtual #46
312: dload         14
314: dconst_0
315: dcmpl
316: ifne          323
319: iconst_1
320: goto          324
323: iconst_0
324: invokestatic  #47
327: new           #40
330: dup
331: invokespecial #41
334: ldc           #42
336: invokevirtual #43
339: aload         17
341: invokevirtual #43
344: ldc           #201
346: invokevirtual #43
349: invokevirtual #46
352: aload         17
354: ldc           #202
356: invokestatic  #203
359: new           #40
362: dup
363: invokespecial #41
366: ldc           #42
368: invokevirtual #43
371: dload         18
373: invokevirtual #44
376: ldc           #45
378: invokevirtual #43
381: dconst_0
382: invokevirtual #44
385: ldc           #42
387: invokevirtual #43
390: invokevirtual #46
393: dload         18
395: dconst_0
396: dcmpl
397: ifne          404
400: iconst_1
401: goto          405
404: iconst_0
405: invokestatic  #47
408: aload         21
410: invokestatic  #18
413: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test047
Start line: 3480
End line: 3556
Method source code: 
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = polyhedronsSet35.getSize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathInternalError; message: illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH");
        } catch (org.apache.commons.math3.exception.MathInternalError e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #215
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: aload         18
136: invokevirtual #11
139: astore        19
141: getstatic     #10
144: astore        20
146: aload         20
148: invokevirtual #11
151: astore        21
153: new           #12
156: dup
157: aload         18
159: aload         21
161: invokespecial #13
164: astore        22
166: getstatic     #10
169: astore        23
171: aload         23
173: invokevirtual #11
176: astore        24
178: getstatic     #10
181: astore        25
183: aload         25
185: invokevirtual #11
188: astore        26
190: getstatic     #10
193: astore        27
195: aload         27
197: invokevirtual #11
200: astore        28
202: new           #12
205: dup
206: aload         25
208: aload         28
210: invokespecial #13
213: astore        29
215: aload         23
217: aload         28
219: invokevirtual #22
222: dstore        30
224: aload         22
226: aload         28
228: invokevirtual #23
231: dstore        32
233: aload         22
235: invokevirtual #24
238: astore        34
240: aload         34
242: invokevirtual #32
245: astore        35
247: aload         34
249: invokevirtual #71
252: astore        36
254: new           #25
257: dup
258: invokespecial #26
261: astore        37
263: aload         37
265: aload         17
267: invokevirtual #189
270: istore        38
272: aload         37
274: aload         34
276: invokevirtual #189
279: istore        39
281: new           #8
284: dup
285: aload         37
287: invokespecial #27
290: astore        40
292: aload         40
294: invokevirtual #70
297: dstore        41
299: ldc           #216
301: invokestatic  #16
304: goto          309
307: astore        41
309: aload_1
310: invokestatic  #18
313: aload_2
314: invokestatic  #18
317: aload_3
318: invokestatic  #18
321: aload         4
323: invokestatic  #18
326: aload         6
328: invokestatic  #18
331: aload         7
333: invokestatic  #18
336: aload         8
338: invokestatic  #18
341: aload         9
343: invokestatic  #18
346: aload         10
348: invokestatic  #18
351: aload         11
353: invokestatic  #18
356: dload         13
358: invokestatic  #38
361: invokestatic  #39
364: dload         15
366: invokestatic  #38
369: invokestatic  #39
372: aload         17
374: invokestatic  #18
377: aload         18
379: invokestatic  #18
382: aload         19
384: invokestatic  #18
387: aload         20
389: invokestatic  #18
392: aload         21
394: invokestatic  #18
397: aload         23
399: invokestatic  #18
402: aload         24
404: invokestatic  #18
407: aload         25
409: invokestatic  #18
412: aload         26
414: invokestatic  #18
417: aload         27
419: invokestatic  #18
422: aload         28
424: invokestatic  #18
427: dload         30
429: invokestatic  #38
432: invokestatic  #39
435: dload         32
437: invokestatic  #38
440: invokestatic  #39
443: aload         34
445: invokestatic  #18
448: aload         35
450: invokestatic  #18
453: aload         36
455: invokestatic  #18
458: new           #40
461: dup
462: invokespecial #41
465: ldc           #42
467: invokevirtual #43
470: iload         38
472: invokevirtual #48
475: ldc           #45
477: invokevirtual #43
480: iconst_1
481: invokevirtual #48
484: ldc           #42
486: invokevirtual #43
489: invokevirtual #46
492: iload         38
494: iconst_1
495: if_icmpne     502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #47
506: new           #40
509: dup
510: invokespecial #41
513: ldc           #42
515: invokevirtual #43
518: iload         39
520: invokevirtual #48
523: ldc           #45
525: invokevirtual #43
528: iconst_1
529: invokevirtual #48
532: ldc           #42
534: invokevirtual #43
537: invokevirtual #46
540: iload         39
542: iconst_1
543: if_icmpne     550
546: iconst_1
547: goto          551
550: iconst_0
551: invokestatic  #47
554: return
Exception table:
from    to  target type
292   304   307   Class org/apache/commons/math3/exception/MathInternalError
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test048
Start line: 3559
End line: 3648
Method source code: 
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = plane7.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D14, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        double double26 = vector3D19.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        double double27 = plane18.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane28 = plane18.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion29 = subPlane28.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane30 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane7, euclidean2DRegion29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane45 = plane35.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion46 = subPlane45.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane47 = subPlane45.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane48 = subPlane30.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane45);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane49 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane30);
        double double50 = subPlane30.getSize();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(subPlane28);
        org.junit.Assert.assertNotNull(euclidean2DRegion29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(subPlane45);
        org.junit.Assert.assertNotNull(euclidean2DRegion46);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane47);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane48);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + Double.POSITIVE_INFINITY + "'", double50 == Double.POSITIVE_INFINITY);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #218
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #70
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: new           #60
86: dup
87: dconst_0
88: ldc2_w        #61
91: invokespecial #63
94: astore        10
96: new           #64
99: dup
100: aload         10
102: dconst_0
103: invokespecial #65
106: astore        11
108: aload         9
110: aload         10
112: invokevirtual #66
115: astore        12
117: getstatic     #10
120: astore        13
122: aload         13
124: invokevirtual #11
127: astore        14
129: getstatic     #10
132: astore        15
134: aload         15
136: invokevirtual #11
139: astore        16
141: new           #12
144: dup
145: aload         13
147: aload         16
149: invokespecial #13
152: astore        17
154: getstatic     #10
157: astore        18
159: aload         18
161: invokevirtual #11
164: astore        19
166: getstatic     #10
169: astore        20
171: aload         20
173: invokevirtual #11
176: astore        21
178: getstatic     #10
181: astore        22
183: aload         22
185: invokevirtual #11
188: astore        23
190: new           #12
193: dup
194: aload         20
196: aload         23
198: invokespecial #13
201: astore        24
203: aload         18
205: aload         23
207: invokevirtual #22
210: dstore        25
212: aload         17
214: aload         23
216: invokevirtual #23
219: dstore        27
221: aload         17
223: invokevirtual #24
226: astore        29
228: aload         29
230: invokevirtual #32
233: astore        30
235: new           #67
238: dup
239: aload         9
241: aload         30
243: invokespecial #68
246: astore        31
248: getstatic     #10
251: astore        32
253: aload         32
255: invokevirtual #11
258: astore        33
260: getstatic     #10
263: astore        34
265: aload         34
267: invokevirtual #11
270: astore        35
272: new           #12
275: dup
276: aload         32
278: aload         35
280: invokespecial #13
283: astore        36
285: getstatic     #10
288: astore        37
290: aload         37
292: invokevirtual #11
295: astore        38
297: getstatic     #10
300: astore        39
302: aload         39
304: invokevirtual #11
307: astore        40
309: getstatic     #10
312: astore        41
314: aload         41
316: invokevirtual #11
319: astore        42
321: new           #12
324: dup
325: aload         39
327: aload         42
329: invokespecial #13
332: astore        43
334: aload         37
336: aload         42
338: invokevirtual #22
341: dstore        44
343: aload         36
345: aload         42
347: invokevirtual #23
350: dstore        46
352: aload         36
354: invokevirtual #24
357: astore        48
359: aload         48
361: invokevirtual #32
364: astore        49
366: aload         48
368: invokevirtual #71
371: astore        50
373: aload         31
375: aload         48
377: invokevirtual #72
380: astore        51
382: aload_2
383: aload         31
385: invokevirtual #73
388: astore        52
390: aload         31
392: invokevirtual #219
395: dstore        53
397: new           #40
400: dup
401: invokespecial #41
404: ldc           #42
406: invokevirtual #43
409: dload_3
410: invokevirtual #44
413: ldc           #45
415: invokevirtual #43
418: dconst_0
419: invokevirtual #44
422: ldc           #42
424: invokevirtual #43
427: invokevirtual #46
430: dload_3
431: dconst_0
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #47
444: aload         5
446: invokestatic  #18
449: aload         6
451: invokestatic  #18
454: aload         7
456: invokestatic  #18
459: aload         8
461: invokestatic  #18
464: aload         12
466: invokestatic  #18
469: aload         13
471: invokestatic  #18
474: aload         14
476: invokestatic  #18
479: aload         15
481: invokestatic  #18
484: aload         16
486: invokestatic  #18
489: aload         18
491: invokestatic  #18
494: aload         19
496: invokestatic  #18
499: aload         20
501: invokestatic  #18
504: aload         21
506: invokestatic  #18
509: aload         22
511: invokestatic  #18
514: aload         23
516: invokestatic  #18
519: dload         25
521: invokestatic  #38
524: invokestatic  #39
527: dload         27
529: invokestatic  #38
532: invokestatic  #39
535: aload         29
537: invokestatic  #18
540: aload         30
542: invokestatic  #18
545: aload         32
547: invokestatic  #18
550: aload         33
552: invokestatic  #18
555: aload         34
557: invokestatic  #18
560: aload         35
562: invokestatic  #18
565: aload         37
567: invokestatic  #18
570: aload         38
572: invokestatic  #18
575: aload         39
577: invokestatic  #18
580: aload         40
582: invokestatic  #18
585: aload         41
587: invokestatic  #18
590: aload         42
592: invokestatic  #18
595: dload         44
597: invokestatic  #38
600: invokestatic  #39
603: dload         46
605: invokestatic  #38
608: invokestatic  #39
611: aload         48
613: invokestatic  #18
616: aload         49
618: invokestatic  #18
621: aload         50
623: invokestatic  #18
626: aload         51
628: invokestatic  #18
631: aload         52
633: invokestatic  #18
636: new           #40
639: dup
640: invokespecial #41
643: ldc           #42
645: invokevirtual #43
648: dload         53
650: invokevirtual #44
653: ldc           #45
655: invokevirtual #43
658: ldc2_w        #212
661: invokevirtual #44
664: ldc           #42
666: invokevirtual #43
669: invokevirtual #46
672: dload         53
674: ldc2_w        #212
677: dcmpl
678: ifne          685
681: iconst_1
682: goto          686
685: iconst_0
686: invokestatic  #47
689: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test049
Start line: 3651
End line: 3745
Method source code: 
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree52 = euclidean3DBSPTree23.copySelf();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree53 = euclidean3DBSPTree23.getPlus();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree54 = euclidean3DBSPTree23.getPlus();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree52);
        org.junit.Assert.assertNull(euclidean3DBSPTree53);
        org.junit.Assert.assertNull(euclidean3DBSPTree54);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #220
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aload         26
418: invokevirtual #221
421: astore        57
423: aload         26
425: invokevirtual #222
428: astore        58
430: aload         26
432: invokevirtual #222
435: astore        59
437: aload_1
438: invokestatic  #18
441: aload_2
442: invokestatic  #18
445: aload_3
446: invokestatic  #18
449: aload         4
451: invokestatic  #18
454: aload         6
456: invokestatic  #18
459: aload         7
461: invokestatic  #18
464: aload         8
466: invokestatic  #18
469: aload         9
471: invokestatic  #18
474: aload         10
476: invokestatic  #18
479: aload         11
481: invokestatic  #18
484: dload         13
486: invokestatic  #38
489: invokestatic  #39
492: dload         15
494: invokestatic  #38
497: invokestatic  #39
500: aload         17
502: invokestatic  #18
505: new           #40
508: dup
509: invokespecial #41
512: ldc           #42
514: invokevirtual #43
517: dload         20
519: invokevirtual #44
522: ldc           #45
524: invokevirtual #43
527: dconst_0
528: invokevirtual #44
531: ldc           #42
533: invokevirtual #43
536: invokevirtual #46
539: dload         20
541: dconst_0
542: dcmpl
543: ifne          550
546: iconst_1
547: goto          551
550: iconst_0
551: invokestatic  #47
554: aload         25
556: invokestatic  #18
559: aload         26
561: invokestatic  #18
564: new           #40
567: dup
568: invokespecial #41
571: ldc           #42
573: invokevirtual #43
576: iload         27
578: invokevirtual #48
581: ldc           #45
583: invokevirtual #43
586: iconst_0
587: invokevirtual #48
590: ldc           #42
592: invokevirtual #43
595: invokevirtual #46
598: iload         27
600: ifne          607
603: iconst_1
604: goto          608
607: iconst_0
608: invokestatic  #47
611: new           #40
614: dup
615: invokespecial #41
618: ldc           #42
620: invokevirtual #43
623: dload         30
625: invokevirtual #44
628: ldc           #45
630: invokevirtual #43
633: dconst_0
634: invokevirtual #44
637: ldc           #42
639: invokevirtual #43
642: invokevirtual #46
645: dload         30
647: dconst_0
648: dcmpl
649: ifne          656
652: iconst_1
653: goto          657
656: iconst_0
657: invokestatic  #47
660: aload         35
662: invokestatic  #18
665: aload         36
667: invokestatic  #18
670: new           #40
673: dup
674: invokespecial #41
677: ldc           #42
679: invokevirtual #43
682: iload         37
684: invokevirtual #48
687: ldc           #45
689: invokevirtual #43
692: iconst_0
693: invokevirtual #48
696: ldc           #42
698: invokevirtual #43
701: invokevirtual #46
704: iload         37
706: ifne          713
709: iconst_1
710: goto          714
713: iconst_0
714: invokestatic  #47
717: aload         38
719: invokestatic  #18
722: aload         39
724: invokestatic  #18
727: aload         40
729: invokestatic  #18
732: aload         41
734: invokestatic  #18
737: aload         43
739: invokestatic  #18
742: aload         44
744: invokestatic  #18
747: aload         45
749: invokestatic  #18
752: aload         46
754: invokestatic  #18
757: aload         47
759: invokestatic  #18
762: aload         48
764: invokestatic  #18
767: dload         50
769: invokestatic  #38
772: invokestatic  #39
775: dload         52
777: invokestatic  #38
780: invokestatic  #39
783: aload         54
785: invokestatic  #18
788: aload         55
790: invokestatic  #18
793: aload         57
795: invokestatic  #18
798: aload         58
800: invokestatic  #78
803: aload         59
805: invokestatic  #78
808: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test050
Start line: 3748
End line: 3758
Method source code: 
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray3 = polygonsSet2.getVertices();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException4 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable1, (java.lang.Object[]) vector2DArray3);
        org.apache.commons.math3.exception.NullArgumentException nullArgumentException5 = new org.apache.commons.math3.exception.NullArgumentException(localizable0, (java.lang.Object[]) vector2DArray3);
        org.junit.Assert.assertNotNull(vector2DArray3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #223
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aconst_null
27: astore_2
28: new           #56
31: dup
32: invokespecial #87
35: astore_3
36: aload_3
37: invokevirtual #143
40: astore        4
42: new           #224
45: dup
46: aload_2
47: aload         4
49: checkcast     #225
52: invokespecial #226
55: astore        5
57: new           #227
60: dup
61: aload_1
62: aload         4
64: checkcast     #225
67: invokespecial #228
70: astore        6
72: aload         4
74: invokestatic  #18
77: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test051
Start line: 3761
End line: 3918
Method source code: 
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0.428182669496151d, 0.0d);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane24 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D20, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D19, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D19.getZero();
        double double27 = vector3D19.getY();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane41 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D37, vector3D40);
        double double42 = vector3D35.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0d, vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D31.subtract(83.24061508662703d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.Line line45 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D19, vector3D31);
        double double46 = vector3D18.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19);
        boolean boolean47 = plane4.contains(vector3D19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane52 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D48, vector3D51);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D55 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line57 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D55, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = plane52.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D55);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D59.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane63 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D59, vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = vector3D66.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane70 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D66, vector3D69);
        double double71 = vector3D64.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69);
        double double72 = plane63.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69);
        plane63.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D74.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D76.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane78 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D74, vector3D77);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D79.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D83.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane85 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D81, vector3D84);
        double double86 = vector3D79.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84);
        double double87 = plane78.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84);
        plane78.revertSelf();
        double double89 = plane63.getOffset(plane78);
        org.apache.commons.math3.geometry.euclidean.threed.Line line90 = plane52.intersection(plane63);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = plane4.intersection(line90);
        org.apache.commons.math3.geometry.euclidean.threed.SubLine subLine92 = line90.wholeLine();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(line90);
        org.junit.Assert.assertNotNull(vector3D91);
        org.junit.Assert.assertNotNull(subLine92);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #229
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: aload         5
131: invokevirtual #20
134: new           #175
137: dup
138: ldc2_w        #176
141: dconst_0
142: invokespecial #178
145: astore        18
147: getstatic     #10
150: astore        19
152: getstatic     #10
155: astore        20
157: aload         20
159: invokevirtual #11
162: astore        21
164: getstatic     #10
167: astore        22
169: aload         22
171: invokevirtual #11
174: astore        23
176: new           #12
179: dup
180: aload         20
182: aload         23
184: invokespecial #13
187: astore        24
189: aload         19
191: aload         23
193: invokestatic  #96
196: astore        25
198: aload         19
200: invokevirtual #110
203: astore        26
205: aload         19
207: invokevirtual #179
210: dstore        27
212: getstatic     #10
215: astore        29
217: aload         29
219: invokevirtual #11
222: astore        30
224: getstatic     #10
227: astore        31
229: aload         31
231: invokevirtual #11
234: astore        32
236: new           #12
239: dup
240: aload         29
242: aload         32
244: invokespecial #13
247: astore        33
249: getstatic     #10
252: astore        34
254: aload         34
256: invokevirtual #11
259: astore        35
261: getstatic     #10
264: astore        36
266: aload         36
268: invokevirtual #11
271: astore        37
273: getstatic     #10
276: astore        38
278: aload         38
280: invokevirtual #11
283: astore        39
285: new           #12
288: dup
289: aload         36
291: aload         39
293: invokespecial #13
296: astore        40
298: aload         34
300: aload         39
302: invokevirtual #22
305: dstore        41
307: new           #175
310: dup
311: dconst_1
312: aload         34
314: invokespecial #180
317: astore        43
319: aload         32
321: ldc2_w        #53
324: aload         34
326: invokevirtual #181
329: astore        44
331: new           #182
334: dup
335: aload         19
337: aload         32
339: invokespecial #183
342: astore        45
344: aload         18
346: aload         19
348: invokevirtual #184
351: dstore        46
353: aload         5
355: aload         19
357: invokevirtual #185
360: istore        48
362: getstatic     #10
365: astore        49
367: aload         49
369: invokevirtual #11
372: astore        50
374: getstatic     #10
377: astore        51
379: aload         51
381: invokevirtual #11
384: astore        52
386: new           #12
389: dup
390: aload         49
392: aload         52
394: invokespecial #13
397: astore        53
399: new           #60
402: dup
403: dconst_0
404: ldc2_w        #61
407: invokespecial #63
410: astore        54
412: new           #64
415: dup
416: aload         54
418: dconst_0
419: invokespecial #65
422: astore        55
424: aload         53
426: aload         54
428: invokevirtual #66
431: astore        56
433: getstatic     #10
436: astore        57
438: aload         57
440: invokevirtual #11
443: astore        58
445: getstatic     #10
448: astore        59
450: aload         59
452: invokevirtual #11
455: astore        60
457: new           #12
460: dup
461: aload         57
463: aload         60
465: invokespecial #13
468: astore        61
470: getstatic     #10
473: astore        62
475: aload         62
477: invokevirtual #11
480: astore        63
482: getstatic     #10
485: astore        64
487: aload         64
489: invokevirtual #11
492: astore        65
494: getstatic     #10
497: astore        66
499: aload         66
501: invokevirtual #11
504: astore        67
506: new           #12
509: dup
510: aload         64
512: aload         67
514: invokespecial #13
517: astore        68
519: aload         62
521: aload         67
523: invokevirtual #22
526: dstore        69
528: aload         61
530: aload         67
532: invokevirtual #23
535: dstore        71
537: aload         61
539: invokevirtual #20
542: getstatic     #10
545: astore        73
547: aload         73
549: invokevirtual #11
552: astore        74
554: getstatic     #10
557: astore        75
559: aload         75
561: invokevirtual #11
564: astore        76
566: new           #12
569: dup
570: aload         73
572: aload         76
574: invokespecial #13
577: astore        77
579: getstatic     #10
582: astore        78
584: aload         78
586: invokevirtual #11
589: astore        79
591: getstatic     #10
594: astore        80
596: aload         80
598: invokevirtual #11
601: astore        81
603: getstatic     #10
606: astore        82
608: aload         82
610: invokevirtual #11
613: astore        83
615: new           #12
618: dup
619: aload         80
621: aload         83
623: invokespecial #13
626: astore        84
628: aload         78
630: aload         83
632: invokevirtual #22
635: dstore        85
637: aload         77
639: aload         83
641: invokevirtual #23
644: dstore        87
646: aload         77
648: invokevirtual #20
651: aload         61
653: aload         77
655: invokevirtual #82
658: dstore        89
660: aload         53
662: aload         61
664: invokevirtual #134
667: astore        91
669: aload         5
671: aload         91
673: invokevirtual #186
676: astore        92
678: aload         91
680: invokevirtual #230
683: astore        93
685: aload_1
686: invokestatic  #18
689: aload_2
690: invokestatic  #18
693: aload_3
694: invokestatic  #18
697: aload         4
699: invokestatic  #18
702: aload         6
704: invokestatic  #18
707: aload         7
709: invokestatic  #18
712: aload         8
714: invokestatic  #18
717: aload         9
719: invokestatic  #18
722: aload         10
724: invokestatic  #18
727: aload         11
729: invokestatic  #18
732: dload         13
734: invokestatic  #38
737: invokestatic  #39
740: dload         15
742: invokestatic  #38
745: invokestatic  #39
748: aload         17
750: invokestatic  #18
753: aload         19
755: invokestatic  #18
758: aload         20
760: invokestatic  #18
763: aload         21
765: invokestatic  #18
768: aload         22
770: invokestatic  #18
773: aload         23
775: invokestatic  #18
778: aload         25
780: invokestatic  #18
783: aload         26
785: invokestatic  #18
788: dload         27
790: invokestatic  #38
793: invokestatic  #39
796: aload         29
798: invokestatic  #18
801: aload         30
803: invokestatic  #18
806: aload         31
808: invokestatic  #18
811: aload         32
813: invokestatic  #18
816: aload         34
818: invokestatic  #18
821: aload         35
823: invokestatic  #18
826: aload         36
828: invokestatic  #18
831: aload         37
833: invokestatic  #18
836: aload         38
838: invokestatic  #18
841: aload         39
843: invokestatic  #18
846: dload         41
848: invokestatic  #38
851: invokestatic  #39
854: aload         44
856: invokestatic  #18
859: dload         46
861: invokestatic  #38
864: invokestatic  #39
867: new           #40
870: dup
871: invokespecial #41
874: ldc           #42
876: invokevirtual #43
879: iload         48
881: invokevirtual #48
884: ldc           #45
886: invokevirtual #43
889: iconst_0
890: invokevirtual #48
893: ldc           #42
895: invokevirtual #43
898: invokevirtual #46
901: iload         48
903: ifne          910
906: iconst_1
907: goto          911
910: iconst_0
911: invokestatic  #47
914: aload         49
916: invokestatic  #18
919: aload         50
921: invokestatic  #18
924: aload         51
926: invokestatic  #18
929: aload         52
931: invokestatic  #18
934: aload         56
936: invokestatic  #18
939: aload         57
941: invokestatic  #18
944: aload         58
946: invokestatic  #18
949: aload         59
951: invokestatic  #18
954: aload         60
956: invokestatic  #18
959: aload         62
961: invokestatic  #18
964: aload         63
966: invokestatic  #18
969: aload         64
971: invokestatic  #18
974: aload         65
976: invokestatic  #18
979: aload         66
981: invokestatic  #18
984: aload         67
986: invokestatic  #18
989: dload         69
991: invokestatic  #38
994: invokestatic  #39
997: dload         71
999: invokestatic  #38
1002: invokestatic  #39
1005: aload         73
1007: invokestatic  #18
1010: aload         74
1012: invokestatic  #18
1015: aload         75
1017: invokestatic  #18
1020: aload         76
1022: invokestatic  #18
1025: aload         78
1027: invokestatic  #18
1030: aload         79
1032: invokestatic  #18
1035: aload         80
1037: invokestatic  #18
1040: aload         81
1042: invokestatic  #18
1045: aload         82
1047: invokestatic  #18
1050: aload         83
1052: invokestatic  #18
1055: dload         85
1057: invokestatic  #38
1060: invokestatic  #39
1063: dload         87
1065: invokestatic  #38
1068: invokestatic  #39
1071: dload         89
1073: invokestatic  #38
1076: invokestatic  #39
1079: aload         91
1081: invokestatic  #18
1084: aload         92
1086: invokestatic  #18
1089: aload         93
1091: invokestatic  #18
1094: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test052
Start line: 3921
End line: 3982
Method source code: 
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet4 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList3);
        double double5 = polyhedronsSet4.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = vector3D6.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane10 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D6, vector3D9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane17 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D13, vector3D16);
        double double18 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16);
        double double19 = plane10.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane20 = plane10.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion21 = subPlane20.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane22 = polyhedronsSet4.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane20);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform23 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion24 = polyhedronsSet4.applyTransform(euclidean3DTransform23);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree26 = polyhedronsSet4.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion27 = polyhedronsSet1.buildNew(euclidean3DBSPTree26);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane28 = null;
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree29 = euclidean3DBSPTree26.split(euclidean3DSubHyperplane28);
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTreeVisitor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            euclidean3DBSPTree29.visit(euclidean3DBSPTreeVisitor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(subPlane20);
        org.junit.Assert.assertNotNull(euclidean2DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane22);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion24);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree26);
        org.junit.Assert.assertNotNull(euclidean3DRegion27);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #231
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: new           #25
49: dup
50: invokespecial #26
53: astore        5
55: new           #8
58: dup
59: aload         5
61: invokespecial #27
64: astore        6
66: aload         6
68: invokevirtual #28
71: dstore        7
73: getstatic     #10
76: astore        9
78: aload         9
80: invokevirtual #11
83: astore        10
85: getstatic     #10
88: astore        11
90: aload         11
92: invokevirtual #11
95: astore        12
97: new           #12
100: dup
101: aload         9
103: aload         12
105: invokespecial #13
108: astore        13
110: getstatic     #10
113: astore        14
115: aload         14
117: invokevirtual #11
120: astore        15
122: getstatic     #10
125: astore        16
127: aload         16
129: invokevirtual #11
132: astore        17
134: getstatic     #10
137: astore        18
139: aload         18
141: invokevirtual #11
144: astore        19
146: new           #12
149: dup
150: aload         16
152: aload         19
154: invokespecial #13
157: astore        20
159: aload         14
161: aload         19
163: invokevirtual #22
166: dstore        21
168: aload         13
170: aload         19
172: invokevirtual #23
175: dstore        23
177: aload         13
179: invokevirtual #24
182: astore        25
184: aload         25
186: invokevirtual #32
189: astore        26
191: aload         6
193: aload         25
195: invokevirtual #73
198: astore        27
200: aconst_null
201: astore        28
203: aload         6
205: aload         28
207: invokevirtual #148
210: astore        29
212: aload         6
214: iconst_0
215: invokevirtual #30
218: astore        30
220: aload_2
221: aload         30
223: invokevirtual #29
226: astore        31
228: aconst_null
229: astore        32
231: aload         30
233: aload         32
235: invokevirtual #232
238: astore        33
240: aconst_null
241: astore        34
243: aload         33
245: aload         34
247: invokevirtual #75
250: ldc           #15
252: invokestatic  #16
255: goto          260
258: astore        35
260: new           #40
263: dup
264: invokespecial #41
267: ldc           #42
269: invokevirtual #43
272: dload_3
273: invokevirtual #44
276: ldc           #45
278: invokevirtual #43
281: dconst_0
282: invokevirtual #44
285: ldc           #42
287: invokevirtual #43
290: invokevirtual #46
293: dload_3
294: dconst_0
295: dcmpl
296: ifne          303
299: iconst_1
300: goto          304
303: iconst_0
304: invokestatic  #47
307: new           #40
310: dup
311: invokespecial #41
314: ldc           #42
316: invokevirtual #43
319: dload         7
321: invokevirtual #44
324: ldc           #45
326: invokevirtual #43
329: dconst_0
330: invokevirtual #44
333: ldc           #42
335: invokevirtual #43
338: invokevirtual #46
341: dload         7
343: dconst_0
344: dcmpl
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #47
356: aload         9
358: invokestatic  #18
361: aload         10
363: invokestatic  #18
366: aload         11
368: invokestatic  #18
371: aload         12
373: invokestatic  #18
376: aload         14
378: invokestatic  #18
381: aload         15
383: invokestatic  #18
386: aload         16
388: invokestatic  #18
391: aload         17
393: invokestatic  #18
396: aload         18
398: invokestatic  #18
401: aload         19
403: invokestatic  #18
406: dload         21
408: invokestatic  #38
411: invokestatic  #39
414: dload         23
416: invokestatic  #38
419: invokestatic  #39
422: aload         25
424: invokestatic  #18
427: aload         26
429: invokestatic  #18
432: aload         27
434: invokestatic  #18
437: aload         29
439: invokestatic  #18
442: aload         30
444: invokestatic  #18
447: aload         31
449: invokestatic  #18
452: aload         33
454: invokestatic  #18
457: return
Exception table:
from    to  target type
243   255   258   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test053
Start line: 3985
End line: 4062
Method source code: 
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList20 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet21 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList20);
        double double22 = polyhedronsSet21.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane27 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        double double35 = vector3D28.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double36 = plane27.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane37 = plane27.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion38 = subPlane37.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane39 = polyhedronsSet21.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane37);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane37);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(subPlane37);
        org.junit.Assert.assertNotNull(euclidean2DRegion38);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane39);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane40);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #233
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: new           #25
175: dup
176: invokespecial #26
179: astore        24
181: new           #8
184: dup
185: aload         24
187: invokespecial #27
190: astore        25
192: aload         25
194: invokevirtual #28
197: dstore        26
199: getstatic     #10
202: astore        28
204: aload         28
206: invokevirtual #11
209: astore        29
211: getstatic     #10
214: astore        30
216: aload         30
218: invokevirtual #11
221: astore        31
223: new           #12
226: dup
227: aload         28
229: aload         31
231: invokespecial #13
234: astore        32
236: getstatic     #10
239: astore        33
241: aload         33
243: invokevirtual #11
246: astore        34
248: getstatic     #10
251: astore        35
253: aload         35
255: invokevirtual #11
258: astore        36
260: getstatic     #10
263: astore        37
265: aload         37
267: invokevirtual #11
270: astore        38
272: new           #12
275: dup
276: aload         35
278: aload         38
280: invokespecial #13
283: astore        39
285: aload         33
287: aload         38
289: invokevirtual #22
292: dstore        40
294: aload         32
296: aload         38
298: invokevirtual #23
301: dstore        42
303: aload         32
305: invokevirtual #24
308: astore        44
310: aload         44
312: invokevirtual #32
315: astore        45
317: aload         25
319: aload         44
321: invokevirtual #73
324: astore        46
326: aload_2
327: aload         44
329: invokevirtual #73
332: astore        47
334: new           #40
337: dup
338: invokespecial #41
341: ldc           #42
343: invokevirtual #43
346: dload_3
347: invokevirtual #44
350: ldc           #45
352: invokevirtual #43
355: dconst_0
356: invokevirtual #44
359: ldc           #42
361: invokevirtual #43
364: invokevirtual #46
367: dload_3
368: dconst_0
369: dcmpl
370: ifne          377
373: iconst_1
374: goto          378
377: iconst_0
378: invokestatic  #47
381: aload         5
383: invokestatic  #18
386: aload         6
388: invokestatic  #18
391: aload         7
393: invokestatic  #18
396: aload         8
398: invokestatic  #18
401: aload         10
403: invokestatic  #18
406: aload         11
408: invokestatic  #18
411: aload         12
413: invokestatic  #18
416: aload         13
418: invokestatic  #18
421: aload         14
423: invokestatic  #18
426: aload         15
428: invokestatic  #18
431: dload         17
433: invokestatic  #38
436: invokestatic  #39
439: dload         19
441: invokestatic  #38
444: invokestatic  #39
447: aload         21
449: invokestatic  #18
452: aload         22
454: invokestatic  #18
457: aload         23
459: invokestatic  #18
462: new           #40
465: dup
466: invokespecial #41
469: ldc           #42
471: invokevirtual #43
474: dload         26
476: invokevirtual #44
479: ldc           #45
481: invokevirtual #43
484: dconst_0
485: invokevirtual #44
488: ldc           #42
490: invokevirtual #43
493: invokevirtual #46
496: dload         26
498: dconst_0
499: dcmpl
500: ifne          507
503: iconst_1
504: goto          508
507: iconst_0
508: invokestatic  #47
511: aload         28
513: invokestatic  #18
516: aload         29
518: invokestatic  #18
521: aload         30
523: invokestatic  #18
526: aload         31
528: invokestatic  #18
531: aload         33
533: invokestatic  #18
536: aload         34
538: invokestatic  #18
541: aload         35
543: invokestatic  #18
546: aload         36
548: invokestatic  #18
551: aload         37
553: invokestatic  #18
556: aload         38
558: invokestatic  #18
561: dload         40
563: invokestatic  #38
566: invokestatic  #39
569: dload         42
571: invokestatic  #38
574: invokestatic  #39
577: aload         44
579: invokestatic  #18
582: aload         45
584: invokestatic  #18
587: aload         46
589: invokestatic  #18
592: aload         47
594: invokestatic  #18
597: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test054
Start line: 4065
End line: 4147
Method source code: 
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList22 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet23 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList22);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion25 = polyhedronsSet23.buildNew(euclidean3DBSPTree24);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree27 = polyhedronsSet23.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet28 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree27);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList29 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet30 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList29);
        double double31 = polyhedronsSet30.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree34 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion35 = polyhedronsSet33.buildNew(euclidean3DBSPTree34);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = polyhedronsSet33.getTree(false);
        boolean boolean38 = polyhedronsSet30.isEmpty(euclidean3DBSPTree37);
        boolean boolean39 = polyhedronsSet28.isEmpty(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = euclidean3DBSPTree37.getCut();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion41 = euclidean3DAbstractRegion21.buildNew(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree43 = euclidean3DRegion41.getTree(false);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList44 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet45 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList44);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree46 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion47 = polyhedronsSet45.buildNew(euclidean3DBSPTree46);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree49 = polyhedronsSet45.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet50 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = euclidean3DBSPTree49.getPlus();
        euclidean3DBSPTree43.insertInTree(euclidean3DBSPTree51, true);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DRegion25);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion35);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(euclidean3DSubHyperplane40);
        org.junit.Assert.assertNotNull(euclidean3DRegion41);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree43);
        org.junit.Assert.assertNotNull(euclidean3DRegion47);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree49);
        org.junit.Assert.assertNull(euclidean3DBSPTree51);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #234
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: aconst_null
173: astore        24
175: aload_2
176: aload         24
178: invokevirtual #148
181: astore        25
183: new           #25
186: dup
187: invokespecial #26
190: astore        26
192: new           #8
195: dup
196: aload         26
198: invokespecial #27
201: astore        27
203: aconst_null
204: astore        28
206: aload         27
208: aload         28
210: invokevirtual #29
213: astore        29
215: aload         27
217: iconst_0
218: invokevirtual #30
221: astore        30
223: new           #8
226: dup
227: aload         30
229: invokespecial #9
232: astore        31
234: new           #25
237: dup
238: invokespecial #26
241: astore        32
243: new           #8
246: dup
247: aload         32
249: invokespecial #27
252: astore        33
254: aload         33
256: invokevirtual #28
259: dstore        34
261: new           #25
264: dup
265: invokespecial #26
268: astore        36
270: new           #8
273: dup
274: aload         36
276: invokespecial #27
279: astore        37
281: aconst_null
282: astore        38
284: aload         37
286: aload         38
288: invokevirtual #29
291: astore        39
293: aload         37
295: iconst_0
296: invokevirtual #30
299: astore        40
301: aload         33
303: aload         40
305: invokevirtual #31
308: istore        41
310: aload         31
312: aload         40
314: invokevirtual #31
317: istore        42
319: aload         40
321: invokevirtual #149
324: astore        43
326: aload         25
328: aload         40
330: invokevirtual #150
333: astore        44
335: aload         44
337: iconst_0
338: invokeinterface #235,  2
343: astore        45
345: new           #25
348: dup
349: invokespecial #26
352: astore        46
354: new           #8
357: dup
358: aload         46
360: invokespecial #27
363: astore        47
365: aconst_null
366: astore        48
368: aload         47
370: aload         48
372: invokevirtual #29
375: astore        49
377: aload         47
379: iconst_0
380: invokevirtual #30
383: astore        50
385: new           #8
388: dup
389: aload         50
391: invokespecial #9
394: astore        51
396: aload         50
398: invokevirtual #222
401: astore        52
403: aload         45
405: aload         52
407: iconst_1
408: invokevirtual #108
411: new           #40
414: dup
415: invokespecial #41
418: ldc           #42
420: invokevirtual #43
423: dload_3
424: invokevirtual #44
427: ldc           #45
429: invokevirtual #43
432: dconst_0
433: invokevirtual #44
436: ldc           #42
438: invokevirtual #43
441: invokevirtual #46
444: dload_3
445: dconst_0
446: dcmpl
447: ifne          454
450: iconst_1
451: goto          455
454: iconst_0
455: invokestatic  #47
458: aload         5
460: invokestatic  #18
463: aload         6
465: invokestatic  #18
468: aload         7
470: invokestatic  #18
473: aload         8
475: invokestatic  #18
478: aload         10
480: invokestatic  #18
483: aload         11
485: invokestatic  #18
488: aload         12
490: invokestatic  #18
493: aload         13
495: invokestatic  #18
498: aload         14
500: invokestatic  #18
503: aload         15
505: invokestatic  #18
508: dload         17
510: invokestatic  #38
513: invokestatic  #39
516: dload         19
518: invokestatic  #38
521: invokestatic  #39
524: aload         21
526: invokestatic  #18
529: aload         22
531: invokestatic  #18
534: aload         23
536: invokestatic  #18
539: aload         25
541: invokestatic  #18
544: aload         29
546: invokestatic  #18
549: aload         30
551: invokestatic  #18
554: new           #40
557: dup
558: invokespecial #41
561: ldc           #42
563: invokevirtual #43
566: dload         34
568: invokevirtual #44
571: ldc           #45
573: invokevirtual #43
576: dconst_0
577: invokevirtual #44
580: ldc           #42
582: invokevirtual #43
585: invokevirtual #46
588: dload         34
590: dconst_0
591: dcmpl
592: ifne          599
595: iconst_1
596: goto          600
599: iconst_0
600: invokestatic  #47
603: aload         39
605: invokestatic  #18
608: aload         40
610: invokestatic  #18
613: new           #40
616: dup
617: invokespecial #41
620: ldc           #42
622: invokevirtual #43
625: iload         41
627: invokevirtual #48
630: ldc           #45
632: invokevirtual #43
635: iconst_0
636: invokevirtual #48
639: ldc           #42
641: invokevirtual #43
644: invokevirtual #46
647: iload         41
649: ifne          656
652: iconst_1
653: goto          657
656: iconst_0
657: invokestatic  #47
660: new           #40
663: dup
664: invokespecial #41
667: ldc           #42
669: invokevirtual #43
672: iload         42
674: invokevirtual #48
677: ldc           #45
679: invokevirtual #43
682: iconst_0
683: invokevirtual #48
686: ldc           #42
688: invokevirtual #43
691: invokevirtual #46
694: iload         42
696: ifne          703
699: iconst_1
700: goto          704
703: iconst_0
704: invokestatic  #47
707: aload         43
709: invokestatic  #78
712: aload         44
714: invokestatic  #18
717: aload         45
719: invokestatic  #18
722: aload         49
724: invokestatic  #18
727: aload         50
729: invokestatic  #18
732: aload         52
734: invokestatic  #78
737: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test055
Start line: 4150
End line: 4274
Method source code: 
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion15 = subPlane14.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane16 = subPlane14.getHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane21 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D17, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        double double29 = vector3D22.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        double double30 = plane21.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane31 = plane21.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        double double34 = polyhedronsSet33.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList35 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList35);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion38 = polyhedronsSet36.buildNew(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree40 = polyhedronsSet36.getTree(false);
        boolean boolean41 = polyhedronsSet33.isEmpty(euclidean3DBSPTree40);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList42 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet43 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList42);
        double double44 = polyhedronsSet43.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList45 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet46 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList45);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree47 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion48 = polyhedronsSet46.buildNew(euclidean3DBSPTree47);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree50 = polyhedronsSet46.getTree(false);
        boolean boolean51 = polyhedronsSet43.isEmpty(euclidean3DBSPTree50);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = vector3D54.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane56 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D52, vector3D55);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = vector3D57.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D59.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane63 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D59, vector3D62);
        double double64 = vector3D57.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62);
        double double65 = plane56.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane66 = plane56.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion67 = subPlane66.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree68 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane31, euclidean3DBSPTree40, euclidean3DBSPTree50, (java.lang.Object) subPlane66);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane69 = subPlane14.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane31);
        boolean boolean70 = subPlane14.isEmpty();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(euclidean2DRegion15);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(subPlane31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion38);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion48);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(subPlane66);
        org.junit.Assert.assertNotNull(euclidean2DRegion67);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #236
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: aload         17
131: invokevirtual #32
134: astore        18
136: aload         17
138: invokevirtual #71
141: astore        19
143: getstatic     #10
146: astore        20
148: aload         20
150: invokevirtual #11
153: astore        21
155: getstatic     #10
158: astore        22
160: aload         22
162: invokevirtual #11
165: astore        23
167: new           #12
170: dup
171: aload         20
173: aload         23
175: invokespecial #13
178: astore        24
180: getstatic     #10
183: astore        25
185: aload         25
187: invokevirtual #11
190: astore        26
192: getstatic     #10
195: astore        27
197: aload         27
199: invokevirtual #11
202: astore        28
204: getstatic     #10
207: astore        29
209: aload         29
211: invokevirtual #11
214: astore        30
216: new           #12
219: dup
220: aload         27
222: aload         30
224: invokespecial #13
227: astore        31
229: aload         25
231: aload         30
233: invokevirtual #22
236: dstore        32
238: aload         24
240: aload         30
242: invokevirtual #23
245: dstore        34
247: aload         24
249: invokevirtual #24
252: astore        36
254: new           #25
257: dup
258: invokespecial #26
261: astore        37
263: new           #8
266: dup
267: aload         37
269: invokespecial #27
272: astore        38
274: aload         38
276: invokevirtual #28
279: dstore        39
281: new           #25
284: dup
285: invokespecial #26
288: astore        41
290: new           #8
293: dup
294: aload         41
296: invokespecial #27
299: astore        42
301: aconst_null
302: astore        43
304: aload         42
306: aload         43
308: invokevirtual #29
311: astore        44
313: aload         42
315: iconst_0
316: invokevirtual #30
319: astore        45
321: aload         38
323: aload         45
325: invokevirtual #31
328: istore        46
330: new           #25
333: dup
334: invokespecial #26
337: astore        47
339: new           #8
342: dup
343: aload         47
345: invokespecial #27
348: astore        48
350: aload         48
352: invokevirtual #28
355: dstore        49
357: new           #25
360: dup
361: invokespecial #26
364: astore        51
366: new           #8
369: dup
370: aload         51
372: invokespecial #27
375: astore        52
377: aconst_null
378: astore        53
380: aload         52
382: aload         53
384: invokevirtual #29
387: astore        54
389: aload         52
391: iconst_0
392: invokevirtual #30
395: astore        55
397: aload         48
399: aload         55
401: invokevirtual #31
404: istore        56
406: getstatic     #10
409: astore        57
411: aload         57
413: invokevirtual #11
416: astore        58
418: getstatic     #10
421: astore        59
423: aload         59
425: invokevirtual #11
428: astore        60
430: new           #12
433: dup
434: aload         57
436: aload         60
438: invokespecial #13
441: astore        61
443: getstatic     #10
446: astore        62
448: aload         62
450: invokevirtual #11
453: astore        63
455: getstatic     #10
458: astore        64
460: aload         64
462: invokevirtual #11
465: astore        65
467: getstatic     #10
470: astore        66
472: aload         66
474: invokevirtual #11
477: astore        67
479: new           #12
482: dup
483: aload         64
485: aload         67
487: invokespecial #13
490: astore        68
492: aload         62
494: aload         67
496: invokevirtual #22
499: dstore        69
501: aload         61
503: aload         67
505: invokevirtual #23
508: dstore        71
510: aload         61
512: invokevirtual #24
515: astore        73
517: aload         73
519: invokevirtual #32
522: astore        74
524: new           #33
527: dup
528: aload         36
530: aload         45
532: aload         55
534: aload         73
536: invokespecial #34
539: astore        75
541: aload         17
543: aload         36
545: invokevirtual #72
548: astore        76
550: aload         17
552: invokevirtual #93
555: istore        77
557: aload_1
558: invokestatic  #18
561: aload_2
562: invokestatic  #18
565: aload_3
566: invokestatic  #18
569: aload         4
571: invokestatic  #18
574: aload         6
576: invokestatic  #18
579: aload         7
581: invokestatic  #18
584: aload         8
586: invokestatic  #18
589: aload         9
591: invokestatic  #18
594: aload         10
596: invokestatic  #18
599: aload         11
601: invokestatic  #18
604: dload         13
606: invokestatic  #38
609: invokestatic  #39
612: dload         15
614: invokestatic  #38
617: invokestatic  #39
620: aload         17
622: invokestatic  #18
625: aload         18
627: invokestatic  #18
630: aload         19
632: invokestatic  #18
635: aload         20
637: invokestatic  #18
640: aload         21
642: invokestatic  #18
645: aload         22
647: invokestatic  #18
650: aload         23
652: invokestatic  #18
655: aload         25
657: invokestatic  #18
660: aload         26
662: invokestatic  #18
665: aload         27
667: invokestatic  #18
670: aload         28
672: invokestatic  #18
675: aload         29
677: invokestatic  #18
680: aload         30
682: invokestatic  #18
685: dload         32
687: invokestatic  #38
690: invokestatic  #39
693: dload         34
695: invokestatic  #38
698: invokestatic  #39
701: aload         36
703: invokestatic  #18
706: new           #40
709: dup
710: invokespecial #41
713: ldc           #42
715: invokevirtual #43
718: dload         39
720: invokevirtual #44
723: ldc           #45
725: invokevirtual #43
728: dconst_0
729: invokevirtual #44
732: ldc           #42
734: invokevirtual #43
737: invokevirtual #46
740: dload         39
742: dconst_0
743: dcmpl
744: ifne          751
747: iconst_1
748: goto          752
751: iconst_0
752: invokestatic  #47
755: aload         44
757: invokestatic  #18
760: aload         45
762: invokestatic  #18
765: new           #40
768: dup
769: invokespecial #41
772: ldc           #42
774: invokevirtual #43
777: iload         46
779: invokevirtual #48
782: ldc           #45
784: invokevirtual #43
787: iconst_0
788: invokevirtual #48
791: ldc           #42
793: invokevirtual #43
796: invokevirtual #46
799: iload         46
801: ifne          808
804: iconst_1
805: goto          809
808: iconst_0
809: invokestatic  #47
812: new           #40
815: dup
816: invokespecial #41
819: ldc           #42
821: invokevirtual #43
824: dload         49
826: invokevirtual #44
829: ldc           #45
831: invokevirtual #43
834: dconst_0
835: invokevirtual #44
838: ldc           #42
840: invokevirtual #43
843: invokevirtual #46
846: dload         49
848: dconst_0
849: dcmpl
850: ifne          857
853: iconst_1
854: goto          858
857: iconst_0
858: invokestatic  #47
861: aload         54
863: invokestatic  #18
866: aload         55
868: invokestatic  #18
871: new           #40
874: dup
875: invokespecial #41
878: ldc           #42
880: invokevirtual #43
883: iload         56
885: invokevirtual #48
888: ldc           #45
890: invokevirtual #43
893: iconst_0
894: invokevirtual #48
897: ldc           #42
899: invokevirtual #43
902: invokevirtual #46
905: iload         56
907: ifne          914
910: iconst_1
911: goto          915
914: iconst_0
915: invokestatic  #47
918: aload         57
920: invokestatic  #18
923: aload         58
925: invokestatic  #18
928: aload         59
930: invokestatic  #18
933: aload         60
935: invokestatic  #18
938: aload         62
940: invokestatic  #18
943: aload         63
945: invokestatic  #18
948: aload         64
950: invokestatic  #18
953: aload         65
955: invokestatic  #18
958: aload         66
960: invokestatic  #18
963: aload         67
965: invokestatic  #18
968: dload         69
970: invokestatic  #38
973: invokestatic  #39
976: dload         71
978: invokestatic  #38
981: invokestatic  #39
984: aload         73
986: invokestatic  #18
989: aload         74
991: invokestatic  #18
994: aload         76
996: invokestatic  #18
999: new           #40
1002: dup
1003: invokespecial #41
1006: ldc           #42
1008: invokevirtual #43
1011: iload         77
1013: invokevirtual #48
1016: ldc           #45
1018: invokevirtual #43
1021: iconst_0
1022: invokevirtual #48
1025: ldc           #42
1027: invokevirtual #43
1030: invokevirtual #46
1033: iload         77
1035: ifne          1042
1038: iconst_1
1039: goto          1043
1042: iconst_0
1043: invokestatic  #47
1046: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test056
Start line: 4277
End line: 4391
Method source code: 
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane24 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D20, vector3D23);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line29 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D27, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = plane24.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        plane35.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        double double58 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        double double59 = plane50.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        plane50.revertSelf();
        double double61 = plane35.getOffset(plane50);
        org.apache.commons.math3.geometry.euclidean.threed.Line line62 = plane24.intersection(plane35);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane63 = subPlane17.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane24);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion64 = subPlane17.getRemainingRegion();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(line62);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane63);
        org.junit.Assert.assertNotNull(euclidean2DRegion64);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #237
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: getstatic     #10
175: astore        24
177: aload         24
179: invokevirtual #11
182: astore        25
184: getstatic     #10
187: astore        26
189: aload         26
191: invokevirtual #11
194: astore        27
196: new           #12
199: dup
200: aload         24
202: aload         27
204: invokespecial #13
207: astore        28
209: new           #60
212: dup
213: dconst_0
214: ldc2_w        #61
217: invokespecial #63
220: astore        29
222: new           #64
225: dup
226: aload         29
228: dconst_0
229: invokespecial #65
232: astore        30
234: aload         28
236: aload         29
238: invokevirtual #66
241: astore        31
243: getstatic     #10
246: astore        32
248: aload         32
250: invokevirtual #11
253: astore        33
255: getstatic     #10
258: astore        34
260: aload         34
262: invokevirtual #11
265: astore        35
267: new           #12
270: dup
271: aload         32
273: aload         35
275: invokespecial #13
278: astore        36
280: getstatic     #10
283: astore        37
285: aload         37
287: invokevirtual #11
290: astore        38
292: getstatic     #10
295: astore        39
297: aload         39
299: invokevirtual #11
302: astore        40
304: getstatic     #10
307: astore        41
309: aload         41
311: invokevirtual #11
314: astore        42
316: new           #12
319: dup
320: aload         39
322: aload         42
324: invokespecial #13
327: astore        43
329: aload         37
331: aload         42
333: invokevirtual #22
336: dstore        44
338: aload         36
340: aload         42
342: invokevirtual #23
345: dstore        46
347: aload         36
349: invokevirtual #20
352: getstatic     #10
355: astore        48
357: aload         48
359: invokevirtual #11
362: astore        49
364: getstatic     #10
367: astore        50
369: aload         50
371: invokevirtual #11
374: astore        51
376: new           #12
379: dup
380: aload         48
382: aload         51
384: invokespecial #13
387: astore        52
389: getstatic     #10
392: astore        53
394: aload         53
396: invokevirtual #11
399: astore        54
401: getstatic     #10
404: astore        55
406: aload         55
408: invokevirtual #11
411: astore        56
413: getstatic     #10
416: astore        57
418: aload         57
420: invokevirtual #11
423: astore        58
425: new           #12
428: dup
429: aload         55
431: aload         58
433: invokespecial #13
436: astore        59
438: aload         53
440: aload         58
442: invokevirtual #22
445: dstore        60
447: aload         52
449: aload         58
451: invokevirtual #23
454: dstore        62
456: aload         52
458: invokevirtual #20
461: aload         36
463: aload         52
465: invokevirtual #82
468: dstore        64
470: aload         28
472: aload         36
474: invokevirtual #134
477: astore        66
479: aload         21
481: aload         28
483: invokevirtual #114
486: astore        67
488: aload         21
490: invokevirtual #32
493: astore        68
495: new           #40
498: dup
499: invokespecial #41
502: ldc           #42
504: invokevirtual #43
507: dload_3
508: invokevirtual #44
511: ldc           #45
513: invokevirtual #43
516: dconst_0
517: invokevirtual #44
520: ldc           #42
522: invokevirtual #43
525: invokevirtual #46
528: dload_3
529: dconst_0
530: dcmpl
531: ifne          538
534: iconst_1
535: goto          539
538: iconst_0
539: invokestatic  #47
542: aload         5
544: invokestatic  #18
547: aload         6
549: invokestatic  #18
552: aload         7
554: invokestatic  #18
557: aload         8
559: invokestatic  #18
562: aload         10
564: invokestatic  #18
567: aload         11
569: invokestatic  #18
572: aload         12
574: invokestatic  #18
577: aload         13
579: invokestatic  #18
582: aload         14
584: invokestatic  #18
587: aload         15
589: invokestatic  #18
592: dload         17
594: invokestatic  #38
597: invokestatic  #39
600: dload         19
602: invokestatic  #38
605: invokestatic  #39
608: aload         21
610: invokestatic  #18
613: aload         22
615: invokestatic  #18
618: aload         23
620: invokestatic  #18
623: aload         24
625: invokestatic  #18
628: aload         25
630: invokestatic  #18
633: aload         26
635: invokestatic  #18
638: aload         27
640: invokestatic  #18
643: aload         31
645: invokestatic  #18
648: aload         32
650: invokestatic  #18
653: aload         33
655: invokestatic  #18
658: aload         34
660: invokestatic  #18
663: aload         35
665: invokestatic  #18
668: aload         37
670: invokestatic  #18
673: aload         38
675: invokestatic  #18
678: aload         39
680: invokestatic  #18
683: aload         40
685: invokestatic  #18
688: aload         41
690: invokestatic  #18
693: aload         42
695: invokestatic  #18
698: dload         44
700: invokestatic  #38
703: invokestatic  #39
706: dload         46
708: invokestatic  #38
711: invokestatic  #39
714: aload         48
716: invokestatic  #18
719: aload         49
721: invokestatic  #18
724: aload         50
726: invokestatic  #18
729: aload         51
731: invokestatic  #18
734: aload         53
736: invokestatic  #18
739: aload         54
741: invokestatic  #18
744: aload         55
746: invokestatic  #18
749: aload         56
751: invokestatic  #18
754: aload         57
756: invokestatic  #18
759: aload         58
761: invokestatic  #18
764: dload         60
766: invokestatic  #38
769: invokestatic  #39
772: dload         62
774: invokestatic  #38
777: invokestatic  #39
780: dload         64
782: invokestatic  #38
785: invokestatic  #39
788: aload         66
790: invokestatic  #18
793: aload         67
795: invokestatic  #18
798: aload         68
800: invokestatic  #18
803: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test057
Start line: 4394
End line: 4461
Method source code: 
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane32 = subPlane14.split(euclidean3DHyperplane31);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane33 = subPlane14.copySelf();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane32);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #238
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: aload         18
136: invokevirtual #11
139: astore        19
141: getstatic     #10
144: astore        20
146: aload         20
148: invokevirtual #11
151: astore        21
153: new           #12
156: dup
157: aload         18
159: aload         21
161: invokespecial #13
164: astore        22
166: getstatic     #10
169: astore        23
171: aload         23
173: invokevirtual #11
176: astore        24
178: getstatic     #10
181: astore        25
183: aload         25
185: invokevirtual #11
188: astore        26
190: getstatic     #10
193: astore        27
195: aload         27
197: invokevirtual #11
200: astore        28
202: new           #12
205: dup
206: aload         25
208: aload         28
210: invokespecial #13
213: astore        29
215: aload         23
217: aload         28
219: invokevirtual #22
222: dstore        30
224: aload         22
226: aload         28
228: invokevirtual #23
231: dstore        32
233: aload         22
235: invokevirtual #24
238: astore        34
240: aload         34
242: invokevirtual #32
245: astore        35
247: aload         34
249: invokevirtual #71
252: astore        36
254: aload         17
256: aload         36
258: invokevirtual #114
261: astore        37
263: aload         17
265: invokevirtual #239
268: astore        38
270: aload_1
271: invokestatic  #18
274: aload_2
275: invokestatic  #18
278: aload_3
279: invokestatic  #18
282: aload         4
284: invokestatic  #18
287: aload         6
289: invokestatic  #18
292: aload         7
294: invokestatic  #18
297: aload         8
299: invokestatic  #18
302: aload         9
304: invokestatic  #18
307: aload         10
309: invokestatic  #18
312: aload         11
314: invokestatic  #18
317: dload         13
319: invokestatic  #38
322: invokestatic  #39
325: dload         15
327: invokestatic  #38
330: invokestatic  #39
333: aload         17
335: invokestatic  #18
338: aload         18
340: invokestatic  #18
343: aload         19
345: invokestatic  #18
348: aload         20
350: invokestatic  #18
353: aload         21
355: invokestatic  #18
358: aload         23
360: invokestatic  #18
363: aload         24
365: invokestatic  #18
368: aload         25
370: invokestatic  #18
373: aload         26
375: invokestatic  #18
378: aload         27
380: invokestatic  #18
383: aload         28
385: invokestatic  #18
388: dload         30
390: invokestatic  #38
393: invokestatic  #39
396: dload         32
398: invokestatic  #38
401: invokestatic  #39
404: aload         34
406: invokestatic  #18
409: aload         35
411: invokestatic  #18
414: aload         36
416: invokestatic  #18
419: aload         37
421: invokestatic  #18
424: aload         38
426: invokestatic  #18
429: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test058
Start line: 4464
End line: 4526
Method source code: 
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = plane4.copySelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane20 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D16, vector3D19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D25, vector3D28);
        double double30 = vector3D23.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0d, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D19.subtract(83.24061508662703d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D23);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector33 = plane15.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D19);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(plane15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(euclidean2DVector33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #240
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: aload         5
131: invokevirtual #130
134: astore        18
136: getstatic     #10
139: astore        19
141: aload         19
143: invokevirtual #11
146: astore        20
148: getstatic     #10
151: astore        21
153: aload         21
155: invokevirtual #11
158: astore        22
160: new           #12
163: dup
164: aload         19
166: aload         22
168: invokespecial #13
171: astore        23
173: getstatic     #10
176: astore        24
178: aload         24
180: invokevirtual #11
183: astore        25
185: getstatic     #10
188: astore        26
190: aload         26
192: invokevirtual #11
195: astore        27
197: getstatic     #10
200: astore        28
202: aload         28
204: invokevirtual #11
207: astore        29
209: new           #12
212: dup
213: aload         26
215: aload         29
217: invokespecial #13
220: astore        30
222: aload         24
224: aload         29
226: invokevirtual #22
229: dstore        31
231: new           #175
234: dup
235: dconst_1
236: aload         24
238: invokespecial #180
241: astore        33
243: aload         22
245: ldc2_w        #53
248: aload         24
250: invokevirtual #181
253: astore        34
255: aload         18
257: aload         22
259: invokevirtual #97
262: astore        35
264: aload_1
265: invokestatic  #18
268: aload_2
269: invokestatic  #18
272: aload_3
273: invokestatic  #18
276: aload         4
278: invokestatic  #18
281: aload         6
283: invokestatic  #18
286: aload         7
288: invokestatic  #18
291: aload         8
293: invokestatic  #18
296: aload         9
298: invokestatic  #18
301: aload         10
303: invokestatic  #18
306: aload         11
308: invokestatic  #18
311: dload         13
313: invokestatic  #38
316: invokestatic  #39
319: dload         15
321: invokestatic  #38
324: invokestatic  #39
327: aload         17
329: invokestatic  #18
332: aload         18
334: invokestatic  #18
337: aload         19
339: invokestatic  #18
342: aload         20
344: invokestatic  #18
347: aload         21
349: invokestatic  #18
352: aload         22
354: invokestatic  #18
357: aload         24
359: invokestatic  #18
362: aload         25
364: invokestatic  #18
367: aload         26
369: invokestatic  #18
372: aload         27
374: invokestatic  #18
377: aload         28
379: invokestatic  #18
382: aload         29
384: invokestatic  #18
387: dload         31
389: invokestatic  #38
392: invokestatic  #39
395: aload         34
397: invokestatic  #18
400: aload         35
402: invokestatic  #18
405: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test059
Start line: 4529
End line: 4609
Method source code: 
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        boolean boolean37 = polyhedronsSet36.isEmpty();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.Side side39 = polyhedronsSet36.side(euclidean3DHyperplane38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #241
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: getstatic     #10
132: astore        18
134: aload         18
136: invokevirtual #11
139: astore        19
141: getstatic     #10
144: astore        20
146: aload         20
148: invokevirtual #11
151: astore        21
153: new           #12
156: dup
157: aload         18
159: aload         21
161: invokespecial #13
164: astore        22
166: getstatic     #10
169: astore        23
171: aload         23
173: invokevirtual #11
176: astore        24
178: getstatic     #10
181: astore        25
183: aload         25
185: invokevirtual #11
188: astore        26
190: getstatic     #10
193: astore        27
195: aload         27
197: invokevirtual #11
200: astore        28
202: new           #12
205: dup
206: aload         25
208: aload         28
210: invokespecial #13
213: astore        29
215: aload         23
217: aload         28
219: invokevirtual #22
222: dstore        30
224: aload         22
226: aload         28
228: invokevirtual #23
231: dstore        32
233: aload         22
235: invokevirtual #24
238: astore        34
240: aload         34
242: invokevirtual #32
245: astore        35
247: aload         34
249: invokevirtual #71
252: astore        36
254: new           #25
257: dup
258: invokespecial #26
261: astore        37
263: aload         37
265: aload         17
267: invokevirtual #189
270: istore        38
272: aload         37
274: aload         34
276: invokevirtual #189
279: istore        39
281: new           #8
284: dup
285: aload         37
287: invokespecial #27
290: astore        40
292: new           #8
295: dup
296: aload         37
298: invokespecial #27
301: astore        41
303: aload         41
305: invokevirtual #151
308: istore        42
310: aconst_null
311: astore        43
313: aload         41
315: aload         43
317: invokevirtual #14
320: astore        44
322: ldc           #15
324: invokestatic  #16
327: goto          332
330: astore        44
332: aload_1
333: invokestatic  #18
336: aload_2
337: invokestatic  #18
340: aload_3
341: invokestatic  #18
344: aload         4
346: invokestatic  #18
349: aload         6
351: invokestatic  #18
354: aload         7
356: invokestatic  #18
359: aload         8
361: invokestatic  #18
364: aload         9
366: invokestatic  #18
369: aload         10
371: invokestatic  #18
374: aload         11
376: invokestatic  #18
379: dload         13
381: invokestatic  #38
384: invokestatic  #39
387: dload         15
389: invokestatic  #38
392: invokestatic  #39
395: aload         17
397: invokestatic  #18
400: aload         18
402: invokestatic  #18
405: aload         19
407: invokestatic  #18
410: aload         20
412: invokestatic  #18
415: aload         21
417: invokestatic  #18
420: aload         23
422: invokestatic  #18
425: aload         24
427: invokestatic  #18
430: aload         25
432: invokestatic  #18
435: aload         26
437: invokestatic  #18
440: aload         27
442: invokestatic  #18
445: aload         28
447: invokestatic  #18
450: dload         30
452: invokestatic  #38
455: invokestatic  #39
458: dload         32
460: invokestatic  #38
463: invokestatic  #39
466: aload         34
468: invokestatic  #18
471: aload         35
473: invokestatic  #18
476: aload         36
478: invokestatic  #18
481: new           #40
484: dup
485: invokespecial #41
488: ldc           #42
490: invokevirtual #43
493: iload         38
495: invokevirtual #48
498: ldc           #45
500: invokevirtual #43
503: iconst_1
504: invokevirtual #48
507: ldc           #42
509: invokevirtual #43
512: invokevirtual #46
515: iload         38
517: iconst_1
518: if_icmpne     525
521: iconst_1
522: goto          526
525: iconst_0
526: invokestatic  #47
529: new           #40
532: dup
533: invokespecial #41
536: ldc           #42
538: invokevirtual #43
541: iload         39
543: invokevirtual #48
546: ldc           #45
548: invokevirtual #43
551: iconst_1
552: invokevirtual #48
555: ldc           #42
557: invokevirtual #43
560: invokevirtual #46
563: iload         39
565: iconst_1
566: if_icmpne     573
569: iconst_1
570: goto          574
573: iconst_0
574: invokestatic  #47
577: new           #40
580: dup
581: invokespecial #41
584: ldc           #42
586: invokevirtual #43
589: iload         42
591: invokevirtual #48
594: ldc           #45
596: invokevirtual #43
599: iconst_0
600: invokevirtual #48
603: ldc           #42
605: invokevirtual #43
608: invokevirtual #46
611: iload         42
613: ifne          620
616: iconst_1
617: goto          621
620: iconst_0
621: invokestatic  #47
624: return
Exception table:
from    to  target type
313   327   330   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test060
Start line: 4612
End line: 4628
Method source code: 
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractRegion1 = polygonsSet0.copySelf();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree2 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet3 = polygonsSet0.buildNew(euclidean2DBSPTree2);
        // The following exception was thrown during execution in test generation
        try {
            polygonsSet3.computeGeometricalProperties();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(euclidean2DAbstractRegion1);
        org.junit.Assert.assertNotNull(polygonsSet3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #242
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: aload_1
33: invokevirtual #243
36: astore_2
37: aconst_null
38: astore_3
39: aload_1
40: aload_3
41: invokevirtual #144
44: astore        4
46: aload         4
48: invokevirtual #244
51: ldc           #15
53: invokestatic  #16
56: goto          61
59: astore        5
61: aload_2
62: invokestatic  #18
65: aload         4
67: invokestatic  #18
70: return
Exception table:
from    to  target type
46    56    59   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test061
Start line: 4631
End line: 4723
Method source code: 
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane52 = subPlane14.copySelf();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane53 = euclidean3DAbstractSubHyperplane52.getHyperplane();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane52);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane53);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #245
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #10
27: astore_1
28: aload_1
29: invokevirtual #11
32: astore_2
33: getstatic     #10
36: astore_3
37: aload_3
38: invokevirtual #11
41: astore        4
43: new           #12
46: dup
47: aload_1
48: aload         4
50: invokespecial #13
53: astore        5
55: getstatic     #10
58: astore        6
60: aload         6
62: invokevirtual #11
65: astore        7
67: getstatic     #10
70: astore        8
72: aload         8
74: invokevirtual #11
77: astore        9
79: getstatic     #10
82: astore        10
84: aload         10
86: invokevirtual #11
89: astore        11
91: new           #12
94: dup
95: aload         8
97: aload         11
99: invokespecial #13
102: astore        12
104: aload         6
106: aload         11
108: invokevirtual #22
111: dstore        13
113: aload         5
115: aload         11
117: invokevirtual #23
120: dstore        15
122: aload         5
124: invokevirtual #24
127: astore        17
129: new           #25
132: dup
133: invokespecial #26
136: astore        18
138: new           #8
141: dup
142: aload         18
144: invokespecial #27
147: astore        19
149: aload         19
151: invokevirtual #28
154: dstore        20
156: new           #25
159: dup
160: invokespecial #26
163: astore        22
165: new           #8
168: dup
169: aload         22
171: invokespecial #27
174: astore        23
176: aconst_null
177: astore        24
179: aload         23
181: aload         24
183: invokevirtual #29
186: astore        25
188: aload         23
190: iconst_0
191: invokevirtual #30
194: astore        26
196: aload         19
198: aload         26
200: invokevirtual #31
203: istore        27
205: new           #25
208: dup
209: invokespecial #26
212: astore        28
214: new           #8
217: dup
218: aload         28
220: invokespecial #27
223: astore        29
225: aload         29
227: invokevirtual #28
230: dstore        30
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aconst_null
253: astore        34
255: aload         33
257: aload         34
259: invokevirtual #29
262: astore        35
264: aload         33
266: iconst_0
267: invokevirtual #30
270: astore        36
272: aload         29
274: aload         36
276: invokevirtual #31
279: istore        37
281: getstatic     #10
284: astore        38
286: aload         38
288: invokevirtual #11
291: astore        39
293: getstatic     #10
296: astore        40
298: aload         40
300: invokevirtual #11
303: astore        41
305: new           #12
308: dup
309: aload         38
311: aload         41
313: invokespecial #13
316: astore        42
318: getstatic     #10
321: astore        43
323: aload         43
325: invokevirtual #11
328: astore        44
330: getstatic     #10
333: astore        45
335: aload         45
337: invokevirtual #11
340: astore        46
342: getstatic     #10
345: astore        47
347: aload         47
349: invokevirtual #11
352: astore        48
354: new           #12
357: dup
358: aload         45
360: aload         48
362: invokespecial #13
365: astore        49
367: aload         43
369: aload         48
371: invokevirtual #22
374: dstore        50
376: aload         42
378: aload         48
380: invokevirtual #23
383: dstore        52
385: aload         42
387: invokevirtual #24
390: astore        54
392: aload         54
394: invokevirtual #32
397: astore        55
399: new           #33
402: dup
403: aload         17
405: aload         26
407: aload         36
409: aload         54
411: invokespecial #34
414: astore        56
416: aload         17
418: invokevirtual #239
421: astore        57
423: aload         57
425: invokevirtual #246
428: astore        58
430: aload_1
431: invokestatic  #18
434: aload_2
435: invokestatic  #18
438: aload_3
439: invokestatic  #18
442: aload         4
444: invokestatic  #18
447: aload         6
449: invokestatic  #18
452: aload         7
454: invokestatic  #18
457: aload         8
459: invokestatic  #18
462: aload         9
464: invokestatic  #18
467: aload         10
469: invokestatic  #18
472: aload         11
474: invokestatic  #18
477: dload         13
479: invokestatic  #38
482: invokestatic  #39
485: dload         15
487: invokestatic  #38
490: invokestatic  #39
493: aload         17
495: invokestatic  #18
498: new           #40
501: dup
502: invokespecial #41
505: ldc           #42
507: invokevirtual #43
510: dload         20
512: invokevirtual #44
515: ldc           #45
517: invokevirtual #43
520: dconst_0
521: invokevirtual #44
524: ldc           #42
526: invokevirtual #43
529: invokevirtual #46
532: dload         20
534: dconst_0
535: dcmpl
536: ifne          543
539: iconst_1
540: goto          544
543: iconst_0
544: invokestatic  #47
547: aload         25
549: invokestatic  #18
552: aload         26
554: invokestatic  #18
557: new           #40
560: dup
561: invokespecial #41
564: ldc           #42
566: invokevirtual #43
569: iload         27
571: invokevirtual #48
574: ldc           #45
576: invokevirtual #43
579: iconst_0
580: invokevirtual #48
583: ldc           #42
585: invokevirtual #43
588: invokevirtual #46
591: iload         27
593: ifne          600
596: iconst_1
597: goto          601
600: iconst_0
601: invokestatic  #47
604: new           #40
607: dup
608: invokespecial #41
611: ldc           #42
613: invokevirtual #43
616: dload         30
618: invokevirtual #44
621: ldc           #45
623: invokevirtual #43
626: dconst_0
627: invokevirtual #44
630: ldc           #42
632: invokevirtual #43
635: invokevirtual #46
638: dload         30
640: dconst_0
641: dcmpl
642: ifne          649
645: iconst_1
646: goto          650
649: iconst_0
650: invokestatic  #47
653: aload         35
655: invokestatic  #18
658: aload         36
660: invokestatic  #18
663: new           #40
666: dup
667: invokespecial #41
670: ldc           #42
672: invokevirtual #43
675: iload         37
677: invokevirtual #48
680: ldc           #45
682: invokevirtual #43
685: iconst_0
686: invokevirtual #48
689: ldc           #42
691: invokevirtual #43
694: invokevirtual #46
697: iload         37
699: ifne          706
702: iconst_1
703: goto          707
706: iconst_0
707: invokestatic  #47
710: aload         38
712: invokestatic  #18
715: aload         39
717: invokestatic  #18
720: aload         40
722: invokestatic  #18
725: aload         41
727: invokestatic  #18
730: aload         43
732: invokestatic  #18
735: aload         44
737: invokestatic  #18
740: aload         45
742: invokestatic  #18
745: aload         46
747: invokestatic  #18
750: aload         47
752: invokestatic  #18
755: aload         48
757: invokestatic  #18
760: dload         50
762: invokestatic  #38
765: invokestatic  #39
768: dload         52
770: invokestatic  #38
773: invokestatic  #39
776: aload         54
778: invokestatic  #18
781: aload         55
783: invokestatic  #18
786: aload         57
788: invokestatic  #18
791: aload         58
793: invokestatic  #18
796: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test062
Start line: 4726
End line: 4741
Method source code: 
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray2 = polygonsSet1.getVertices();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException3 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) vector2DArray2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathInternalError mathInternalError4 = new org.apache.commons.math3.exception.MathInternalError((java.lang.Throwable) mathIllegalStateException3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector2DArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #247
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #56
29: dup
30: invokespecial #87
33: astore_2
34: aload_2
35: invokevirtual #143
38: astore_3
39: new           #224
42: dup
43: aload_1
44: aload_3
45: checkcast     #225
48: invokespecial #226
51: astore        4
53: new           #217
56: dup
57: aload         4
59: invokespecial #248
62: astore        5
64: ldc           #15
66: invokestatic  #16
69: goto          74
72: astore        5
74: aload_3
75: invokestatic  #18
78: return
Exception table:
from    to  target type
53    69    72   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test063
Start line: 4744
End line: 4760
Method source code: 
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean2 = polygonsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet1);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree3 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet4 = polygonsSet0.buildNew(euclidean2DBSPTree3);
        double double5 = polygonsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray6 = polygonsSet0.getVertices();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractRegion7 = polygonsSet0.copySelf();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(polygonsSet4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2DArray6);
        org.junit.Assert.assertNotNull(euclidean2DAbstractRegion7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #249
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: new           #56
35: dup
36: invokespecial #87
39: astore_2
40: aload_1
41: aload_2
42: invokevirtual #88
45: istore_3
46: aconst_null
47: astore        4
49: aload_1
50: aload         4
52: invokevirtual #144
55: astore        5
57: aload_1
58: invokevirtual #210
61: dstore        6
63: aload_1
64: invokevirtual #143
67: astore        8
69: aload_1
70: invokevirtual #243
73: astore        9
75: new           #40
78: dup
79: invokespecial #41
82: ldc           #42
84: invokevirtual #43
87: iload_3
88: invokevirtual #48
91: ldc           #45
93: invokevirtual #43
96: iconst_1
97: invokevirtual #48
100: ldc           #42
102: invokevirtual #43
105: invokevirtual #46
108: iload_3
109: iconst_1
110: if_icmpne     117
113: iconst_1
114: goto          118
117: iconst_0
118: invokestatic  #47
121: aload         5
123: invokestatic  #18
126: new           #40
129: dup
130: invokespecial #41
133: ldc           #42
135: invokevirtual #43
138: dload         6
140: invokevirtual #44
143: ldc           #45
145: invokevirtual #43
148: ldc2_w        #212
151: invokevirtual #44
154: ldc           #42
156: invokevirtual #43
159: invokevirtual #46
162: dload         6
164: ldc2_w        #212
167: dcmpl
168: ifne          175
171: iconst_1
172: goto          176
175: iconst_0
176: invokestatic  #47
179: aload         8
181: invokestatic  #18
184: aload         9
186: invokestatic  #18
189: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test064
Start line: 4763
End line: 4837
Method source code: 
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList22 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet23 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList22);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion25 = polyhedronsSet23.buildNew(euclidean3DBSPTree24);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree27 = polyhedronsSet23.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet28 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree27);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList29 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet30 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList29);
        double double31 = polyhedronsSet30.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree34 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion35 = polyhedronsSet33.buildNew(euclidean3DBSPTree34);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = polyhedronsSet33.getTree(false);
        boolean boolean38 = polyhedronsSet30.isEmpty(euclidean3DBSPTree37);
        boolean boolean39 = polyhedronsSet28.isEmpty(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = euclidean3DBSPTree37.getCut();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion41 = euclidean3DAbstractRegion21.buildNew(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree43 = euclidean3DRegion41.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet44 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree43);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector45 = polyhedronsSet44.getBarycenter();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DRegion25);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion35);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(euclidean3DSubHyperplane40);
        org.junit.Assert.assertNotNull(euclidean3DRegion41);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree43);
        org.junit.Assert.assertNotNull(euclidean3DVector45);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #250
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #28
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: getstatic     #10
98: astore        12
100: aload         12
102: invokevirtual #11
105: astore        13
107: getstatic     #10
110: astore        14
112: aload         14
114: invokevirtual #11
117: astore        15
119: new           #12
122: dup
123: aload         12
125: aload         15
127: invokespecial #13
130: astore        16
132: aload         10
134: aload         15
136: invokevirtual #22
139: dstore        17
141: aload         9
143: aload         15
145: invokevirtual #23
148: dstore        19
150: aload         9
152: invokevirtual #24
155: astore        21
157: aload         21
159: invokevirtual #32
162: astore        22
164: aload_2
165: aload         21
167: invokevirtual #73
170: astore        23
172: aconst_null
173: astore        24
175: aload_2
176: aload         24
178: invokevirtual #148
181: astore        25
183: new           #25
186: dup
187: invokespecial #26
190: astore        26
192: new           #8
195: dup
196: aload         26
198: invokespecial #27
201: astore        27
203: aconst_null
204: astore        28
206: aload         27
208: aload         28
210: invokevirtual #29
213: astore        29
215: aload         27
217: iconst_0
218: invokevirtual #30
221: astore        30
223: new           #8
226: dup
227: aload         30
229: invokespecial #9
232: astore        31
234: new           #25
237: dup
238: invokespecial #26
241: astore        32
243: new           #8
246: dup
247: aload         32
249: invokespecial #27
252: astore        33
254: aload         33
256: invokevirtual #28
259: dstore        34
261: new           #25
264: dup
265: invokespecial #26
268: astore        36
270: new           #8
273: dup
274: aload         36
276: invokespecial #27
279: astore        37
281: aconst_null
282: astore        38
284: aload         37
286: aload         38
288: invokevirtual #29
291: astore        39
293: aload         37
295: iconst_0
296: invokevirtual #30
299: astore        40
301: aload         33
303: aload         40
305: invokevirtual #31
308: istore        41
310: aload         31
312: aload         40
314: invokevirtual #31
317: istore        42
319: aload         40
321: invokevirtual #149
324: astore        43
326: aload         25
328: aload         40
330: invokevirtual #150
333: astore        44
335: aload         44
337: iconst_0
338: invokeinterface #235,  2
343: astore        45
345: new           #8
348: dup
349: aload         45
351: invokespecial #9
354: astore        46
356: aload         46
358: invokevirtual #251
361: astore        47
363: new           #40
366: dup
367: invokespecial #41
370: ldc           #42
372: invokevirtual #43
375: dload_3
376: invokevirtual #44
379: ldc           #45
381: invokevirtual #43
384: dconst_0
385: invokevirtual #44
388: ldc           #42
390: invokevirtual #43
393: invokevirtual #46
396: dload_3
397: dconst_0
398: dcmpl
399: ifne          406
402: iconst_1
403: goto          407
406: iconst_0
407: invokestatic  #47
410: aload         5
412: invokestatic  #18
415: aload         6
417: invokestatic  #18
420: aload         7
422: invokestatic  #18
425: aload         8
427: invokestatic  #18
430: aload         10
432: invokestatic  #18
435: aload         11
437: invokestatic  #18
440: aload         12
442: invokestatic  #18
445: aload         13
447: invokestatic  #18
450: aload         14
452: invokestatic  #18
455: aload         15
457: invokestatic  #18
460: dload         17
462: invokestatic  #38
465: invokestatic  #39
468: dload         19
470: invokestatic  #38
473: invokestatic  #39
476: aload         21
478: invokestatic  #18
481: aload         22
483: invokestatic  #18
486: aload         23
488: invokestatic  #18
491: aload         25
493: invokestatic  #18
496: aload         29
498: invokestatic  #18
501: aload         30
503: invokestatic  #18
506: new           #40
509: dup
510: invokespecial #41
513: ldc           #42
515: invokevirtual #43
518: dload         34
520: invokevirtual #44
523: ldc           #45
525: invokevirtual #43
528: dconst_0
529: invokevirtual #44
532: ldc           #42
534: invokevirtual #43
537: invokevirtual #46
540: dload         34
542: dconst_0
543: dcmpl
544: ifne          551
547: iconst_1
548: goto          552
551: iconst_0
552: invokestatic  #47
555: aload         39
557: invokestatic  #18
560: aload         40
562: invokestatic  #18
565: new           #40
568: dup
569: invokespecial #41
572: ldc           #42
574: invokevirtual #43
577: iload         41
579: invokevirtual #48
582: ldc           #45
584: invokevirtual #43
587: iconst_0
588: invokevirtual #48
591: ldc           #42
593: invokevirtual #43
596: invokevirtual #46
599: iload         41
601: ifne          608
604: iconst_1
605: goto          609
608: iconst_0
609: invokestatic  #47
612: new           #40
615: dup
616: invokespecial #41
619: ldc           #42
621: invokevirtual #43
624: iload         42
626: invokevirtual #48
629: ldc           #45
631: invokevirtual #43
634: iconst_0
635: invokevirtual #48
638: ldc           #42
640: invokevirtual #43
643: invokevirtual #46
646: iload         42
648: ifne          655
651: iconst_1
652: goto          656
655: iconst_0
656: invokestatic  #47
659: aload         43
661: invokestatic  #78
664: aload         44
666: invokestatic  #18
669: aload         45
671: invokestatic  #18
674: aload         47
676: invokestatic  #18
679: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test065
Start line: 4840
End line: 4941
Method source code: 
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = plane7.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D14, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        double double26 = vector3D19.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        double double27 = plane18.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane28 = plane18.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion29 = subPlane28.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane30 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane7, euclidean2DRegion29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane45 = plane35.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion46 = subPlane45.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane47 = subPlane45.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane48 = subPlane30.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane45);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane49 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane30);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector50 = polyhedronsSet1.getBarycenter();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector51 = polyhedronsSet1.getBarycenter();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion52 = polyhedronsSet1.copySelf();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane54 = euclidean3DAbstractRegion52.intersection(euclidean3DSubHyperplane53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(subPlane28);
        org.junit.Assert.assertNotNull(euclidean2DRegion29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(subPlane45);
        org.junit.Assert.assertNotNull(euclidean2DRegion46);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane47);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane48);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane49);
        org.junit.Assert.assertNotNull(euclidean3DVector50);
        org.junit.Assert.assertNotNull(euclidean3DVector51);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion52);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #252
19: aastore
20: invokevirtual #7
23: pop
24: new           #25
27: dup
28: invokespecial #26
31: astore_1
32: new           #8
35: dup
36: aload_1
37: invokespecial #27
40: astore_2
41: aload_2
42: invokevirtual #70
45: dstore_3
46: getstatic     #10
49: astore        5
51: aload         5
53: invokevirtual #11
56: astore        6
58: getstatic     #10
61: astore        7
63: aload         7
65: invokevirtual #11
68: astore        8
70: new           #12
73: dup
74: aload         5
76: aload         8
78: invokespecial #13
81: astore        9
83: new           #60
86: dup
87: dconst_0
88: ldc2_w        #61
91: invokespecial #63
94: astore        10
96: new           #64
99: dup
100: aload         10
102: dconst_0
103: invokespecial #65
106: astore        11
108: aload         9
110: aload         10
112: invokevirtual #66
115: astore        12
117: getstatic     #10
120: astore        13
122: aload         13
124: invokevirtual #11
127: astore        14
129: getstatic     #10
132: astore        15
134: aload         15
136: invokevirtual #11
139: astore        16
141: new           #12
144: dup
145: aload         13
147: aload         16
149: invokespecial #13
152: astore        17
154: getstatic     #10
157: astore        18
159: aload         18
161: invokevirtual #11
164: astore        19
166: getstatic     #10
169: astore        20
171: aload         20
173: invokevirtual #11
176: astore        21
178: getstatic     #10
181: astore        22
183: aload         22
185: invokevirtual #11
188: astore        23
190: new           #12
193: dup
194: aload         20
196: aload         23
198: invokespecial #13
201: astore        24
203: aload         18
205: aload         23
207: invokevirtual #22
210: dstore        25
212: aload         17
214: aload         23
216: invokevirtual #23
219: dstore        27
221: aload         17
223: invokevirtual #24
226: astore        29
228: aload         29
230: invokevirtual #32
233: astore        30
235: new           #67
238: dup
239: aload         9
241: aload         30
243: invokespecial #68
246: astore        31
248: getstatic     #10
251: astore        32
253: aload         32
255: invokevirtual #11
258: astore        33
260: getstatic     #10
263: astore        34
265: aload         34
267: invokevirtual #11
270: astore        35
272: new           #12
275: dup
276: aload         32
278: aload         35
280: invokespecial #13
283: astore        36
285: getstatic     #10
288: astore        37
290: aload         37
292: invokevirtual #11
295: astore        38
297: getstatic     #10
300: astore        39
302: aload         39
304: invokevirtual #11
307: astore        40
309: getstatic     #10
312: astore        41
314: aload         41
316: invokevirtual #11
319: astore        42
321: new           #12
324: dup
325: aload         39
327: aload         42
329: invokespecial #13
332: astore        43
334: aload         37
336: aload         42
338: invokevirtual #22
341: dstore        44
343: aload         36
345: aload         42
347: invokevirtual #23
350: dstore        46
352: aload         36
354: invokevirtual #24
357: astore        48
359: aload         48
361: invokevirtual #32
364: astore        49
366: aload         48
368: invokevirtual #71
371: astore        50
373: aload         31
375: aload         48
377: invokevirtual #72
380: astore        51
382: aload_2
383: aload         31
385: invokevirtual #73
388: astore        52
390: aload_2
391: invokevirtual #251
394: astore        53
396: aload_2
397: invokevirtual #251
400: astore        54
402: aload_2
403: invokevirtual #253
406: astore        55
408: aconst_null
409: astore        56
411: aload         55
413: aload         56
415: invokevirtual #254
418: astore        57
420: ldc           #15
422: invokestatic  #16
425: goto          430
428: astore        57
430: new           #40
433: dup
434: invokespecial #41
437: ldc           #42
439: invokevirtual #43
442: dload_3
443: invokevirtual #44
446: ldc           #45
448: invokevirtual #43
451: dconst_0
452: invokevirtual #44
455: ldc           #42
457: invokevirtual #43
460: invokevirtual #46
463: dload_3
464: dconst_0
465: dcmpl
466: ifne          473
469: iconst_1
470: goto          474
473: iconst_0
474: invokestatic  #47
477: aload         5
479: invokestatic  #18
482: aload         6
484: invokestatic  #18
487: aload         7
489: invokestatic  #18
492: aload         8
494: invokestatic  #18
497: aload         12
499: invokestatic  #18
502: aload         13
504: invokestatic  #18
507: aload         14
509: invokestatic  #18
512: aload         15
514: invokestatic  #18
517: aload         16
519: invokestatic  #18
522: aload         18
524: invokestatic  #18
527: aload         19
529: invokestatic  #18
532: aload         20
534: invokestatic  #18
537: aload         21
539: invokestatic  #18
542: aload         22
544: invokestatic  #18
547: aload         23
549: invokestatic  #18
552: dload         25
554: invokestatic  #38
557: invokestatic  #39
560: dload         27
562: invokestatic  #38
565: invokestatic  #39
568: aload         29
570: invokestatic  #18
573: aload         30
575: invokestatic  #18
578: aload         32
580: invokestatic  #18
583: aload         33
585: invokestatic  #18
588: aload         34
590: invokestatic  #18
593: aload         35
595: invokestatic  #18
598: aload         37
600: invokestatic  #18
603: aload         38
605: invokestatic  #18
608: aload         39
610: invokestatic  #18
613: aload         40
615: invokestatic  #18
618: aload         41
620: invokestatic  #18
623: aload         42
625: invokestatic  #18
628: dload         44
630: invokestatic  #38
633: invokestatic  #39
636: dload         46
638: invokestatic  #38
641: invokestatic  #39
644: aload         48
646: invokestatic  #18
649: aload         49
651: invokestatic  #18
654: aload         50
656: invokestatic  #18
659: aload         51
661: invokestatic  #18
664: aload         52
666: invokestatic  #18
669: aload         53
671: invokestatic  #18
674: aload         54
676: invokestatic  #18
679: aload         55
681: invokestatic  #18
684: return
Exception table:
from    to  target type
411   425   428   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test066
Start line: 4944
End line: 4977
Method source code: 
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean2 = polygonsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet1);
        polygonsSet0.computeGeometricalProperties();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D6 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line8 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D6, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D11 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line13 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D11, (double) 0.0f);
        boolean boolean14 = line8.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line24 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D22, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = plane19.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        double double26 = line13.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        double double27 = vector2D22.getNormSq();
        org.apache.commons.math3.geometry.partitioning.Region.Location location28 = polygonsSet0.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.1833403984568501d + "'", double27 == 0.1833403984568501d);
        org.junit.Assert.assertTrue("'" + location28 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location28.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #255
19: aastore
20: invokevirtual #7
23: pop
24: new           #56
27: dup
28: invokespecial #87
31: astore_1
32: new           #56
35: dup
36: invokespecial #87
39: astore_2
40: aload_1
41: aload_2
42: invokevirtual #88
45: istore_3
46: aload_1
47: invokevirtual #244
50: new           #60
53: dup
54: dconst_0
55: ldc2_w        #61
58: invokespecial #63
61: astore        4
63: new           #64
66: dup
67: aload         4
69: dconst_0
70: invokespecial #65
73: astore        5
75: new           #60
78: dup
79: dconst_0
80: ldc2_w        #61
83: invokespecial #63
86: astore        6
88: new           #64
91: dup
92: aload         6
94: dconst_0
95: invokespecial #65
98: astore        7
100: aload         5
102: aload         7
104: invokevirtual #95
107: istore        8
109: getstatic     #10
112: astore        9
114: aload         9
116: invokevirtual #11
119: astore        10
121: getstatic     #10
124: astore        11
126: aload         11
128: invokevirtual #11
131: astore        12
133: new           #12
136: dup
137: aload         9
139: aload         12
141: invokespecial #13
144: astore        13
146: new           #60
149: dup
150: dconst_0
151: ldc2_w        #61
154: invokespecial #63
157: astore        14
159: new           #64
162: dup
163: aload         14
165: dconst_0
166: invokespecial #65
169: astore        15
171: aload         13
173: aload         14
175: invokevirtual #66
178: astore        16
180: aload         7
182: aload         14
184: invokevirtual #191
187: dstore        17
189: aload         14
191: invokevirtual #256
194: dstore        19
196: aload_1
197: aload         14
199: invokevirtual #257
202: astore        21
204: new           #40
207: dup
208: invokespecial #41
211: ldc           #42
213: invokevirtual #43
216: iload_3
217: invokevirtual #48
220: ldc           #45
222: invokevirtual #43
225: iconst_1
226: invokevirtual #48
229: ldc           #42
231: invokevirtual #43
234: invokevirtual #46
237: iload_3
238: iconst_1
239: if_icmpne     246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #47
250: new           #40
253: dup
254: invokespecial #41
257: ldc           #42
259: invokevirtual #43
262: iload         8
264: invokevirtual #48
267: ldc           #45
269: invokevirtual #43
272: iconst_1
273: invokevirtual #48
276: ldc           #42
278: invokevirtual #43
281: invokevirtual #46
284: iload         8
286: iconst_1
287: if_icmpne     294
290: iconst_1
291: goto          295
294: iconst_0
295: invokestatic  #47
298: aload         9
300: invokestatic  #18
303: aload         10
305: invokestatic  #18
308: aload         11
310: invokestatic  #18
313: aload         12
315: invokestatic  #18
318: aload         16
320: invokestatic  #18
323: new           #40
326: dup
327: invokespecial #41
330: ldc           #42
332: invokevirtual #43
335: dload         17
337: invokevirtual #44
340: ldc           #45
342: invokevirtual #43
345: dconst_0
346: invokevirtual #44
349: ldc           #42
351: invokevirtual #43
354: invokevirtual #46
357: dload         17
359: dconst_0
360: dcmpl
361: ifne          368
364: iconst_1
365: goto          369
368: iconst_0
369: invokestatic  #47
372: new           #40
375: dup
376: invokespecial #41
379: ldc           #42
381: invokevirtual #43
384: dload         19
386: invokevirtual #44
389: ldc           #45
391: invokevirtual #43
394: ldc2_w        #154
397: invokevirtual #44
400: ldc           #42
402: invokevirtual #43
405: invokevirtual #46
408: dload         19
410: ldc2_w        #154
413: dcmpl
414: ifne          421
417: iconst_1
418: goto          422
421: iconst_0
422: invokestatic  #47
425: new           #40
428: dup
429: invokespecial #41
432: ldc           #42
434: invokevirtual #43
437: aload         21
439: invokevirtual #102
442: ldc           #45
444: invokevirtual #43
447: getstatic     #258
450: invokevirtual #102
453: ldc           #42
455: invokevirtual #43
458: invokevirtual #46
461: aload         21
463: getstatic     #258
466: invokevirtual #259
469: invokestatic  #47
472: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test067
Start line: 4980
End line: 5125
Method source code: 
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getSize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet4 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList3);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree5 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion6 = polyhedronsSet4.buildNew(euclidean3DBSPTree5);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree8 = polyhedronsSet4.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane16 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D12, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D11, vector3D15);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D11.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D9.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet25 = polyhedronsSet4.translate(vector3D24);
        boolean boolean26 = polyhedronsSet1.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) polyhedronsSet4);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane31 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D27, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = vector3D34.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane38 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D34, vector3D37);
        double double39 = vector3D32.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        double double40 = plane31.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane41 = plane31.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList42 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet43 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList42);
        double double44 = polyhedronsSet43.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList45 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet46 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList45);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree47 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion48 = polyhedronsSet46.buildNew(euclidean3DBSPTree47);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree50 = polyhedronsSet46.getTree(false);
        boolean boolean51 = polyhedronsSet43.isEmpty(euclidean3DBSPTree50);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList52 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet53 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList52);
        double double54 = polyhedronsSet53.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList55 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet56 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList55);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree57 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion58 = polyhedronsSet56.buildNew(euclidean3DBSPTree57);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree60 = polyhedronsSet56.getTree(false);
        boolean boolean61 = polyhedronsSet53.isEmpty(euclidean3DBSPTree60);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D62.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane66 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D62, vector3D65);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D67.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = vector3D69.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D71.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane73 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D69, vector3D72);
        double double74 = vector3D67.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72);
        double double75 = plane66.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane76 = plane66.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion77 = subPlane76.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree78 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane41, euclidean3DBSPTree50, euclidean3DBSPTree60, (java.lang.Object) subPlane76);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree79 = euclidean3DBSPTree50.copySelf();
        java.lang.Object obj80 = euclidean3DBSPTree50.getAttribute();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList81 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet82 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList81);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree83 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion84 = polyhedronsSet82.buildNew(euclidean3DBSPTree83);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree86 = polyhedronsSet82.getTree(false);
        euclidean3DBSPTree50.insertInTree(euclidean3DBSPTree86, false);
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion89 = polyhedronsSet4.buildNew(euclidean3DBSPTree50);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion6);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(polyhedronsSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(subPlane41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion48);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion58);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(subPlane76);
        org.junit.Assert.assertNotNull(euclidean2DRegion77);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree79);
        org.junit.Assert.assertEquals("'" + obj80 + "' != '" + true + "'", obj80, true);
        org.junit.Assert.assertNotNull(euclidean3DRegion84);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree86);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion89);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #260
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #70
46: dstore_3
47: new           #25
50: dup
51: invokespecial #26
54: astore        5
56: new           #8
59: dup
60: aload         5
62: invokespecial #27
65: astore        6
67: aconst_null
68: astore        7
70: aload         6
72: aload         7
74: invokevirtual #29
77: astore        8
79: aload         6
81: iconst_0
82: invokevirtual #30
85: astore        9
87: getstatic     #10
90: astore        10
92: getstatic     #10
95: astore        11
97: getstatic     #10
100: astore        12
102: aload         12
104: invokevirtual #11
107: astore        13
109: getstatic     #10
112: astore        14
114: aload         14
116: invokevirtual #11
119: astore        15
121: new           #12
124: dup
125: aload         12
127: aload         15
129: invokespecial #13
132: astore        16
134: aload         11
136: aload         15
138: invokestatic  #96
141: astore        17
143: getstatic     #10
146: astore        18
148: aload         18
150: invokevirtual #11
153: astore        19
155: getstatic     #10
158: astore        20
160: aload         20
162: invokevirtual #11
165: astore        21
167: new           #12
170: dup
171: aload         18
173: aload         21
175: invokespecial #13
178: astore        22
180: aload         11
182: aload         21
184: invokevirtual #111
187: astore        23
189: aload         10
191: dconst_1
192: aload         21
194: invokevirtual #112
197: astore        24
199: aload         6
201: aload         24
203: invokevirtual #153
206: astore        25
208: aload_2
209: aload         6
211: invokevirtual #261
214: istore        26
216: getstatic     #10
219: astore        27
221: aload         27
223: invokevirtual #11
226: astore        28
228: getstatic     #10
231: astore        29
233: aload         29
235: invokevirtual #11
238: astore        30
240: new           #12
243: dup
244: aload         27
246: aload         30
248: invokespecial #13
251: astore        31
253: getstatic     #10
256: astore        32
258: aload         32
260: invokevirtual #11
263: astore        33
265: getstatic     #10
268: astore        34
270: aload         34
272: invokevirtual #11
275: astore        35
277: getstatic     #10
280: astore        36
282: aload         36
284: invokevirtual #11
287: astore        37
289: new           #12
292: dup
293: aload         34
295: aload         37
297: invokespecial #13
300: astore        38
302: aload         32
304: aload         37
306: invokevirtual #22
309: dstore        39
311: aload         31
313: aload         37
315: invokevirtual #23
318: dstore        41
320: aload         31
322: invokevirtual #24
325: astore        43
327: new           #25
330: dup
331: invokespecial #26
334: astore        44
336: new           #8
339: dup
340: aload         44
342: invokespecial #27
345: astore        45
347: aload         45
349: invokevirtual #28
352: dstore        46
354: new           #25
357: dup
358: invokespecial #26
361: astore        48
363: new           #8
366: dup
367: aload         48
369: invokespecial #27
372: astore        49
374: aconst_null
375: astore        50
377: aload         49
379: aload         50
381: invokevirtual #29
384: astore        51
386: aload         49
388: iconst_0
389: invokevirtual #30
392: astore        52
394: aload         45
396: aload         52
398: invokevirtual #31
401: istore        53
403: new           #25
406: dup
407: invokespecial #26
410: astore        54
412: new           #8
415: dup
416: aload         54
418: invokespecial #27
421: astore        55
423: aload         55
425: invokevirtual #28
428: dstore        56
430: new           #25
433: dup
434: invokespecial #26
437: astore        58
439: new           #8
442: dup
443: aload         58
445: invokespecial #27
448: astore        59
450: aconst_null
451: astore        60
453: aload         59
455: aload         60
457: invokevirtual #29
460: astore        61
462: aload         59
464: iconst_0
465: invokevirtual #30
468: astore        62
470: aload         55
472: aload         62
474: invokevirtual #31
477: istore        63
479: getstatic     #10
482: astore        64
484: aload         64
486: invokevirtual #11
489: astore        65
491: getstatic     #10
494: astore        66
496: aload         66
498: invokevirtual #11
501: astore        67
503: new           #12
506: dup
507: aload         64
509: aload         67
511: invokespecial #13
514: astore        68
516: getstatic     #10
519: astore        69
521: aload         69
523: invokevirtual #11
526: astore        70
528: getstatic     #10
531: astore        71
533: aload         71
535: invokevirtual #11
538: astore        72
540: getstatic     #10
543: astore        73
545: aload         73
547: invokevirtual #11
550: astore        74
552: new           #12
555: dup
556: aload         71
558: aload         74
560: invokespecial #13
563: astore        75
565: aload         69
567: aload         74
569: invokevirtual #22
572: dstore        76
574: aload         68
576: aload         74
578: invokevirtual #23
581: dstore        78
583: aload         68
585: invokevirtual #24
588: astore        80
590: aload         80
592: invokevirtual #32
595: astore        81
597: new           #33
600: dup
601: aload         43
603: aload         52
605: aload         62
607: aload         80
609: invokespecial #34
612: astore        82
614: aload         52
616: invokevirtual #221
619: astore        83
621: aload         52
623: invokevirtual #262
626: astore        84
628: new           #25
631: dup
632: invokespecial #26
635: astore        85
637: new           #8
640: dup
641: aload         85
643: invokespecial #27
646: astore        86
648: aconst_null
649: astore        87
651: aload         86
653: aload         87
655: invokevirtual #29
658: astore        88
660: aload         86
662: iconst_0
663: invokevirtual #30
666: astore        89
668: aload         52
670: aload         89
672: iconst_0
673: invokevirtual #108
676: aload         6
678: aload         52
680: invokevirtual #29
683: astore        90
685: new           #40
688: dup
689: invokespecial #41
692: ldc           #42
694: invokevirtual #43
697: dload_3
698: invokevirtual #44
701: ldc           #45
703: invokevirtual #43
706: dconst_0
707: invokevirtual #44
710: ldc           #42
712: invokevirtual #43
715: invokevirtual #46
718: dload_3
719: dconst_0
720: dcmpl
721: ifne          728
724: iconst_1
725: goto          729
728: iconst_0
729: invokestatic  #47
732: aload         8
734: invokestatic  #18
737: aload         9
739: invokestatic  #18
742: aload         10
744: invokestatic  #18
747: aload         11
749: invokestatic  #18
752: aload         12
754: invokestatic  #18
757: aload         13
759: invokestatic  #18
762: aload         14
764: invokestatic  #18
767: aload         15
769: invokestatic  #18
772: aload         17
774: invokestatic  #18
777: aload         18
779: invokestatic  #18
782: aload         19
784: invokestatic  #18
787: aload         20
789: invokestatic  #18
792: aload         21
794: invokestatic  #18
797: aload         23
799: invokestatic  #18
802: aload         24
804: invokestatic  #18
807: aload         25
809: invokestatic  #18
812: new           #40
815: dup
816: invokespecial #41
819: ldc           #42
821: invokevirtual #43
824: iload         26
826: invokevirtual #48
829: ldc           #45
831: invokevirtual #43
834: iconst_1
835: invokevirtual #48
838: ldc           #42
840: invokevirtual #43
843: invokevirtual #46
846: iload         26
848: iconst_1
849: if_icmpne     856
852: iconst_1
853: goto          857
856: iconst_0
857: invokestatic  #47
860: aload         27
862: invokestatic  #18
865: aload         28
867: invokestatic  #18
870: aload         29
872: invokestatic  #18
875: aload         30
877: invokestatic  #18
880: aload         32
882: invokestatic  #18
885: aload         33
887: invokestatic  #18
890: aload         34
892: invokestatic  #18
895: aload         35
897: invokestatic  #18
900: aload         36
902: invokestatic  #18
905: aload         37
907: invokestatic  #18
910: dload         39
912: invokestatic  #38
915: invokestatic  #39
918: dload         41
920: invokestatic  #38
923: invokestatic  #39
926: aload         43
928: invokestatic  #18
931: new           #40
934: dup
935: invokespecial #41
938: ldc           #42
940: invokevirtual #43
943: dload         46
945: invokevirtual #44
948: ldc           #45
950: invokevirtual #43
953: dconst_0
954: invokevirtual #44
957: ldc           #42
959: invokevirtual #43
962: invokevirtual #46
965: dload         46
967: dconst_0
968: dcmpl
969: ifne          976
972: iconst_1
973: goto          977
976: iconst_0
977: invokestatic  #47
980: aload         51
982: invokestatic  #18
985: aload         52
987: invokestatic  #18
990: new           #40
993: dup
994: invokespecial #41
997: ldc           #42
999: invokevirtual #43
1002: iload         53
1004: invokevirtual #48
1007: ldc           #45
1009: invokevirtual #43
1012: iconst_0
1013: invokevirtual #48
1016: ldc           #42
1018: invokevirtual #43
1021: invokevirtual #46
1024: iload         53
1026: ifne          1033
1029: iconst_1
1030: goto          1034
1033: iconst_0
1034: invokestatic  #47
1037: new           #40
1040: dup
1041: invokespecial #41
1044: ldc           #42
1046: invokevirtual #43
1049: dload         56
1051: invokevirtual #44
1054: ldc           #45
1056: invokevirtual #43
1059: dconst_0
1060: invokevirtual #44
1063: ldc           #42
1065: invokevirtual #43
1068: invokevirtual #46
1071: dload         56
1073: dconst_0
1074: dcmpl
1075: ifne          1082
1078: iconst_1
1079: goto          1083
1082: iconst_0
1083: invokestatic  #47
1086: aload         61
1088: invokestatic  #18
1091: aload         62
1093: invokestatic  #18
1096: new           #40
1099: dup
1100: invokespecial #41
1103: ldc           #42
1105: invokevirtual #43
1108: iload         63
1110: invokevirtual #48
1113: ldc           #45
1115: invokevirtual #43
1118: iconst_0
1119: invokevirtual #48
1122: ldc           #42
1124: invokevirtual #43
1127: invokevirtual #46
1130: iload         63
1132: ifne          1139
1135: iconst_1
1136: goto          1140
1139: iconst_0
1140: invokestatic  #47
1143: aload         64
1145: invokestatic  #18
1148: aload         65
1150: invokestatic  #18
1153: aload         66
1155: invokestatic  #18
1158: aload         67
1160: invokestatic  #18
1163: aload         69
1165: invokestatic  #18
1168: aload         70
1170: invokestatic  #18
1173: aload         71
1175: invokestatic  #18
1178: aload         72
1180: invokestatic  #18
1183: aload         73
1185: invokestatic  #18
1188: aload         74
1190: invokestatic  #18
1193: dload         76
1195: invokestatic  #38
1198: invokestatic  #39
1201: dload         78
1203: invokestatic  #38
1206: invokestatic  #39
1209: aload         80
1211: invokestatic  #18
1214: aload         81
1216: invokestatic  #18
1219: aload         83
1221: invokestatic  #18
1224: new           #40
1227: dup
1228: invokespecial #41
1231: ldc           #42
1233: invokevirtual #43
1236: aload         84
1238: invokevirtual #102
1241: ldc           #45
1243: invokevirtual #43
1246: iconst_1
1247: invokevirtual #48
1250: ldc           #42
1252: invokevirtual #43
1255: invokevirtual #46
1258: aload         84
1260: iconst_1
1261: invokestatic  #263
1264: invokestatic  #203
1267: aload         88
1269: invokestatic  #18
1272: aload         89
1274: invokestatic  #18
1277: aload         90
1279: invokestatic  #18
1282: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test068
Start line: 5128
End line: 5253
Method source code: 
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane12 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D8, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D7.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D6, vector3D14);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector16 = plane4.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane17 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = plane4.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line23 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D21, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line28 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D26, (double) 0.0f);
        boolean boolean29 = line23.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line28);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane41 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D37, vector3D40);
        double double42 = vector3D35.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        double double43 = plane34.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        plane34.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = vector3D54.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane56 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D52, vector3D55);
        double double57 = vector3D50.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        double double58 = plane49.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        plane49.revertSelf();
        double double60 = plane34.getOffset(plane49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D62.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane66 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D62, vector3D65);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D61, vector3D65);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = plane49.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D65);
        line23.reset(vector2D68, (double) (-127));
        java.lang.String str71 = vector2D68.toString();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = plane4.getPointAt(vector2D68, (double) (-213608790));
        java.lang.String str74 = vector2D68.toString();
        java.text.NumberFormat numberFormat75 = null;
        java.lang.String str76 = vector2D68.toString(numberFormat75);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(euclidean2DVector16);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane17);
        org.junit.Assert.assertNotNull(plane18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{(NaN); (NaN)}" + "'", str71, "{(NaN); (NaN)}");
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "{(NaN); (NaN)}" + "'", str74, "{(NaN); (NaN)}");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "{(NaN); (NaN)}" + "'", str76, "{(NaN); (NaN)}");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #264
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: aload         5
58: invokevirtual #20
61: getstatic     #10
64: astore        6
66: getstatic     #10
69: astore        7
71: getstatic     #10
74: astore        8
76: aload         8
78: invokevirtual #11
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: new           #12
98: dup
99: aload         8
101: aload         11
103: invokespecial #13
106: astore        12
108: aload         7
110: aload         11
112: invokestatic  #96
115: astore        13
117: aload         7
119: invokevirtual #110
122: astore        14
124: aload         6
126: aload         14
128: invokestatic  #96
131: astore        15
133: aload         5
135: aload         6
137: invokevirtual #97
140: astore        16
142: aload         5
144: invokevirtual #24
147: astore        17
149: aload         5
151: invokevirtual #130
154: astore        18
156: new           #60
159: dup
160: dconst_0
161: ldc2_w        #61
164: invokespecial #63
167: astore        19
169: new           #64
172: dup
173: aload         19
175: dconst_0
176: invokespecial #65
179: astore        20
181: new           #60
184: dup
185: dconst_0
186: ldc2_w        #61
189: invokespecial #63
192: astore        21
194: new           #64
197: dup
198: aload         21
200: dconst_0
201: invokespecial #65
204: astore        22
206: aload         20
208: aload         22
210: invokevirtual #95
213: istore        23
215: getstatic     #10
218: astore        24
220: aload         24
222: invokevirtual #11
225: astore        25
227: getstatic     #10
230: astore        26
232: aload         26
234: invokevirtual #11
237: astore        27
239: new           #12
242: dup
243: aload         24
245: aload         27
247: invokespecial #13
250: astore        28
252: getstatic     #10
255: astore        29
257: aload         29
259: invokevirtual #11
262: astore        30
264: getstatic     #10
267: astore        31
269: aload         31
271: invokevirtual #11
274: astore        32
276: getstatic     #10
279: astore        33
281: aload         33
283: invokevirtual #11
286: astore        34
288: new           #12
291: dup
292: aload         31
294: aload         34
296: invokespecial #13
299: astore        35
301: aload         29
303: aload         34
305: invokevirtual #22
308: dstore        36
310: aload         28
312: aload         34
314: invokevirtual #23
317: dstore        38
319: aload         28
321: invokevirtual #20
324: getstatic     #10
327: astore        40
329: aload         40
331: invokevirtual #11
334: astore        41
336: getstatic     #10
339: astore        42
341: aload         42
343: invokevirtual #11
346: astore        43
348: new           #12
351: dup
352: aload         40
354: aload         43
356: invokespecial #13
359: astore        44
361: getstatic     #10
364: astore        45
366: aload         45
368: invokevirtual #11
371: astore        46
373: getstatic     #10
376: astore        47
378: aload         47
380: invokevirtual #11
383: astore        48
385: getstatic     #10
388: astore        49
390: aload         49
392: invokevirtual #11
395: astore        50
397: new           #12
400: dup
401: aload         47
403: aload         50
405: invokespecial #13
408: astore        51
410: aload         45
412: aload         50
414: invokevirtual #22
417: dstore        52
419: aload         44
421: aload         50
423: invokevirtual #23
426: dstore        54
428: aload         44
430: invokevirtual #20
433: aload         28
435: aload         44
437: invokevirtual #82
440: dstore        56
442: getstatic     #10
445: astore        58
447: getstatic     #10
450: astore        59
452: aload         59
454: invokevirtual #11
457: astore        60
459: getstatic     #10
462: astore        61
464: aload         61
466: invokevirtual #11
469: astore        62
471: new           #12
474: dup
475: aload         59
477: aload         62
479: invokespecial #13
482: astore        63
484: aload         58
486: aload         62
488: invokestatic  #96
491: astore        64
493: aload         44
495: aload         62
497: invokevirtual #97
500: astore        65
502: aload         20
504: aload         65
506: ldc2_w        #98
509: invokevirtual #100
512: aload         65
514: invokevirtual #192
517: astore        66
519: aload         5
521: aload         65
523: ldc2_w        #265
526: invokevirtual #197
529: astore        67
531: aload         65
533: invokevirtual #192
536: astore        68
538: aconst_null
539: astore        69
541: aload         65
543: aload         69
545: invokevirtual #267
548: astore        70
550: aload_1
551: invokestatic  #18
554: aload_2
555: invokestatic  #18
558: aload_3
559: invokestatic  #18
562: aload         4
564: invokestatic  #18
567: aload         6
569: invokestatic  #18
572: aload         7
574: invokestatic  #18
577: aload         8
579: invokestatic  #18
582: aload         9
584: invokestatic  #18
587: aload         10
589: invokestatic  #18
592: aload         11
594: invokestatic  #18
597: aload         13
599: invokestatic  #18
602: aload         14
604: invokestatic  #18
607: aload         15
609: invokestatic  #18
612: aload         16
614: invokestatic  #18
617: aload         17
619: invokestatic  #18
622: aload         18
624: invokestatic  #18
627: new           #40
630: dup
631: invokespecial #41
634: ldc           #42
636: invokevirtual #43
639: iload         23
641: invokevirtual #48
644: ldc           #45
646: invokevirtual #43
649: iconst_1
650: invokevirtual #48
653: ldc           #42
655: invokevirtual #43
658: invokevirtual #46
661: iload         23
663: iconst_1
664: if_icmpne     671
667: iconst_1
668: goto          672
671: iconst_0
672: invokestatic  #47
675: aload         24
677: invokestatic  #18
680: aload         25
682: invokestatic  #18
685: aload         26
687: invokestatic  #18
690: aload         27
692: invokestatic  #18
695: aload         29
697: invokestatic  #18
700: aload         30
702: invokestatic  #18
705: aload         31
707: invokestatic  #18
710: aload         32
712: invokestatic  #18
715: aload         33
717: invokestatic  #18
720: aload         34
722: invokestatic  #18
725: dload         36
727: invokestatic  #38
730: invokestatic  #39
733: dload         38
735: invokestatic  #38
738: invokestatic  #39
741: aload         40
743: invokestatic  #18
746: aload         41
748: invokestatic  #18
751: aload         42
753: invokestatic  #18
756: aload         43
758: invokestatic  #18
761: aload         45
763: invokestatic  #18
766: aload         46
768: invokestatic  #18
771: aload         47
773: invokestatic  #18
776: aload         48
778: invokestatic  #18
781: aload         49
783: invokestatic  #18
786: aload         50
788: invokestatic  #18
791: dload         52
793: invokestatic  #38
796: invokestatic  #39
799: dload         54
801: invokestatic  #38
804: invokestatic  #39
807: dload         56
809: invokestatic  #38
812: invokestatic  #39
815: aload         58
817: invokestatic  #18
820: aload         59
822: invokestatic  #18
825: aload         60
827: invokestatic  #18
830: aload         61
832: invokestatic  #18
835: aload         62
837: invokestatic  #18
840: aload         64
842: invokestatic  #18
845: aload         65
847: invokestatic  #18
850: new           #40
853: dup
854: invokespecial #41
857: ldc           #42
859: invokevirtual #43
862: aload         66
864: invokevirtual #43
867: ldc_w         #268
870: invokevirtual #43
873: invokevirtual #46
876: aload         66
878: ldc_w         #269
881: invokestatic  #203
884: aload         67
886: invokestatic  #18
889: new           #40
892: dup
893: invokespecial #41
896: ldc           #42
898: invokevirtual #43
901: aload         68
903: invokevirtual #43
906: ldc_w         #268
909: invokevirtual #43
912: invokevirtual #46
915: aload         68
917: ldc_w         #269
920: invokestatic  #203
923: new           #40
926: dup
927: invokespecial #41
930: ldc           #42
932: invokevirtual #43
935: aload         70
937: invokevirtual #43
940: ldc_w         #268
943: invokevirtual #43
946: invokevirtual #46
949: aload         70
951: ldc_w         #269
954: invokestatic  #203
957: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test069
Start line: 5256
End line: 5379
Method source code: 
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList22 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet23 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList22);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion25 = polyhedronsSet23.buildNew(euclidean3DBSPTree24);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree27 = polyhedronsSet23.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet28 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree27);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList29 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet30 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList29);
        double double31 = polyhedronsSet30.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree34 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion35 = polyhedronsSet33.buildNew(euclidean3DBSPTree34);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = polyhedronsSet33.getTree(false);
        boolean boolean38 = polyhedronsSet30.isEmpty(euclidean3DBSPTree37);
        boolean boolean39 = polyhedronsSet28.isEmpty(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = euclidean3DBSPTree37.getCut();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion41 = euclidean3DAbstractRegion21.buildNew(euclidean3DBSPTree37);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList42 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet43 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList42);
        double double44 = polyhedronsSet43.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = vector3D54.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane56 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D52, vector3D55);
        double double57 = vector3D50.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        double double58 = plane49.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane59 = plane49.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion60 = subPlane59.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane61 = polyhedronsSet43.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane59);
        double double62 = polyhedronsSet43.getBoundarySize();
        boolean boolean63 = polyhedronsSet43.isEmpty();
        boolean boolean64 = euclidean3DAbstractRegion21.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) polyhedronsSet43);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList65 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet66 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList65);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree67 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion68 = polyhedronsSet66.buildNew(euclidean3DBSPTree67);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = polyhedronsSet43.contains(euclidean3DRegion68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DRegion25);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion35);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(euclidean3DSubHyperplane40);
        org.junit.Assert.assertNotNull(euclidean3DRegion41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(subPlane59);
        org.junit.Assert.assertNotNull(euclidean2DRegion60);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(euclidean3DRegion68);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #270
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aconst_null
174: astore        24
176: aload_2
177: aload         24
179: invokevirtual #148
182: astore        25
184: new           #25
187: dup
188: invokespecial #26
191: astore        26
193: new           #8
196: dup
197: aload         26
199: invokespecial #27
202: astore        27
204: aconst_null
205: astore        28
207: aload         27
209: aload         28
211: invokevirtual #29
214: astore        29
216: aload         27
218: iconst_0
219: invokevirtual #30
222: astore        30
224: new           #8
227: dup
228: aload         30
230: invokespecial #9
233: astore        31
235: new           #25
238: dup
239: invokespecial #26
242: astore        32
244: new           #8
247: dup
248: aload         32
250: invokespecial #27
253: astore        33
255: aload         33
257: invokevirtual #28
260: dstore        34
262: new           #25
265: dup
266: invokespecial #26
269: astore        36
271: new           #8
274: dup
275: aload         36
277: invokespecial #27
280: astore        37
282: aconst_null
283: astore        38
285: aload         37
287: aload         38
289: invokevirtual #29
292: astore        39
294: aload         37
296: iconst_0
297: invokevirtual #30
300: astore        40
302: aload         33
304: aload         40
306: invokevirtual #31
309: istore        41
311: aload         31
313: aload         40
315: invokevirtual #31
318: istore        42
320: aload         40
322: invokevirtual #149
325: astore        43
327: aload         25
329: aload         40
331: invokevirtual #150
334: astore        44
336: new           #25
339: dup
340: invokespecial #26
343: astore        45
345: new           #8
348: dup
349: aload         45
351: invokespecial #27
354: astore        46
356: aload         46
358: invokevirtual #28
361: dstore        47
363: getstatic     #10
366: astore        49
368: aload         49
370: invokevirtual #11
373: astore        50
375: getstatic     #10
378: astore        51
380: aload         51
382: invokevirtual #11
385: astore        52
387: new           #12
390: dup
391: aload         49
393: aload         52
395: invokespecial #13
398: astore        53
400: getstatic     #10
403: astore        54
405: aload         54
407: invokevirtual #11
410: astore        55
412: getstatic     #10
415: astore        56
417: aload         56
419: invokevirtual #11
422: astore        57
424: getstatic     #10
427: astore        58
429: aload         58
431: invokevirtual #11
434: astore        59
436: new           #12
439: dup
440: aload         56
442: aload         59
444: invokespecial #13
447: astore        60
449: aload         54
451: aload         59
453: invokevirtual #22
456: dstore        61
458: aload         53
460: aload         59
462: invokevirtual #23
465: dstore        63
467: aload         53
469: invokevirtual #24
472: astore        65
474: aload         65
476: invokevirtual #32
479: astore        66
481: aload         46
483: aload         65
485: invokevirtual #73
488: astore        67
490: aload         46
492: invokevirtual #28
495: dstore        68
497: aload         46
499: invokevirtual #151
502: istore        70
504: aload         25
506: aload         46
508: invokevirtual #152
511: istore        71
513: new           #25
516: dup
517: invokespecial #26
520: astore        72
522: new           #8
525: dup
526: aload         72
528: invokespecial #27
531: astore        73
533: aconst_null
534: astore        74
536: aload         73
538: aload         74
540: invokevirtual #29
543: astore        75
545: aload         46
547: aload         75
549: invokevirtual #261
552: istore        76
554: ldc           #15
556: invokestatic  #16
559: goto          564
562: astore        76
564: new           #40
567: dup
568: invokespecial #41
571: ldc           #42
573: invokevirtual #43
576: dload_3
577: invokevirtual #44
580: ldc           #45
582: invokevirtual #43
585: dconst_0
586: invokevirtual #44
589: ldc           #42
591: invokevirtual #43
594: invokevirtual #46
597: dload_3
598: dconst_0
599: dcmpl
600: ifne          607
603: iconst_1
604: goto          608
607: iconst_0
608: invokestatic  #47
611: aload         5
613: invokestatic  #18
616: aload         6
618: invokestatic  #18
621: aload         7
623: invokestatic  #18
626: aload         8
628: invokestatic  #18
631: aload         10
633: invokestatic  #18
636: aload         11
638: invokestatic  #18
641: aload         12
643: invokestatic  #18
646: aload         13
648: invokestatic  #18
651: aload         14
653: invokestatic  #18
656: aload         15
658: invokestatic  #18
661: dload         17
663: invokestatic  #38
666: invokestatic  #39
669: dload         19
671: invokestatic  #38
674: invokestatic  #39
677: aload         21
679: invokestatic  #18
682: aload         22
684: invokestatic  #18
687: aload         23
689: invokestatic  #18
692: aload         25
694: invokestatic  #18
697: aload         29
699: invokestatic  #18
702: aload         30
704: invokestatic  #18
707: new           #40
710: dup
711: invokespecial #41
714: ldc           #42
716: invokevirtual #43
719: dload         34
721: invokevirtual #44
724: ldc           #45
726: invokevirtual #43
729: dconst_0
730: invokevirtual #44
733: ldc           #42
735: invokevirtual #43
738: invokevirtual #46
741: dload         34
743: dconst_0
744: dcmpl
745: ifne          752
748: iconst_1
749: goto          753
752: iconst_0
753: invokestatic  #47
756: aload         39
758: invokestatic  #18
761: aload         40
763: invokestatic  #18
766: new           #40
769: dup
770: invokespecial #41
773: ldc           #42
775: invokevirtual #43
778: iload         41
780: invokevirtual #48
783: ldc           #45
785: invokevirtual #43
788: iconst_0
789: invokevirtual #48
792: ldc           #42
794: invokevirtual #43
797: invokevirtual #46
800: iload         41
802: ifne          809
805: iconst_1
806: goto          810
809: iconst_0
810: invokestatic  #47
813: new           #40
816: dup
817: invokespecial #41
820: ldc           #42
822: invokevirtual #43
825: iload         42
827: invokevirtual #48
830: ldc           #45
832: invokevirtual #43
835: iconst_0
836: invokevirtual #48
839: ldc           #42
841: invokevirtual #43
844: invokevirtual #46
847: iload         42
849: ifne          856
852: iconst_1
853: goto          857
856: iconst_0
857: invokestatic  #47
860: aload         43
862: invokestatic  #78
865: aload         44
867: invokestatic  #18
870: new           #40
873: dup
874: invokespecial #41
877: ldc           #42
879: invokevirtual #43
882: dload         47
884: invokevirtual #44
887: ldc           #45
889: invokevirtual #43
892: dconst_0
893: invokevirtual #44
896: ldc           #42
898: invokevirtual #43
901: invokevirtual #46
904: dload         47
906: dconst_0
907: dcmpl
908: ifne          915
911: iconst_1
912: goto          916
915: iconst_0
916: invokestatic  #47
919: aload         49
921: invokestatic  #18
924: aload         50
926: invokestatic  #18
929: aload         51
931: invokestatic  #18
934: aload         52
936: invokestatic  #18
939: aload         54
941: invokestatic  #18
944: aload         55
946: invokestatic  #18
949: aload         56
951: invokestatic  #18
954: aload         57
956: invokestatic  #18
959: aload         58
961: invokestatic  #18
964: aload         59
966: invokestatic  #18
969: dload         61
971: invokestatic  #38
974: invokestatic  #39
977: dload         63
979: invokestatic  #38
982: invokestatic  #39
985: aload         65
987: invokestatic  #18
990: aload         66
992: invokestatic  #18
995: aload         67
997: invokestatic  #18
1000: new           #40
1003: dup
1004: invokespecial #41
1007: ldc           #42
1009: invokevirtual #43
1012: dload         68
1014: invokevirtual #44
1017: ldc           #45
1019: invokevirtual #43
1022: dconst_0
1023: invokevirtual #44
1026: ldc           #42
1028: invokevirtual #43
1031: invokevirtual #46
1034: dload         68
1036: dconst_0
1037: dcmpl
1038: ifne          1045
1041: iconst_1
1042: goto          1046
1045: iconst_0
1046: invokestatic  #47
1049: new           #40
1052: dup
1053: invokespecial #41
1056: ldc           #42
1058: invokevirtual #43
1061: iload         70
1063: invokevirtual #48
1066: ldc           #45
1068: invokevirtual #43
1071: iconst_0
1072: invokevirtual #48
1075: ldc           #42
1077: invokevirtual #43
1080: invokevirtual #46
1083: iload         70
1085: ifne          1092
1088: iconst_1
1089: goto          1093
1092: iconst_0
1093: invokestatic  #47
1096: new           #40
1099: dup
1100: invokespecial #41
1103: ldc           #42
1105: invokevirtual #43
1108: iload         71
1110: invokevirtual #48
1113: ldc           #45
1115: invokevirtual #43
1118: iconst_1
1119: invokevirtual #48
1122: ldc           #42
1124: invokevirtual #43
1127: invokevirtual #46
1130: iload         71
1132: iconst_1
1133: if_icmpne     1140
1136: iconst_1
1137: goto          1141
1140: iconst_0
1141: invokestatic  #47
1144: aload         75
1146: invokestatic  #18
1149: return
Exception table:
from    to  target type
545   559   562   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test070
Start line: 5382
End line: 5537
Method source code: 
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = plane4.getOrigin();
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line20 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D18, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line25 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D23, (double) 0.0f);
        boolean boolean26 = line20.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane31 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D27, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = vector3D34.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane38 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D34, vector3D37);
        double double39 = vector3D32.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        double double40 = plane31.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        plane31.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = vector3D49.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane53 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D49, vector3D52);
        double double54 = vector3D47.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52);
        double double55 = plane46.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52);
        plane46.revertSelf();
        double double57 = plane31.getOffset(plane46);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D59.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane63 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D59, vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D58, vector3D62);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = plane46.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D62);
        line20.reset(vector2D65, (double) (-127));
        double double68 = vector2D65.getNorm();
        org.apache.commons.math3.geometry.Space space69 = vector2D65.getSpace();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D65);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D71.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = vector3D73.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane75 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D71, vector3D74);
        plane75.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D79.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane83 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D79, vector3D82);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D78, vector3D82);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = vector3D78.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D77, vector3D85);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector87 = plane75.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D77);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane88 = plane75.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane89 = plane75.copySelf();
        double double90 = plane4.getOffset(plane89);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D91 = plane89.getU();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector2D65);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(space69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(euclidean2DVector87);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane88);
        org.junit.Assert.assertNotNull(plane89);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(vector3D91);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #271
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #83
128: astore        17
130: aload         5
132: invokevirtual #20
135: new           #60
138: dup
139: dconst_0
140: ldc2_w        #61
143: invokespecial #63
146: astore        18
148: new           #64
151: dup
152: aload         18
154: dconst_0
155: invokespecial #65
158: astore        19
160: new           #60
163: dup
164: dconst_0
165: ldc2_w        #61
168: invokespecial #63
171: astore        20
173: new           #64
176: dup
177: aload         20
179: dconst_0
180: invokespecial #65
183: astore        21
185: aload         19
187: aload         21
189: invokevirtual #95
192: istore        22
194: getstatic     #10
197: astore        23
199: aload         23
201: invokevirtual #11
204: astore        24
206: getstatic     #10
209: astore        25
211: aload         25
213: invokevirtual #11
216: astore        26
218: new           #12
221: dup
222: aload         23
224: aload         26
226: invokespecial #13
229: astore        27
231: getstatic     #10
234: astore        28
236: aload         28
238: invokevirtual #11
241: astore        29
243: getstatic     #10
246: astore        30
248: aload         30
250: invokevirtual #11
253: astore        31
255: getstatic     #10
258: astore        32
260: aload         32
262: invokevirtual #11
265: astore        33
267: new           #12
270: dup
271: aload         30
273: aload         33
275: invokespecial #13
278: astore        34
280: aload         28
282: aload         33
284: invokevirtual #22
287: dstore        35
289: aload         27
291: aload         33
293: invokevirtual #23
296: dstore        37
298: aload         27
300: invokevirtual #20
303: getstatic     #10
306: astore        39
308: aload         39
310: invokevirtual #11
313: astore        40
315: getstatic     #10
318: astore        41
320: aload         41
322: invokevirtual #11
325: astore        42
327: new           #12
330: dup
331: aload         39
333: aload         42
335: invokespecial #13
338: astore        43
340: getstatic     #10
343: astore        44
345: aload         44
347: invokevirtual #11
350: astore        45
352: getstatic     #10
355: astore        46
357: aload         46
359: invokevirtual #11
362: astore        47
364: getstatic     #10
367: astore        48
369: aload         48
371: invokevirtual #11
374: astore        49
376: new           #12
379: dup
380: aload         46
382: aload         49
384: invokespecial #13
387: astore        50
389: aload         44
391: aload         49
393: invokevirtual #22
396: dstore        51
398: aload         43
400: aload         49
402: invokevirtual #23
405: dstore        53
407: aload         43
409: invokevirtual #20
412: aload         27
414: aload         43
416: invokevirtual #82
419: dstore        55
421: getstatic     #10
424: astore        57
426: getstatic     #10
429: astore        58
431: aload         58
433: invokevirtual #11
436: astore        59
438: getstatic     #10
441: astore        60
443: aload         60
445: invokevirtual #11
448: astore        61
450: new           #12
453: dup
454: aload         58
456: aload         61
458: invokespecial #13
461: astore        62
463: aload         57
465: aload         61
467: invokestatic  #96
470: astore        63
472: aload         43
474: aload         61
476: invokevirtual #97
479: astore        64
481: aload         19
483: aload         64
485: ldc2_w        #98
488: invokevirtual #100
491: aload         64
493: invokevirtual #128
496: dstore        65
498: aload         64
500: invokevirtual #129
503: astore        67
505: aload         5
507: aload         64
509: invokevirtual #66
512: astore        68
514: getstatic     #10
517: astore        69
519: aload         69
521: invokevirtual #11
524: astore        70
526: getstatic     #10
529: astore        71
531: aload         71
533: invokevirtual #11
536: astore        72
538: new           #12
541: dup
542: aload         69
544: aload         72
546: invokespecial #13
549: astore        73
551: aload         73
553: invokevirtual #20
556: getstatic     #10
559: astore        74
561: getstatic     #10
564: astore        75
566: getstatic     #10
569: astore        76
571: aload         76
573: invokevirtual #11
576: astore        77
578: getstatic     #10
581: astore        78
583: aload         78
585: invokevirtual #11
588: astore        79
590: new           #12
593: dup
594: aload         76
596: aload         79
598: invokespecial #13
601: astore        80
603: aload         75
605: aload         79
607: invokestatic  #96
610: astore        81
612: aload         75
614: invokevirtual #110
617: astore        82
619: aload         74
621: aload         82
623: invokestatic  #96
626: astore        83
628: aload         73
630: aload         74
632: invokevirtual #97
635: astore        84
637: aload         73
639: invokevirtual #24
642: astore        85
644: aload         73
646: invokevirtual #130
649: astore        86
651: aload         5
653: aload         86
655: invokevirtual #82
658: dstore        87
660: aload         86
662: invokevirtual #272
665: astore        89
667: aload_1
668: invokestatic  #18
671: aload_2
672: invokestatic  #18
675: aload_3
676: invokestatic  #18
679: aload         4
681: invokestatic  #18
684: aload         6
686: invokestatic  #18
689: aload         7
691: invokestatic  #18
694: aload         8
696: invokestatic  #18
699: aload         9
701: invokestatic  #18
704: aload         10
706: invokestatic  #18
709: aload         11
711: invokestatic  #18
714: dload         13
716: invokestatic  #38
719: invokestatic  #39
722: dload         15
724: invokestatic  #38
727: invokestatic  #39
730: aload         17
732: invokestatic  #18
735: new           #40
738: dup
739: invokespecial #41
742: ldc           #42
744: invokevirtual #43
747: iload         22
749: invokevirtual #48
752: ldc           #45
754: invokevirtual #43
757: iconst_1
758: invokevirtual #48
761: ldc           #42
763: invokevirtual #43
766: invokevirtual #46
769: iload         22
771: iconst_1
772: if_icmpne     779
775: iconst_1
776: goto          780
779: iconst_0
780: invokestatic  #47
783: aload         23
785: invokestatic  #18
788: aload         24
790: invokestatic  #18
793: aload         25
795: invokestatic  #18
798: aload         26
800: invokestatic  #18
803: aload         28
805: invokestatic  #18
808: aload         29
810: invokestatic  #18
813: aload         30
815: invokestatic  #18
818: aload         31
820: invokestatic  #18
823: aload         32
825: invokestatic  #18
828: aload         33
830: invokestatic  #18
833: dload         35
835: invokestatic  #38
838: invokestatic  #39
841: dload         37
843: invokestatic  #38
846: invokestatic  #39
849: aload         39
851: invokestatic  #18
854: aload         40
856: invokestatic  #18
859: aload         41
861: invokestatic  #18
864: aload         42
866: invokestatic  #18
869: aload         44
871: invokestatic  #18
874: aload         45
876: invokestatic  #18
879: aload         46
881: invokestatic  #18
884: aload         47
886: invokestatic  #18
889: aload         48
891: invokestatic  #18
894: aload         49
896: invokestatic  #18
899: dload         51
901: invokestatic  #38
904: invokestatic  #39
907: dload         53
909: invokestatic  #38
912: invokestatic  #39
915: dload         55
917: invokestatic  #38
920: invokestatic  #39
923: aload         57
925: invokestatic  #18
928: aload         58
930: invokestatic  #18
933: aload         59
935: invokestatic  #18
938: aload         60
940: invokestatic  #18
943: aload         61
945: invokestatic  #18
948: aload         63
950: invokestatic  #18
953: aload         64
955: invokestatic  #18
958: dload         65
960: invokestatic  #38
963: invokestatic  #39
966: aload         67
968: invokestatic  #18
971: aload         68
973: invokestatic  #18
976: aload         69
978: invokestatic  #18
981: aload         70
983: invokestatic  #18
986: aload         71
988: invokestatic  #18
991: aload         72
993: invokestatic  #18
996: aload         74
998: invokestatic  #18
1001: aload         75
1003: invokestatic  #18
1006: aload         76
1008: invokestatic  #18
1011: aload         77
1013: invokestatic  #18
1016: aload         78
1018: invokestatic  #18
1021: aload         79
1023: invokestatic  #18
1026: aload         81
1028: invokestatic  #18
1031: aload         82
1033: invokestatic  #18
1036: aload         83
1038: invokestatic  #18
1041: aload         84
1043: invokestatic  #18
1046: aload         85
1048: invokestatic  #18
1051: aload         86
1053: invokestatic  #18
1056: dload         87
1058: invokestatic  #38
1061: invokestatic  #39
1064: aload         89
1066: invokestatic  #18
1069: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test071
Start line: 5540
End line: 5633
Method source code: 
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = vector3D1.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane5 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D1, vector3D4);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D0, vector3D4);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D0.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane20 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D16, vector3D19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D15, vector3D19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D15.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D14, vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D12.subtract((double) '4', (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance1(vector3D12, vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        plane32.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane40 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D36, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D35, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D35.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D34, vector3D42);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector44 = plane32.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane45 = plane32.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = plane32.copySelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = plane32.getNormal();
        double double48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.dotProduct(vector3D12, vector3D47);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(euclidean2DVector44);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane45);
        org.junit.Assert.assertNotNull(plane46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #273
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: getstatic     #10
32: astore_2
33: aload_2
34: invokevirtual #11
37: astore_3
38: getstatic     #10
41: astore        4
43: aload         4
45: invokevirtual #11
48: astore        5
50: new           #12
53: dup
54: aload_2
55: aload         5
57: invokespecial #13
60: astore        6
62: aload_1
63: aload         5
65: invokestatic  #96
68: astore        7
70: getstatic     #10
73: astore        8
75: aload         8
77: invokevirtual #11
80: astore        9
82: getstatic     #10
85: astore        10
87: aload         10
89: invokevirtual #11
92: astore        11
94: new           #12
97: dup
98: aload         8
100: aload         11
102: invokespecial #13
105: astore        12
107: aload_1
108: aload         11
110: invokevirtual #111
113: astore        13
115: getstatic     #10
118: astore        14
120: getstatic     #10
123: astore        15
125: getstatic     #10
128: astore        16
130: aload         16
132: invokevirtual #11
135: astore        17
137: getstatic     #10
140: astore        18
142: aload         18
144: invokevirtual #11
147: astore        19
149: new           #12
152: dup
153: aload         16
155: aload         19
157: invokespecial #13
160: astore        20
162: aload         15
164: aload         19
166: invokestatic  #96
169: astore        21
171: aload         15
173: invokevirtual #110
176: astore        22
178: aload         14
180: aload         22
182: invokestatic  #96
185: astore        23
187: aload         13
189: ldc2_w        #274
192: aload         22
194: invokevirtual #181
197: astore        24
199: getstatic     #10
202: astore        25
204: aload         25
206: invokevirtual #11
209: astore        26
211: aload         13
213: aload         25
215: invokestatic  #276
218: dstore        27
220: getstatic     #10
223: astore        29
225: aload         29
227: invokevirtual #11
230: astore        30
232: getstatic     #10
235: astore        31
237: aload         31
239: invokevirtual #11
242: astore        32
244: new           #12
247: dup
248: aload         29
250: aload         32
252: invokespecial #13
255: astore        33
257: aload         33
259: invokevirtual #20
262: getstatic     #10
265: astore        34
267: getstatic     #10
270: astore        35
272: getstatic     #10
275: astore        36
277: aload         36
279: invokevirtual #11
282: astore        37
284: getstatic     #10
287: astore        38
289: aload         38
291: invokevirtual #11
294: astore        39
296: new           #12
299: dup
300: aload         36
302: aload         39
304: invokespecial #13
307: astore        40
309: aload         35
311: aload         39
313: invokestatic  #96
316: astore        41
318: aload         35
320: invokevirtual #110
323: astore        42
325: aload         34
327: aload         42
329: invokestatic  #96
332: astore        43
334: aload         33
336: aload         34
338: invokevirtual #97
341: astore        44
343: aload         33
345: invokevirtual #24
348: astore        45
350: aload         33
352: invokevirtual #130
355: astore        46
357: aload         33
359: invokevirtual #135
362: astore        47
364: aload         13
366: aload         47
368: invokestatic  #277
371: dstore        48
373: aload_1
374: invokestatic  #18
377: aload_2
378: invokestatic  #18
381: aload_3
382: invokestatic  #18
385: aload         4
387: invokestatic  #18
390: aload         5
392: invokestatic  #18
395: aload         7
397: invokestatic  #18
400: aload         8
402: invokestatic  #18
405: aload         9
407: invokestatic  #18
410: aload         10
412: invokestatic  #18
415: aload         11
417: invokestatic  #18
420: aload         13
422: invokestatic  #18
425: aload         14
427: invokestatic  #18
430: aload         15
432: invokestatic  #18
435: aload         16
437: invokestatic  #18
440: aload         17
442: invokestatic  #18
445: aload         18
447: invokestatic  #18
450: aload         19
452: invokestatic  #18
455: aload         21
457: invokestatic  #18
460: aload         22
462: invokestatic  #18
465: aload         23
467: invokestatic  #18
470: aload         24
472: invokestatic  #18
475: aload         25
477: invokestatic  #18
480: aload         26
482: invokestatic  #18
485: dload         27
487: invokestatic  #38
490: invokestatic  #39
493: aload         29
495: invokestatic  #18
498: aload         30
500: invokestatic  #18
503: aload         31
505: invokestatic  #18
508: aload         32
510: invokestatic  #18
513: aload         34
515: invokestatic  #18
518: aload         35
520: invokestatic  #18
523: aload         36
525: invokestatic  #18
528: aload         37
530: invokestatic  #18
533: aload         38
535: invokestatic  #18
538: aload         39
540: invokestatic  #18
543: aload         41
545: invokestatic  #18
548: aload         42
550: invokestatic  #18
553: aload         43
555: invokestatic  #18
558: aload         44
560: invokestatic  #18
563: aload         45
565: invokestatic  #18
568: aload         46
570: invokestatic  #18
573: aload         47
575: invokestatic  #18
578: dload         48
580: invokestatic  #38
583: invokestatic  #39
586: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test072
Start line: 5636
End line: 5680
Method source code: 
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.math3.exception.MathInternalError mathInternalError1 = new org.apache.commons.math3.exception.MathInternalError();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext2 = mathInternalError1.getContext();
        org.apache.commons.math3.exception.util.Localizable localizable3 = null;
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList4 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet5 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList4);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree7 = polyhedronsSet5.getTree(false);
        org.apache.commons.math3.exception.util.Localizable localizable8 = null;
        org.apache.commons.math3.exception.DimensionMismatchException dimensionMismatchException11 = new org.apache.commons.math3.exception.DimensionMismatchException(0, (int) (byte) -1);
        org.apache.commons.math3.exception.util.Localizable localizable12 = null;
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) dimensionMismatchException11, localizable12, objArray13);
        org.apache.commons.math3.util.MathUtils.checkNotNull((java.lang.Object) false, localizable8, objArray13);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathInternalError1, localizable3, objArray13);
        org.apache.commons.math3.exception.NotFiniteNumberException notFiniteNumberException17 = new org.apache.commons.math3.exception.NotFiniteNumberException((java.lang.Number) (-127), objArray13);
        org.apache.commons.math3.exception.util.Localizable localizable18 = null;
        org.apache.commons.math3.exception.DimensionMismatchException dimensionMismatchException21 = new org.apache.commons.math3.exception.DimensionMismatchException(0, (int) (byte) -1);
        org.apache.commons.math3.exception.util.Localizable localizable22 = null;
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException24 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) dimensionMismatchException21, localizable22, objArray23);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException25 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) notFiniteNumberException17, localizable18, objArray23);
        org.apache.commons.math3.exception.util.Localizable localizable26 = null;
        org.apache.commons.math3.exception.util.Localizable localizable27 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet28 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray29 = polygonsSet28.getVertices();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable27, (java.lang.Object[]) vector2DArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException25, localizable26, (java.lang.Object[]) vector2DArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(exceptionContext2);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree7);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(vector2DArray29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #278
20: aastore
21: invokevirtual #7
24: pop
25: new           #217
28: dup
29: invokespecial #279
32: astore_1
33: aload_1
34: invokevirtual #280
37: astore_2
38: aconst_null
39: astore_3
40: new           #25
43: dup
44: invokespecial #26
47: astore        4
49: new           #8
52: dup
53: aload         4
55: invokespecial #27
58: astore        5
60: aload         5
62: iconst_0
63: invokevirtual #30
66: astore        6
68: aconst_null
69: astore        7
71: new           #281
74: dup
75: iconst_0
76: iconst_m1
77: invokespecial #282
80: astore        8
82: aconst_null
83: astore        9
85: iconst_0
86: anewarray     #5
89: astore        10
91: new           #224
94: dup
95: aload         8
97: aload         9
99: aload         10
101: invokespecial #283
104: astore        11
106: iconst_0
107: invokestatic  #263
110: aload         7
112: aload         10
114: invokestatic  #284
117: new           #224
120: dup
121: aload_1
122: aload_3
123: aload         10
125: invokespecial #283
128: astore        12
130: new           #285
133: dup
134: bipush        -127
136: invokestatic  #286
139: aload         10
141: invokespecial #287
144: astore        13
146: aconst_null
147: astore        14
149: new           #281
152: dup
153: iconst_0
154: iconst_m1
155: invokespecial #282
158: astore        15
160: aconst_null
161: astore        16
163: iconst_0
164: anewarray     #5
167: astore        17
169: new           #224
172: dup
173: aload         15
175: aload         16
177: aload         17
179: invokespecial #283
182: astore        18
184: new           #224
187: dup
188: aload         13
190: aload         14
192: aload         17
194: invokespecial #283
197: astore        19
199: aconst_null
200: astore        20
202: aconst_null
203: astore        21
205: new           #56
208: dup
209: invokespecial #87
212: astore        22
214: aload         22
216: invokevirtual #143
219: astore        23
221: new           #224
224: dup
225: aload         21
227: aload         23
229: checkcast     #225
232: invokespecial #226
235: astore        24
237: new           #224
240: dup
241: aload         19
243: aload         20
245: aload         23
247: checkcast     #225
250: invokespecial #283
253: astore        25
255: ldc           #15
257: invokestatic  #16
260: goto          265
263: astore        25
265: aload_2
266: invokestatic  #18
269: aload         6
271: invokestatic  #18
274: aload         10
276: invokestatic  #18
279: aload         10
281: invokestatic  #288
284: ldc_w         #289
287: invokestatic  #51
290: aload         10
292: invokestatic  #290
295: ldc_w         #289
298: invokestatic  #51
301: aload         17
303: invokestatic  #18
306: aload         17
308: invokestatic  #288
311: ldc_w         #289
314: invokestatic  #51
317: aload         17
319: invokestatic  #290
322: ldc_w         #289
325: invokestatic  #51
328: aload         23
330: invokestatic  #18
333: return
Exception table:
from    to  target type
237   260   263   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test073
Start line: 5683
End line: 5783
Method source code: 
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree52 = euclidean3DBSPTree51.getMinus();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane53 = euclidean3DBSPTree51.getCut();
        org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTreeVisitor54 = null;
        // The following exception was thrown during execution in test generation
        try {
            euclidean3DBSPTree51.visit(euclidean3DBSPTreeVisitor54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree52);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane53);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #291
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: new           #25
133: dup
134: invokespecial #26
137: astore        18
139: new           #8
142: dup
143: aload         18
145: invokespecial #27
148: astore        19
150: aload         19
152: invokevirtual #28
155: dstore        20
157: new           #25
160: dup
161: invokespecial #26
164: astore        22
166: new           #8
169: dup
170: aload         22
172: invokespecial #27
175: astore        23
177: aconst_null
178: astore        24
180: aload         23
182: aload         24
184: invokevirtual #29
187: astore        25
189: aload         23
191: iconst_0
192: invokevirtual #30
195: astore        26
197: aload         19
199: aload         26
201: invokevirtual #31
204: istore        27
206: new           #25
209: dup
210: invokespecial #26
213: astore        28
215: new           #8
218: dup
219: aload         28
221: invokespecial #27
224: astore        29
226: aload         29
228: invokevirtual #28
231: dstore        30
233: new           #25
236: dup
237: invokespecial #26
240: astore        32
242: new           #8
245: dup
246: aload         32
248: invokespecial #27
251: astore        33
253: aconst_null
254: astore        34
256: aload         33
258: aload         34
260: invokevirtual #29
263: astore        35
265: aload         33
267: iconst_0
268: invokevirtual #30
271: astore        36
273: aload         29
275: aload         36
277: invokevirtual #31
280: istore        37
282: getstatic     #10
285: astore        38
287: aload         38
289: invokevirtual #11
292: astore        39
294: getstatic     #10
297: astore        40
299: aload         40
301: invokevirtual #11
304: astore        41
306: new           #12
309: dup
310: aload         38
312: aload         41
314: invokespecial #13
317: astore        42
319: getstatic     #10
322: astore        43
324: aload         43
326: invokevirtual #11
329: astore        44
331: getstatic     #10
334: astore        45
336: aload         45
338: invokevirtual #11
341: astore        46
343: getstatic     #10
346: astore        47
348: aload         47
350: invokevirtual #11
353: astore        48
355: new           #12
358: dup
359: aload         45
361: aload         48
363: invokespecial #13
366: astore        49
368: aload         43
370: aload         48
372: invokevirtual #22
375: dstore        50
377: aload         42
379: aload         48
381: invokevirtual #23
384: dstore        52
386: aload         42
388: invokevirtual #24
391: astore        54
393: aload         54
395: invokevirtual #32
398: astore        55
400: new           #33
403: dup
404: aload         17
406: aload         26
408: aload         36
410: aload         54
412: invokespecial #34
415: astore        56
417: aload         56
419: invokevirtual #77
422: astore        57
424: aload         56
426: invokevirtual #149
429: astore        58
431: aconst_null
432: astore        59
434: aload         56
436: aload         59
438: invokevirtual #75
441: ldc           #15
443: invokestatic  #16
446: goto          451
449: astore        60
451: aload_1
452: invokestatic  #18
455: aload_2
456: invokestatic  #18
459: aload_3
460: invokestatic  #18
463: aload         4
465: invokestatic  #18
468: aload         6
470: invokestatic  #18
473: aload         7
475: invokestatic  #18
478: aload         8
480: invokestatic  #18
483: aload         9
485: invokestatic  #18
488: aload         10
490: invokestatic  #18
493: aload         11
495: invokestatic  #18
498: dload         13
500: invokestatic  #38
503: invokestatic  #39
506: dload         15
508: invokestatic  #38
511: invokestatic  #39
514: aload         17
516: invokestatic  #18
519: new           #40
522: dup
523: invokespecial #41
526: ldc           #42
528: invokevirtual #43
531: dload         20
533: invokevirtual #44
536: ldc           #45
538: invokevirtual #43
541: dconst_0
542: invokevirtual #44
545: ldc           #42
547: invokevirtual #43
550: invokevirtual #46
553: dload         20
555: dconst_0
556: dcmpl
557: ifne          564
560: iconst_1
561: goto          565
564: iconst_0
565: invokestatic  #47
568: aload         25
570: invokestatic  #18
573: aload         26
575: invokestatic  #18
578: new           #40
581: dup
582: invokespecial #41
585: ldc           #42
587: invokevirtual #43
590: iload         27
592: invokevirtual #48
595: ldc           #45
597: invokevirtual #43
600: iconst_0
601: invokevirtual #48
604: ldc           #42
606: invokevirtual #43
609: invokevirtual #46
612: iload         27
614: ifne          621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #47
625: new           #40
628: dup
629: invokespecial #41
632: ldc           #42
634: invokevirtual #43
637: dload         30
639: invokevirtual #44
642: ldc           #45
644: invokevirtual #43
647: dconst_0
648: invokevirtual #44
651: ldc           #42
653: invokevirtual #43
656: invokevirtual #46
659: dload         30
661: dconst_0
662: dcmpl
663: ifne          670
666: iconst_1
667: goto          671
670: iconst_0
671: invokestatic  #47
674: aload         35
676: invokestatic  #18
679: aload         36
681: invokestatic  #18
684: new           #40
687: dup
688: invokespecial #41
691: ldc           #42
693: invokevirtual #43
696: iload         37
698: invokevirtual #48
701: ldc           #45
703: invokevirtual #43
706: iconst_0
707: invokevirtual #48
710: ldc           #42
712: invokevirtual #43
715: invokevirtual #46
718: iload         37
720: ifne          727
723: iconst_1
724: goto          728
727: iconst_0
728: invokestatic  #47
731: aload         38
733: invokestatic  #18
736: aload         39
738: invokestatic  #18
741: aload         40
743: invokestatic  #18
746: aload         41
748: invokestatic  #18
751: aload         43
753: invokestatic  #18
756: aload         44
758: invokestatic  #18
761: aload         45
763: invokestatic  #18
766: aload         46
768: invokestatic  #18
771: aload         47
773: invokestatic  #18
776: aload         48
778: invokestatic  #18
781: dload         50
783: invokestatic  #38
786: invokestatic  #39
789: dload         52
791: invokestatic  #38
794: invokestatic  #39
797: aload         54
799: invokestatic  #18
802: aload         55
804: invokestatic  #18
807: aload         57
809: invokestatic  #18
812: aload         58
814: invokestatic  #18
817: return
Exception table:
from    to  target type
434   446   449   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test074
Start line: 5786
End line: 5952
Method source code: 
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane21 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D17, vector3D20);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D24 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line26 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D24, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = plane21.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D24);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        double double40 = vector3D33.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38);
        double double41 = plane32.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D38);
        plane32.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D43, vector3D46);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane54 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D50, vector3D53);
        double double55 = vector3D48.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53);
        double double56 = plane47.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53);
        plane47.revertSelf();
        double double58 = plane32.getOffset(plane47);
        org.apache.commons.math3.geometry.euclidean.threed.Line line59 = plane21.intersection(plane32);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = vector3D63.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = vector3D65.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane67 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D63, vector3D66);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D62, vector3D66);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = vector3D69.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D71.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane73 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D69, vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = vector3D62.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D60.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D77.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D79.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane81 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D77, vector3D80);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D76, vector3D80);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D83.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D85.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane87 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D83, vector3D86);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = vector3D76.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D89 = vector3D60.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86);
        double double90 = line59.getAbscissa(vector3D86);
        double double91 = vector3D86.getX();
        org.apache.commons.math3.geometry.euclidean.threed.Line line92 = new org.apache.commons.math3.geometry.euclidean.threed.Line(vector3D16, vector3D86);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector93 = plane4.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(line59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertNotNull(vector3D89);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertNotNull(euclidean2DVector93);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #292
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: aload         5
132: invokevirtual #20
135: getstatic     #293
138: astore        18
140: getstatic     #10
143: astore        19
145: aload         19
147: invokevirtual #11
150: astore        20
152: getstatic     #10
155: astore        21
157: aload         21
159: invokevirtual #11
162: astore        22
164: new           #12
167: dup
168: aload         19
170: aload         22
172: invokespecial #13
175: astore        23
177: new           #60
180: dup
181: dconst_0
182: ldc2_w        #61
185: invokespecial #63
188: astore        24
190: new           #64
193: dup
194: aload         24
196: dconst_0
197: invokespecial #65
200: astore        25
202: aload         23
204: aload         24
206: invokevirtual #66
209: astore        26
211: getstatic     #10
214: astore        27
216: aload         27
218: invokevirtual #11
221: astore        28
223: getstatic     #10
226: astore        29
228: aload         29
230: invokevirtual #11
233: astore        30
235: new           #12
238: dup
239: aload         27
241: aload         30
243: invokespecial #13
246: astore        31
248: getstatic     #10
251: astore        32
253: aload         32
255: invokevirtual #11
258: astore        33
260: getstatic     #10
263: astore        34
265: aload         34
267: invokevirtual #11
270: astore        35
272: getstatic     #10
275: astore        36
277: aload         36
279: invokevirtual #11
282: astore        37
284: new           #12
287: dup
288: aload         34
290: aload         37
292: invokespecial #13
295: astore        38
297: aload         32
299: aload         37
301: invokevirtual #22
304: dstore        39
306: aload         31
308: aload         37
310: invokevirtual #23
313: dstore        41
315: aload         31
317: invokevirtual #20
320: getstatic     #10
323: astore        43
325: aload         43
327: invokevirtual #11
330: astore        44
332: getstatic     #10
335: astore        45
337: aload         45
339: invokevirtual #11
342: astore        46
344: new           #12
347: dup
348: aload         43
350: aload         46
352: invokespecial #13
355: astore        47
357: getstatic     #10
360: astore        48
362: aload         48
364: invokevirtual #11
367: astore        49
369: getstatic     #10
372: astore        50
374: aload         50
376: invokevirtual #11
379: astore        51
381: getstatic     #10
384: astore        52
386: aload         52
388: invokevirtual #11
391: astore        53
393: new           #12
396: dup
397: aload         50
399: aload         53
401: invokespecial #13
404: astore        54
406: aload         48
408: aload         53
410: invokevirtual #22
413: dstore        55
415: aload         47
417: aload         53
419: invokevirtual #23
422: dstore        57
424: aload         47
426: invokevirtual #20
429: aload         31
431: aload         47
433: invokevirtual #82
436: dstore        59
438: aload         23
440: aload         31
442: invokevirtual #134
445: astore        61
447: getstatic     #10
450: astore        62
452: getstatic     #10
455: astore        63
457: getstatic     #10
460: astore        64
462: aload         64
464: invokevirtual #11
467: astore        65
469: getstatic     #10
472: astore        66
474: aload         66
476: invokevirtual #11
479: astore        67
481: new           #12
484: dup
485: aload         64
487: aload         67
489: invokespecial #13
492: astore        68
494: aload         63
496: aload         67
498: invokestatic  #96
501: astore        69
503: getstatic     #10
506: astore        70
508: aload         70
510: invokevirtual #11
513: astore        71
515: getstatic     #10
518: astore        72
520: aload         72
522: invokevirtual #11
525: astore        73
527: new           #12
530: dup
531: aload         70
533: aload         73
535: invokespecial #13
538: astore        74
540: aload         63
542: aload         73
544: invokevirtual #111
547: astore        75
549: aload         62
551: dconst_1
552: aload         73
554: invokevirtual #112
557: astore        76
559: getstatic     #10
562: astore        77
564: getstatic     #10
567: astore        78
569: aload         78
571: invokevirtual #11
574: astore        79
576: getstatic     #10
579: astore        80
581: aload         80
583: invokevirtual #11
586: astore        81
588: new           #12
591: dup
592: aload         78
594: aload         81
596: invokespecial #13
599: astore        82
601: aload         77
603: aload         81
605: invokestatic  #96
608: astore        83
610: getstatic     #10
613: astore        84
615: aload         84
617: invokevirtual #11
620: astore        85
622: getstatic     #10
625: astore        86
627: aload         86
629: invokevirtual #11
632: astore        87
634: new           #12
637: dup
638: aload         84
640: aload         87
642: invokespecial #13
645: astore        88
647: aload         77
649: aload         87
651: invokevirtual #111
654: astore        89
656: aload         62
658: aload         87
660: invokevirtual #294
663: astore        90
665: aload         61
667: aload         87
669: invokevirtual #295
672: dstore        91
674: aload         87
676: invokevirtual #296
679: dstore        93
681: new           #182
684: dup
685: aload         18
687: aload         87
689: invokespecial #183
692: astore        95
694: aload         5
696: aload         18
698: invokevirtual #97
701: astore        96
703: aload_1
704: invokestatic  #18
707: aload_2
708: invokestatic  #18
711: aload_3
712: invokestatic  #18
715: aload         4
717: invokestatic  #18
720: aload         6
722: invokestatic  #18
725: aload         7
727: invokestatic  #18
730: aload         8
732: invokestatic  #18
735: aload         9
737: invokestatic  #18
740: aload         10
742: invokestatic  #18
745: aload         11
747: invokestatic  #18
750: dload         13
752: invokestatic  #38
755: invokestatic  #39
758: dload         15
760: invokestatic  #38
763: invokestatic  #39
766: aload         17
768: invokestatic  #18
771: aload         18
773: invokestatic  #18
776: aload         19
778: invokestatic  #18
781: aload         20
783: invokestatic  #18
786: aload         21
788: invokestatic  #18
791: aload         22
793: invokestatic  #18
796: aload         26
798: invokestatic  #18
801: aload         27
803: invokestatic  #18
806: aload         28
808: invokestatic  #18
811: aload         29
813: invokestatic  #18
816: aload         30
818: invokestatic  #18
821: aload         32
823: invokestatic  #18
826: aload         33
828: invokestatic  #18
831: aload         34
833: invokestatic  #18
836: aload         35
838: invokestatic  #18
841: aload         36
843: invokestatic  #18
846: aload         37
848: invokestatic  #18
851: dload         39
853: invokestatic  #38
856: invokestatic  #39
859: dload         41
861: invokestatic  #38
864: invokestatic  #39
867: aload         43
869: invokestatic  #18
872: aload         44
874: invokestatic  #18
877: aload         45
879: invokestatic  #18
882: aload         46
884: invokestatic  #18
887: aload         48
889: invokestatic  #18
892: aload         49
894: invokestatic  #18
897: aload         50
899: invokestatic  #18
902: aload         51
904: invokestatic  #18
907: aload         52
909: invokestatic  #18
912: aload         53
914: invokestatic  #18
917: dload         55
919: invokestatic  #38
922: invokestatic  #39
925: dload         57
927: invokestatic  #38
930: invokestatic  #39
933: dload         59
935: invokestatic  #38
938: invokestatic  #39
941: aload         61
943: invokestatic  #18
946: aload         62
948: invokestatic  #18
951: aload         63
953: invokestatic  #18
956: aload         64
958: invokestatic  #18
961: aload         65
963: invokestatic  #18
966: aload         66
968: invokestatic  #18
971: aload         67
973: invokestatic  #18
976: aload         69
978: invokestatic  #18
981: aload         70
983: invokestatic  #18
986: aload         71
988: invokestatic  #18
991: aload         72
993: invokestatic  #18
996: aload         73
998: invokestatic  #18
1001: aload         75
1003: invokestatic  #18
1006: aload         76
1008: invokestatic  #18
1011: aload         77
1013: invokestatic  #18
1016: aload         78
1018: invokestatic  #18
1021: aload         79
1023: invokestatic  #18
1026: aload         80
1028: invokestatic  #18
1031: aload         81
1033: invokestatic  #18
1036: aload         83
1038: invokestatic  #18
1041: aload         84
1043: invokestatic  #18
1046: aload         85
1048: invokestatic  #18
1051: aload         86
1053: invokestatic  #18
1056: aload         87
1058: invokestatic  #18
1061: aload         89
1063: invokestatic  #18
1066: aload         90
1068: invokestatic  #18
1071: dload         91
1073: invokestatic  #38
1076: invokestatic  #39
1079: dload         93
1081: invokestatic  #38
1084: invokestatic  #39
1087: aload         96
1089: invokestatic  #18
1092: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test075
Start line: 5955
End line: 5994
Method source code: 
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray1 = polygonsSet0.getVertices();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = vector3D4.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane6 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D2, vector3D5);
        plane6.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D9, vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D9.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D8, vector3D16);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector18 = plane6.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D8);
        org.apache.commons.math3.geometry.partitioning.Region.Location location19 = polygonsSet0.checkPoint(euclidean2DVector18);
        org.junit.Assert.assertNotNull(vector2DArray1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(euclidean2DVector18);
        org.junit.Assert.assertTrue("'" + location19 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location19.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #297
20: aastore
21: invokevirtual #7
24: pop
25: new           #56
28: dup
29: invokespecial #87
32: astore_1
33: aload_1
34: invokevirtual #143
37: astore_2
38: getstatic     #10
41: astore_3
42: aload_3
43: invokevirtual #11
46: astore        4
48: getstatic     #10
51: astore        5
53: aload         5
55: invokevirtual #11
58: astore        6
60: new           #12
63: dup
64: aload_3
65: aload         6
67: invokespecial #13
70: astore        7
72: aload         7
74: invokevirtual #20
77: getstatic     #10
80: astore        8
82: getstatic     #10
85: astore        9
87: getstatic     #10
90: astore        10
92: aload         10
94: invokevirtual #11
97: astore        11
99: getstatic     #10
102: astore        12
104: aload         12
106: invokevirtual #11
109: astore        13
111: new           #12
114: dup
115: aload         10
117: aload         13
119: invokespecial #13
122: astore        14
124: aload         9
126: aload         13
128: invokestatic  #96
131: astore        15
133: aload         9
135: invokevirtual #110
138: astore        16
140: aload         8
142: aload         16
144: invokestatic  #96
147: astore        17
149: aload         7
151: aload         8
153: invokevirtual #97
156: astore        18
158: aload_1
159: aload         18
161: invokevirtual #257
164: astore        19
166: aload_2
167: invokestatic  #18
170: aload_3
171: invokestatic  #18
174: aload         4
176: invokestatic  #18
179: aload         5
181: invokestatic  #18
184: aload         6
186: invokestatic  #18
189: aload         8
191: invokestatic  #18
194: aload         9
196: invokestatic  #18
199: aload         10
201: invokestatic  #18
204: aload         11
206: invokestatic  #18
209: aload         12
211: invokestatic  #18
214: aload         13
216: invokestatic  #18
219: aload         15
221: invokestatic  #18
224: aload         16
226: invokestatic  #18
229: aload         17
231: invokestatic  #18
234: aload         18
236: invokestatic  #18
239: new           #40
242: dup
243: invokespecial #41
246: ldc           #42
248: invokevirtual #43
251: aload         19
253: invokevirtual #102
256: ldc           #45
258: invokevirtual #43
261: getstatic     #258
264: invokevirtual #102
267: ldc           #42
269: invokevirtual #43
272: invokevirtual #46
275: aload         19
277: getstatic     #258
280: invokevirtual #259
283: invokestatic  #47
286: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test076
Start line: 5997
End line: 6043
Method source code: 
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet1.getTree(false);
        double double24 = polyhedronsSet1.getBoundarySize();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #298
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aconst_null
174: astore        24
176: aload_2
177: aload         24
179: invokevirtual #148
182: astore        25
184: aload_2
185: iconst_0
186: invokevirtual #30
189: astore        26
191: aload_2
192: invokevirtual #28
195: dstore        27
197: new           #40
200: dup
201: invokespecial #41
204: ldc           #42
206: invokevirtual #43
209: dload_3
210: invokevirtual #44
213: ldc           #45
215: invokevirtual #43
218: dconst_0
219: invokevirtual #44
222: ldc           #42
224: invokevirtual #43
227: invokevirtual #46
230: dload_3
231: dconst_0
232: dcmpl
233: ifne          240
236: iconst_1
237: goto          241
240: iconst_0
241: invokestatic  #47
244: aload         5
246: invokestatic  #18
249: aload         6
251: invokestatic  #18
254: aload         7
256: invokestatic  #18
259: aload         8
261: invokestatic  #18
264: aload         10
266: invokestatic  #18
269: aload         11
271: invokestatic  #18
274: aload         12
276: invokestatic  #18
279: aload         13
281: invokestatic  #18
284: aload         14
286: invokestatic  #18
289: aload         15
291: invokestatic  #18
294: dload         17
296: invokestatic  #38
299: invokestatic  #39
302: dload         19
304: invokestatic  #38
307: invokestatic  #39
310: aload         21
312: invokestatic  #18
315: aload         22
317: invokestatic  #18
320: aload         23
322: invokestatic  #18
325: aload         25
327: invokestatic  #18
330: aload         26
332: invokestatic  #18
335: new           #40
338: dup
339: invokespecial #41
342: ldc           #42
344: invokevirtual #43
347: dload         27
349: invokevirtual #44
352: ldc           #45
354: invokevirtual #43
357: dconst_0
358: invokevirtual #44
361: ldc           #42
363: invokevirtual #43
366: invokevirtual #46
369: dload         27
371: dconst_0
372: dcmpl
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #47
384: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test077
Start line: 6046
End line: 6145
Method source code: 
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str5 = vector2D4.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line10 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D8, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line15 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, (double) 0.0f);
        boolean boolean16 = line10.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line21 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D19, (double) 0.0f);
        line15.reset(vector2D19, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        double double36 = vector3D29.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        double double37 = plane28.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        plane28.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane43 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D39, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        double double51 = vector3D44.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        double double52 = plane43.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        plane43.revertSelf();
        double double54 = plane28.getOffset(plane43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane60 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D56, vector3D59);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D55, vector3D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = plane43.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59);
        double double63 = vector2D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        double double64 = vector2D4.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = vector2D0.subtract((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        org.apache.commons.math3.geometry.euclidean.twod.Line line67 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D4, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.Line line68 = line67.getReverse();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet69 = line67.wholeSpace();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{0; -0.43}" + "'", str5, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.1833403984568501d + "'", double64 == 0.1833403984568501d);
        org.junit.Assert.assertNotNull(vector2D65);
        org.junit.Assert.assertNotNull(line68);
        org.junit.Assert.assertNotNull(polygonsSet69);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #299
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #300
28: astore_1
29: new           #60
32: dup
33: dconst_0
34: ldc2_w        #61
37: invokespecial #63
40: astore_2
41: aload_2
42: invokevirtual #192
45: astore_3
46: new           #60
49: dup
50: dconst_0
51: ldc2_w        #61
54: invokespecial #63
57: astore        4
59: new           #64
62: dup
63: aload         4
65: dconst_0
66: invokespecial #65
69: astore        5
71: new           #60
74: dup
75: dconst_0
76: ldc2_w        #61
79: invokespecial #63
82: astore        6
84: new           #64
87: dup
88: aload         6
90: dconst_0
91: invokespecial #65
94: astore        7
96: aload         5
98: aload         7
100: invokevirtual #95
103: istore        8
105: new           #60
108: dup
109: dconst_0
110: ldc2_w        #61
113: invokespecial #63
116: astore        9
118: new           #64
121: dup
122: aload         9
124: dconst_0
125: invokespecial #65
128: astore        10
130: aload         7
132: aload         9
134: ldc2_w        #116
137: invokevirtual #100
140: getstatic     #10
143: astore        11
145: aload         11
147: invokevirtual #11
150: astore        12
152: getstatic     #10
155: astore        13
157: aload         13
159: invokevirtual #11
162: astore        14
164: new           #12
167: dup
168: aload         11
170: aload         14
172: invokespecial #13
175: astore        15
177: getstatic     #10
180: astore        16
182: aload         16
184: invokevirtual #11
187: astore        17
189: getstatic     #10
192: astore        18
194: aload         18
196: invokevirtual #11
199: astore        19
201: getstatic     #10
204: astore        20
206: aload         20
208: invokevirtual #11
211: astore        21
213: new           #12
216: dup
217: aload         18
219: aload         21
221: invokespecial #13
224: astore        22
226: aload         16
228: aload         21
230: invokevirtual #22
233: dstore        23
235: aload         15
237: aload         21
239: invokevirtual #23
242: dstore        25
244: aload         15
246: invokevirtual #20
249: getstatic     #10
252: astore        27
254: aload         27
256: invokevirtual #11
259: astore        28
261: getstatic     #10
264: astore        29
266: aload         29
268: invokevirtual #11
271: astore        30
273: new           #12
276: dup
277: aload         27
279: aload         30
281: invokespecial #13
284: astore        31
286: getstatic     #10
289: astore        32
291: aload         32
293: invokevirtual #11
296: astore        33
298: getstatic     #10
301: astore        34
303: aload         34
305: invokevirtual #11
308: astore        35
310: getstatic     #10
313: astore        36
315: aload         36
317: invokevirtual #11
320: astore        37
322: new           #12
325: dup
326: aload         34
328: aload         37
330: invokespecial #13
333: astore        38
335: aload         32
337: aload         37
339: invokevirtual #22
342: dstore        39
344: aload         31
346: aload         37
348: invokevirtual #23
351: dstore        41
353: aload         31
355: invokevirtual #20
358: aload         15
360: aload         31
362: invokevirtual #82
365: dstore        43
367: getstatic     #10
370: astore        45
372: getstatic     #10
375: astore        46
377: aload         46
379: invokevirtual #11
382: astore        47
384: getstatic     #10
387: astore        48
389: aload         48
391: invokevirtual #11
394: astore        49
396: new           #12
399: dup
400: aload         46
402: aload         49
404: invokespecial #13
407: astore        50
409: aload         45
411: aload         49
413: invokestatic  #96
416: astore        51
418: aload         31
420: aload         49
422: invokevirtual #97
425: astore        52
427: aload         9
429: aload         52
431: invokevirtual #118
434: dstore        53
436: aload_2
437: aload         9
439: invokevirtual #301
442: dstore        55
444: aload_1
445: ldc2_w        #302
448: aload_2
449: invokevirtual #304
452: astore        57
454: new           #64
457: dup
458: aload_2
459: ldc2_w        #119
462: invokespecial #65
465: astore        58
467: aload         58
469: invokevirtual #305
472: astore        59
474: aload         58
476: invokevirtual #121
479: astore        60
481: aload_1
482: invokestatic  #18
485: new           #40
488: dup
489: invokespecial #41
492: ldc           #42
494: invokevirtual #43
497: aload_3
498: invokevirtual #43
501: ldc           #201
503: invokevirtual #43
506: invokevirtual #46
509: aload_3
510: ldc           #202
512: invokestatic  #203
515: new           #40
518: dup
519: invokespecial #41
522: ldc           #42
524: invokevirtual #43
527: iload         8
529: invokevirtual #48
532: ldc           #45
534: invokevirtual #43
537: iconst_1
538: invokevirtual #48
541: ldc           #42
543: invokevirtual #43
546: invokevirtual #46
549: iload         8
551: iconst_1
552: if_icmpne     559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #47
563: aload         11
565: invokestatic  #18
568: aload         12
570: invokestatic  #18
573: aload         13
575: invokestatic  #18
578: aload         14
580: invokestatic  #18
583: aload         16
585: invokestatic  #18
588: aload         17
590: invokestatic  #18
593: aload         18
595: invokestatic  #18
598: aload         19
600: invokestatic  #18
603: aload         20
605: invokestatic  #18
608: aload         21
610: invokestatic  #18
613: dload         23
615: invokestatic  #38
618: invokestatic  #39
621: dload         25
623: invokestatic  #38
626: invokestatic  #39
629: aload         27
631: invokestatic  #18
634: aload         28
636: invokestatic  #18
639: aload         29
641: invokestatic  #18
644: aload         30
646: invokestatic  #18
649: aload         32
651: invokestatic  #18
654: aload         33
656: invokestatic  #18
659: aload         34
661: invokestatic  #18
664: aload         35
666: invokestatic  #18
669: aload         36
671: invokestatic  #18
674: aload         37
676: invokestatic  #18
679: dload         39
681: invokestatic  #38
684: invokestatic  #39
687: dload         41
689: invokestatic  #38
692: invokestatic  #39
695: dload         43
697: invokestatic  #38
700: invokestatic  #39
703: aload         45
705: invokestatic  #18
708: aload         46
710: invokestatic  #18
713: aload         47
715: invokestatic  #18
718: aload         48
720: invokestatic  #18
723: aload         49
725: invokestatic  #18
728: aload         51
730: invokestatic  #18
733: aload         52
735: invokestatic  #18
738: dload         53
740: invokestatic  #38
743: invokestatic  #39
746: new           #40
749: dup
750: invokespecial #41
753: ldc           #42
755: invokevirtual #43
758: dload         55
760: invokevirtual #44
763: ldc           #45
765: invokevirtual #43
768: ldc2_w        #154
771: invokevirtual #44
774: ldc           #42
776: invokevirtual #43
779: invokevirtual #46
782: dload         55
784: ldc2_w        #154
787: dcmpl
788: ifne          795
791: iconst_1
792: goto          796
795: iconst_0
796: invokestatic  #47
799: aload         57
801: invokestatic  #18
804: aload         59
806: invokestatic  #18
809: aload         60
811: invokestatic  #18
814: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test078
Start line: 6148
End line: 6314
Method source code: 
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line24 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D22, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = plane19.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane30 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D26, vector3D29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        double double38 = vector3D31.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36);
        double double39 = plane30.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36);
        plane30.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane45 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D41, vector3D44);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane52 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D48, vector3D51);
        double double53 = vector3D46.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51);
        double double54 = plane45.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51);
        plane45.revertSelf();
        double double56 = plane30.getOffset(plane45);
        org.apache.commons.math3.geometry.euclidean.threed.Line line57 = plane19.intersection(plane30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = vector3D63.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane65 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D61, vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D60, vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = vector3D67.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = vector3D69.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane71 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D67, vector3D70);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D60.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = vector3D58.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D70);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = vector3D75.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D77.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane79 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D75, vector3D78);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D74, vector3D78);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D83.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane85 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D81, vector3D84);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D74.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D58.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D84);
        double double88 = line57.getAbscissa(vector3D84);
        org.apache.commons.math3.geometry.euclidean.threed.Rotation rotation89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.euclidean.threed.Plane plane90 = plane4.rotate(vector3D84, rotation89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(line57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #306
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: getstatic     #10
133: astore        18
135: aload         18
137: invokevirtual #11
140: astore        19
142: getstatic     #10
145: astore        20
147: aload         20
149: invokevirtual #11
152: astore        21
154: new           #12
157: dup
158: aload         18
160: aload         21
162: invokespecial #13
165: astore        22
167: new           #60
170: dup
171: dconst_0
172: ldc2_w        #61
175: invokespecial #63
178: astore        23
180: new           #64
183: dup
184: aload         23
186: dconst_0
187: invokespecial #65
190: astore        24
192: aload         22
194: aload         23
196: invokevirtual #66
199: astore        25
201: getstatic     #10
204: astore        26
206: aload         26
208: invokevirtual #11
211: astore        27
213: getstatic     #10
216: astore        28
218: aload         28
220: invokevirtual #11
223: astore        29
225: new           #12
228: dup
229: aload         26
231: aload         29
233: invokespecial #13
236: astore        30
238: getstatic     #10
241: astore        31
243: aload         31
245: invokevirtual #11
248: astore        32
250: getstatic     #10
253: astore        33
255: aload         33
257: invokevirtual #11
260: astore        34
262: getstatic     #10
265: astore        35
267: aload         35
269: invokevirtual #11
272: astore        36
274: new           #12
277: dup
278: aload         33
280: aload         36
282: invokespecial #13
285: astore        37
287: aload         31
289: aload         36
291: invokevirtual #22
294: dstore        38
296: aload         30
298: aload         36
300: invokevirtual #23
303: dstore        40
305: aload         30
307: invokevirtual #20
310: getstatic     #10
313: astore        42
315: aload         42
317: invokevirtual #11
320: astore        43
322: getstatic     #10
325: astore        44
327: aload         44
329: invokevirtual #11
332: astore        45
334: new           #12
337: dup
338: aload         42
340: aload         45
342: invokespecial #13
345: astore        46
347: getstatic     #10
350: astore        47
352: aload         47
354: invokevirtual #11
357: astore        48
359: getstatic     #10
362: astore        49
364: aload         49
366: invokevirtual #11
369: astore        50
371: getstatic     #10
374: astore        51
376: aload         51
378: invokevirtual #11
381: astore        52
383: new           #12
386: dup
387: aload         49
389: aload         52
391: invokespecial #13
394: astore        53
396: aload         47
398: aload         52
400: invokevirtual #22
403: dstore        54
405: aload         46
407: aload         52
409: invokevirtual #23
412: dstore        56
414: aload         46
416: invokevirtual #20
419: aload         30
421: aload         46
423: invokevirtual #82
426: dstore        58
428: aload         22
430: aload         30
432: invokevirtual #134
435: astore        60
437: getstatic     #10
440: astore        61
442: getstatic     #10
445: astore        62
447: getstatic     #10
450: astore        63
452: aload         63
454: invokevirtual #11
457: astore        64
459: getstatic     #10
462: astore        65
464: aload         65
466: invokevirtual #11
469: astore        66
471: new           #12
474: dup
475: aload         63
477: aload         66
479: invokespecial #13
482: astore        67
484: aload         62
486: aload         66
488: invokestatic  #96
491: astore        68
493: getstatic     #10
496: astore        69
498: aload         69
500: invokevirtual #11
503: astore        70
505: getstatic     #10
508: astore        71
510: aload         71
512: invokevirtual #11
515: astore        72
517: new           #12
520: dup
521: aload         69
523: aload         72
525: invokespecial #13
528: astore        73
530: aload         62
532: aload         72
534: invokevirtual #111
537: astore        74
539: aload         61
541: dconst_1
542: aload         72
544: invokevirtual #112
547: astore        75
549: getstatic     #10
552: astore        76
554: getstatic     #10
557: astore        77
559: aload         77
561: invokevirtual #11
564: astore        78
566: getstatic     #10
569: astore        79
571: aload         79
573: invokevirtual #11
576: astore        80
578: new           #12
581: dup
582: aload         77
584: aload         80
586: invokespecial #13
589: astore        81
591: aload         76
593: aload         80
595: invokestatic  #96
598: astore        82
600: getstatic     #10
603: astore        83
605: aload         83
607: invokevirtual #11
610: astore        84
612: getstatic     #10
615: astore        85
617: aload         85
619: invokevirtual #11
622: astore        86
624: new           #12
627: dup
628: aload         83
630: aload         86
632: invokespecial #13
635: astore        87
637: aload         76
639: aload         86
641: invokevirtual #111
644: astore        88
646: aload         61
648: aload         86
650: invokevirtual #294
653: astore        89
655: aload         60
657: aload         86
659: invokevirtual #295
662: dstore        90
664: aconst_null
665: astore        92
667: aload         5
669: aload         86
671: aload         92
673: invokevirtual #307
676: astore        93
678: ldc           #15
680: invokestatic  #16
683: goto          688
686: astore        93
688: aload_1
689: invokestatic  #18
692: aload_2
693: invokestatic  #18
696: aload_3
697: invokestatic  #18
700: aload         4
702: invokestatic  #18
705: aload         6
707: invokestatic  #18
710: aload         7
712: invokestatic  #18
715: aload         8
717: invokestatic  #18
720: aload         9
722: invokestatic  #18
725: aload         10
727: invokestatic  #18
730: aload         11
732: invokestatic  #18
735: dload         13
737: invokestatic  #38
740: invokestatic  #39
743: dload         15
745: invokestatic  #38
748: invokestatic  #39
751: aload         17
753: invokestatic  #18
756: aload         18
758: invokestatic  #18
761: aload         19
763: invokestatic  #18
766: aload         20
768: invokestatic  #18
771: aload         21
773: invokestatic  #18
776: aload         25
778: invokestatic  #18
781: aload         26
783: invokestatic  #18
786: aload         27
788: invokestatic  #18
791: aload         28
793: invokestatic  #18
796: aload         29
798: invokestatic  #18
801: aload         31
803: invokestatic  #18
806: aload         32
808: invokestatic  #18
811: aload         33
813: invokestatic  #18
816: aload         34
818: invokestatic  #18
821: aload         35
823: invokestatic  #18
826: aload         36
828: invokestatic  #18
831: dload         38
833: invokestatic  #38
836: invokestatic  #39
839: dload         40
841: invokestatic  #38
844: invokestatic  #39
847: aload         42
849: invokestatic  #18
852: aload         43
854: invokestatic  #18
857: aload         44
859: invokestatic  #18
862: aload         45
864: invokestatic  #18
867: aload         47
869: invokestatic  #18
872: aload         48
874: invokestatic  #18
877: aload         49
879: invokestatic  #18
882: aload         50
884: invokestatic  #18
887: aload         51
889: invokestatic  #18
892: aload         52
894: invokestatic  #18
897: dload         54
899: invokestatic  #38
902: invokestatic  #39
905: dload         56
907: invokestatic  #38
910: invokestatic  #39
913: dload         58
915: invokestatic  #38
918: invokestatic  #39
921: aload         60
923: invokestatic  #18
926: aload         61
928: invokestatic  #18
931: aload         62
933: invokestatic  #18
936: aload         63
938: invokestatic  #18
941: aload         64
943: invokestatic  #18
946: aload         65
948: invokestatic  #18
951: aload         66
953: invokestatic  #18
956: aload         68
958: invokestatic  #18
961: aload         69
963: invokestatic  #18
966: aload         70
968: invokestatic  #18
971: aload         71
973: invokestatic  #18
976: aload         72
978: invokestatic  #18
981: aload         74
983: invokestatic  #18
986: aload         75
988: invokestatic  #18
991: aload         76
993: invokestatic  #18
996: aload         77
998: invokestatic  #18
1001: aload         78
1003: invokestatic  #18
1006: aload         79
1008: invokestatic  #18
1011: aload         80
1013: invokestatic  #18
1016: aload         82
1018: invokestatic  #18
1021: aload         83
1023: invokestatic  #18
1026: aload         84
1028: invokestatic  #18
1031: aload         85
1033: invokestatic  #18
1036: aload         86
1038: invokestatic  #18
1041: aload         88
1043: invokestatic  #18
1046: aload         89
1048: invokestatic  #18
1051: dload         90
1053: invokestatic  #38
1056: invokestatic  #39
1059: return
Exception table:
from    to  target type
667   683   686   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test079
Start line: 6317
End line: 6469
Method source code: 
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree2 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion3 = polyhedronsSet1.buildNew(euclidean3DBSPTree2);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree5 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D9, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D8, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D8.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D6.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet22 = polyhedronsSet1.translate(vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane27 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        double double35 = vector3D28.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double36 = plane27.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.partitioning.Side side37 = polyhedronsSet22.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        double double50 = vector3D43.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D48);
        double double51 = plane42.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D48);
        plane42.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = vector3D60.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D62.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane64 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D60, vector3D63);
        double double65 = vector3D58.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63);
        double double66 = plane57.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D63);
        plane57.revertSelf();
        double double68 = plane42.getOffset(plane57);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D70.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = vector3D72.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane74 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D70, vector3D73);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D69, vector3D73);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D76 = plane57.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D73);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = plane57.getNormal();
        plane57.revertSelf();
        boolean boolean79 = plane27.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane57);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane80 = null;
        // The following exception was thrown during execution in test generation
        try {
            plane27.reset(plane80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(euclidean3DRegion3);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(polyhedronsSet22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + side37 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side37.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector2D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #308
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aconst_null
43: astore_3
44: aload_2
45: aload_3
46: invokevirtual #29
49: astore        4
51: aload_2
52: iconst_0
53: invokevirtual #30
56: astore        5
58: getstatic     #10
61: astore        6
63: getstatic     #10
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         7
107: aload         11
109: invokestatic  #96
112: astore        13
114: getstatic     #10
117: astore        14
119: aload         14
121: invokevirtual #11
124: astore        15
126: getstatic     #10
129: astore        16
131: aload         16
133: invokevirtual #11
136: astore        17
138: new           #12
141: dup
142: aload         14
144: aload         17
146: invokespecial #13
149: astore        18
151: aload         7
153: aload         17
155: invokevirtual #111
158: astore        19
160: aload         6
162: dconst_1
163: aload         17
165: invokevirtual #112
168: astore        20
170: aload_2
171: aload         20
173: invokevirtual #153
176: astore        21
178: getstatic     #10
181: astore        22
183: aload         22
185: invokevirtual #11
188: astore        23
190: getstatic     #10
193: astore        24
195: aload         24
197: invokevirtual #11
200: astore        25
202: new           #12
205: dup
206: aload         22
208: aload         25
210: invokespecial #13
213: astore        26
215: getstatic     #10
218: astore        27
220: aload         27
222: invokevirtual #11
225: astore        28
227: getstatic     #10
230: astore        29
232: aload         29
234: invokevirtual #11
237: astore        30
239: getstatic     #10
242: astore        31
244: aload         31
246: invokevirtual #11
249: astore        32
251: new           #12
254: dup
255: aload         29
257: aload         32
259: invokespecial #13
262: astore        33
264: aload         27
266: aload         32
268: invokevirtual #22
271: dstore        34
273: aload         26
275: aload         32
277: invokevirtual #23
280: dstore        36
282: aload         21
284: aload         26
286: invokevirtual #14
289: astore        38
291: getstatic     #10
294: astore        39
296: aload         39
298: invokevirtual #11
301: astore        40
303: getstatic     #10
306: astore        41
308: aload         41
310: invokevirtual #11
313: astore        42
315: new           #12
318: dup
319: aload         39
321: aload         42
323: invokespecial #13
326: astore        43
328: getstatic     #10
331: astore        44
333: aload         44
335: invokevirtual #11
338: astore        45
340: getstatic     #10
343: astore        46
345: aload         46
347: invokevirtual #11
350: astore        47
352: getstatic     #10
355: astore        48
357: aload         48
359: invokevirtual #11
362: astore        49
364: new           #12
367: dup
368: aload         46
370: aload         49
372: invokespecial #13
375: astore        50
377: aload         44
379: aload         49
381: invokevirtual #22
384: dstore        51
386: aload         43
388: aload         49
390: invokevirtual #23
393: dstore        53
395: aload         43
397: invokevirtual #20
400: getstatic     #10
403: astore        55
405: aload         55
407: invokevirtual #11
410: astore        56
412: getstatic     #10
415: astore        57
417: aload         57
419: invokevirtual #11
422: astore        58
424: new           #12
427: dup
428: aload         55
430: aload         58
432: invokespecial #13
435: astore        59
437: getstatic     #10
440: astore        60
442: aload         60
444: invokevirtual #11
447: astore        61
449: getstatic     #10
452: astore        62
454: aload         62
456: invokevirtual #11
459: astore        63
461: getstatic     #10
464: astore        64
466: aload         64
468: invokevirtual #11
471: astore        65
473: new           #12
476: dup
477: aload         62
479: aload         65
481: invokespecial #13
484: astore        66
486: aload         60
488: aload         65
490: invokevirtual #22
493: dstore        67
495: aload         59
497: aload         65
499: invokevirtual #23
502: dstore        69
504: aload         59
506: invokevirtual #20
509: aload         43
511: aload         59
513: invokevirtual #82
516: dstore        71
518: getstatic     #10
521: astore        73
523: getstatic     #10
526: astore        74
528: aload         74
530: invokevirtual #11
533: astore        75
535: getstatic     #10
538: astore        76
540: aload         76
542: invokevirtual #11
545: astore        77
547: new           #12
550: dup
551: aload         74
553: aload         77
555: invokespecial #13
558: astore        78
560: aload         73
562: aload         77
564: invokestatic  #96
567: astore        79
569: aload         59
571: aload         77
573: invokevirtual #97
576: astore        80
578: aload         59
580: invokevirtual #135
583: astore        81
585: aload         59
587: invokevirtual #20
590: aload         26
592: aload         59
594: invokevirtual #309
597: istore        82
599: aconst_null
600: astore        83
602: aload         26
604: aload         83
606: invokevirtual #310
609: ldc           #15
611: invokestatic  #16
614: goto          619
617: astore        84
619: aload         4
621: invokestatic  #18
624: aload         5
626: invokestatic  #18
629: aload         6
631: invokestatic  #18
634: aload         7
636: invokestatic  #18
639: aload         8
641: invokestatic  #18
644: aload         9
646: invokestatic  #18
649: aload         10
651: invokestatic  #18
654: aload         11
656: invokestatic  #18
659: aload         13
661: invokestatic  #18
664: aload         14
666: invokestatic  #18
669: aload         15
671: invokestatic  #18
674: aload         16
676: invokestatic  #18
679: aload         17
681: invokestatic  #18
684: aload         19
686: invokestatic  #18
689: aload         20
691: invokestatic  #18
694: aload         21
696: invokestatic  #18
699: aload         22
701: invokestatic  #18
704: aload         23
706: invokestatic  #18
709: aload         24
711: invokestatic  #18
714: aload         25
716: invokestatic  #18
719: aload         27
721: invokestatic  #18
724: aload         28
726: invokestatic  #18
729: aload         29
731: invokestatic  #18
734: aload         30
736: invokestatic  #18
739: aload         31
741: invokestatic  #18
744: aload         32
746: invokestatic  #18
749: dload         34
751: invokestatic  #38
754: invokestatic  #39
757: dload         36
759: invokestatic  #38
762: invokestatic  #39
765: new           #40
768: dup
769: invokespecial #41
772: ldc           #42
774: invokevirtual #43
777: aload         38
779: invokevirtual #102
782: ldc           #45
784: invokevirtual #43
787: getstatic     #103
790: invokevirtual #102
793: ldc           #42
795: invokevirtual #43
798: invokevirtual #46
801: aload         38
803: getstatic     #103
806: invokevirtual #104
809: invokestatic  #47
812: aload         39
814: invokestatic  #18
817: aload         40
819: invokestatic  #18
822: aload         41
824: invokestatic  #18
827: aload         42
829: invokestatic  #18
832: aload         44
834: invokestatic  #18
837: aload         45
839: invokestatic  #18
842: aload         46
844: invokestatic  #18
847: aload         47
849: invokestatic  #18
852: aload         48
854: invokestatic  #18
857: aload         49
859: invokestatic  #18
862: dload         51
864: invokestatic  #38
867: invokestatic  #39
870: dload         53
872: invokestatic  #38
875: invokestatic  #39
878: aload         55
880: invokestatic  #18
883: aload         56
885: invokestatic  #18
888: aload         57
890: invokestatic  #18
893: aload         58
895: invokestatic  #18
898: aload         60
900: invokestatic  #18
903: aload         61
905: invokestatic  #18
908: aload         62
910: invokestatic  #18
913: aload         63
915: invokestatic  #18
918: aload         64
920: invokestatic  #18
923: aload         65
925: invokestatic  #18
928: dload         67
930: invokestatic  #38
933: invokestatic  #39
936: dload         69
938: invokestatic  #38
941: invokestatic  #39
944: dload         71
946: invokestatic  #38
949: invokestatic  #39
952: aload         73
954: invokestatic  #18
957: aload         74
959: invokestatic  #18
962: aload         75
964: invokestatic  #18
967: aload         76
969: invokestatic  #18
972: aload         77
974: invokestatic  #18
977: aload         79
979: invokestatic  #18
982: aload         80
984: invokestatic  #18
987: aload         81
989: invokestatic  #18
992: new           #40
995: dup
996: invokespecial #41
999: ldc           #42
1001: invokevirtual #43
1004: iload         82
1006: invokevirtual #48
1009: ldc           #45
1011: invokevirtual #43
1014: iconst_0
1015: invokevirtual #48
1018: ldc           #42
1020: invokevirtual #43
1023: invokevirtual #46
1026: iload         82
1028: ifne          1035
1031: iconst_1
1032: goto          1036
1035: iconst_0
1036: invokestatic  #47
1039: return
Exception table:
from    to  target type
602   614   617   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test080
Start line: 6472
End line: 6573
Method source code: 
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        plane19.revertSelf();
        double double30 = plane4.getOffset(plane19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = plane35.getOrigin();
        double double46 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(plane19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = plane47.getU();
        java.lang.String str49 = vector3D48.toString();
        org.apache.commons.math3.exception.util.Localizable localizable50 = null;
        org.apache.commons.math3.exception.util.Localizable localizable51 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet52 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray53 = polygonsSet52.getVertices();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException54 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable51, (java.lang.Object[]) vector2DArray53);
        org.apache.commons.math3.util.MathUtils.checkNotNull((java.lang.Object) str49, localizable50, (java.lang.Object[]) vector2DArray53);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{(NaN); (NaN); (NaN)}" + "'", str49, "{(NaN); (NaN); (NaN)}");
        org.junit.Assert.assertNotNull(vector2DArray53);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #311
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #20
128: getstatic     #10
131: astore        17
133: aload         17
135: invokevirtual #11
138: astore        18
140: getstatic     #10
143: astore        19
145: aload         19
147: invokevirtual #11
150: astore        20
152: new           #12
155: dup
156: aload         17
158: aload         20
160: invokespecial #13
163: astore        21
165: getstatic     #10
168: astore        22
170: aload         22
172: invokevirtual #11
175: astore        23
177: getstatic     #10
180: astore        24
182: aload         24
184: invokevirtual #11
187: astore        25
189: getstatic     #10
192: astore        26
194: aload         26
196: invokevirtual #11
199: astore        27
201: new           #12
204: dup
205: aload         24
207: aload         27
209: invokespecial #13
212: astore        28
214: aload         22
216: aload         27
218: invokevirtual #22
221: dstore        29
223: aload         21
225: aload         27
227: invokevirtual #23
230: dstore        31
232: aload         21
234: invokevirtual #20
237: aload         5
239: aload         21
241: invokevirtual #82
244: dstore        33
246: getstatic     #10
249: astore        35
251: aload         35
253: invokevirtual #11
256: astore        36
258: getstatic     #10
261: astore        37
263: aload         37
265: invokevirtual #11
268: astore        38
270: new           #12
273: dup
274: aload         35
276: aload         38
278: invokespecial #13
281: astore        39
283: getstatic     #10
286: astore        40
288: aload         40
290: invokevirtual #11
293: astore        41
295: getstatic     #10
298: astore        42
300: aload         42
302: invokevirtual #11
305: astore        43
307: getstatic     #10
310: astore        44
312: aload         44
314: invokevirtual #11
317: astore        45
319: new           #12
322: dup
323: aload         42
325: aload         45
327: invokespecial #13
330: astore        46
332: aload         40
334: aload         45
336: invokevirtual #22
339: dstore        47
341: aload         39
343: aload         45
345: invokevirtual #23
348: dstore        49
350: aload         39
352: invokevirtual #83
355: astore        51
357: aload         21
359: aload         51
361: invokevirtual #23
364: dstore        52
366: new           #12
369: dup
370: aload         21
372: invokespecial #84
375: astore        54
377: aload         54
379: invokevirtual #272
382: astore        55
384: aload         55
386: invokevirtual #312
389: astore        56
391: aconst_null
392: astore        57
394: aconst_null
395: astore        58
397: new           #56
400: dup
401: invokespecial #87
404: astore        59
406: aload         59
408: invokevirtual #143
411: astore        60
413: new           #224
416: dup
417: aload         58
419: aload         60
421: checkcast     #225
424: invokespecial #226
427: astore        61
429: aload         56
431: aload         57
433: aload         60
435: checkcast     #225
438: invokestatic  #284
441: aload_1
442: invokestatic  #18
445: aload_2
446: invokestatic  #18
449: aload_3
450: invokestatic  #18
453: aload         4
455: invokestatic  #18
458: aload         6
460: invokestatic  #18
463: aload         7
465: invokestatic  #18
468: aload         8
470: invokestatic  #18
473: aload         9
475: invokestatic  #18
478: aload         10
480: invokestatic  #18
483: aload         11
485: invokestatic  #18
488: dload         13
490: invokestatic  #38
493: invokestatic  #39
496: dload         15
498: invokestatic  #38
501: invokestatic  #39
504: aload         17
506: invokestatic  #18
509: aload         18
511: invokestatic  #18
514: aload         19
516: invokestatic  #18
519: aload         20
521: invokestatic  #18
524: aload         22
526: invokestatic  #18
529: aload         23
531: invokestatic  #18
534: aload         24
536: invokestatic  #18
539: aload         25
541: invokestatic  #18
544: aload         26
546: invokestatic  #18
549: aload         27
551: invokestatic  #18
554: dload         29
556: invokestatic  #38
559: invokestatic  #39
562: dload         31
564: invokestatic  #38
567: invokestatic  #39
570: dload         33
572: invokestatic  #38
575: invokestatic  #39
578: aload         35
580: invokestatic  #18
583: aload         36
585: invokestatic  #18
588: aload         37
590: invokestatic  #18
593: aload         38
595: invokestatic  #18
598: aload         40
600: invokestatic  #18
603: aload         41
605: invokestatic  #18
608: aload         42
610: invokestatic  #18
613: aload         43
615: invokestatic  #18
618: aload         44
620: invokestatic  #18
623: aload         45
625: invokestatic  #18
628: dload         47
630: invokestatic  #38
633: invokestatic  #39
636: dload         49
638: invokestatic  #38
641: invokestatic  #39
644: aload         51
646: invokestatic  #18
649: dload         52
651: invokestatic  #38
654: invokestatic  #39
657: aload         55
659: invokestatic  #18
662: new           #40
665: dup
666: invokespecial #41
669: ldc           #42
671: invokevirtual #43
674: aload         56
676: invokevirtual #43
679: ldc_w         #313
682: invokevirtual #43
685: invokevirtual #46
688: aload         56
690: ldc_w         #314
693: invokestatic  #203
696: aload         60
698: invokestatic  #18
701: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test081
Start line: 6576
End line: 6621
Method source code: 
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet24 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #315
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aconst_null
174: astore        24
176: aload_2
177: aload         24
179: invokevirtual #148
182: astore        25
184: aload_2
185: iconst_0
186: invokevirtual #30
189: astore        26
191: new           #8
194: dup
195: aload         26
197: invokespecial #9
200: astore        27
202: new           #40
205: dup
206: invokespecial #41
209: ldc           #42
211: invokevirtual #43
214: dload_3
215: invokevirtual #44
218: ldc           #45
220: invokevirtual #43
223: dconst_0
224: invokevirtual #44
227: ldc           #42
229: invokevirtual #43
232: invokevirtual #46
235: dload_3
236: dconst_0
237: dcmpl
238: ifne          245
241: iconst_1
242: goto          246
245: iconst_0
246: invokestatic  #47
249: aload         5
251: invokestatic  #18
254: aload         6
256: invokestatic  #18
259: aload         7
261: invokestatic  #18
264: aload         8
266: invokestatic  #18
269: aload         10
271: invokestatic  #18
274: aload         11
276: invokestatic  #18
279: aload         12
281: invokestatic  #18
284: aload         13
286: invokestatic  #18
289: aload         14
291: invokestatic  #18
294: aload         15
296: invokestatic  #18
299: dload         17
301: invokestatic  #38
304: invokestatic  #39
307: dload         19
309: invokestatic  #38
312: invokestatic  #39
315: aload         21
317: invokestatic  #18
320: aload         22
322: invokestatic  #18
325: aload         23
327: invokestatic  #18
330: aload         25
332: invokestatic  #18
335: aload         26
337: invokestatic  #18
340: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test082
Start line: 6624
End line: 6759
Method source code: 
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        double double36 = vector3D29.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        double double37 = plane28.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane38 = plane28.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList39 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet40 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList39);
        double double41 = polyhedronsSet40.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList42 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet43 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList42);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree44 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion45 = polyhedronsSet43.buildNew(euclidean3DBSPTree44);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree47 = polyhedronsSet43.getTree(false);
        boolean boolean48 = polyhedronsSet40.isEmpty(euclidean3DBSPTree47);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList49 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet50 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList49);
        double double51 = polyhedronsSet50.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList52 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet53 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList52);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree54 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion55 = polyhedronsSet53.buildNew(euclidean3DBSPTree54);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree57 = polyhedronsSet53.getTree(false);
        boolean boolean58 = polyhedronsSet50.isEmpty(euclidean3DBSPTree57);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D59.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = vector3D61.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane63 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D59, vector3D62);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = vector3D66.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane70 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D66, vector3D69);
        double double71 = vector3D64.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69);
        double double72 = plane63.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D69);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane73 = plane63.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion74 = subPlane73.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree75 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane38, euclidean3DBSPTree47, euclidean3DBSPTree57, (java.lang.Object) subPlane73);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree76 = euclidean3DBSPTree75.getMinus();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane77 = euclidean3DBSPTree75.getCut();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree78 = euclidean3DBSPTree23.split(euclidean3DSubHyperplane77);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(subPlane38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion45);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion55);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(subPlane73);
        org.junit.Assert.assertNotNull(euclidean2DRegion74);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree76);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane77);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree78);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #316
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aconst_null
174: astore        24
176: aload_2
177: aload         24
179: invokevirtual #148
182: astore        25
184: aload_2
185: iconst_0
186: invokevirtual #30
189: astore        26
191: getstatic     #10
194: astore        27
196: aload         27
198: invokevirtual #11
201: astore        28
203: getstatic     #10
206: astore        29
208: aload         29
210: invokevirtual #11
213: astore        30
215: new           #12
218: dup
219: aload         27
221: aload         30
223: invokespecial #13
226: astore        31
228: getstatic     #10
231: astore        32
233: aload         32
235: invokevirtual #11
238: astore        33
240: getstatic     #10
243: astore        34
245: aload         34
247: invokevirtual #11
250: astore        35
252: getstatic     #10
255: astore        36
257: aload         36
259: invokevirtual #11
262: astore        37
264: new           #12
267: dup
268: aload         34
270: aload         37
272: invokespecial #13
275: astore        38
277: aload         32
279: aload         37
281: invokevirtual #22
284: dstore        39
286: aload         31
288: aload         37
290: invokevirtual #23
293: dstore        41
295: aload         31
297: invokevirtual #24
300: astore        43
302: new           #25
305: dup
306: invokespecial #26
309: astore        44
311: new           #8
314: dup
315: aload         44
317: invokespecial #27
320: astore        45
322: aload         45
324: invokevirtual #28
327: dstore        46
329: new           #25
332: dup
333: invokespecial #26
336: astore        48
338: new           #8
341: dup
342: aload         48
344: invokespecial #27
347: astore        49
349: aconst_null
350: astore        50
352: aload         49
354: aload         50
356: invokevirtual #29
359: astore        51
361: aload         49
363: iconst_0
364: invokevirtual #30
367: astore        52
369: aload         45
371: aload         52
373: invokevirtual #31
376: istore        53
378: new           #25
381: dup
382: invokespecial #26
385: astore        54
387: new           #8
390: dup
391: aload         54
393: invokespecial #27
396: astore        55
398: aload         55
400: invokevirtual #28
403: dstore        56
405: new           #25
408: dup
409: invokespecial #26
412: astore        58
414: new           #8
417: dup
418: aload         58
420: invokespecial #27
423: astore        59
425: aconst_null
426: astore        60
428: aload         59
430: aload         60
432: invokevirtual #29
435: astore        61
437: aload         59
439: iconst_0
440: invokevirtual #30
443: astore        62
445: aload         55
447: aload         62
449: invokevirtual #31
452: istore        63
454: getstatic     #10
457: astore        64
459: aload         64
461: invokevirtual #11
464: astore        65
466: getstatic     #10
469: astore        66
471: aload         66
473: invokevirtual #11
476: astore        67
478: new           #12
481: dup
482: aload         64
484: aload         67
486: invokespecial #13
489: astore        68
491: getstatic     #10
494: astore        69
496: aload         69
498: invokevirtual #11
501: astore        70
503: getstatic     #10
506: astore        71
508: aload         71
510: invokevirtual #11
513: astore        72
515: getstatic     #10
518: astore        73
520: aload         73
522: invokevirtual #11
525: astore        74
527: new           #12
530: dup
531: aload         71
533: aload         74
535: invokespecial #13
538: astore        75
540: aload         69
542: aload         74
544: invokevirtual #22
547: dstore        76
549: aload         68
551: aload         74
553: invokevirtual #23
556: dstore        78
558: aload         68
560: invokevirtual #24
563: astore        80
565: aload         80
567: invokevirtual #32
570: astore        81
572: new           #33
575: dup
576: aload         43
578: aload         52
580: aload         62
582: aload         80
584: invokespecial #34
587: astore        82
589: aload         82
591: invokevirtual #77
594: astore        83
596: aload         82
598: invokevirtual #149
601: astore        84
603: aload         26
605: aload         84
607: invokevirtual #232
610: astore        85
612: new           #40
615: dup
616: invokespecial #41
619: ldc           #42
621: invokevirtual #43
624: dload_3
625: invokevirtual #44
628: ldc           #45
630: invokevirtual #43
633: dconst_0
634: invokevirtual #44
637: ldc           #42
639: invokevirtual #43
642: invokevirtual #46
645: dload_3
646: dconst_0
647: dcmpl
648: ifne          655
651: iconst_1
652: goto          656
655: iconst_0
656: invokestatic  #47
659: aload         5
661: invokestatic  #18
664: aload         6
666: invokestatic  #18
669: aload         7
671: invokestatic  #18
674: aload         8
676: invokestatic  #18
679: aload         10
681: invokestatic  #18
684: aload         11
686: invokestatic  #18
689: aload         12
691: invokestatic  #18
694: aload         13
696: invokestatic  #18
699: aload         14
701: invokestatic  #18
704: aload         15
706: invokestatic  #18
709: dload         17
711: invokestatic  #38
714: invokestatic  #39
717: dload         19
719: invokestatic  #38
722: invokestatic  #39
725: aload         21
727: invokestatic  #18
730: aload         22
732: invokestatic  #18
735: aload         23
737: invokestatic  #18
740: aload         25
742: invokestatic  #18
745: aload         26
747: invokestatic  #18
750: aload         27
752: invokestatic  #18
755: aload         28
757: invokestatic  #18
760: aload         29
762: invokestatic  #18
765: aload         30
767: invokestatic  #18
770: aload         32
772: invokestatic  #18
775: aload         33
777: invokestatic  #18
780: aload         34
782: invokestatic  #18
785: aload         35
787: invokestatic  #18
790: aload         36
792: invokestatic  #18
795: aload         37
797: invokestatic  #18
800: dload         39
802: invokestatic  #38
805: invokestatic  #39
808: dload         41
810: invokestatic  #38
813: invokestatic  #39
816: aload         43
818: invokestatic  #18
821: new           #40
824: dup
825: invokespecial #41
828: ldc           #42
830: invokevirtual #43
833: dload         46
835: invokevirtual #44
838: ldc           #45
840: invokevirtual #43
843: dconst_0
844: invokevirtual #44
847: ldc           #42
849: invokevirtual #43
852: invokevirtual #46
855: dload         46
857: dconst_0
858: dcmpl
859: ifne          866
862: iconst_1
863: goto          867
866: iconst_0
867: invokestatic  #47
870: aload         51
872: invokestatic  #18
875: aload         52
877: invokestatic  #18
880: new           #40
883: dup
884: invokespecial #41
887: ldc           #42
889: invokevirtual #43
892: iload         53
894: invokevirtual #48
897: ldc           #45
899: invokevirtual #43
902: iconst_0
903: invokevirtual #48
906: ldc           #42
908: invokevirtual #43
911: invokevirtual #46
914: iload         53
916: ifne          923
919: iconst_1
920: goto          924
923: iconst_0
924: invokestatic  #47
927: new           #40
930: dup
931: invokespecial #41
934: ldc           #42
936: invokevirtual #43
939: dload         56
941: invokevirtual #44
944: ldc           #45
946: invokevirtual #43
949: dconst_0
950: invokevirtual #44
953: ldc           #42
955: invokevirtual #43
958: invokevirtual #46
961: dload         56
963: dconst_0
964: dcmpl
965: ifne          972
968: iconst_1
969: goto          973
972: iconst_0
973: invokestatic  #47
976: aload         61
978: invokestatic  #18
981: aload         62
983: invokestatic  #18
986: new           #40
989: dup
990: invokespecial #41
993: ldc           #42
995: invokevirtual #43
998: iload         63
1000: invokevirtual #48
1003: ldc           #45
1005: invokevirtual #43
1008: iconst_0
1009: invokevirtual #48
1012: ldc           #42
1014: invokevirtual #43
1017: invokevirtual #46
1020: iload         63
1022: ifne          1029
1025: iconst_1
1026: goto          1030
1029: iconst_0
1030: invokestatic  #47
1033: aload         64
1035: invokestatic  #18
1038: aload         65
1040: invokestatic  #18
1043: aload         66
1045: invokestatic  #18
1048: aload         67
1050: invokestatic  #18
1053: aload         69
1055: invokestatic  #18
1058: aload         70
1060: invokestatic  #18
1063: aload         71
1065: invokestatic  #18
1068: aload         72
1070: invokestatic  #18
1073: aload         73
1075: invokestatic  #18
1078: aload         74
1080: invokestatic  #18
1083: dload         76
1085: invokestatic  #38
1088: invokestatic  #39
1091: dload         78
1093: invokestatic  #38
1096: invokestatic  #39
1099: aload         80
1101: invokestatic  #18
1104: aload         81
1106: invokestatic  #18
1109: aload         83
1111: invokestatic  #18
1114: aload         84
1116: invokestatic  #18
1119: aload         85
1121: invokestatic  #18
1124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test083
Start line: 6762
End line: 6838
Method source code: 
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = polyhedronsSet35.getBoundarySize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathInternalError; message: illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH");
        } catch (org.apache.commons.math3.exception.MathInternalError e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #317
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: getstatic     #10
133: astore        18
135: aload         18
137: invokevirtual #11
140: astore        19
142: getstatic     #10
145: astore        20
147: aload         20
149: invokevirtual #11
152: astore        21
154: new           #12
157: dup
158: aload         18
160: aload         21
162: invokespecial #13
165: astore        22
167: getstatic     #10
170: astore        23
172: aload         23
174: invokevirtual #11
177: astore        24
179: getstatic     #10
182: astore        25
184: aload         25
186: invokevirtual #11
189: astore        26
191: getstatic     #10
194: astore        27
196: aload         27
198: invokevirtual #11
201: astore        28
203: new           #12
206: dup
207: aload         25
209: aload         28
211: invokespecial #13
214: astore        29
216: aload         23
218: aload         28
220: invokevirtual #22
223: dstore        30
225: aload         22
227: aload         28
229: invokevirtual #23
232: dstore        32
234: aload         22
236: invokevirtual #24
239: astore        34
241: aload         34
243: invokevirtual #32
246: astore        35
248: aload         34
250: invokevirtual #71
253: astore        36
255: new           #25
258: dup
259: invokespecial #26
262: astore        37
264: aload         37
266: aload         17
268: invokevirtual #189
271: istore        38
273: aload         37
275: aload         34
277: invokevirtual #189
280: istore        39
282: new           #8
285: dup
286: aload         37
288: invokespecial #27
291: astore        40
293: aload         40
295: invokevirtual #28
298: dstore        41
300: ldc           #216
302: invokestatic  #16
305: goto          310
308: astore        41
310: aload_1
311: invokestatic  #18
314: aload_2
315: invokestatic  #18
318: aload_3
319: invokestatic  #18
322: aload         4
324: invokestatic  #18
327: aload         6
329: invokestatic  #18
332: aload         7
334: invokestatic  #18
337: aload         8
339: invokestatic  #18
342: aload         9
344: invokestatic  #18
347: aload         10
349: invokestatic  #18
352: aload         11
354: invokestatic  #18
357: dload         13
359: invokestatic  #38
362: invokestatic  #39
365: dload         15
367: invokestatic  #38
370: invokestatic  #39
373: aload         17
375: invokestatic  #18
378: aload         18
380: invokestatic  #18
383: aload         19
385: invokestatic  #18
388: aload         20
390: invokestatic  #18
393: aload         21
395: invokestatic  #18
398: aload         23
400: invokestatic  #18
403: aload         24
405: invokestatic  #18
408: aload         25
410: invokestatic  #18
413: aload         26
415: invokestatic  #18
418: aload         27
420: invokestatic  #18
423: aload         28
425: invokestatic  #18
428: dload         30
430: invokestatic  #38
433: invokestatic  #39
436: dload         32
438: invokestatic  #38
441: invokestatic  #39
444: aload         34
446: invokestatic  #18
449: aload         35
451: invokestatic  #18
454: aload         36
456: invokestatic  #18
459: new           #40
462: dup
463: invokespecial #41
466: ldc           #42
468: invokevirtual #43
471: iload         38
473: invokevirtual #48
476: ldc           #45
478: invokevirtual #43
481: iconst_1
482: invokevirtual #48
485: ldc           #42
487: invokevirtual #43
490: invokevirtual #46
493: iload         38
495: iconst_1
496: if_icmpne     503
499: iconst_1
500: goto          504
503: iconst_0
504: invokestatic  #47
507: new           #40
510: dup
511: invokespecial #41
514: ldc           #42
516: invokevirtual #43
519: iload         39
521: invokevirtual #48
524: ldc           #45
526: invokevirtual #43
529: iconst_1
530: invokevirtual #48
533: ldc           #42
535: invokevirtual #43
538: invokevirtual #46
541: iload         39
543: iconst_1
544: if_icmpne     551
547: iconst_1
548: goto          552
551: iconst_0
552: invokestatic  #47
555: return
Exception table:
from    to  target type
293   305   308   Class org/apache/commons/math3/exception/MathInternalError
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test084
Start line: 6841
End line: 6857
Method source code: 
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.math3.geometry.euclidean.oned.Interval interval3 = new org.apache.commons.math3.geometry.euclidean.oned.Interval(0.49536728921867335d, (double) (byte) 10);
        double double4 = interval3.getMidPoint();
        double double5 = interval3.getUpper();
        double double6 = interval3.getUpper();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet8 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray9 = polygonsSet8.getVertices();
        org.apache.commons.math3.util.MathUtils.checkNotNull((java.lang.Object) double6, localizable7, (java.lang.Object[]) vector2DArray9);
        org.apache.commons.math3.exception.NotFiniteNumberException notFiniteNumberException11 = new org.apache.commons.math3.exception.NotFiniteNumberException((java.lang.Number) 0.0d, (java.lang.Object[]) vector2DArray9);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.247683644609337d + "'", double4 == 5.247683644609337d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 10.0d + "'", double6 == 10.0d);
        org.junit.Assert.assertNotNull(vector2DArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #318
20: aastore
21: invokevirtual #7
24: pop
25: new           #319
28: dup
29: ldc2_w        #320
32: ldc2_w        #198
35: invokespecial #322
38: astore_1
39: aload_1
40: invokevirtual #323
43: dstore_2
44: aload_1
45: invokevirtual #324
48: dstore        4
50: aload_1
51: invokevirtual #324
54: dstore        6
56: aconst_null
57: astore        8
59: new           #56
62: dup
63: invokespecial #87
66: astore        9
68: aload         9
70: invokevirtual #143
73: astore        10
75: dload         6
77: invokestatic  #156
80: aload         8
82: aload         10
84: checkcast     #225
87: invokestatic  #284
90: new           #285
93: dup
94: dconst_0
95: invokestatic  #156
98: aload         10
100: checkcast     #225
103: invokespecial #287
106: astore        11
108: new           #40
111: dup
112: invokespecial #41
115: ldc           #42
117: invokevirtual #43
120: dload_2
121: invokevirtual #44
124: ldc           #45
126: invokevirtual #43
129: ldc2_w        #325
132: invokevirtual #44
135: ldc           #42
137: invokevirtual #43
140: invokevirtual #46
143: dload_2
144: ldc2_w        #325
147: dcmpl
148: ifne          155
151: iconst_1
152: goto          156
155: iconst_0
156: invokestatic  #47
159: new           #40
162: dup
163: invokespecial #41
166: ldc           #42
168: invokevirtual #43
171: dload         4
173: invokevirtual #44
176: ldc           #45
178: invokevirtual #43
181: ldc2_w        #198
184: invokevirtual #44
187: ldc           #42
189: invokevirtual #43
192: invokevirtual #46
195: dload         4
197: ldc2_w        #198
200: dcmpl
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #47
212: new           #40
215: dup
216: invokespecial #41
219: ldc           #42
221: invokevirtual #43
224: dload         6
226: invokevirtual #44
229: ldc           #45
231: invokevirtual #43
234: ldc2_w        #198
237: invokevirtual #44
240: ldc           #42
242: invokevirtual #43
245: invokevirtual #46
248: dload         6
250: ldc2_w        #198
253: dcmpl
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #47
265: aload         10
267: invokestatic  #18
270: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test085
Start line: 6860
End line: 6946
Method source code: 
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean2 = polygonsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet1);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree3 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet4 = polygonsSet0.buildNew(euclidean2DBSPTree3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane9 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D5, vector3D8);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane23 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D19, vector3D22);
        double double24 = vector3D17.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(1.0d, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D13.subtract(83.24061508662703d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D17);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = plane9.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line32 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D30, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D35 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line37 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D35, (double) 0.0f);
        boolean boolean38 = line32.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane43 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D39, vector3D42);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D46 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line48 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D46, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = plane43.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        double double50 = line37.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D46);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D53 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str54 = vector2D53.toString();
        double double55 = vector2D46.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D53);
        org.apache.commons.math3.geometry.euclidean.twod.Line line57 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D53, 0.0d);
        boolean boolean58 = vector2D27.equals((java.lang.Object) line57);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine59 = line57.wholeHyperplane();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DSubHyperplane60 = polygonsSet4.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) subLine59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(polygonsSet4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector2D27);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{0; -0.43}" + "'", str54, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(subLine59);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #327
20: aastore
21: invokevirtual #7
24: pop
25: new           #56
28: dup
29: invokespecial #87
32: astore_1
33: new           #56
36: dup
37: invokespecial #87
40: astore_2
41: aload_1
42: aload_2
43: invokevirtual #88
46: istore_3
47: aconst_null
48: astore        4
50: aload_1
51: aload         4
53: invokevirtual #144
56: astore        5
58: getstatic     #10
61: astore        6
63: aload         6
65: invokevirtual #11
68: astore        7
70: getstatic     #10
73: astore        8
75: aload         8
77: invokevirtual #11
80: astore        9
82: new           #12
85: dup
86: aload         6
88: aload         9
90: invokespecial #13
93: astore        10
95: getstatic     #10
98: astore        11
100: aload         11
102: invokevirtual #11
105: astore        12
107: getstatic     #10
110: astore        13
112: aload         13
114: invokevirtual #11
117: astore        14
119: new           #12
122: dup
123: aload         11
125: aload         14
127: invokespecial #13
130: astore        15
132: getstatic     #10
135: astore        16
137: aload         16
139: invokevirtual #11
142: astore        17
144: getstatic     #10
147: astore        18
149: aload         18
151: invokevirtual #11
154: astore        19
156: getstatic     #10
159: astore        20
161: aload         20
163: invokevirtual #11
166: astore        21
168: new           #12
171: dup
172: aload         18
174: aload         21
176: invokespecial #13
179: astore        22
181: aload         16
183: aload         21
185: invokevirtual #22
188: dstore        23
190: new           #175
193: dup
194: dconst_1
195: aload         16
197: invokespecial #180
200: astore        25
202: aload         14
204: ldc2_w        #53
207: aload         16
209: invokevirtual #181
212: astore        26
214: aload         10
216: aload         14
218: invokevirtual #97
221: astore        27
223: new           #60
226: dup
227: dconst_0
228: ldc2_w        #61
231: invokespecial #63
234: astore        28
236: new           #64
239: dup
240: aload         28
242: dconst_0
243: invokespecial #65
246: astore        29
248: new           #60
251: dup
252: dconst_0
253: ldc2_w        #61
256: invokespecial #63
259: astore        30
261: new           #64
264: dup
265: aload         30
267: dconst_0
268: invokespecial #65
271: astore        31
273: aload         29
275: aload         31
277: invokevirtual #95
280: istore        32
282: getstatic     #10
285: astore        33
287: aload         33
289: invokevirtual #11
292: astore        34
294: getstatic     #10
297: astore        35
299: aload         35
301: invokevirtual #11
304: astore        36
306: new           #12
309: dup
310: aload         33
312: aload         36
314: invokespecial #13
317: astore        37
319: new           #60
322: dup
323: dconst_0
324: ldc2_w        #61
327: invokespecial #63
330: astore        38
332: new           #64
335: dup
336: aload         38
338: dconst_0
339: invokespecial #65
342: astore        39
344: aload         37
346: aload         38
348: invokevirtual #66
351: astore        40
353: aload         31
355: aload         38
357: invokevirtual #191
360: dstore        41
362: new           #60
365: dup
366: dconst_0
367: ldc2_w        #61
370: invokespecial #63
373: astore        43
375: aload         43
377: invokevirtual #192
380: astore        44
382: aload         38
384: aload         43
386: invokevirtual #193
389: dstore        45
391: new           #64
394: dup
395: aload         43
397: dconst_0
398: invokespecial #65
401: astore        47
403: aload         27
405: aload         47
407: invokevirtual #328
410: istore        48
412: aload         47
414: invokevirtual #329
417: astore        49
419: aload         5
421: aload         49
423: invokevirtual #58
426: astore        50
428: ldc           #15
430: invokestatic  #16
433: goto          438
436: astore        50
438: new           #40
441: dup
442: invokespecial #41
445: ldc           #42
447: invokevirtual #43
450: iload_3
451: invokevirtual #48
454: ldc           #45
456: invokevirtual #43
459: iconst_1
460: invokevirtual #48
463: ldc           #42
465: invokevirtual #43
468: invokevirtual #46
471: iload_3
472: iconst_1
473: if_icmpne     480
476: iconst_1
477: goto          481
480: iconst_0
481: invokestatic  #47
484: aload         5
486: invokestatic  #18
489: aload         6
491: invokestatic  #18
494: aload         7
496: invokestatic  #18
499: aload         8
501: invokestatic  #18
504: aload         9
506: invokestatic  #18
509: aload         11
511: invokestatic  #18
514: aload         12
516: invokestatic  #18
519: aload         13
521: invokestatic  #18
524: aload         14
526: invokestatic  #18
529: aload         16
531: invokestatic  #18
534: aload         17
536: invokestatic  #18
539: aload         18
541: invokestatic  #18
544: aload         19
546: invokestatic  #18
549: aload         20
551: invokestatic  #18
554: aload         21
556: invokestatic  #18
559: dload         23
561: invokestatic  #38
564: invokestatic  #39
567: aload         26
569: invokestatic  #18
572: aload         27
574: invokestatic  #18
577: new           #40
580: dup
581: invokespecial #41
584: ldc           #42
586: invokevirtual #43
589: iload         32
591: invokevirtual #48
594: ldc           #45
596: invokevirtual #43
599: iconst_1
600: invokevirtual #48
603: ldc           #42
605: invokevirtual #43
608: invokevirtual #46
611: iload         32
613: iconst_1
614: if_icmpne     621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #47
625: aload         33
627: invokestatic  #18
630: aload         34
632: invokestatic  #18
635: aload         35
637: invokestatic  #18
640: aload         36
642: invokestatic  #18
645: aload         40
647: invokestatic  #18
650: new           #40
653: dup
654: invokespecial #41
657: ldc           #42
659: invokevirtual #43
662: dload         41
664: invokevirtual #44
667: ldc           #45
669: invokevirtual #43
672: dconst_0
673: invokevirtual #44
676: ldc           #42
678: invokevirtual #43
681: invokevirtual #46
684: dload         41
686: dconst_0
687: dcmpl
688: ifne          695
691: iconst_1
692: goto          696
695: iconst_0
696: invokestatic  #47
699: new           #40
702: dup
703: invokespecial #41
706: ldc           #42
708: invokevirtual #43
711: aload         44
713: invokevirtual #43
716: ldc           #201
718: invokevirtual #43
721: invokevirtual #46
724: aload         44
726: ldc           #202
728: invokestatic  #203
731: new           #40
734: dup
735: invokespecial #41
738: ldc           #42
740: invokevirtual #43
743: dload         45
745: invokevirtual #44
748: ldc           #45
750: invokevirtual #43
753: dconst_0
754: invokevirtual #44
757: ldc           #42
759: invokevirtual #43
762: invokevirtual #46
765: dload         45
767: dconst_0
768: dcmpl
769: ifne          776
772: iconst_1
773: goto          777
776: iconst_0
777: invokestatic  #47
780: new           #40
783: dup
784: invokespecial #41
787: ldc           #42
789: invokevirtual #43
792: iload         48
794: invokevirtual #48
797: ldc           #45
799: invokevirtual #43
802: iconst_0
803: invokevirtual #48
806: ldc           #42
808: invokevirtual #43
811: invokevirtual #46
814: iload         48
816: ifne          823
819: iconst_1
820: goto          824
823: iconst_0
824: invokestatic  #47
827: aload         49
829: invokestatic  #18
832: return
Exception table:
from    to  target type
419   433   436   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test086
Start line: 6949
End line: 6998
Method source code: 
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        double double23 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        double double24 = plane15.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane25 = plane15.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion26 = subPlane25.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane27 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane4, euclidean2DRegion26);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane28 = subPlane27.getHyperplane();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(subPlane25);
        org.junit.Assert.assertNotNull(euclidean2DRegion26);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane28);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #330
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: new           #60
59: dup
60: dconst_0
61: ldc2_w        #61
64: invokespecial #63
67: astore        6
69: new           #64
72: dup
73: aload         6
75: dconst_0
76: invokespecial #65
79: astore        7
81: aload         5
83: aload         6
85: invokevirtual #66
88: astore        8
90: getstatic     #10
93: astore        9
95: aload         9
97: invokevirtual #11
100: astore        10
102: getstatic     #10
105: astore        11
107: aload         11
109: invokevirtual #11
112: astore        12
114: new           #12
117: dup
118: aload         9
120: aload         12
122: invokespecial #13
125: astore        13
127: getstatic     #10
130: astore        14
132: aload         14
134: invokevirtual #11
137: astore        15
139: getstatic     #10
142: astore        16
144: aload         16
146: invokevirtual #11
149: astore        17
151: getstatic     #10
154: astore        18
156: aload         18
158: invokevirtual #11
161: astore        19
163: new           #12
166: dup
167: aload         16
169: aload         19
171: invokespecial #13
174: astore        20
176: aload         14
178: aload         19
180: invokevirtual #22
183: dstore        21
185: aload         13
187: aload         19
189: invokevirtual #23
192: dstore        23
194: aload         13
196: invokevirtual #24
199: astore        25
201: aload         25
203: invokevirtual #32
206: astore        26
208: new           #67
211: dup
212: aload         5
214: aload         26
216: invokespecial #68
219: astore        27
221: aload         27
223: invokevirtual #71
226: astore        28
228: aload_1
229: invokestatic  #18
232: aload_2
233: invokestatic  #18
236: aload_3
237: invokestatic  #18
240: aload         4
242: invokestatic  #18
245: aload         8
247: invokestatic  #18
250: aload         9
252: invokestatic  #18
255: aload         10
257: invokestatic  #18
260: aload         11
262: invokestatic  #18
265: aload         12
267: invokestatic  #18
270: aload         14
272: invokestatic  #18
275: aload         15
277: invokestatic  #18
280: aload         16
282: invokestatic  #18
285: aload         17
287: invokestatic  #18
290: aload         18
292: invokestatic  #18
295: aload         19
297: invokestatic  #18
300: dload         21
302: invokestatic  #38
305: invokestatic  #39
308: dload         23
310: invokestatic  #38
313: invokestatic  #39
316: aload         25
318: invokestatic  #18
321: aload         26
323: invokestatic  #18
326: aload         28
328: invokestatic  #18
331: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test087
Start line: 7001
End line: 7102
Method source code: 
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> euclidean2DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>) euclidean2DSubHyperplaneList0);
        boolean boolean2 = polygonsSet1.isEmpty();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line7 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D5, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        boolean boolean13 = line7.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line12);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line18 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, (double) 0.0f);
        line12.reset(vector2D16, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        double double33 = vector3D26.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        double double34 = plane25.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        plane25.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane40 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D36, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D43, vector3D46);
        double double48 = vector3D41.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        double double49 = plane40.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        plane40.revertSelf();
        double double51 = plane25.getOffset(plane40);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D52, vector3D56);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = plane40.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        double double60 = vector2D16.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Line line62 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet63 = line62.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Side side64 = polygonsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line62);
        double double65 = polygonsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line70 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D68, (double) 0.0f);
        org.apache.commons.math3.geometry.partitioning.Side side71 = polygonsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line70);
        org.apache.commons.math3.geometry.euclidean.twod.Line line72 = new org.apache.commons.math3.geometry.euclidean.twod.Line(line70);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(polygonsSet63);
        org.junit.Assert.assertTrue("'" + side64 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side64.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + side71 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side71.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #331
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #56
36: dup
37: aload_1
38: invokespecial #57
41: astore_2
42: aload_2
43: invokevirtual #145
46: istore_3
47: new           #60
50: dup
51: dconst_0
52: ldc2_w        #61
55: invokespecial #63
58: astore        4
60: new           #64
63: dup
64: aload         4
66: dconst_0
67: invokespecial #65
70: astore        5
72: new           #60
75: dup
76: dconst_0
77: ldc2_w        #61
80: invokespecial #63
83: astore        6
85: new           #64
88: dup
89: aload         6
91: dconst_0
92: invokespecial #65
95: astore        7
97: aload         5
99: aload         7
101: invokevirtual #95
104: istore        8
106: new           #60
109: dup
110: dconst_0
111: ldc2_w        #61
114: invokespecial #63
117: astore        9
119: new           #64
122: dup
123: aload         9
125: dconst_0
126: invokespecial #65
129: astore        10
131: aload         7
133: aload         9
135: ldc2_w        #116
138: invokevirtual #100
141: getstatic     #10
144: astore        11
146: aload         11
148: invokevirtual #11
151: astore        12
153: getstatic     #10
156: astore        13
158: aload         13
160: invokevirtual #11
163: astore        14
165: new           #12
168: dup
169: aload         11
171: aload         14
173: invokespecial #13
176: astore        15
178: getstatic     #10
181: astore        16
183: aload         16
185: invokevirtual #11
188: astore        17
190: getstatic     #10
193: astore        18
195: aload         18
197: invokevirtual #11
200: astore        19
202: getstatic     #10
205: astore        20
207: aload         20
209: invokevirtual #11
212: astore        21
214: new           #12
217: dup
218: aload         18
220: aload         21
222: invokespecial #13
225: astore        22
227: aload         16
229: aload         21
231: invokevirtual #22
234: dstore        23
236: aload         15
238: aload         21
240: invokevirtual #23
243: dstore        25
245: aload         15
247: invokevirtual #20
250: getstatic     #10
253: astore        27
255: aload         27
257: invokevirtual #11
260: astore        28
262: getstatic     #10
265: astore        29
267: aload         29
269: invokevirtual #11
272: astore        30
274: new           #12
277: dup
278: aload         27
280: aload         30
282: invokespecial #13
285: astore        31
287: getstatic     #10
290: astore        32
292: aload         32
294: invokevirtual #11
297: astore        33
299: getstatic     #10
302: astore        34
304: aload         34
306: invokevirtual #11
309: astore        35
311: getstatic     #10
314: astore        36
316: aload         36
318: invokevirtual #11
321: astore        37
323: new           #12
326: dup
327: aload         34
329: aload         37
331: invokespecial #13
334: astore        38
336: aload         32
338: aload         37
340: invokevirtual #22
343: dstore        39
345: aload         31
347: aload         37
349: invokevirtual #23
352: dstore        41
354: aload         31
356: invokevirtual #20
359: aload         15
361: aload         31
363: invokevirtual #82
366: dstore        43
368: getstatic     #10
371: astore        45
373: getstatic     #10
376: astore        46
378: aload         46
380: invokevirtual #11
383: astore        47
385: getstatic     #10
388: astore        48
390: aload         48
392: invokevirtual #11
395: astore        49
397: new           #12
400: dup
401: aload         46
403: aload         49
405: invokespecial #13
408: astore        50
410: aload         45
412: aload         49
414: invokestatic  #96
417: astore        51
419: aload         31
421: aload         49
423: invokevirtual #97
426: astore        52
428: aload         9
430: aload         52
432: invokevirtual #118
435: dstore        53
437: new           #64
440: dup
441: aload         9
443: ldc2_w        #119
446: invokespecial #65
449: astore        55
451: aload         55
453: invokevirtual #121
456: astore        56
458: aload_2
459: aload         55
461: invokevirtual #101
464: astore        57
466: aload_2
467: invokevirtual #210
470: dstore        58
472: new           #60
475: dup
476: dconst_0
477: ldc2_w        #61
480: invokespecial #63
483: astore        60
485: new           #64
488: dup
489: aload         60
491: dconst_0
492: invokespecial #65
495: astore        61
497: aload_2
498: aload         61
500: invokevirtual #101
503: astore        62
505: new           #64
508: dup
509: aload         61
511: invokespecial #332
514: astore        63
516: new           #40
519: dup
520: invokespecial #41
523: ldc           #42
525: invokevirtual #43
528: iload_3
529: invokevirtual #48
532: ldc           #45
534: invokevirtual #43
537: iconst_0
538: invokevirtual #48
541: ldc           #42
543: invokevirtual #43
546: invokevirtual #46
549: iload_3
550: ifne          557
553: iconst_1
554: goto          558
557: iconst_0
558: invokestatic  #47
561: new           #40
564: dup
565: invokespecial #41
568: ldc           #42
570: invokevirtual #43
573: iload         8
575: invokevirtual #48
578: ldc           #45
580: invokevirtual #43
583: iconst_1
584: invokevirtual #48
587: ldc           #42
589: invokevirtual #43
592: invokevirtual #46
595: iload         8
597: iconst_1
598: if_icmpne     605
601: iconst_1
602: goto          606
605: iconst_0
606: invokestatic  #47
609: aload         11
611: invokestatic  #18
614: aload         12
616: invokestatic  #18
619: aload         13
621: invokestatic  #18
624: aload         14
626: invokestatic  #18
629: aload         16
631: invokestatic  #18
634: aload         17
636: invokestatic  #18
639: aload         18
641: invokestatic  #18
644: aload         19
646: invokestatic  #18
649: aload         20
651: invokestatic  #18
654: aload         21
656: invokestatic  #18
659: dload         23
661: invokestatic  #38
664: invokestatic  #39
667: dload         25
669: invokestatic  #38
672: invokestatic  #39
675: aload         27
677: invokestatic  #18
680: aload         28
682: invokestatic  #18
685: aload         29
687: invokestatic  #18
690: aload         30
692: invokestatic  #18
695: aload         32
697: invokestatic  #18
700: aload         33
702: invokestatic  #18
705: aload         34
707: invokestatic  #18
710: aload         35
712: invokestatic  #18
715: aload         36
717: invokestatic  #18
720: aload         37
722: invokestatic  #18
725: dload         39
727: invokestatic  #38
730: invokestatic  #39
733: dload         41
735: invokestatic  #38
738: invokestatic  #39
741: dload         43
743: invokestatic  #38
746: invokestatic  #39
749: aload         45
751: invokestatic  #18
754: aload         46
756: invokestatic  #18
759: aload         47
761: invokestatic  #18
764: aload         48
766: invokestatic  #18
769: aload         49
771: invokestatic  #18
774: aload         51
776: invokestatic  #18
779: aload         52
781: invokestatic  #18
784: dload         53
786: invokestatic  #38
789: invokestatic  #39
792: aload         56
794: invokestatic  #18
797: new           #40
800: dup
801: invokespecial #41
804: ldc           #42
806: invokevirtual #43
809: aload         57
811: invokevirtual #102
814: ldc           #45
816: invokevirtual #43
819: getstatic     #103
822: invokevirtual #102
825: ldc           #42
827: invokevirtual #43
830: invokevirtual #46
833: aload         57
835: getstatic     #103
838: invokevirtual #104
841: invokestatic  #47
844: new           #40
847: dup
848: invokespecial #41
851: ldc           #42
853: invokevirtual #43
856: dload         58
858: invokevirtual #44
861: ldc           #45
863: invokevirtual #43
866: ldc2_w        #212
869: invokevirtual #44
872: ldc           #42
874: invokevirtual #43
877: invokevirtual #46
880: dload         58
882: ldc2_w        #212
885: dcmpl
886: ifne          893
889: iconst_1
890: goto          894
893: iconst_0
894: invokestatic  #47
897: new           #40
900: dup
901: invokespecial #41
904: ldc           #42
906: invokevirtual #43
909: aload         62
911: invokevirtual #102
914: ldc           #45
916: invokevirtual #43
919: getstatic     #103
922: invokevirtual #102
925: ldc           #42
927: invokevirtual #43
930: invokevirtual #46
933: aload         62
935: getstatic     #103
938: invokevirtual #104
941: invokestatic  #47
944: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test088
Start line: 7105
End line: 7178
Method source code: 
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet0 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = vector3D1.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane5 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D1, vector3D4);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = vector3D6.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane12 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D8, vector3D11);
        double double13 = vector3D6.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11);
        double double14 = plane5.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane15 = plane5.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane20 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D16, vector3D19);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane27 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D26);
        double double28 = vector3D21.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26);
        double double29 = plane20.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D26);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane30 = plane20.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion31 = subPlane30.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane32 = subPlane30.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList33 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean34 = euclidean3DSubHyperplaneList33.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane15);
        boolean boolean35 = euclidean3DSubHyperplaneList33.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane30);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList33);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet37 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList33);
        boolean boolean38 = polyhedronsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) polyhedronsSet37);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(subPlane15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(subPlane30);
        org.junit.Assert.assertNotNull(euclidean2DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #333
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #334
32: astore_1
33: getstatic     #10
36: astore_2
37: aload_2
38: invokevirtual #11
41: astore_3
42: getstatic     #10
45: astore        4
47: aload         4
49: invokevirtual #11
52: astore        5
54: new           #12
57: dup
58: aload_2
59: aload         5
61: invokespecial #13
64: astore        6
66: getstatic     #10
69: astore        7
71: aload         7
73: invokevirtual #11
76: astore        8
78: getstatic     #10
81: astore        9
83: aload         9
85: invokevirtual #11
88: astore        10
90: getstatic     #10
93: astore        11
95: aload         11
97: invokevirtual #11
100: astore        12
102: new           #12
105: dup
106: aload         9
108: aload         12
110: invokespecial #13
113: astore        13
115: aload         7
117: aload         12
119: invokevirtual #22
122: dstore        14
124: aload         6
126: aload         12
128: invokevirtual #23
131: dstore        16
133: aload         6
135: invokevirtual #24
138: astore        18
140: getstatic     #10
143: astore        19
145: aload         19
147: invokevirtual #11
150: astore        20
152: getstatic     #10
155: astore        21
157: aload         21
159: invokevirtual #11
162: astore        22
164: new           #12
167: dup
168: aload         19
170: aload         22
172: invokespecial #13
175: astore        23
177: getstatic     #10
180: astore        24
182: aload         24
184: invokevirtual #11
187: astore        25
189: getstatic     #10
192: astore        26
194: aload         26
196: invokevirtual #11
199: astore        27
201: getstatic     #10
204: astore        28
206: aload         28
208: invokevirtual #11
211: astore        29
213: new           #12
216: dup
217: aload         26
219: aload         29
221: invokespecial #13
224: astore        30
226: aload         24
228: aload         29
230: invokevirtual #22
233: dstore        31
235: aload         23
237: aload         29
239: invokevirtual #23
242: dstore        33
244: aload         23
246: invokevirtual #24
249: astore        35
251: aload         35
253: invokevirtual #32
256: astore        36
258: aload         35
260: invokevirtual #71
263: astore        37
265: new           #25
268: dup
269: invokespecial #26
272: astore        38
274: aload         38
276: aload         18
278: invokevirtual #189
281: istore        39
283: aload         38
285: aload         35
287: invokevirtual #189
290: istore        40
292: new           #8
295: dup
296: aload         38
298: invokespecial #27
301: astore        41
303: new           #8
306: dup
307: aload         38
309: invokespecial #27
312: astore        42
314: aload_1
315: aload         42
317: invokevirtual #261
320: istore        43
322: aload_2
323: invokestatic  #18
326: aload_3
327: invokestatic  #18
330: aload         4
332: invokestatic  #18
335: aload         5
337: invokestatic  #18
340: aload         7
342: invokestatic  #18
345: aload         8
347: invokestatic  #18
350: aload         9
352: invokestatic  #18
355: aload         10
357: invokestatic  #18
360: aload         11
362: invokestatic  #18
365: aload         12
367: invokestatic  #18
370: dload         14
372: invokestatic  #38
375: invokestatic  #39
378: dload         16
380: invokestatic  #38
383: invokestatic  #39
386: aload         18
388: invokestatic  #18
391: aload         19
393: invokestatic  #18
396: aload         20
398: invokestatic  #18
401: aload         21
403: invokestatic  #18
406: aload         22
408: invokestatic  #18
411: aload         24
413: invokestatic  #18
416: aload         25
418: invokestatic  #18
421: aload         26
423: invokestatic  #18
426: aload         27
428: invokestatic  #18
431: aload         28
433: invokestatic  #18
436: aload         29
438: invokestatic  #18
441: dload         31
443: invokestatic  #38
446: invokestatic  #39
449: dload         33
451: invokestatic  #38
454: invokestatic  #39
457: aload         35
459: invokestatic  #18
462: aload         36
464: invokestatic  #18
467: aload         37
469: invokestatic  #18
472: new           #40
475: dup
476: invokespecial #41
479: ldc           #42
481: invokevirtual #43
484: iload         39
486: invokevirtual #48
489: ldc           #45
491: invokevirtual #43
494: iconst_1
495: invokevirtual #48
498: ldc           #42
500: invokevirtual #43
503: invokevirtual #46
506: iload         39
508: iconst_1
509: if_icmpne     516
512: iconst_1
513: goto          517
516: iconst_0
517: invokestatic  #47
520: new           #40
523: dup
524: invokespecial #41
527: ldc           #42
529: invokevirtual #43
532: iload         40
534: invokevirtual #48
537: ldc           #45
539: invokevirtual #43
542: iconst_1
543: invokevirtual #48
546: ldc           #42
548: invokevirtual #43
551: invokevirtual #46
554: iload         40
556: iconst_1
557: if_icmpne     564
560: iconst_1
561: goto          565
564: iconst_0
565: invokestatic  #47
568: new           #40
571: dup
572: invokespecial #41
575: ldc           #42
577: invokevirtual #43
580: iload         43
582: invokevirtual #48
585: ldc           #45
587: invokevirtual #43
590: iconst_1
591: invokevirtual #48
594: ldc           #42
596: invokevirtual #43
599: invokevirtual #46
602: iload         43
604: iconst_1
605: if_icmpne     612
608: iconst_1
609: goto          613
612: iconst_0
613: invokestatic  #47
616: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test089
Start line: 7181
End line: 7297
Method source code: 
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane21 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D17, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D16, vector3D20);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D16.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D15, vector3D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D25, vector3D28);
        plane29.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D32, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D32.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D31, vector3D39);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector41 = plane29.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D44, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane55 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D51, vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D44.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D42.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane58 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D31, vector3D57);
        plane58.revertSelf();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane.SplitSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSplitSubHyperplane60 = subPlane14.split((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane58);
        boolean boolean61 = subPlane14.isEmpty();
        org.apache.commons.math3.util.MathUtils.checkNotNull((java.lang.Object) boolean61);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(euclidean2DVector41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(euclidean3DSplitSubHyperplane60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #335
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: getstatic     #10
133: astore        18
135: getstatic     #10
138: astore        19
140: getstatic     #10
143: astore        20
145: aload         20
147: invokevirtual #11
150: astore        21
152: getstatic     #10
155: astore        22
157: aload         22
159: invokevirtual #11
162: astore        23
164: new           #12
167: dup
168: aload         20
170: aload         23
172: invokespecial #13
175: astore        24
177: aload         19
179: aload         23
181: invokestatic  #96
184: astore        25
186: aload         19
188: invokevirtual #110
191: astore        26
193: aload         18
195: aload         26
197: invokestatic  #96
200: astore        27
202: getstatic     #10
205: astore        28
207: aload         28
209: invokevirtual #11
212: astore        29
214: getstatic     #10
217: astore        30
219: aload         30
221: invokevirtual #11
224: astore        31
226: new           #12
229: dup
230: aload         28
232: aload         31
234: invokespecial #13
237: astore        32
239: aload         32
241: invokevirtual #20
244: getstatic     #10
247: astore        33
249: getstatic     #10
252: astore        34
254: getstatic     #10
257: astore        35
259: aload         35
261: invokevirtual #11
264: astore        36
266: getstatic     #10
269: astore        37
271: aload         37
273: invokevirtual #11
276: astore        38
278: new           #12
281: dup
282: aload         35
284: aload         38
286: invokespecial #13
289: astore        39
291: aload         34
293: aload         38
295: invokestatic  #96
298: astore        40
300: aload         34
302: invokevirtual #110
305: astore        41
307: aload         33
309: aload         41
311: invokestatic  #96
314: astore        42
316: aload         32
318: aload         33
320: invokevirtual #97
323: astore        43
325: getstatic     #10
328: astore        44
330: getstatic     #10
333: astore        45
335: getstatic     #10
338: astore        46
340: aload         46
342: invokevirtual #11
345: astore        47
347: getstatic     #10
350: astore        48
352: aload         48
354: invokevirtual #11
357: astore        49
359: new           #12
362: dup
363: aload         46
365: aload         49
367: invokespecial #13
370: astore        50
372: aload         45
374: aload         49
376: invokestatic  #96
379: astore        51
381: getstatic     #10
384: astore        52
386: aload         52
388: invokevirtual #11
391: astore        53
393: getstatic     #10
396: astore        54
398: aload         54
400: invokevirtual #11
403: astore        55
405: new           #12
408: dup
409: aload         52
411: aload         55
413: invokespecial #13
416: astore        56
418: aload         45
420: aload         55
422: invokevirtual #111
425: astore        57
427: aload         44
429: dconst_1
430: aload         55
432: invokevirtual #112
435: astore        58
437: new           #12
440: dup
441: aload         26
443: aload         33
445: aload         58
447: invokespecial #113
450: astore        59
452: aload         59
454: invokevirtual #20
457: aload         17
459: aload         59
461: invokevirtual #114
464: astore        60
466: aload         17
468: invokevirtual #93
471: istore        61
473: iload         61
475: invokestatic  #263
478: invokestatic  #80
481: aload_1
482: invokestatic  #18
485: aload_2
486: invokestatic  #18
489: aload_3
490: invokestatic  #18
493: aload         4
495: invokestatic  #18
498: aload         6
500: invokestatic  #18
503: aload         7
505: invokestatic  #18
508: aload         8
510: invokestatic  #18
513: aload         9
515: invokestatic  #18
518: aload         10
520: invokestatic  #18
523: aload         11
525: invokestatic  #18
528: dload         13
530: invokestatic  #38
533: invokestatic  #39
536: dload         15
538: invokestatic  #38
541: invokestatic  #39
544: aload         17
546: invokestatic  #18
549: aload         18
551: invokestatic  #18
554: aload         19
556: invokestatic  #18
559: aload         20
561: invokestatic  #18
564: aload         21
566: invokestatic  #18
569: aload         22
571: invokestatic  #18
574: aload         23
576: invokestatic  #18
579: aload         25
581: invokestatic  #18
584: aload         26
586: invokestatic  #18
589: aload         27
591: invokestatic  #18
594: aload         28
596: invokestatic  #18
599: aload         29
601: invokestatic  #18
604: aload         30
606: invokestatic  #18
609: aload         31
611: invokestatic  #18
614: aload         33
616: invokestatic  #18
619: aload         34
621: invokestatic  #18
624: aload         35
626: invokestatic  #18
629: aload         36
631: invokestatic  #18
634: aload         37
636: invokestatic  #18
639: aload         38
641: invokestatic  #18
644: aload         40
646: invokestatic  #18
649: aload         41
651: invokestatic  #18
654: aload         42
656: invokestatic  #18
659: aload         43
661: invokestatic  #18
664: aload         44
666: invokestatic  #18
669: aload         45
671: invokestatic  #18
674: aload         46
676: invokestatic  #18
679: aload         47
681: invokestatic  #18
684: aload         48
686: invokestatic  #18
689: aload         49
691: invokestatic  #18
694: aload         51
696: invokestatic  #18
699: aload         52
701: invokestatic  #18
704: aload         53
706: invokestatic  #18
709: aload         54
711: invokestatic  #18
714: aload         55
716: invokestatic  #18
719: aload         57
721: invokestatic  #18
724: aload         58
726: invokestatic  #18
729: aload         60
731: invokestatic  #18
734: new           #40
737: dup
738: invokespecial #41
741: ldc           #42
743: invokevirtual #43
746: iload         61
748: invokevirtual #48
751: ldc           #45
753: invokevirtual #43
756: iconst_0
757: invokevirtual #48
760: ldc           #42
762: invokevirtual #43
765: invokevirtual #46
768: iload         61
770: ifne          777
773: iconst_1
774: goto          778
777: iconst_0
778: invokestatic  #47
781: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test090
Start line: 7300
End line: 7308
Method source code: 
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractRegion1 = polygonsSet0.copySelf();
        double double2 = polygonsSet0.getBoundarySize();
        org.junit.Assert.assertNotNull(euclidean2DAbstractRegion1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #336
20: aastore
21: invokevirtual #7
24: pop
25: new           #56
28: dup
29: invokespecial #87
32: astore_1
33: aload_1
34: invokevirtual #243
37: astore_2
38: aload_1
39: invokevirtual #337
42: dstore_3
43: aload_2
44: invokestatic  #18
47: new           #40
50: dup
51: invokespecial #41
54: ldc           #42
56: invokevirtual #43
59: dload_3
60: invokevirtual #44
63: ldc           #45
65: invokevirtual #43
68: dconst_0
69: invokevirtual #44
72: ldc           #42
74: invokevirtual #43
77: invokevirtual #46
80: dload_3
81: dconst_0
82: dcmpl
83: ifne          90
86: iconst_1
87: goto          91
90: iconst_0
91: invokestatic  #47
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test091
Start line: 7311
End line: 7410
Method source code: 
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str5 = vector2D4.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line10 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D8, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line15 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, (double) 0.0f);
        boolean boolean16 = line10.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line21 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D19, (double) 0.0f);
        line15.reset(vector2D19, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        double double36 = vector3D29.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        double double37 = plane28.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        plane28.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane43 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D39, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        double double51 = vector3D44.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        double double52 = plane43.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        plane43.revertSelf();
        double double54 = plane28.getOffset(plane43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane60 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D56, vector3D59);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D55, vector3D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = plane43.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59);
        double double63 = vector2D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        double double64 = vector2D4.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = vector2D0.subtract((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        org.apache.commons.math3.geometry.euclidean.twod.Line line67 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D4, 2.2250738585072014E-308d);
        double double68 = line67.getOriginOffset();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet69 = line67.wholeSpace();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{0; -0.43}" + "'", str5, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.1833403984568501d + "'", double64 == 0.1833403984568501d);
        org.junit.Assert.assertNotNull(vector2D65);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-0.428182669496151d) + "'", double68 == (-0.428182669496151d));
        org.junit.Assert.assertNotNull(polygonsSet69);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #338
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #300
28: astore_1
29: new           #60
32: dup
33: dconst_0
34: ldc2_w        #61
37: invokespecial #63
40: astore_2
41: aload_2
42: invokevirtual #192
45: astore_3
46: new           #60
49: dup
50: dconst_0
51: ldc2_w        #61
54: invokespecial #63
57: astore        4
59: new           #64
62: dup
63: aload         4
65: dconst_0
66: invokespecial #65
69: astore        5
71: new           #60
74: dup
75: dconst_0
76: ldc2_w        #61
79: invokespecial #63
82: astore        6
84: new           #64
87: dup
88: aload         6
90: dconst_0
91: invokespecial #65
94: astore        7
96: aload         5
98: aload         7
100: invokevirtual #95
103: istore        8
105: new           #60
108: dup
109: dconst_0
110: ldc2_w        #61
113: invokespecial #63
116: astore        9
118: new           #64
121: dup
122: aload         9
124: dconst_0
125: invokespecial #65
128: astore        10
130: aload         7
132: aload         9
134: ldc2_w        #116
137: invokevirtual #100
140: getstatic     #10
143: astore        11
145: aload         11
147: invokevirtual #11
150: astore        12
152: getstatic     #10
155: astore        13
157: aload         13
159: invokevirtual #11
162: astore        14
164: new           #12
167: dup
168: aload         11
170: aload         14
172: invokespecial #13
175: astore        15
177: getstatic     #10
180: astore        16
182: aload         16
184: invokevirtual #11
187: astore        17
189: getstatic     #10
192: astore        18
194: aload         18
196: invokevirtual #11
199: astore        19
201: getstatic     #10
204: astore        20
206: aload         20
208: invokevirtual #11
211: astore        21
213: new           #12
216: dup
217: aload         18
219: aload         21
221: invokespecial #13
224: astore        22
226: aload         16
228: aload         21
230: invokevirtual #22
233: dstore        23
235: aload         15
237: aload         21
239: invokevirtual #23
242: dstore        25
244: aload         15
246: invokevirtual #20
249: getstatic     #10
252: astore        27
254: aload         27
256: invokevirtual #11
259: astore        28
261: getstatic     #10
264: astore        29
266: aload         29
268: invokevirtual #11
271: astore        30
273: new           #12
276: dup
277: aload         27
279: aload         30
281: invokespecial #13
284: astore        31
286: getstatic     #10
289: astore        32
291: aload         32
293: invokevirtual #11
296: astore        33
298: getstatic     #10
301: astore        34
303: aload         34
305: invokevirtual #11
308: astore        35
310: getstatic     #10
313: astore        36
315: aload         36
317: invokevirtual #11
320: astore        37
322: new           #12
325: dup
326: aload         34
328: aload         37
330: invokespecial #13
333: astore        38
335: aload         32
337: aload         37
339: invokevirtual #22
342: dstore        39
344: aload         31
346: aload         37
348: invokevirtual #23
351: dstore        41
353: aload         31
355: invokevirtual #20
358: aload         15
360: aload         31
362: invokevirtual #82
365: dstore        43
367: getstatic     #10
370: astore        45
372: getstatic     #10
375: astore        46
377: aload         46
379: invokevirtual #11
382: astore        47
384: getstatic     #10
387: astore        48
389: aload         48
391: invokevirtual #11
394: astore        49
396: new           #12
399: dup
400: aload         46
402: aload         49
404: invokespecial #13
407: astore        50
409: aload         45
411: aload         49
413: invokestatic  #96
416: astore        51
418: aload         31
420: aload         49
422: invokevirtual #97
425: astore        52
427: aload         9
429: aload         52
431: invokevirtual #118
434: dstore        53
436: aload_2
437: aload         9
439: invokevirtual #301
442: dstore        55
444: aload_1
445: ldc2_w        #302
448: aload_2
449: invokevirtual #304
452: astore        57
454: new           #64
457: dup
458: aload_2
459: ldc2_w        #119
462: invokespecial #65
465: astore        58
467: aload         58
469: invokevirtual #339
472: dstore        59
474: aload         58
476: invokevirtual #121
479: astore        61
481: aload_1
482: invokestatic  #18
485: new           #40
488: dup
489: invokespecial #41
492: ldc           #42
494: invokevirtual #43
497: aload_3
498: invokevirtual #43
501: ldc           #201
503: invokevirtual #43
506: invokevirtual #46
509: aload_3
510: ldc           #202
512: invokestatic  #203
515: new           #40
518: dup
519: invokespecial #41
522: ldc           #42
524: invokevirtual #43
527: iload         8
529: invokevirtual #48
532: ldc           #45
534: invokevirtual #43
537: iconst_1
538: invokevirtual #48
541: ldc           #42
543: invokevirtual #43
546: invokevirtual #46
549: iload         8
551: iconst_1
552: if_icmpne     559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #47
563: aload         11
565: invokestatic  #18
568: aload         12
570: invokestatic  #18
573: aload         13
575: invokestatic  #18
578: aload         14
580: invokestatic  #18
583: aload         16
585: invokestatic  #18
588: aload         17
590: invokestatic  #18
593: aload         18
595: invokestatic  #18
598: aload         19
600: invokestatic  #18
603: aload         20
605: invokestatic  #18
608: aload         21
610: invokestatic  #18
613: dload         23
615: invokestatic  #38
618: invokestatic  #39
621: dload         25
623: invokestatic  #38
626: invokestatic  #39
629: aload         27
631: invokestatic  #18
634: aload         28
636: invokestatic  #18
639: aload         29
641: invokestatic  #18
644: aload         30
646: invokestatic  #18
649: aload         32
651: invokestatic  #18
654: aload         33
656: invokestatic  #18
659: aload         34
661: invokestatic  #18
664: aload         35
666: invokestatic  #18
669: aload         36
671: invokestatic  #18
674: aload         37
676: invokestatic  #18
679: dload         39
681: invokestatic  #38
684: invokestatic  #39
687: dload         41
689: invokestatic  #38
692: invokestatic  #39
695: dload         43
697: invokestatic  #38
700: invokestatic  #39
703: aload         45
705: invokestatic  #18
708: aload         46
710: invokestatic  #18
713: aload         47
715: invokestatic  #18
718: aload         48
720: invokestatic  #18
723: aload         49
725: invokestatic  #18
728: aload         51
730: invokestatic  #18
733: aload         52
735: invokestatic  #18
738: dload         53
740: invokestatic  #38
743: invokestatic  #39
746: new           #40
749: dup
750: invokespecial #41
753: ldc           #42
755: invokevirtual #43
758: dload         55
760: invokevirtual #44
763: ldc           #45
765: invokevirtual #43
768: ldc2_w        #154
771: invokevirtual #44
774: ldc           #42
776: invokevirtual #43
779: invokevirtual #46
782: dload         55
784: ldc2_w        #154
787: dcmpl
788: ifne          795
791: iconst_1
792: goto          796
795: iconst_0
796: invokestatic  #47
799: aload         57
801: invokestatic  #18
804: new           #40
807: dup
808: invokespecial #41
811: ldc           #42
813: invokevirtual #43
816: dload         59
818: invokevirtual #44
821: ldc           #45
823: invokevirtual #43
826: ldc2_w        #61
829: invokevirtual #44
832: ldc           #42
834: invokevirtual #43
837: invokevirtual #46
840: dload         59
842: ldc2_w        #61
845: dcmpl
846: ifne          853
849: iconst_1
850: goto          854
853: iconst_0
854: invokestatic  #47
857: aload         61
859: invokestatic  #18
862: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test092
Start line: 7413
End line: 7551
Method source code: 
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree2 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion3 = polyhedronsSet1.buildNew(euclidean3DBSPTree2);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree5 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane12 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D8, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D7.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D6, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane20 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D16, vector3D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line25 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D23, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = plane20.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D23);
        double double27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distanceInf(vector3D6, vector3D26);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet28 = polyhedronsSet1.translate(vector3D26);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform29 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion30 = polyhedronsSet1.applyTransform(euclidean3DTransform29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane45 = plane35.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList46 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet47 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList46);
        double double48 = polyhedronsSet47.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList49 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet50 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion52 = polyhedronsSet50.buildNew(euclidean3DBSPTree51);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree54 = polyhedronsSet50.getTree(false);
        boolean boolean55 = polyhedronsSet47.isEmpty(euclidean3DBSPTree54);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList56 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet57 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList56);
        double double58 = polyhedronsSet57.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList59 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet60 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList59);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree61 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion62 = polyhedronsSet60.buildNew(euclidean3DBSPTree61);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree64 = polyhedronsSet60.getTree(false);
        boolean boolean65 = polyhedronsSet57.isEmpty(euclidean3DBSPTree64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = vector3D66.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane70 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D66, vector3D69);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D71.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = vector3D73.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = vector3D75.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane77 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D73, vector3D76);
        double double78 = vector3D71.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D76);
        double double79 = plane70.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D76);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane80 = plane70.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion81 = subPlane80.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree82 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane45, euclidean3DBSPTree54, euclidean3DBSPTree64, (java.lang.Object) subPlane80);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree83 = euclidean3DBSPTree54.copySelf();
        boolean boolean84 = polyhedronsSet1.isEmpty(euclidean3DBSPTree83);
        org.junit.Assert.assertNotNull(euclidean3DRegion3);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(polyhedronsSet28);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(subPlane45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion52);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion62);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(subPlane80);
        org.junit.Assert.assertNotNull(euclidean2DRegion81);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #340
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aconst_null
43: astore_3
44: aload_2
45: aload_3
46: invokevirtual #29
49: astore        4
51: aload_2
52: iconst_0
53: invokevirtual #30
56: astore        5
58: getstatic     #10
61: astore        6
63: getstatic     #10
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         7
107: aload         11
109: invokestatic  #96
112: astore        13
114: aload         7
116: invokevirtual #110
119: astore        14
121: aload         6
123: aload         14
125: invokestatic  #96
128: astore        15
130: getstatic     #10
133: astore        16
135: aload         16
137: invokevirtual #11
140: astore        17
142: getstatic     #10
145: astore        18
147: aload         18
149: invokevirtual #11
152: astore        19
154: new           #12
157: dup
158: aload         16
160: aload         19
162: invokespecial #13
165: astore        20
167: new           #60
170: dup
171: dconst_0
172: ldc2_w        #61
175: invokespecial #63
178: astore        21
180: new           #64
183: dup
184: aload         21
186: dconst_0
187: invokespecial #65
190: astore        22
192: aload         20
194: aload         21
196: invokevirtual #66
199: astore        23
201: aload         6
203: aload         23
205: invokestatic  #341
208: dstore        24
210: aload_2
211: aload         23
213: invokevirtual #153
216: astore        26
218: aconst_null
219: astore        27
221: aload_2
222: aload         27
224: invokevirtual #148
227: astore        28
229: getstatic     #10
232: astore        29
234: aload         29
236: invokevirtual #11
239: astore        30
241: getstatic     #10
244: astore        31
246: aload         31
248: invokevirtual #11
251: astore        32
253: new           #12
256: dup
257: aload         29
259: aload         32
261: invokespecial #13
264: astore        33
266: getstatic     #10
269: astore        34
271: aload         34
273: invokevirtual #11
276: astore        35
278: getstatic     #10
281: astore        36
283: aload         36
285: invokevirtual #11
288: astore        37
290: getstatic     #10
293: astore        38
295: aload         38
297: invokevirtual #11
300: astore        39
302: new           #12
305: dup
306: aload         36
308: aload         39
310: invokespecial #13
313: astore        40
315: aload         34
317: aload         39
319: invokevirtual #22
322: dstore        41
324: aload         33
326: aload         39
328: invokevirtual #23
331: dstore        43
333: aload         33
335: invokevirtual #24
338: astore        45
340: new           #25
343: dup
344: invokespecial #26
347: astore        46
349: new           #8
352: dup
353: aload         46
355: invokespecial #27
358: astore        47
360: aload         47
362: invokevirtual #28
365: dstore        48
367: new           #25
370: dup
371: invokespecial #26
374: astore        50
376: new           #8
379: dup
380: aload         50
382: invokespecial #27
385: astore        51
387: aconst_null
388: astore        52
390: aload         51
392: aload         52
394: invokevirtual #29
397: astore        53
399: aload         51
401: iconst_0
402: invokevirtual #30
405: astore        54
407: aload         47
409: aload         54
411: invokevirtual #31
414: istore        55
416: new           #25
419: dup
420: invokespecial #26
423: astore        56
425: new           #8
428: dup
429: aload         56
431: invokespecial #27
434: astore        57
436: aload         57
438: invokevirtual #28
441: dstore        58
443: new           #25
446: dup
447: invokespecial #26
450: astore        60
452: new           #8
455: dup
456: aload         60
458: invokespecial #27
461: astore        61
463: aconst_null
464: astore        62
466: aload         61
468: aload         62
470: invokevirtual #29
473: astore        63
475: aload         61
477: iconst_0
478: invokevirtual #30
481: astore        64
483: aload         57
485: aload         64
487: invokevirtual #31
490: istore        65
492: getstatic     #10
495: astore        66
497: aload         66
499: invokevirtual #11
502: astore        67
504: getstatic     #10
507: astore        68
509: aload         68
511: invokevirtual #11
514: astore        69
516: new           #12
519: dup
520: aload         66
522: aload         69
524: invokespecial #13
527: astore        70
529: getstatic     #10
532: astore        71
534: aload         71
536: invokevirtual #11
539: astore        72
541: getstatic     #10
544: astore        73
546: aload         73
548: invokevirtual #11
551: astore        74
553: getstatic     #10
556: astore        75
558: aload         75
560: invokevirtual #11
563: astore        76
565: new           #12
568: dup
569: aload         73
571: aload         76
573: invokespecial #13
576: astore        77
578: aload         71
580: aload         76
582: invokevirtual #22
585: dstore        78
587: aload         70
589: aload         76
591: invokevirtual #23
594: dstore        80
596: aload         70
598: invokevirtual #24
601: astore        82
603: aload         82
605: invokevirtual #32
608: astore        83
610: new           #33
613: dup
614: aload         45
616: aload         54
618: aload         64
620: aload         82
622: invokespecial #34
625: astore        84
627: aload         54
629: invokevirtual #221
632: astore        85
634: aload_2
635: aload         85
637: invokevirtual #31
640: istore        86
642: aload         4
644: invokestatic  #18
647: aload         5
649: invokestatic  #18
652: aload         6
654: invokestatic  #18
657: aload         7
659: invokestatic  #18
662: aload         8
664: invokestatic  #18
667: aload         9
669: invokestatic  #18
672: aload         10
674: invokestatic  #18
677: aload         11
679: invokestatic  #18
682: aload         13
684: invokestatic  #18
687: aload         14
689: invokestatic  #18
692: aload         15
694: invokestatic  #18
697: aload         16
699: invokestatic  #18
702: aload         17
704: invokestatic  #18
707: aload         18
709: invokestatic  #18
712: aload         19
714: invokestatic  #18
717: aload         23
719: invokestatic  #18
722: dload         24
724: invokestatic  #38
727: invokestatic  #39
730: aload         26
732: invokestatic  #18
735: aload         28
737: invokestatic  #18
740: aload         29
742: invokestatic  #18
745: aload         30
747: invokestatic  #18
750: aload         31
752: invokestatic  #18
755: aload         32
757: invokestatic  #18
760: aload         34
762: invokestatic  #18
765: aload         35
767: invokestatic  #18
770: aload         36
772: invokestatic  #18
775: aload         37
777: invokestatic  #18
780: aload         38
782: invokestatic  #18
785: aload         39
787: invokestatic  #18
790: dload         41
792: invokestatic  #38
795: invokestatic  #39
798: dload         43
800: invokestatic  #38
803: invokestatic  #39
806: aload         45
808: invokestatic  #18
811: new           #40
814: dup
815: invokespecial #41
818: ldc           #42
820: invokevirtual #43
823: dload         48
825: invokevirtual #44
828: ldc           #45
830: invokevirtual #43
833: dconst_0
834: invokevirtual #44
837: ldc           #42
839: invokevirtual #43
842: invokevirtual #46
845: dload         48
847: dconst_0
848: dcmpl
849: ifne          856
852: iconst_1
853: goto          857
856: iconst_0
857: invokestatic  #47
860: aload         53
862: invokestatic  #18
865: aload         54
867: invokestatic  #18
870: new           #40
873: dup
874: invokespecial #41
877: ldc           #42
879: invokevirtual #43
882: iload         55
884: invokevirtual #48
887: ldc           #45
889: invokevirtual #43
892: iconst_0
893: invokevirtual #48
896: ldc           #42
898: invokevirtual #43
901: invokevirtual #46
904: iload         55
906: ifne          913
909: iconst_1
910: goto          914
913: iconst_0
914: invokestatic  #47
917: new           #40
920: dup
921: invokespecial #41
924: ldc           #42
926: invokevirtual #43
929: dload         58
931: invokevirtual #44
934: ldc           #45
936: invokevirtual #43
939: dconst_0
940: invokevirtual #44
943: ldc           #42
945: invokevirtual #43
948: invokevirtual #46
951: dload         58
953: dconst_0
954: dcmpl
955: ifne          962
958: iconst_1
959: goto          963
962: iconst_0
963: invokestatic  #47
966: aload         63
968: invokestatic  #18
971: aload         64
973: invokestatic  #18
976: new           #40
979: dup
980: invokespecial #41
983: ldc           #42
985: invokevirtual #43
988: iload         65
990: invokevirtual #48
993: ldc           #45
995: invokevirtual #43
998: iconst_0
999: invokevirtual #48
1002: ldc           #42
1004: invokevirtual #43
1007: invokevirtual #46
1010: iload         65
1012: ifne          1019
1015: iconst_1
1016: goto          1020
1019: iconst_0
1020: invokestatic  #47
1023: aload         66
1025: invokestatic  #18
1028: aload         67
1030: invokestatic  #18
1033: aload         68
1035: invokestatic  #18
1038: aload         69
1040: invokestatic  #18
1043: aload         71
1045: invokestatic  #18
1048: aload         72
1050: invokestatic  #18
1053: aload         73
1055: invokestatic  #18
1058: aload         74
1060: invokestatic  #18
1063: aload         75
1065: invokestatic  #18
1068: aload         76
1070: invokestatic  #18
1073: dload         78
1075: invokestatic  #38
1078: invokestatic  #39
1081: dload         80
1083: invokestatic  #38
1086: invokestatic  #39
1089: aload         82
1091: invokestatic  #18
1094: aload         83
1096: invokestatic  #18
1099: aload         85
1101: invokestatic  #18
1104: new           #40
1107: dup
1108: invokespecial #41
1111: ldc           #42
1113: invokevirtual #43
1116: iload         86
1118: invokevirtual #48
1121: ldc           #45
1123: invokevirtual #43
1126: iconst_0
1127: invokevirtual #48
1130: ldc           #42
1132: invokevirtual #43
1135: invokevirtual #46
1138: iload         86
1140: ifne          1147
1143: iconst_1
1144: goto          1148
1147: iconst_0
1148: invokestatic  #47
1151: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test093
Start line: 7554
End line: 7609
Method source code: 
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet4 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList3);
        double double5 = polyhedronsSet4.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = vector3D6.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane10 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D6, vector3D9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane17 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D13, vector3D16);
        double double18 = vector3D11.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16);
        double double19 = plane10.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D16);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane20 = plane10.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion21 = subPlane20.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane22 = polyhedronsSet4.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane20);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform23 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion24 = polyhedronsSet4.applyTransform(euclidean3DTransform23);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree26 = polyhedronsSet4.getTree(false);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion27 = polyhedronsSet1.buildNew(euclidean3DBSPTree26);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane28 = null;
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree29 = euclidean3DBSPTree26.split(euclidean3DSubHyperplane28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = euclidean3DBSPTree26.getPlus();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(subPlane20);
        org.junit.Assert.assertNotNull(euclidean2DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane22);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion24);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree26);
        org.junit.Assert.assertNotNull(euclidean3DRegion27);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree29);
        org.junit.Assert.assertNull(euclidean3DBSPTree30);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #342
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: new           #25
50: dup
51: invokespecial #26
54: astore        5
56: new           #8
59: dup
60: aload         5
62: invokespecial #27
65: astore        6
67: aload         6
69: invokevirtual #28
72: dstore        7
74: getstatic     #10
77: astore        9
79: aload         9
81: invokevirtual #11
84: astore        10
86: getstatic     #10
89: astore        11
91: aload         11
93: invokevirtual #11
96: astore        12
98: new           #12
101: dup
102: aload         9
104: aload         12
106: invokespecial #13
109: astore        13
111: getstatic     #10
114: astore        14
116: aload         14
118: invokevirtual #11
121: astore        15
123: getstatic     #10
126: astore        16
128: aload         16
130: invokevirtual #11
133: astore        17
135: getstatic     #10
138: astore        18
140: aload         18
142: invokevirtual #11
145: astore        19
147: new           #12
150: dup
151: aload         16
153: aload         19
155: invokespecial #13
158: astore        20
160: aload         14
162: aload         19
164: invokevirtual #22
167: dstore        21
169: aload         13
171: aload         19
173: invokevirtual #23
176: dstore        23
178: aload         13
180: invokevirtual #24
183: astore        25
185: aload         25
187: invokevirtual #32
190: astore        26
192: aload         6
194: aload         25
196: invokevirtual #73
199: astore        27
201: aconst_null
202: astore        28
204: aload         6
206: aload         28
208: invokevirtual #148
211: astore        29
213: aload         6
215: iconst_0
216: invokevirtual #30
219: astore        30
221: aload_2
222: aload         30
224: invokevirtual #29
227: astore        31
229: aconst_null
230: astore        32
232: aload         30
234: aload         32
236: invokevirtual #232
239: astore        33
241: aload         30
243: invokevirtual #222
246: astore        34
248: new           #40
251: dup
252: invokespecial #41
255: ldc           #42
257: invokevirtual #43
260: dload_3
261: invokevirtual #44
264: ldc           #45
266: invokevirtual #43
269: dconst_0
270: invokevirtual #44
273: ldc           #42
275: invokevirtual #43
278: invokevirtual #46
281: dload_3
282: dconst_0
283: dcmpl
284: ifne          291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #47
295: new           #40
298: dup
299: invokespecial #41
302: ldc           #42
304: invokevirtual #43
307: dload         7
309: invokevirtual #44
312: ldc           #45
314: invokevirtual #43
317: dconst_0
318: invokevirtual #44
321: ldc           #42
323: invokevirtual #43
326: invokevirtual #46
329: dload         7
331: dconst_0
332: dcmpl
333: ifne          340
336: iconst_1
337: goto          341
340: iconst_0
341: invokestatic  #47
344: aload         9
346: invokestatic  #18
349: aload         10
351: invokestatic  #18
354: aload         11
356: invokestatic  #18
359: aload         12
361: invokestatic  #18
364: aload         14
366: invokestatic  #18
369: aload         15
371: invokestatic  #18
374: aload         16
376: invokestatic  #18
379: aload         17
381: invokestatic  #18
384: aload         18
386: invokestatic  #18
389: aload         19
391: invokestatic  #18
394: dload         21
396: invokestatic  #38
399: invokestatic  #39
402: dload         23
404: invokestatic  #38
407: invokestatic  #39
410: aload         25
412: invokestatic  #18
415: aload         26
417: invokestatic  #18
420: aload         27
422: invokestatic  #18
425: aload         29
427: invokestatic  #18
430: aload         30
432: invokestatic  #18
435: aload         31
437: invokestatic  #18
440: aload         33
442: invokestatic  #18
445: aload         34
447: invokestatic  #78
450: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test094
Start line: 7612
End line: 7710
Method source code: 
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> euclidean2DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>) euclidean2DSubHyperplaneList0);
        boolean boolean2 = polygonsSet1.isEmpty();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D5 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line7 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D5, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        boolean boolean13 = line7.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line12);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line18 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, (double) 0.0f);
        line12.reset(vector2D16, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane32 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D28, vector3D31);
        double double33 = vector3D26.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        double double34 = plane25.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D31);
        plane25.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane40 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D36, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D43, vector3D46);
        double double48 = vector3D41.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        double double49 = plane40.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        plane40.revertSelf();
        double double51 = plane25.getOffset(plane40);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D52, vector3D56);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D59 = plane40.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        double double60 = vector2D16.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D59);
        org.apache.commons.math3.geometry.euclidean.twod.Line line62 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet63 = line62.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Side side64 = polygonsSet1.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line62);
        double double65 = polygonsSet1.getSize();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector66 = polygonsSet1.getBarycenter();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector2D59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(polygonsSet63);
        org.junit.Assert.assertTrue("'" + side64 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side64.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(euclidean2DVector66);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #343
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #56
36: dup
37: aload_1
38: invokespecial #57
41: astore_2
42: aload_2
43: invokevirtual #145
46: istore_3
47: new           #60
50: dup
51: dconst_0
52: ldc2_w        #61
55: invokespecial #63
58: astore        4
60: new           #64
63: dup
64: aload         4
66: dconst_0
67: invokespecial #65
70: astore        5
72: new           #60
75: dup
76: dconst_0
77: ldc2_w        #61
80: invokespecial #63
83: astore        6
85: new           #64
88: dup
89: aload         6
91: dconst_0
92: invokespecial #65
95: astore        7
97: aload         5
99: aload         7
101: invokevirtual #95
104: istore        8
106: new           #60
109: dup
110: dconst_0
111: ldc2_w        #61
114: invokespecial #63
117: astore        9
119: new           #64
122: dup
123: aload         9
125: dconst_0
126: invokespecial #65
129: astore        10
131: aload         7
133: aload         9
135: ldc2_w        #116
138: invokevirtual #100
141: getstatic     #10
144: astore        11
146: aload         11
148: invokevirtual #11
151: astore        12
153: getstatic     #10
156: astore        13
158: aload         13
160: invokevirtual #11
163: astore        14
165: new           #12
168: dup
169: aload         11
171: aload         14
173: invokespecial #13
176: astore        15
178: getstatic     #10
181: astore        16
183: aload         16
185: invokevirtual #11
188: astore        17
190: getstatic     #10
193: astore        18
195: aload         18
197: invokevirtual #11
200: astore        19
202: getstatic     #10
205: astore        20
207: aload         20
209: invokevirtual #11
212: astore        21
214: new           #12
217: dup
218: aload         18
220: aload         21
222: invokespecial #13
225: astore        22
227: aload         16
229: aload         21
231: invokevirtual #22
234: dstore        23
236: aload         15
238: aload         21
240: invokevirtual #23
243: dstore        25
245: aload         15
247: invokevirtual #20
250: getstatic     #10
253: astore        27
255: aload         27
257: invokevirtual #11
260: astore        28
262: getstatic     #10
265: astore        29
267: aload         29
269: invokevirtual #11
272: astore        30
274: new           #12
277: dup
278: aload         27
280: aload         30
282: invokespecial #13
285: astore        31
287: getstatic     #10
290: astore        32
292: aload         32
294: invokevirtual #11
297: astore        33
299: getstatic     #10
302: astore        34
304: aload         34
306: invokevirtual #11
309: astore        35
311: getstatic     #10
314: astore        36
316: aload         36
318: invokevirtual #11
321: astore        37
323: new           #12
326: dup
327: aload         34
329: aload         37
331: invokespecial #13
334: astore        38
336: aload         32
338: aload         37
340: invokevirtual #22
343: dstore        39
345: aload         31
347: aload         37
349: invokevirtual #23
352: dstore        41
354: aload         31
356: invokevirtual #20
359: aload         15
361: aload         31
363: invokevirtual #82
366: dstore        43
368: getstatic     #10
371: astore        45
373: getstatic     #10
376: astore        46
378: aload         46
380: invokevirtual #11
383: astore        47
385: getstatic     #10
388: astore        48
390: aload         48
392: invokevirtual #11
395: astore        49
397: new           #12
400: dup
401: aload         46
403: aload         49
405: invokespecial #13
408: astore        50
410: aload         45
412: aload         49
414: invokestatic  #96
417: astore        51
419: aload         31
421: aload         49
423: invokevirtual #97
426: astore        52
428: aload         9
430: aload         52
432: invokevirtual #118
435: dstore        53
437: new           #64
440: dup
441: aload         9
443: ldc2_w        #119
446: invokespecial #65
449: astore        55
451: aload         55
453: invokevirtual #121
456: astore        56
458: aload_2
459: aload         55
461: invokevirtual #101
464: astore        57
466: aload_2
467: invokevirtual #210
470: dstore        58
472: aload_2
473: invokevirtual #89
476: astore        60
478: new           #40
481: dup
482: invokespecial #41
485: ldc           #42
487: invokevirtual #43
490: iload_3
491: invokevirtual #48
494: ldc           #45
496: invokevirtual #43
499: iconst_0
500: invokevirtual #48
503: ldc           #42
505: invokevirtual #43
508: invokevirtual #46
511: iload_3
512: ifne          519
515: iconst_1
516: goto          520
519: iconst_0
520: invokestatic  #47
523: new           #40
526: dup
527: invokespecial #41
530: ldc           #42
532: invokevirtual #43
535: iload         8
537: invokevirtual #48
540: ldc           #45
542: invokevirtual #43
545: iconst_1
546: invokevirtual #48
549: ldc           #42
551: invokevirtual #43
554: invokevirtual #46
557: iload         8
559: iconst_1
560: if_icmpne     567
563: iconst_1
564: goto          568
567: iconst_0
568: invokestatic  #47
571: aload         11
573: invokestatic  #18
576: aload         12
578: invokestatic  #18
581: aload         13
583: invokestatic  #18
586: aload         14
588: invokestatic  #18
591: aload         16
593: invokestatic  #18
596: aload         17
598: invokestatic  #18
601: aload         18
603: invokestatic  #18
606: aload         19
608: invokestatic  #18
611: aload         20
613: invokestatic  #18
616: aload         21
618: invokestatic  #18
621: dload         23
623: invokestatic  #38
626: invokestatic  #39
629: dload         25
631: invokestatic  #38
634: invokestatic  #39
637: aload         27
639: invokestatic  #18
642: aload         28
644: invokestatic  #18
647: aload         29
649: invokestatic  #18
652: aload         30
654: invokestatic  #18
657: aload         32
659: invokestatic  #18
662: aload         33
664: invokestatic  #18
667: aload         34
669: invokestatic  #18
672: aload         35
674: invokestatic  #18
677: aload         36
679: invokestatic  #18
682: aload         37
684: invokestatic  #18
687: dload         39
689: invokestatic  #38
692: invokestatic  #39
695: dload         41
697: invokestatic  #38
700: invokestatic  #39
703: dload         43
705: invokestatic  #38
708: invokestatic  #39
711: aload         45
713: invokestatic  #18
716: aload         46
718: invokestatic  #18
721: aload         47
723: invokestatic  #18
726: aload         48
728: invokestatic  #18
731: aload         49
733: invokestatic  #18
736: aload         51
738: invokestatic  #18
741: aload         52
743: invokestatic  #18
746: dload         53
748: invokestatic  #38
751: invokestatic  #39
754: aload         56
756: invokestatic  #18
759: new           #40
762: dup
763: invokespecial #41
766: ldc           #42
768: invokevirtual #43
771: aload         57
773: invokevirtual #102
776: ldc           #45
778: invokevirtual #43
781: getstatic     #103
784: invokevirtual #102
787: ldc           #42
789: invokevirtual #43
792: invokevirtual #46
795: aload         57
797: getstatic     #103
800: invokevirtual #104
803: invokestatic  #47
806: new           #40
809: dup
810: invokespecial #41
813: ldc           #42
815: invokevirtual #43
818: dload         58
820: invokevirtual #44
823: ldc           #45
825: invokevirtual #43
828: ldc2_w        #212
831: invokevirtual #44
834: ldc           #42
836: invokevirtual #43
839: invokevirtual #46
842: dload         58
844: ldc2_w        #212
847: dcmpl
848: ifne          855
851: iconst_1
852: goto          856
855: iconst_0
856: invokestatic  #47
859: aload         60
861: invokestatic  #18
864: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test095
Start line: 7713
End line: 7735
Method source code: 
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet1 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean2 = polygonsSet0.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet1);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree3 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet4 = polygonsSet0.buildNew(euclidean2DBSPTree3);
        double double5 = polygonsSet0.getSize();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray6 = polygonsSet0.getVertices();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = polygonsSet0.isEmpty(euclidean2DBSPTree7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(polygonsSet4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(vector2DArray6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #344
20: aastore
21: invokevirtual #7
24: pop
25: new           #56
28: dup
29: invokespecial #87
32: astore_1
33: new           #56
36: dup
37: invokespecial #87
40: astore_2
41: aload_1
42: aload_2
43: invokevirtual #88
46: istore_3
47: aconst_null
48: astore        4
50: aload_1
51: aload         4
53: invokevirtual #144
56: astore        5
58: aload_1
59: invokevirtual #210
62: dstore        6
64: aload_1
65: invokevirtual #143
68: astore        8
70: aconst_null
71: astore        9
73: aload_1
74: aload         9
76: invokevirtual #90
79: istore        10
81: ldc           #15
83: invokestatic  #16
86: goto          91
89: astore        10
91: new           #40
94: dup
95: invokespecial #41
98: ldc           #42
100: invokevirtual #43
103: iload_3
104: invokevirtual #48
107: ldc           #45
109: invokevirtual #43
112: iconst_1
113: invokevirtual #48
116: ldc           #42
118: invokevirtual #43
121: invokevirtual #46
124: iload_3
125: iconst_1
126: if_icmpne     133
129: iconst_1
130: goto          134
133: iconst_0
134: invokestatic  #47
137: aload         5
139: invokestatic  #18
142: new           #40
145: dup
146: invokespecial #41
149: ldc           #42
151: invokevirtual #43
154: dload         6
156: invokevirtual #44
159: ldc           #45
161: invokevirtual #43
164: ldc2_w        #212
167: invokevirtual #44
170: ldc           #42
172: invokevirtual #43
175: invokevirtual #46
178: dload         6
180: ldc2_w        #212
183: dcmpl
184: ifne          191
187: iconst_1
188: goto          192
191: iconst_0
192: invokestatic  #47
195: aload         8
197: invokestatic  #18
200: return
Exception table:
from    to  target type
73    86    89   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test096
Start line: 7738
End line: 7830
Method source code: 
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree52 = euclidean3DBSPTree51.getMinus();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree53 = euclidean3DBSPTree51.getParent();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree52);
        org.junit.Assert.assertNull(euclidean3DBSPTree53);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #345
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: new           #25
133: dup
134: invokespecial #26
137: astore        18
139: new           #8
142: dup
143: aload         18
145: invokespecial #27
148: astore        19
150: aload         19
152: invokevirtual #28
155: dstore        20
157: new           #25
160: dup
161: invokespecial #26
164: astore        22
166: new           #8
169: dup
170: aload         22
172: invokespecial #27
175: astore        23
177: aconst_null
178: astore        24
180: aload         23
182: aload         24
184: invokevirtual #29
187: astore        25
189: aload         23
191: iconst_0
192: invokevirtual #30
195: astore        26
197: aload         19
199: aload         26
201: invokevirtual #31
204: istore        27
206: new           #25
209: dup
210: invokespecial #26
213: astore        28
215: new           #8
218: dup
219: aload         28
221: invokespecial #27
224: astore        29
226: aload         29
228: invokevirtual #28
231: dstore        30
233: new           #25
236: dup
237: invokespecial #26
240: astore        32
242: new           #8
245: dup
246: aload         32
248: invokespecial #27
251: astore        33
253: aconst_null
254: astore        34
256: aload         33
258: aload         34
260: invokevirtual #29
263: astore        35
265: aload         33
267: iconst_0
268: invokevirtual #30
271: astore        36
273: aload         29
275: aload         36
277: invokevirtual #31
280: istore        37
282: getstatic     #10
285: astore        38
287: aload         38
289: invokevirtual #11
292: astore        39
294: getstatic     #10
297: astore        40
299: aload         40
301: invokevirtual #11
304: astore        41
306: new           #12
309: dup
310: aload         38
312: aload         41
314: invokespecial #13
317: astore        42
319: getstatic     #10
322: astore        43
324: aload         43
326: invokevirtual #11
329: astore        44
331: getstatic     #10
334: astore        45
336: aload         45
338: invokevirtual #11
341: astore        46
343: getstatic     #10
346: astore        47
348: aload         47
350: invokevirtual #11
353: astore        48
355: new           #12
358: dup
359: aload         45
361: aload         48
363: invokespecial #13
366: astore        49
368: aload         43
370: aload         48
372: invokevirtual #22
375: dstore        50
377: aload         42
379: aload         48
381: invokevirtual #23
384: dstore        52
386: aload         42
388: invokevirtual #24
391: astore        54
393: aload         54
395: invokevirtual #32
398: astore        55
400: new           #33
403: dup
404: aload         17
406: aload         26
408: aload         36
410: aload         54
412: invokespecial #34
415: astore        56
417: aload         56
419: invokevirtual #77
422: astore        57
424: aload         56
426: invokevirtual #126
429: astore        58
431: aload_1
432: invokestatic  #18
435: aload_2
436: invokestatic  #18
439: aload_3
440: invokestatic  #18
443: aload         4
445: invokestatic  #18
448: aload         6
450: invokestatic  #18
453: aload         7
455: invokestatic  #18
458: aload         8
460: invokestatic  #18
463: aload         9
465: invokestatic  #18
468: aload         10
470: invokestatic  #18
473: aload         11
475: invokestatic  #18
478: dload         13
480: invokestatic  #38
483: invokestatic  #39
486: dload         15
488: invokestatic  #38
491: invokestatic  #39
494: aload         17
496: invokestatic  #18
499: new           #40
502: dup
503: invokespecial #41
506: ldc           #42
508: invokevirtual #43
511: dload         20
513: invokevirtual #44
516: ldc           #45
518: invokevirtual #43
521: dconst_0
522: invokevirtual #44
525: ldc           #42
527: invokevirtual #43
530: invokevirtual #46
533: dload         20
535: dconst_0
536: dcmpl
537: ifne          544
540: iconst_1
541: goto          545
544: iconst_0
545: invokestatic  #47
548: aload         25
550: invokestatic  #18
553: aload         26
555: invokestatic  #18
558: new           #40
561: dup
562: invokespecial #41
565: ldc           #42
567: invokevirtual #43
570: iload         27
572: invokevirtual #48
575: ldc           #45
577: invokevirtual #43
580: iconst_0
581: invokevirtual #48
584: ldc           #42
586: invokevirtual #43
589: invokevirtual #46
592: iload         27
594: ifne          601
597: iconst_1
598: goto          602
601: iconst_0
602: invokestatic  #47
605: new           #40
608: dup
609: invokespecial #41
612: ldc           #42
614: invokevirtual #43
617: dload         30
619: invokevirtual #44
622: ldc           #45
624: invokevirtual #43
627: dconst_0
628: invokevirtual #44
631: ldc           #42
633: invokevirtual #43
636: invokevirtual #46
639: dload         30
641: dconst_0
642: dcmpl
643: ifne          650
646: iconst_1
647: goto          651
650: iconst_0
651: invokestatic  #47
654: aload         35
656: invokestatic  #18
659: aload         36
661: invokestatic  #18
664: new           #40
667: dup
668: invokespecial #41
671: ldc           #42
673: invokevirtual #43
676: iload         37
678: invokevirtual #48
681: ldc           #45
683: invokevirtual #43
686: iconst_0
687: invokevirtual #48
690: ldc           #42
692: invokevirtual #43
695: invokevirtual #46
698: iload         37
700: ifne          707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #47
711: aload         38
713: invokestatic  #18
716: aload         39
718: invokestatic  #18
721: aload         40
723: invokestatic  #18
726: aload         41
728: invokestatic  #18
731: aload         43
733: invokestatic  #18
736: aload         44
738: invokestatic  #18
741: aload         45
743: invokestatic  #18
746: aload         46
748: invokestatic  #18
751: aload         47
753: invokestatic  #18
756: aload         48
758: invokestatic  #18
761: dload         50
763: invokestatic  #38
766: invokestatic  #39
769: dload         52
771: invokestatic  #38
774: invokestatic  #39
777: aload         54
779: invokestatic  #18
782: aload         55
784: invokestatic  #18
787: aload         57
789: invokestatic  #18
792: aload         58
794: invokestatic  #78
797: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test097
Start line: 7833
End line: 7881
Method source code: 
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        double double22 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = polyhedronsSet1.getTree(true);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree25 = euclidean3DBSPTree24.copySelf();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree24);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #346
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aconst_null
174: astore        24
176: aload_2
177: aload         24
179: invokevirtual #148
182: astore        25
184: aload_2
185: invokevirtual #70
188: dstore        26
190: aload_2
191: iconst_1
192: invokevirtual #30
195: astore        28
197: aload         28
199: invokevirtual #221
202: astore        29
204: new           #40
207: dup
208: invokespecial #41
211: ldc           #42
213: invokevirtual #43
216: dload_3
217: invokevirtual #44
220: ldc           #45
222: invokevirtual #43
225: dconst_0
226: invokevirtual #44
229: ldc           #42
231: invokevirtual #43
234: invokevirtual #46
237: dload_3
238: dconst_0
239: dcmpl
240: ifne          247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #47
251: aload         5
253: invokestatic  #18
256: aload         6
258: invokestatic  #18
261: aload         7
263: invokestatic  #18
266: aload         8
268: invokestatic  #18
271: aload         10
273: invokestatic  #18
276: aload         11
278: invokestatic  #18
281: aload         12
283: invokestatic  #18
286: aload         13
288: invokestatic  #18
291: aload         14
293: invokestatic  #18
296: aload         15
298: invokestatic  #18
301: dload         17
303: invokestatic  #38
306: invokestatic  #39
309: dload         19
311: invokestatic  #38
314: invokestatic  #39
317: aload         21
319: invokestatic  #18
322: aload         22
324: invokestatic  #18
327: aload         23
329: invokestatic  #18
332: aload         25
334: invokestatic  #18
337: new           #40
340: dup
341: invokespecial #41
344: ldc           #42
346: invokevirtual #43
349: dload         26
351: invokevirtual #44
354: ldc           #45
356: invokevirtual #43
359: dconst_0
360: invokevirtual #44
363: ldc           #42
365: invokevirtual #43
368: invokevirtual #46
371: dload         26
373: dconst_0
374: dcmpl
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #47
386: aload         28
388: invokestatic  #18
391: aload         29
393: invokestatic  #18
396: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test098
Start line: 7884
End line: 7933
Method source code: 
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        double double23 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        double double24 = plane15.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane25 = plane15.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion26 = subPlane25.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane27 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane4, euclidean2DRegion26);
        double double28 = subPlane27.getSize();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(subPlane25);
        org.junit.Assert.assertNotNull(euclidean2DRegion26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #347
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: new           #60
59: dup
60: dconst_0
61: ldc2_w        #61
64: invokespecial #63
67: astore        6
69: new           #64
72: dup
73: aload         6
75: dconst_0
76: invokespecial #65
79: astore        7
81: aload         5
83: aload         6
85: invokevirtual #66
88: astore        8
90: getstatic     #10
93: astore        9
95: aload         9
97: invokevirtual #11
100: astore        10
102: getstatic     #10
105: astore        11
107: aload         11
109: invokevirtual #11
112: astore        12
114: new           #12
117: dup
118: aload         9
120: aload         12
122: invokespecial #13
125: astore        13
127: getstatic     #10
130: astore        14
132: aload         14
134: invokevirtual #11
137: astore        15
139: getstatic     #10
142: astore        16
144: aload         16
146: invokevirtual #11
149: astore        17
151: getstatic     #10
154: astore        18
156: aload         18
158: invokevirtual #11
161: astore        19
163: new           #12
166: dup
167: aload         16
169: aload         19
171: invokespecial #13
174: astore        20
176: aload         14
178: aload         19
180: invokevirtual #22
183: dstore        21
185: aload         13
187: aload         19
189: invokevirtual #23
192: dstore        23
194: aload         13
196: invokevirtual #24
199: astore        25
201: aload         25
203: invokevirtual #32
206: astore        26
208: new           #67
211: dup
212: aload         5
214: aload         26
216: invokespecial #68
219: astore        27
221: aload         27
223: invokevirtual #219
226: dstore        28
228: aload_1
229: invokestatic  #18
232: aload_2
233: invokestatic  #18
236: aload_3
237: invokestatic  #18
240: aload         4
242: invokestatic  #18
245: aload         8
247: invokestatic  #18
250: aload         9
252: invokestatic  #18
255: aload         10
257: invokestatic  #18
260: aload         11
262: invokestatic  #18
265: aload         12
267: invokestatic  #18
270: aload         14
272: invokestatic  #18
275: aload         15
277: invokestatic  #18
280: aload         16
282: invokestatic  #18
285: aload         17
287: invokestatic  #18
290: aload         18
292: invokestatic  #18
295: aload         19
297: invokestatic  #18
300: dload         21
302: invokestatic  #38
305: invokestatic  #39
308: dload         23
310: invokestatic  #38
313: invokestatic  #39
316: aload         25
318: invokestatic  #18
321: aload         26
323: invokestatic  #18
326: new           #40
329: dup
330: invokespecial #41
333: ldc           #42
335: invokevirtual #43
338: dload         28
340: invokevirtual #44
343: ldc           #45
345: invokevirtual #43
348: ldc2_w        #212
351: invokevirtual #44
354: ldc           #42
356: invokevirtual #43
359: invokevirtual #46
362: dload         28
364: ldc2_w        #212
367: dcmpl
368: ifne          375
371: iconst_1
372: goto          376
375: iconst_0
376: invokestatic  #47
379: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test099
Start line: 7936
End line: 8014
Method source code: 
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = plane4.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D7);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        double double23 = vector3D16.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        double double24 = plane15.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D21);
        plane15.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane30 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D26, vector3D29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        double double38 = vector3D31.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36);
        double double39 = plane30.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D36);
        plane30.revertSelf();
        double double41 = plane15.getOffset(plane30);
        org.apache.commons.math3.geometry.euclidean.threed.Line line42 = plane4.intersection(plane15);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane43 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane44 = plane4.wholeHyperplane();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(line42);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane43);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane44);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #348
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: new           #60
59: dup
60: dconst_0
61: ldc2_w        #61
64: invokespecial #63
67: astore        6
69: new           #64
72: dup
73: aload         6
75: dconst_0
76: invokespecial #65
79: astore        7
81: aload         5
83: aload         6
85: invokevirtual #66
88: astore        8
90: getstatic     #10
93: astore        9
95: aload         9
97: invokevirtual #11
100: astore        10
102: getstatic     #10
105: astore        11
107: aload         11
109: invokevirtual #11
112: astore        12
114: new           #12
117: dup
118: aload         9
120: aload         12
122: invokespecial #13
125: astore        13
127: getstatic     #10
130: astore        14
132: aload         14
134: invokevirtual #11
137: astore        15
139: getstatic     #10
142: astore        16
144: aload         16
146: invokevirtual #11
149: astore        17
151: getstatic     #10
154: astore        18
156: aload         18
158: invokevirtual #11
161: astore        19
163: new           #12
166: dup
167: aload         16
169: aload         19
171: invokespecial #13
174: astore        20
176: aload         14
178: aload         19
180: invokevirtual #22
183: dstore        21
185: aload         13
187: aload         19
189: invokevirtual #23
192: dstore        23
194: aload         13
196: invokevirtual #20
199: getstatic     #10
202: astore        25
204: aload         25
206: invokevirtual #11
209: astore        26
211: getstatic     #10
214: astore        27
216: aload         27
218: invokevirtual #11
221: astore        28
223: new           #12
226: dup
227: aload         25
229: aload         28
231: invokespecial #13
234: astore        29
236: getstatic     #10
239: astore        30
241: aload         30
243: invokevirtual #11
246: astore        31
248: getstatic     #10
251: astore        32
253: aload         32
255: invokevirtual #11
258: astore        33
260: getstatic     #10
263: astore        34
265: aload         34
267: invokevirtual #11
270: astore        35
272: new           #12
275: dup
276: aload         32
278: aload         35
280: invokespecial #13
283: astore        36
285: aload         30
287: aload         35
289: invokevirtual #22
292: dstore        37
294: aload         29
296: aload         35
298: invokevirtual #23
301: dstore        39
303: aload         29
305: invokevirtual #20
308: aload         13
310: aload         29
312: invokevirtual #82
315: dstore        41
317: aload         5
319: aload         13
321: invokevirtual #134
324: astore        43
326: aload         5
328: invokevirtual #24
331: astore        44
333: aload         5
335: invokevirtual #24
338: astore        45
340: aload_1
341: invokestatic  #18
344: aload_2
345: invokestatic  #18
348: aload_3
349: invokestatic  #18
352: aload         4
354: invokestatic  #18
357: aload         8
359: invokestatic  #18
362: aload         9
364: invokestatic  #18
367: aload         10
369: invokestatic  #18
372: aload         11
374: invokestatic  #18
377: aload         12
379: invokestatic  #18
382: aload         14
384: invokestatic  #18
387: aload         15
389: invokestatic  #18
392: aload         16
394: invokestatic  #18
397: aload         17
399: invokestatic  #18
402: aload         18
404: invokestatic  #18
407: aload         19
409: invokestatic  #18
412: dload         21
414: invokestatic  #38
417: invokestatic  #39
420: dload         23
422: invokestatic  #38
425: invokestatic  #39
428: aload         25
430: invokestatic  #18
433: aload         26
435: invokestatic  #18
438: aload         27
440: invokestatic  #18
443: aload         28
445: invokestatic  #18
448: aload         30
450: invokestatic  #18
453: aload         31
455: invokestatic  #18
458: aload         32
460: invokestatic  #18
463: aload         33
465: invokestatic  #18
468: aload         34
470: invokestatic  #18
473: aload         35
475: invokestatic  #18
478: dload         37
480: invokestatic  #38
483: invokestatic  #39
486: dload         39
488: invokestatic  #38
491: invokestatic  #39
494: dload         41
496: invokestatic  #38
499: invokestatic  #39
502: aload         43
504: invokestatic  #18
507: aload         44
509: invokestatic  #18
512: aload         45
514: invokestatic  #18
517: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test100
Start line: 8017
End line: 8103
Method source code: 
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet0 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = vector3D1.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane5 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D1, vector3D4);
        plane5.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D9, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D8, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D8.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D15);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector17 = plane5.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D7);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane18 = plane5.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = plane5.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line24 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D22, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line29 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D27, (double) 0.0f);
        boolean boolean30 = line24.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D38 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line40 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D38, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = plane35.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D38);
        double double42 = line29.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D38);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D45 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str46 = vector2D45.toString();
        double double47 = vector2D38.distanceInf((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D45);
        double double48 = vector2D45.getNormInf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = plane19.getPointAt(vector2D45, 1.5232132235179132d);
        org.apache.commons.math3.geometry.partitioning.Side side51 = polyhedronsSet0.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane19);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList52 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet53 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList52);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree54 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion55 = polyhedronsSet53.buildNew(euclidean3DBSPTree54);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree57 = polyhedronsSet53.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet58 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree57);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector59 = null;
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree60 = euclidean3DBSPTree57.getCell(euclidean3DVector59);
        boolean boolean61 = polyhedronsSet0.isEmpty(euclidean3DBSPTree57);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree62 = euclidean3DBSPTree57.copySelf();
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(euclidean2DVector17);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane18);
        org.junit.Assert.assertNotNull(plane19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "{0; -0.43}" + "'", str46, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.428182669496151d + "'", double48 == 0.428182669496151d);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertTrue("'" + side51 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side51.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertNotNull(euclidean3DRegion55);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree57);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree62);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #349
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #334
32: astore_1
33: getstatic     #10
36: astore_2
37: aload_2
38: invokevirtual #11
41: astore_3
42: getstatic     #10
45: astore        4
47: aload         4
49: invokevirtual #11
52: astore        5
54: new           #12
57: dup
58: aload_2
59: aload         5
61: invokespecial #13
64: astore        6
66: aload         6
68: invokevirtual #20
71: getstatic     #10
74: astore        7
76: getstatic     #10
79: astore        8
81: getstatic     #10
84: astore        9
86: aload         9
88: invokevirtual #11
91: astore        10
93: getstatic     #10
96: astore        11
98: aload         11
100: invokevirtual #11
103: astore        12
105: new           #12
108: dup
109: aload         9
111: aload         12
113: invokespecial #13
116: astore        13
118: aload         8
120: aload         12
122: invokestatic  #96
125: astore        14
127: aload         8
129: invokevirtual #110
132: astore        15
134: aload         7
136: aload         15
138: invokestatic  #96
141: astore        16
143: aload         6
145: aload         7
147: invokevirtual #97
150: astore        17
152: aload         6
154: invokevirtual #24
157: astore        18
159: aload         6
161: invokevirtual #130
164: astore        19
166: new           #60
169: dup
170: dconst_0
171: ldc2_w        #61
174: invokespecial #63
177: astore        20
179: new           #64
182: dup
183: aload         20
185: dconst_0
186: invokespecial #65
189: astore        21
191: new           #60
194: dup
195: dconst_0
196: ldc2_w        #61
199: invokespecial #63
202: astore        22
204: new           #64
207: dup
208: aload         22
210: dconst_0
211: invokespecial #65
214: astore        23
216: aload         21
218: aload         23
220: invokevirtual #95
223: istore        24
225: getstatic     #10
228: astore        25
230: aload         25
232: invokevirtual #11
235: astore        26
237: getstatic     #10
240: astore        27
242: aload         27
244: invokevirtual #11
247: astore        28
249: new           #12
252: dup
253: aload         25
255: aload         28
257: invokespecial #13
260: astore        29
262: new           #60
265: dup
266: dconst_0
267: ldc2_w        #61
270: invokespecial #63
273: astore        30
275: new           #64
278: dup
279: aload         30
281: dconst_0
282: invokespecial #65
285: astore        31
287: aload         29
289: aload         30
291: invokevirtual #66
294: astore        32
296: aload         23
298: aload         30
300: invokevirtual #191
303: dstore        33
305: new           #60
308: dup
309: dconst_0
310: ldc2_w        #61
313: invokespecial #63
316: astore        35
318: aload         35
320: invokevirtual #192
323: astore        36
325: aload         30
327: aload         35
329: invokevirtual #193
332: dstore        37
334: aload         35
336: invokevirtual #194
339: dstore        39
341: aload         19
343: aload         35
345: ldc2_w        #195
348: invokevirtual #197
351: astore        41
353: aload_1
354: aload         19
356: invokevirtual #14
359: astore        42
361: new           #25
364: dup
365: invokespecial #26
368: astore        43
370: new           #8
373: dup
374: aload         43
376: invokespecial #27
379: astore        44
381: aconst_null
382: astore        45
384: aload         44
386: aload         45
388: invokevirtual #29
391: astore        46
393: aload         44
395: iconst_0
396: invokevirtual #30
399: astore        47
401: new           #8
404: dup
405: aload         47
407: invokespecial #9
410: astore        48
412: aconst_null
413: astore        49
415: aload         47
417: aload         49
419: invokevirtual #350
422: astore        50
424: aload_1
425: aload         47
427: invokevirtual #31
430: istore        51
432: aload         47
434: invokevirtual #221
437: astore        52
439: aload_2
440: invokestatic  #18
443: aload_3
444: invokestatic  #18
447: aload         4
449: invokestatic  #18
452: aload         5
454: invokestatic  #18
457: aload         7
459: invokestatic  #18
462: aload         8
464: invokestatic  #18
467: aload         9
469: invokestatic  #18
472: aload         10
474: invokestatic  #18
477: aload         11
479: invokestatic  #18
482: aload         12
484: invokestatic  #18
487: aload         14
489: invokestatic  #18
492: aload         15
494: invokestatic  #18
497: aload         16
499: invokestatic  #18
502: aload         17
504: invokestatic  #18
507: aload         18
509: invokestatic  #18
512: aload         19
514: invokestatic  #18
517: new           #40
520: dup
521: invokespecial #41
524: ldc           #42
526: invokevirtual #43
529: iload         24
531: invokevirtual #48
534: ldc           #45
536: invokevirtual #43
539: iconst_1
540: invokevirtual #48
543: ldc           #42
545: invokevirtual #43
548: invokevirtual #46
551: iload         24
553: iconst_1
554: if_icmpne     561
557: iconst_1
558: goto          562
561: iconst_0
562: invokestatic  #47
565: aload         25
567: invokestatic  #18
570: aload         26
572: invokestatic  #18
575: aload         27
577: invokestatic  #18
580: aload         28
582: invokestatic  #18
585: aload         32
587: invokestatic  #18
590: new           #40
593: dup
594: invokespecial #41
597: ldc           #42
599: invokevirtual #43
602: dload         33
604: invokevirtual #44
607: ldc           #45
609: invokevirtual #43
612: dconst_0
613: invokevirtual #44
616: ldc           #42
618: invokevirtual #43
621: invokevirtual #46
624: dload         33
626: dconst_0
627: dcmpl
628: ifne          635
631: iconst_1
632: goto          636
635: iconst_0
636: invokestatic  #47
639: new           #40
642: dup
643: invokespecial #41
646: ldc           #42
648: invokevirtual #43
651: aload         36
653: invokevirtual #43
656: ldc           #201
658: invokevirtual #43
661: invokevirtual #46
664: aload         36
666: ldc           #202
668: invokestatic  #203
671: new           #40
674: dup
675: invokespecial #41
678: ldc           #42
680: invokevirtual #43
683: dload         37
685: invokevirtual #44
688: ldc           #45
690: invokevirtual #43
693: dconst_0
694: invokevirtual #44
697: ldc           #42
699: invokevirtual #43
702: invokevirtual #46
705: dload         37
707: dconst_0
708: dcmpl
709: ifne          716
712: iconst_1
713: goto          717
716: iconst_0
717: invokestatic  #47
720: new           #40
723: dup
724: invokespecial #41
727: ldc           #42
729: invokevirtual #43
732: dload         39
734: invokevirtual #44
737: ldc           #45
739: invokevirtual #43
742: ldc2_w        #176
745: invokevirtual #44
748: ldc           #42
750: invokevirtual #43
753: invokevirtual #46
756: dload         39
758: ldc2_w        #176
761: dcmpl
762: ifne          769
765: iconst_1
766: goto          770
769: iconst_0
770: invokestatic  #47
773: aload         41
775: invokestatic  #18
778: new           #40
781: dup
782: invokespecial #41
785: ldc           #42
787: invokevirtual #43
790: aload         42
792: invokevirtual #102
795: ldc           #45
797: invokevirtual #43
800: getstatic     #103
803: invokevirtual #102
806: ldc           #42
808: invokevirtual #43
811: invokevirtual #46
814: aload         42
816: getstatic     #103
819: invokevirtual #104
822: invokestatic  #47
825: aload         46
827: invokestatic  #18
830: aload         47
832: invokestatic  #18
835: aload         50
837: invokestatic  #18
840: new           #40
843: dup
844: invokespecial #41
847: ldc           #42
849: invokevirtual #43
852: iload         51
854: invokevirtual #48
857: ldc           #45
859: invokevirtual #43
862: iconst_0
863: invokevirtual #48
866: ldc           #42
868: invokevirtual #43
871: invokevirtual #46
874: iload         51
876: ifne          883
879: iconst_1
880: goto          884
883: iconst_0
884: invokestatic  #47
887: aload         52
889: invokestatic  #18
892: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test101
Start line: 8106
End line: 8218
Method source code: 
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line4 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D2, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        boolean boolean8 = vector2D7.isInfinite();
        line4.translateToPoint(vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet10 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractRegion11 = polygonsSet10.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str17 = vector2D16.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line22 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D20, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line27 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D25, (double) 0.0f);
        boolean boolean28 = line22.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line27);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line33 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D31, (double) 0.0f);
        line27.reset(vector2D31, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane40 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D36, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D43, vector3D46);
        double double48 = vector3D41.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        double double49 = plane40.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        plane40.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane55 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D51, vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = vector3D60.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane62 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D58, vector3D61);
        double double63 = vector3D56.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61);
        double double64 = plane55.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61);
        plane55.revertSelf();
        double double66 = plane40.getOffset(plane55);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D70.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane72 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D68, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D67, vector3D71);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D74 = plane55.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        double double75 = vector2D31.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D74);
        double double76 = vector2D16.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D77 = vector2D12.subtract((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        org.apache.commons.math3.geometry.euclidean.twod.Line line79 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, 2.2250738585072014E-308d);
        double double80 = line79.getOriginOffset();
        org.apache.commons.math3.geometry.partitioning.Side side81 = euclidean2DAbstractRegion11.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line79);
        boolean boolean82 = line4.isParallelTo(line79);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine83 = line79.wholeHyperplane();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(euclidean2DAbstractRegion11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{0; -0.43}" + "'", str17, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector2D74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.1833403984568501d + "'", double76 == 0.1833403984568501d);
        org.junit.Assert.assertNotNull(vector2D77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.428182669496151d) + "'", double80 == (-0.428182669496151d));
        org.junit.Assert.assertTrue("'" + side81 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side81.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(subLine83);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #351
20: aastore
21: invokevirtual #7
24: pop
25: new           #60
28: dup
29: dconst_0
30: ldc2_w        #61
33: invokespecial #63
36: astore_1
37: new           #64
40: dup
41: aload_1
42: dconst_0
43: invokespecial #65
46: astore_2
47: new           #60
50: dup
51: dconst_0
52: ldc2_w        #61
55: invokespecial #63
58: astore_3
59: aload_3
60: invokevirtual #352
63: istore        4
65: aload_2
66: aload_3
67: invokevirtual #353
70: new           #56
73: dup
74: invokespecial #87
77: astore        5
79: aload         5
81: invokevirtual #243
84: astore        6
86: getstatic     #300
89: astore        7
91: new           #60
94: dup
95: dconst_0
96: ldc2_w        #61
99: invokespecial #63
102: astore        8
104: aload         8
106: invokevirtual #192
109: astore        9
111: new           #60
114: dup
115: dconst_0
116: ldc2_w        #61
119: invokespecial #63
122: astore        10
124: new           #64
127: dup
128: aload         10
130: dconst_0
131: invokespecial #65
134: astore        11
136: new           #60
139: dup
140: dconst_0
141: ldc2_w        #61
144: invokespecial #63
147: astore        12
149: new           #64
152: dup
153: aload         12
155: dconst_0
156: invokespecial #65
159: astore        13
161: aload         11
163: aload         13
165: invokevirtual #95
168: istore        14
170: new           #60
173: dup
174: dconst_0
175: ldc2_w        #61
178: invokespecial #63
181: astore        15
183: new           #64
186: dup
187: aload         15
189: dconst_0
190: invokespecial #65
193: astore        16
195: aload         13
197: aload         15
199: ldc2_w        #116
202: invokevirtual #100
205: getstatic     #10
208: astore        17
210: aload         17
212: invokevirtual #11
215: astore        18
217: getstatic     #10
220: astore        19
222: aload         19
224: invokevirtual #11
227: astore        20
229: new           #12
232: dup
233: aload         17
235: aload         20
237: invokespecial #13
240: astore        21
242: getstatic     #10
245: astore        22
247: aload         22
249: invokevirtual #11
252: astore        23
254: getstatic     #10
257: astore        24
259: aload         24
261: invokevirtual #11
264: astore        25
266: getstatic     #10
269: astore        26
271: aload         26
273: invokevirtual #11
276: astore        27
278: new           #12
281: dup
282: aload         24
284: aload         27
286: invokespecial #13
289: astore        28
291: aload         22
293: aload         27
295: invokevirtual #22
298: dstore        29
300: aload         21
302: aload         27
304: invokevirtual #23
307: dstore        31
309: aload         21
311: invokevirtual #20
314: getstatic     #10
317: astore        33
319: aload         33
321: invokevirtual #11
324: astore        34
326: getstatic     #10
329: astore        35
331: aload         35
333: invokevirtual #11
336: astore        36
338: new           #12
341: dup
342: aload         33
344: aload         36
346: invokespecial #13
349: astore        37
351: getstatic     #10
354: astore        38
356: aload         38
358: invokevirtual #11
361: astore        39
363: getstatic     #10
366: astore        40
368: aload         40
370: invokevirtual #11
373: astore        41
375: getstatic     #10
378: astore        42
380: aload         42
382: invokevirtual #11
385: astore        43
387: new           #12
390: dup
391: aload         40
393: aload         43
395: invokespecial #13
398: astore        44
400: aload         38
402: aload         43
404: invokevirtual #22
407: dstore        45
409: aload         37
411: aload         43
413: invokevirtual #23
416: dstore        47
418: aload         37
420: invokevirtual #20
423: aload         21
425: aload         37
427: invokevirtual #82
430: dstore        49
432: getstatic     #10
435: astore        51
437: getstatic     #10
440: astore        52
442: aload         52
444: invokevirtual #11
447: astore        53
449: getstatic     #10
452: astore        54
454: aload         54
456: invokevirtual #11
459: astore        55
461: new           #12
464: dup
465: aload         52
467: aload         55
469: invokespecial #13
472: astore        56
474: aload         51
476: aload         55
478: invokestatic  #96
481: astore        57
483: aload         37
485: aload         55
487: invokevirtual #97
490: astore        58
492: aload         15
494: aload         58
496: invokevirtual #118
499: dstore        59
501: aload         8
503: aload         15
505: invokevirtual #301
508: dstore        61
510: aload         7
512: ldc2_w        #302
515: aload         8
517: invokevirtual #304
520: astore        63
522: new           #64
525: dup
526: aload         8
528: ldc2_w        #119
531: invokespecial #65
534: astore        64
536: aload         64
538: invokevirtual #339
541: dstore        65
543: aload         6
545: aload         64
547: invokevirtual #354
550: astore        67
552: aload_2
553: aload         64
555: invokevirtual #355
558: istore        68
560: aload         64
562: invokevirtual #329
565: astore        69
567: new           #40
570: dup
571: invokespecial #41
574: ldc           #42
576: invokevirtual #43
579: iload         4
581: invokevirtual #48
584: ldc           #45
586: invokevirtual #43
589: iconst_0
590: invokevirtual #48
593: ldc           #42
595: invokevirtual #43
598: invokevirtual #46
601: iload         4
603: ifne          610
606: iconst_1
607: goto          611
610: iconst_0
611: invokestatic  #47
614: aload         6
616: invokestatic  #18
619: aload         7
621: invokestatic  #18
624: new           #40
627: dup
628: invokespecial #41
631: ldc           #42
633: invokevirtual #43
636: aload         9
638: invokevirtual #43
641: ldc           #201
643: invokevirtual #43
646: invokevirtual #46
649: aload         9
651: ldc           #202
653: invokestatic  #203
656: new           #40
659: dup
660: invokespecial #41
663: ldc           #42
665: invokevirtual #43
668: iload         14
670: invokevirtual #48
673: ldc           #45
675: invokevirtual #43
678: iconst_1
679: invokevirtual #48
682: ldc           #42
684: invokevirtual #43
687: invokevirtual #46
690: iload         14
692: iconst_1
693: if_icmpne     700
696: iconst_1
697: goto          701
700: iconst_0
701: invokestatic  #47
704: aload         17
706: invokestatic  #18
709: aload         18
711: invokestatic  #18
714: aload         19
716: invokestatic  #18
719: aload         20
721: invokestatic  #18
724: aload         22
726: invokestatic  #18
729: aload         23
731: invokestatic  #18
734: aload         24
736: invokestatic  #18
739: aload         25
741: invokestatic  #18
744: aload         26
746: invokestatic  #18
749: aload         27
751: invokestatic  #18
754: dload         29
756: invokestatic  #38
759: invokestatic  #39
762: dload         31
764: invokestatic  #38
767: invokestatic  #39
770: aload         33
772: invokestatic  #18
775: aload         34
777: invokestatic  #18
780: aload         35
782: invokestatic  #18
785: aload         36
787: invokestatic  #18
790: aload         38
792: invokestatic  #18
795: aload         39
797: invokestatic  #18
800: aload         40
802: invokestatic  #18
805: aload         41
807: invokestatic  #18
810: aload         42
812: invokestatic  #18
815: aload         43
817: invokestatic  #18
820: dload         45
822: invokestatic  #38
825: invokestatic  #39
828: dload         47
830: invokestatic  #38
833: invokestatic  #39
836: dload         49
838: invokestatic  #38
841: invokestatic  #39
844: aload         51
846: invokestatic  #18
849: aload         52
851: invokestatic  #18
854: aload         53
856: invokestatic  #18
859: aload         54
861: invokestatic  #18
864: aload         55
866: invokestatic  #18
869: aload         57
871: invokestatic  #18
874: aload         58
876: invokestatic  #18
879: dload         59
881: invokestatic  #38
884: invokestatic  #39
887: new           #40
890: dup
891: invokespecial #41
894: ldc           #42
896: invokevirtual #43
899: dload         61
901: invokevirtual #44
904: ldc           #45
906: invokevirtual #43
909: ldc2_w        #154
912: invokevirtual #44
915: ldc           #42
917: invokevirtual #43
920: invokevirtual #46
923: dload         61
925: ldc2_w        #154
928: dcmpl
929: ifne          936
932: iconst_1
933: goto          937
936: iconst_0
937: invokestatic  #47
940: aload         63
942: invokestatic  #18
945: new           #40
948: dup
949: invokespecial #41
952: ldc           #42
954: invokevirtual #43
957: dload         65
959: invokevirtual #44
962: ldc           #45
964: invokevirtual #43
967: ldc2_w        #61
970: invokevirtual #44
973: ldc           #42
975: invokevirtual #43
978: invokevirtual #46
981: dload         65
983: ldc2_w        #61
986: dcmpl
987: ifne          994
990: iconst_1
991: goto          995
994: iconst_0
995: invokestatic  #47
998: new           #40
1001: dup
1002: invokespecial #41
1005: ldc           #42
1007: invokevirtual #43
1010: aload         67
1012: invokevirtual #102
1015: ldc           #45
1017: invokevirtual #43
1020: getstatic     #103
1023: invokevirtual #102
1026: ldc           #42
1028: invokevirtual #43
1031: invokevirtual #46
1034: aload         67
1036: getstatic     #103
1039: invokevirtual #104
1042: invokestatic  #47
1045: new           #40
1048: dup
1049: invokespecial #41
1052: ldc           #42
1054: invokevirtual #43
1057: iload         68
1059: invokevirtual #48
1062: ldc           #45
1064: invokevirtual #43
1067: iconst_1
1068: invokevirtual #48
1071: ldc           #42
1073: invokevirtual #43
1076: invokevirtual #46
1079: iload         68
1081: iconst_1
1082: if_icmpne     1089
1085: iconst_1
1086: goto          1090
1089: iconst_0
1090: invokestatic  #47
1093: aload         69
1095: invokestatic  #18
1098: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test102
Start line: 8221
End line: 8230
Method source code: 
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet2 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D[][] vector2DArray3 = polygonsSet2.getVertices();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) vector2DArray3);
        org.apache.commons.math3.exception.NotFiniteNumberException notFiniteNumberException5 = new org.apache.commons.math3.exception.NotFiniteNumberException((java.lang.Number) 1.0504556770048088E11d, (java.lang.Object[]) vector2DArray3);
        org.junit.Assert.assertNotNull(vector2DArray3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #356
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #56
30: dup
31: invokespecial #87
34: astore_2
35: aload_2
36: invokevirtual #143
39: astore_3
40: new           #357
43: dup
44: aload_1
45: aload_3
46: checkcast     #225
49: invokespecial #358
52: astore        4
54: new           #285
57: dup
58: ldc2_w        #359
61: invokestatic  #156
64: aload_3
65: checkcast     #225
68: invokespecial #287
71: astore        5
73: aload_3
74: invokestatic  #18
77: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test103
Start line: 8233
End line: 8375
Method source code: 
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane12 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D8, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D7.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D6, vector3D14);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector16 = plane4.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane17 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = plane4.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D21 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line23 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D21, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line28 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D26, (double) 0.0f);
        boolean boolean29 = line23.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line28);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane41 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D37, vector3D40);
        double double42 = vector3D35.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        double double43 = plane34.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D40);
        plane34.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane49 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D45, vector3D48);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = vector3D54.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane56 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D52, vector3D55);
        double double57 = vector3D50.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        double double58 = plane49.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D55);
        plane49.revertSelf();
        double double60 = plane34.getOffset(plane49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D62.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane66 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D62, vector3D65);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D61, vector3D65);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = plane49.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D65);
        line23.reset(vector2D68, (double) (-127));
        java.lang.String str71 = vector2D68.toString();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = plane4.getPointAt(vector2D68, (double) (-213608790));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D77.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D80 = vector3D79.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane81 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D77, vector3D80);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D76, vector3D80);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = vector3D76.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D75, vector3D83);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) (byte) 10, vector3D84);
        boolean boolean86 = plane4.contains(vector3D85);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(euclidean2DVector16);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane17);
        org.junit.Assert.assertNotNull(plane18);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector2D68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "{(NaN); (NaN)}" + "'", str71, "{(NaN); (NaN)}");
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D80);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #361
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: aload         5
58: invokevirtual #20
61: getstatic     #10
64: astore        6
66: getstatic     #10
69: astore        7
71: getstatic     #10
74: astore        8
76: aload         8
78: invokevirtual #11
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: new           #12
98: dup
99: aload         8
101: aload         11
103: invokespecial #13
106: astore        12
108: aload         7
110: aload         11
112: invokestatic  #96
115: astore        13
117: aload         7
119: invokevirtual #110
122: astore        14
124: aload         6
126: aload         14
128: invokestatic  #96
131: astore        15
133: aload         5
135: aload         6
137: invokevirtual #97
140: astore        16
142: aload         5
144: invokevirtual #24
147: astore        17
149: aload         5
151: invokevirtual #130
154: astore        18
156: new           #60
159: dup
160: dconst_0
161: ldc2_w        #61
164: invokespecial #63
167: astore        19
169: new           #64
172: dup
173: aload         19
175: dconst_0
176: invokespecial #65
179: astore        20
181: new           #60
184: dup
185: dconst_0
186: ldc2_w        #61
189: invokespecial #63
192: astore        21
194: new           #64
197: dup
198: aload         21
200: dconst_0
201: invokespecial #65
204: astore        22
206: aload         20
208: aload         22
210: invokevirtual #95
213: istore        23
215: getstatic     #10
218: astore        24
220: aload         24
222: invokevirtual #11
225: astore        25
227: getstatic     #10
230: astore        26
232: aload         26
234: invokevirtual #11
237: astore        27
239: new           #12
242: dup
243: aload         24
245: aload         27
247: invokespecial #13
250: astore        28
252: getstatic     #10
255: astore        29
257: aload         29
259: invokevirtual #11
262: astore        30
264: getstatic     #10
267: astore        31
269: aload         31
271: invokevirtual #11
274: astore        32
276: getstatic     #10
279: astore        33
281: aload         33
283: invokevirtual #11
286: astore        34
288: new           #12
291: dup
292: aload         31
294: aload         34
296: invokespecial #13
299: astore        35
301: aload         29
303: aload         34
305: invokevirtual #22
308: dstore        36
310: aload         28
312: aload         34
314: invokevirtual #23
317: dstore        38
319: aload         28
321: invokevirtual #20
324: getstatic     #10
327: astore        40
329: aload         40
331: invokevirtual #11
334: astore        41
336: getstatic     #10
339: astore        42
341: aload         42
343: invokevirtual #11
346: astore        43
348: new           #12
351: dup
352: aload         40
354: aload         43
356: invokespecial #13
359: astore        44
361: getstatic     #10
364: astore        45
366: aload         45
368: invokevirtual #11
371: astore        46
373: getstatic     #10
376: astore        47
378: aload         47
380: invokevirtual #11
383: astore        48
385: getstatic     #10
388: astore        49
390: aload         49
392: invokevirtual #11
395: astore        50
397: new           #12
400: dup
401: aload         47
403: aload         50
405: invokespecial #13
408: astore        51
410: aload         45
412: aload         50
414: invokevirtual #22
417: dstore        52
419: aload         44
421: aload         50
423: invokevirtual #23
426: dstore        54
428: aload         44
430: invokevirtual #20
433: aload         28
435: aload         44
437: invokevirtual #82
440: dstore        56
442: getstatic     #10
445: astore        58
447: getstatic     #10
450: astore        59
452: aload         59
454: invokevirtual #11
457: astore        60
459: getstatic     #10
462: astore        61
464: aload         61
466: invokevirtual #11
469: astore        62
471: new           #12
474: dup
475: aload         59
477: aload         62
479: invokespecial #13
482: astore        63
484: aload         58
486: aload         62
488: invokestatic  #96
491: astore        64
493: aload         44
495: aload         62
497: invokevirtual #97
500: astore        65
502: aload         20
504: aload         65
506: ldc2_w        #98
509: invokevirtual #100
512: aload         65
514: invokevirtual #192
517: astore        66
519: aload         5
521: aload         65
523: ldc2_w        #265
526: invokevirtual #197
529: astore        67
531: getstatic     #10
534: astore        68
536: getstatic     #10
539: astore        69
541: getstatic     #10
544: astore        70
546: aload         70
548: invokevirtual #11
551: astore        71
553: getstatic     #10
556: astore        72
558: aload         72
560: invokevirtual #11
563: astore        73
565: new           #12
568: dup
569: aload         70
571: aload         73
573: invokespecial #13
576: astore        74
578: aload         69
580: aload         73
582: invokestatic  #96
585: astore        75
587: aload         69
589: invokevirtual #110
592: astore        76
594: aload         68
596: aload         76
598: invokestatic  #96
601: astore        77
603: new           #175
606: dup
607: ldc2_w        #198
610: aload         77
612: invokespecial #180
615: astore        78
617: aload         5
619: aload         78
621: invokevirtual #185
624: istore        79
626: aload_1
627: invokestatic  #18
630: aload_2
631: invokestatic  #18
634: aload_3
635: invokestatic  #18
638: aload         4
640: invokestatic  #18
643: aload         6
645: invokestatic  #18
648: aload         7
650: invokestatic  #18
653: aload         8
655: invokestatic  #18
658: aload         9
660: invokestatic  #18
663: aload         10
665: invokestatic  #18
668: aload         11
670: invokestatic  #18
673: aload         13
675: invokestatic  #18
678: aload         14
680: invokestatic  #18
683: aload         15
685: invokestatic  #18
688: aload         16
690: invokestatic  #18
693: aload         17
695: invokestatic  #18
698: aload         18
700: invokestatic  #18
703: new           #40
706: dup
707: invokespecial #41
710: ldc           #42
712: invokevirtual #43
715: iload         23
717: invokevirtual #48
720: ldc           #45
722: invokevirtual #43
725: iconst_1
726: invokevirtual #48
729: ldc           #42
731: invokevirtual #43
734: invokevirtual #46
737: iload         23
739: iconst_1
740: if_icmpne     747
743: iconst_1
744: goto          748
747: iconst_0
748: invokestatic  #47
751: aload         24
753: invokestatic  #18
756: aload         25
758: invokestatic  #18
761: aload         26
763: invokestatic  #18
766: aload         27
768: invokestatic  #18
771: aload         29
773: invokestatic  #18
776: aload         30
778: invokestatic  #18
781: aload         31
783: invokestatic  #18
786: aload         32
788: invokestatic  #18
791: aload         33
793: invokestatic  #18
796: aload         34
798: invokestatic  #18
801: dload         36
803: invokestatic  #38
806: invokestatic  #39
809: dload         38
811: invokestatic  #38
814: invokestatic  #39
817: aload         40
819: invokestatic  #18
822: aload         41
824: invokestatic  #18
827: aload         42
829: invokestatic  #18
832: aload         43
834: invokestatic  #18
837: aload         45
839: invokestatic  #18
842: aload         46
844: invokestatic  #18
847: aload         47
849: invokestatic  #18
852: aload         48
854: invokestatic  #18
857: aload         49
859: invokestatic  #18
862: aload         50
864: invokestatic  #18
867: dload         52
869: invokestatic  #38
872: invokestatic  #39
875: dload         54
877: invokestatic  #38
880: invokestatic  #39
883: dload         56
885: invokestatic  #38
888: invokestatic  #39
891: aload         58
893: invokestatic  #18
896: aload         59
898: invokestatic  #18
901: aload         60
903: invokestatic  #18
906: aload         61
908: invokestatic  #18
911: aload         62
913: invokestatic  #18
916: aload         64
918: invokestatic  #18
921: aload         65
923: invokestatic  #18
926: new           #40
929: dup
930: invokespecial #41
933: ldc           #42
935: invokevirtual #43
938: aload         66
940: invokevirtual #43
943: ldc_w         #268
946: invokevirtual #43
949: invokevirtual #46
952: aload         66
954: ldc_w         #269
957: invokestatic  #203
960: aload         67
962: invokestatic  #18
965: aload         68
967: invokestatic  #18
970: aload         69
972: invokestatic  #18
975: aload         70
977: invokestatic  #18
980: aload         71
982: invokestatic  #18
985: aload         72
987: invokestatic  #18
990: aload         73
992: invokestatic  #18
995: aload         75
997: invokestatic  #18
1000: aload         76
1002: invokestatic  #18
1005: aload         77
1007: invokestatic  #18
1010: new           #40
1013: dup
1014: invokespecial #41
1017: ldc           #42
1019: invokevirtual #43
1022: iload         79
1024: invokevirtual #48
1027: ldc           #45
1029: invokevirtual #43
1032: iconst_0
1033: invokevirtual #48
1036: ldc           #42
1038: invokevirtual #43
1041: invokevirtual #46
1044: iload         79
1046: ifne          1053
1049: iconst_1
1050: goto          1054
1053: iconst_0
1054: invokestatic  #47
1057: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test104
Start line: 8378
End line: 8414
Method source code: 
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line4 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D2, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        boolean boolean10 = line4.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line9);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D13.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane15 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D11, vector3D14);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D18 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line20 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D18, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = plane15.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D18);
        double double22 = line9.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D18);
        double double23 = vector2D18.getNormSq();
        double double24 = vector2D18.getNorm();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet26 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet27 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        boolean boolean28 = polygonsSet26.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) polygonsSet27);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector29 = polygonsSet26.getBarycenter();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D30 = vector2D18.add((double) '#', euclidean2DVector29);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.1833403984568501d + "'", double23 == 0.1833403984568501d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.428182669496151d + "'", double24 == 0.428182669496151d);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(euclidean2DVector29);
        org.junit.Assert.assertNotNull(vector2D30);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #362
20: aastore
21: invokevirtual #7
24: pop
25: new           #60
28: dup
29: dconst_0
30: ldc2_w        #61
33: invokespecial #63
36: astore_1
37: new           #64
40: dup
41: aload_1
42: dconst_0
43: invokespecial #65
46: astore_2
47: new           #60
50: dup
51: dconst_0
52: ldc2_w        #61
55: invokespecial #63
58: astore_3
59: new           #64
62: dup
63: aload_3
64: dconst_0
65: invokespecial #65
68: astore        4
70: aload_2
71: aload         4
73: invokevirtual #95
76: istore        5
78: getstatic     #10
81: astore        6
83: aload         6
85: invokevirtual #11
88: astore        7
90: getstatic     #10
93: astore        8
95: aload         8
97: invokevirtual #11
100: astore        9
102: new           #12
105: dup
106: aload         6
108: aload         9
110: invokespecial #13
113: astore        10
115: new           #60
118: dup
119: dconst_0
120: ldc2_w        #61
123: invokespecial #63
126: astore        11
128: new           #64
131: dup
132: aload         11
134: dconst_0
135: invokespecial #65
138: astore        12
140: aload         10
142: aload         11
144: invokevirtual #66
147: astore        13
149: aload         4
151: aload         11
153: invokevirtual #191
156: dstore        14
158: aload         11
160: invokevirtual #256
163: dstore        16
165: aload         11
167: invokevirtual #128
170: dstore        18
172: new           #56
175: dup
176: invokespecial #87
179: astore        20
181: new           #56
184: dup
185: invokespecial #87
188: astore        21
190: aload         20
192: aload         21
194: invokevirtual #88
197: istore        22
199: aload         20
201: invokevirtual #89
204: astore        23
206: aload         11
208: ldc2_w        #168
211: aload         23
213: invokevirtual #363
216: astore        24
218: new           #40
221: dup
222: invokespecial #41
225: ldc           #42
227: invokevirtual #43
230: iload         5
232: invokevirtual #48
235: ldc           #45
237: invokevirtual #43
240: iconst_1
241: invokevirtual #48
244: ldc           #42
246: invokevirtual #43
249: invokevirtual #46
252: iload         5
254: iconst_1
255: if_icmpne     262
258: iconst_1
259: goto          263
262: iconst_0
263: invokestatic  #47
266: aload         6
268: invokestatic  #18
271: aload         7
273: invokestatic  #18
276: aload         8
278: invokestatic  #18
281: aload         9
283: invokestatic  #18
286: aload         13
288: invokestatic  #18
291: new           #40
294: dup
295: invokespecial #41
298: ldc           #42
300: invokevirtual #43
303: dload         14
305: invokevirtual #44
308: ldc           #45
310: invokevirtual #43
313: dconst_0
314: invokevirtual #44
317: ldc           #42
319: invokevirtual #43
322: invokevirtual #46
325: dload         14
327: dconst_0
328: dcmpl
329: ifne          336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #47
340: new           #40
343: dup
344: invokespecial #41
347: ldc           #42
349: invokevirtual #43
352: dload         16
354: invokevirtual #44
357: ldc           #45
359: invokevirtual #43
362: ldc2_w        #154
365: invokevirtual #44
368: ldc           #42
370: invokevirtual #43
373: invokevirtual #46
376: dload         16
378: ldc2_w        #154
381: dcmpl
382: ifne          389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #47
393: new           #40
396: dup
397: invokespecial #41
400: ldc           #42
402: invokevirtual #43
405: dload         18
407: invokevirtual #44
410: ldc           #45
412: invokevirtual #43
415: ldc2_w        #176
418: invokevirtual #44
421: ldc           #42
423: invokevirtual #43
426: invokevirtual #46
429: dload         18
431: ldc2_w        #176
434: dcmpl
435: ifne          442
438: iconst_1
439: goto          443
442: iconst_0
443: invokestatic  #47
446: new           #40
449: dup
450: invokespecial #41
453: ldc           #42
455: invokevirtual #43
458: iload         22
460: invokevirtual #48
463: ldc           #45
465: invokevirtual #43
468: iconst_1
469: invokevirtual #48
472: ldc           #42
474: invokevirtual #43
477: invokevirtual #46
480: iload         22
482: iconst_1
483: if_icmpne     490
486: iconst_1
487: goto          491
490: iconst_0
491: invokestatic  #47
494: aload         23
496: invokestatic  #18
499: aload         24
501: invokestatic  #18
504: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test105
Start line: 8417
End line: 8520
Method source code: 
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<org.apache.commons.math3.geometry.partitioning.Side> sideAVLTree0 = new org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<org.apache.commons.math3.geometry.partitioning.Side>();
        org.apache.commons.math3.geometry.partitioning.Side side1 = org.apache.commons.math3.geometry.partitioning.Side.MINUS;
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<org.apache.commons.math3.geometry.partitioning.Side>.Node node2 = sideAVLTree0.getNotSmaller(side1);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> euclidean2DSubHyperplaneList3 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet4 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>) euclidean2DSubHyperplaneList3);
        boolean boolean5 = polygonsSet4.isEmpty();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line10 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D8, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line15 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, (double) 0.0f);
        boolean boolean16 = line10.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line21 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D19, (double) 0.0f);
        line15.reset(vector2D19, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        double double36 = vector3D29.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        double double37 = plane28.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        plane28.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane43 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D39, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        double double51 = vector3D44.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        double double52 = plane43.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        plane43.revertSelf();
        double double54 = plane28.getOffset(plane43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane60 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D56, vector3D59);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D55, vector3D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = plane43.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59);
        double double63 = vector2D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        org.apache.commons.math3.geometry.euclidean.twod.Line line65 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D19, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet66 = line65.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Side side67 = polygonsSet4.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line65);
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<org.apache.commons.math3.geometry.partitioning.Side>.Node node68 = sideAVLTree0.getNotSmaller(side67);
        org.apache.commons.math3.geometry.partitioning.utilities.AVLTree<org.apache.commons.math3.geometry.partitioning.Side>.Node node69 = sideAVLTree0.getLargest();
        org.junit.Assert.assertTrue("'" + side1 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.MINUS + "'", side1.equals(org.apache.commons.math3.geometry.partitioning.Side.MINUS));
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(polygonsSet66);
        org.junit.Assert.assertTrue("'" + side67 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side67.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(node69);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #364
20: aastore
21: invokevirtual #7
24: pop
25: new           #365
28: dup
29: invokespecial #366
32: astore_1
33: getstatic     #367
36: astore_2
37: aload_1
38: aload_2
39: invokevirtual #368
42: astore_3
43: new           #25
46: dup
47: invokespecial #26
50: astore        4
52: new           #56
55: dup
56: aload         4
58: invokespecial #57
61: astore        5
63: aload         5
65: invokevirtual #145
68: istore        6
70: new           #60
73: dup
74: dconst_0
75: ldc2_w        #61
78: invokespecial #63
81: astore        7
83: new           #64
86: dup
87: aload         7
89: dconst_0
90: invokespecial #65
93: astore        8
95: new           #60
98: dup
99: dconst_0
100: ldc2_w        #61
103: invokespecial #63
106: astore        9
108: new           #64
111: dup
112: aload         9
114: dconst_0
115: invokespecial #65
118: astore        10
120: aload         8
122: aload         10
124: invokevirtual #95
127: istore        11
129: new           #60
132: dup
133: dconst_0
134: ldc2_w        #61
137: invokespecial #63
140: astore        12
142: new           #64
145: dup
146: aload         12
148: dconst_0
149: invokespecial #65
152: astore        13
154: aload         10
156: aload         12
158: ldc2_w        #116
161: invokevirtual #100
164: getstatic     #10
167: astore        14
169: aload         14
171: invokevirtual #11
174: astore        15
176: getstatic     #10
179: astore        16
181: aload         16
183: invokevirtual #11
186: astore        17
188: new           #12
191: dup
192: aload         14
194: aload         17
196: invokespecial #13
199: astore        18
201: getstatic     #10
204: astore        19
206: aload         19
208: invokevirtual #11
211: astore        20
213: getstatic     #10
216: astore        21
218: aload         21
220: invokevirtual #11
223: astore        22
225: getstatic     #10
228: astore        23
230: aload         23
232: invokevirtual #11
235: astore        24
237: new           #12
240: dup
241: aload         21
243: aload         24
245: invokespecial #13
248: astore        25
250: aload         19
252: aload         24
254: invokevirtual #22
257: dstore        26
259: aload         18
261: aload         24
263: invokevirtual #23
266: dstore        28
268: aload         18
270: invokevirtual #20
273: getstatic     #10
276: astore        30
278: aload         30
280: invokevirtual #11
283: astore        31
285: getstatic     #10
288: astore        32
290: aload         32
292: invokevirtual #11
295: astore        33
297: new           #12
300: dup
301: aload         30
303: aload         33
305: invokespecial #13
308: astore        34
310: getstatic     #10
313: astore        35
315: aload         35
317: invokevirtual #11
320: astore        36
322: getstatic     #10
325: astore        37
327: aload         37
329: invokevirtual #11
332: astore        38
334: getstatic     #10
337: astore        39
339: aload         39
341: invokevirtual #11
344: astore        40
346: new           #12
349: dup
350: aload         37
352: aload         40
354: invokespecial #13
357: astore        41
359: aload         35
361: aload         40
363: invokevirtual #22
366: dstore        42
368: aload         34
370: aload         40
372: invokevirtual #23
375: dstore        44
377: aload         34
379: invokevirtual #20
382: aload         18
384: aload         34
386: invokevirtual #82
389: dstore        46
391: getstatic     #10
394: astore        48
396: getstatic     #10
399: astore        49
401: aload         49
403: invokevirtual #11
406: astore        50
408: getstatic     #10
411: astore        51
413: aload         51
415: invokevirtual #11
418: astore        52
420: new           #12
423: dup
424: aload         49
426: aload         52
428: invokespecial #13
431: astore        53
433: aload         48
435: aload         52
437: invokestatic  #96
440: astore        54
442: aload         34
444: aload         52
446: invokevirtual #97
449: astore        55
451: aload         12
453: aload         55
455: invokevirtual #118
458: dstore        56
460: new           #64
463: dup
464: aload         12
466: ldc2_w        #119
469: invokespecial #65
472: astore        58
474: aload         58
476: invokevirtual #121
479: astore        59
481: aload         5
483: aload         58
485: invokevirtual #101
488: astore        60
490: aload_1
491: aload         60
493: invokevirtual #368
496: astore        61
498: aload_1
499: invokevirtual #369
502: astore        62
504: new           #40
507: dup
508: invokespecial #41
511: ldc           #42
513: invokevirtual #43
516: aload_2
517: invokevirtual #102
520: ldc           #45
522: invokevirtual #43
525: getstatic     #367
528: invokevirtual #102
531: ldc           #42
533: invokevirtual #43
536: invokevirtual #46
539: aload_2
540: getstatic     #367
543: invokevirtual #104
546: invokestatic  #47
549: aload_3
550: invokestatic  #78
553: new           #40
556: dup
557: invokespecial #41
560: ldc           #42
562: invokevirtual #43
565: iload         6
567: invokevirtual #48
570: ldc           #45
572: invokevirtual #43
575: iconst_0
576: invokevirtual #48
579: ldc           #42
581: invokevirtual #43
584: invokevirtual #46
587: iload         6
589: ifne          596
592: iconst_1
593: goto          597
596: iconst_0
597: invokestatic  #47
600: new           #40
603: dup
604: invokespecial #41
607: ldc           #42
609: invokevirtual #43
612: iload         11
614: invokevirtual #48
617: ldc           #45
619: invokevirtual #43
622: iconst_1
623: invokevirtual #48
626: ldc           #42
628: invokevirtual #43
631: invokevirtual #46
634: iload         11
636: iconst_1
637: if_icmpne     644
640: iconst_1
641: goto          645
644: iconst_0
645: invokestatic  #47
648: aload         14
650: invokestatic  #18
653: aload         15
655: invokestatic  #18
658: aload         16
660: invokestatic  #18
663: aload         17
665: invokestatic  #18
668: aload         19
670: invokestatic  #18
673: aload         20
675: invokestatic  #18
678: aload         21
680: invokestatic  #18
683: aload         22
685: invokestatic  #18
688: aload         23
690: invokestatic  #18
693: aload         24
695: invokestatic  #18
698: dload         26
700: invokestatic  #38
703: invokestatic  #39
706: dload         28
708: invokestatic  #38
711: invokestatic  #39
714: aload         30
716: invokestatic  #18
719: aload         31
721: invokestatic  #18
724: aload         32
726: invokestatic  #18
729: aload         33
731: invokestatic  #18
734: aload         35
736: invokestatic  #18
739: aload         36
741: invokestatic  #18
744: aload         37
746: invokestatic  #18
749: aload         38
751: invokestatic  #18
754: aload         39
756: invokestatic  #18
759: aload         40
761: invokestatic  #18
764: dload         42
766: invokestatic  #38
769: invokestatic  #39
772: dload         44
774: invokestatic  #38
777: invokestatic  #39
780: dload         46
782: invokestatic  #38
785: invokestatic  #39
788: aload         48
790: invokestatic  #18
793: aload         49
795: invokestatic  #18
798: aload         50
800: invokestatic  #18
803: aload         51
805: invokestatic  #18
808: aload         52
810: invokestatic  #18
813: aload         54
815: invokestatic  #18
818: aload         55
820: invokestatic  #18
823: dload         56
825: invokestatic  #38
828: invokestatic  #39
831: aload         59
833: invokestatic  #18
836: new           #40
839: dup
840: invokespecial #41
843: ldc           #42
845: invokevirtual #43
848: aload         60
850: invokevirtual #102
853: ldc           #45
855: invokevirtual #43
858: getstatic     #103
861: invokevirtual #102
864: ldc           #42
866: invokevirtual #43
869: invokevirtual #46
872: aload         60
874: getstatic     #103
877: invokevirtual #104
880: invokestatic  #47
883: aload         61
885: invokestatic  #78
888: aload         62
890: invokestatic  #78
893: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test106
Start line: 8523
End line: 8642
Method source code: 
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line4 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D2, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        boolean boolean8 = vector2D7.isInfinite();
        line4.translateToPoint(vector2D7);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet10 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractRegion11 = polygonsSet10.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D12 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D16 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str17 = vector2D16.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line22 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D20, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D25 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line27 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D25, (double) 0.0f);
        boolean boolean28 = line22.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line27);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D31 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line33 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D31, (double) 0.0f);
        line27.reset(vector2D31, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane40 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D36, vector3D39);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = vector3D45.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane47 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D43, vector3D46);
        double double48 = vector3D41.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        double double49 = plane40.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D46);
        plane40.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane55 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D51, vector3D54);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = vector3D60.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane62 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D58, vector3D61);
        double double63 = vector3D56.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61);
        double double64 = plane55.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D61);
        plane55.revertSelf();
        double double66 = plane40.getOffset(plane55);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D70.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane72 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D68, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D67, vector3D71);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D74 = plane55.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        double double75 = vector2D31.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D74);
        double double76 = vector2D16.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D31);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D77 = vector2D12.subtract((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D16);
        org.apache.commons.math3.geometry.euclidean.twod.Line line79 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D16, 2.2250738585072014E-308d);
        double double80 = line79.getOriginOffset();
        org.apache.commons.math3.geometry.partitioning.Side side81 = euclidean2DAbstractRegion11.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line79);
        boolean boolean82 = line4.isParallelTo(line79);
        line79.setAngle((double) 100.00001f);
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DHyperplane85 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = line79.sameOrientationAs(euclidean2DHyperplane85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(euclidean2DAbstractRegion11);
        org.junit.Assert.assertNotNull(vector2D12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{0; -0.43}" + "'", str17, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector2D74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 0.1833403984568501d + "'", double76 == 0.1833403984568501d);
        org.junit.Assert.assertNotNull(vector2D77);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-0.428182669496151d) + "'", double80 == (-0.428182669496151d));
        org.junit.Assert.assertTrue("'" + side81 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side81.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #370
20: aastore
21: invokevirtual #7
24: pop
25: new           #60
28: dup
29: dconst_0
30: ldc2_w        #61
33: invokespecial #63
36: astore_1
37: new           #64
40: dup
41: aload_1
42: dconst_0
43: invokespecial #65
46: astore_2
47: new           #60
50: dup
51: dconst_0
52: ldc2_w        #61
55: invokespecial #63
58: astore_3
59: aload_3
60: invokevirtual #352
63: istore        4
65: aload_2
66: aload_3
67: invokevirtual #353
70: new           #56
73: dup
74: invokespecial #87
77: astore        5
79: aload         5
81: invokevirtual #243
84: astore        6
86: getstatic     #300
89: astore        7
91: new           #60
94: dup
95: dconst_0
96: ldc2_w        #61
99: invokespecial #63
102: astore        8
104: aload         8
106: invokevirtual #192
109: astore        9
111: new           #60
114: dup
115: dconst_0
116: ldc2_w        #61
119: invokespecial #63
122: astore        10
124: new           #64
127: dup
128: aload         10
130: dconst_0
131: invokespecial #65
134: astore        11
136: new           #60
139: dup
140: dconst_0
141: ldc2_w        #61
144: invokespecial #63
147: astore        12
149: new           #64
152: dup
153: aload         12
155: dconst_0
156: invokespecial #65
159: astore        13
161: aload         11
163: aload         13
165: invokevirtual #95
168: istore        14
170: new           #60
173: dup
174: dconst_0
175: ldc2_w        #61
178: invokespecial #63
181: astore        15
183: new           #64
186: dup
187: aload         15
189: dconst_0
190: invokespecial #65
193: astore        16
195: aload         13
197: aload         15
199: ldc2_w        #116
202: invokevirtual #100
205: getstatic     #10
208: astore        17
210: aload         17
212: invokevirtual #11
215: astore        18
217: getstatic     #10
220: astore        19
222: aload         19
224: invokevirtual #11
227: astore        20
229: new           #12
232: dup
233: aload         17
235: aload         20
237: invokespecial #13
240: astore        21
242: getstatic     #10
245: astore        22
247: aload         22
249: invokevirtual #11
252: astore        23
254: getstatic     #10
257: astore        24
259: aload         24
261: invokevirtual #11
264: astore        25
266: getstatic     #10
269: astore        26
271: aload         26
273: invokevirtual #11
276: astore        27
278: new           #12
281: dup
282: aload         24
284: aload         27
286: invokespecial #13
289: astore        28
291: aload         22
293: aload         27
295: invokevirtual #22
298: dstore        29
300: aload         21
302: aload         27
304: invokevirtual #23
307: dstore        31
309: aload         21
311: invokevirtual #20
314: getstatic     #10
317: astore        33
319: aload         33
321: invokevirtual #11
324: astore        34
326: getstatic     #10
329: astore        35
331: aload         35
333: invokevirtual #11
336: astore        36
338: new           #12
341: dup
342: aload         33
344: aload         36
346: invokespecial #13
349: astore        37
351: getstatic     #10
354: astore        38
356: aload         38
358: invokevirtual #11
361: astore        39
363: getstatic     #10
366: astore        40
368: aload         40
370: invokevirtual #11
373: astore        41
375: getstatic     #10
378: astore        42
380: aload         42
382: invokevirtual #11
385: astore        43
387: new           #12
390: dup
391: aload         40
393: aload         43
395: invokespecial #13
398: astore        44
400: aload         38
402: aload         43
404: invokevirtual #22
407: dstore        45
409: aload         37
411: aload         43
413: invokevirtual #23
416: dstore        47
418: aload         37
420: invokevirtual #20
423: aload         21
425: aload         37
427: invokevirtual #82
430: dstore        49
432: getstatic     #10
435: astore        51
437: getstatic     #10
440: astore        52
442: aload         52
444: invokevirtual #11
447: astore        53
449: getstatic     #10
452: astore        54
454: aload         54
456: invokevirtual #11
459: astore        55
461: new           #12
464: dup
465: aload         52
467: aload         55
469: invokespecial #13
472: astore        56
474: aload         51
476: aload         55
478: invokestatic  #96
481: astore        57
483: aload         37
485: aload         55
487: invokevirtual #97
490: astore        58
492: aload         15
494: aload         58
496: invokevirtual #118
499: dstore        59
501: aload         8
503: aload         15
505: invokevirtual #301
508: dstore        61
510: aload         7
512: ldc2_w        #302
515: aload         8
517: invokevirtual #304
520: astore        63
522: new           #64
525: dup
526: aload         8
528: ldc2_w        #119
531: invokespecial #65
534: astore        64
536: aload         64
538: invokevirtual #339
541: dstore        65
543: aload         6
545: aload         64
547: invokevirtual #354
550: astore        67
552: aload_2
553: aload         64
555: invokevirtual #355
558: istore        68
560: aload         64
562: ldc2_w        #371
565: invokevirtual #373
568: aconst_null
569: astore        69
571: aload         64
573: aload         69
575: invokevirtual #95
578: istore        70
580: ldc           #15
582: invokestatic  #16
585: goto          590
588: astore        70
590: new           #40
593: dup
594: invokespecial #41
597: ldc           #42
599: invokevirtual #43
602: iload         4
604: invokevirtual #48
607: ldc           #45
609: invokevirtual #43
612: iconst_0
613: invokevirtual #48
616: ldc           #42
618: invokevirtual #43
621: invokevirtual #46
624: iload         4
626: ifne          633
629: iconst_1
630: goto          634
633: iconst_0
634: invokestatic  #47
637: aload         6
639: invokestatic  #18
642: aload         7
644: invokestatic  #18
647: new           #40
650: dup
651: invokespecial #41
654: ldc           #42
656: invokevirtual #43
659: aload         9
661: invokevirtual #43
664: ldc           #201
666: invokevirtual #43
669: invokevirtual #46
672: aload         9
674: ldc           #202
676: invokestatic  #203
679: new           #40
682: dup
683: invokespecial #41
686: ldc           #42
688: invokevirtual #43
691: iload         14
693: invokevirtual #48
696: ldc           #45
698: invokevirtual #43
701: iconst_1
702: invokevirtual #48
705: ldc           #42
707: invokevirtual #43
710: invokevirtual #46
713: iload         14
715: iconst_1
716: if_icmpne     723
719: iconst_1
720: goto          724
723: iconst_0
724: invokestatic  #47
727: aload         17
729: invokestatic  #18
732: aload         18
734: invokestatic  #18
737: aload         19
739: invokestatic  #18
742: aload         20
744: invokestatic  #18
747: aload         22
749: invokestatic  #18
752: aload         23
754: invokestatic  #18
757: aload         24
759: invokestatic  #18
762: aload         25
764: invokestatic  #18
767: aload         26
769: invokestatic  #18
772: aload         27
774: invokestatic  #18
777: dload         29
779: invokestatic  #38
782: invokestatic  #39
785: dload         31
787: invokestatic  #38
790: invokestatic  #39
793: aload         33
795: invokestatic  #18
798: aload         34
800: invokestatic  #18
803: aload         35
805: invokestatic  #18
808: aload         36
810: invokestatic  #18
813: aload         38
815: invokestatic  #18
818: aload         39
820: invokestatic  #18
823: aload         40
825: invokestatic  #18
828: aload         41
830: invokestatic  #18
833: aload         42
835: invokestatic  #18
838: aload         43
840: invokestatic  #18
843: dload         45
845: invokestatic  #38
848: invokestatic  #39
851: dload         47
853: invokestatic  #38
856: invokestatic  #39
859: dload         49
861: invokestatic  #38
864: invokestatic  #39
867: aload         51
869: invokestatic  #18
872: aload         52
874: invokestatic  #18
877: aload         53
879: invokestatic  #18
882: aload         54
884: invokestatic  #18
887: aload         55
889: invokestatic  #18
892: aload         57
894: invokestatic  #18
897: aload         58
899: invokestatic  #18
902: dload         59
904: invokestatic  #38
907: invokestatic  #39
910: new           #40
913: dup
914: invokespecial #41
917: ldc           #42
919: invokevirtual #43
922: dload         61
924: invokevirtual #44
927: ldc           #45
929: invokevirtual #43
932: ldc2_w        #154
935: invokevirtual #44
938: ldc           #42
940: invokevirtual #43
943: invokevirtual #46
946: dload         61
948: ldc2_w        #154
951: dcmpl
952: ifne          959
955: iconst_1
956: goto          960
959: iconst_0
960: invokestatic  #47
963: aload         63
965: invokestatic  #18
968: new           #40
971: dup
972: invokespecial #41
975: ldc           #42
977: invokevirtual #43
980: dload         65
982: invokevirtual #44
985: ldc           #45
987: invokevirtual #43
990: ldc2_w        #61
993: invokevirtual #44
996: ldc           #42
998: invokevirtual #43
1001: invokevirtual #46
1004: dload         65
1006: ldc2_w        #61
1009: dcmpl
1010: ifne          1017
1013: iconst_1
1014: goto          1018
1017: iconst_0
1018: invokestatic  #47
1021: new           #40
1024: dup
1025: invokespecial #41
1028: ldc           #42
1030: invokevirtual #43
1033: aload         67
1035: invokevirtual #102
1038: ldc           #45
1040: invokevirtual #43
1043: getstatic     #103
1046: invokevirtual #102
1049: ldc           #42
1051: invokevirtual #43
1054: invokevirtual #46
1057: aload         67
1059: getstatic     #103
1062: invokevirtual #104
1065: invokestatic  #47
1068: new           #40
1071: dup
1072: invokespecial #41
1075: ldc           #42
1077: invokevirtual #43
1080: iload         68
1082: invokevirtual #48
1085: ldc           #45
1087: invokevirtual #43
1090: iconst_1
1091: invokevirtual #48
1094: ldc           #42
1096: invokevirtual #43
1099: invokevirtual #46
1102: iload         68
1104: iconst_1
1105: if_icmpne     1112
1108: iconst_1
1109: goto          1113
1112: iconst_0
1113: invokestatic  #47
1116: return
Exception table:
from    to  target type
571   585   588   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test107
Start line: 8645
End line: 8657
Method source code: 
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet0 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = polygonsSet0.isEmpty(euclidean2DBSPTree1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #374
20: aastore
21: invokevirtual #7
24: pop
25: new           #56
28: dup
29: invokespecial #87
32: astore_1
33: aconst_null
34: astore_2
35: aload_1
36: aload_2
37: invokevirtual #90
40: istore_3
41: ldc           #15
43: invokestatic  #16
46: goto          50
49: astore_3
50: return
Exception table:
from    to  target type
35    46    49   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test108
Start line: 8660
End line: 8734
Method source code: 
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList22 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet23 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList22);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion25 = polyhedronsSet23.buildNew(euclidean3DBSPTree24);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree27 = polyhedronsSet23.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet28 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree27);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList29 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet30 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList29);
        double double31 = polyhedronsSet30.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree34 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion35 = polyhedronsSet33.buildNew(euclidean3DBSPTree34);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = polyhedronsSet33.getTree(false);
        boolean boolean38 = polyhedronsSet30.isEmpty(euclidean3DBSPTree37);
        boolean boolean39 = polyhedronsSet28.isEmpty(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = euclidean3DBSPTree37.getCut();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion41 = euclidean3DAbstractRegion21.buildNew(euclidean3DBSPTree37);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree43 = euclidean3DRegion41.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet44 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree43);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree45 = euclidean3DBSPTree43.getPlus();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertNotNull(euclidean3DRegion25);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree27);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion35);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(euclidean3DSubHyperplane40);
        org.junit.Assert.assertNotNull(euclidean3DRegion41);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree43);
        org.junit.Assert.assertNull(euclidean3DBSPTree45);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #375
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aconst_null
174: astore        24
176: aload_2
177: aload         24
179: invokevirtual #148
182: astore        25
184: new           #25
187: dup
188: invokespecial #26
191: astore        26
193: new           #8
196: dup
197: aload         26
199: invokespecial #27
202: astore        27
204: aconst_null
205: astore        28
207: aload         27
209: aload         28
211: invokevirtual #29
214: astore        29
216: aload         27
218: iconst_0
219: invokevirtual #30
222: astore        30
224: new           #8
227: dup
228: aload         30
230: invokespecial #9
233: astore        31
235: new           #25
238: dup
239: invokespecial #26
242: astore        32
244: new           #8
247: dup
248: aload         32
250: invokespecial #27
253: astore        33
255: aload         33
257: invokevirtual #28
260: dstore        34
262: new           #25
265: dup
266: invokespecial #26
269: astore        36
271: new           #8
274: dup
275: aload         36
277: invokespecial #27
280: astore        37
282: aconst_null
283: astore        38
285: aload         37
287: aload         38
289: invokevirtual #29
292: astore        39
294: aload         37
296: iconst_0
297: invokevirtual #30
300: astore        40
302: aload         33
304: aload         40
306: invokevirtual #31
309: istore        41
311: aload         31
313: aload         40
315: invokevirtual #31
318: istore        42
320: aload         40
322: invokevirtual #149
325: astore        43
327: aload         25
329: aload         40
331: invokevirtual #150
334: astore        44
336: aload         44
338: iconst_0
339: invokeinterface #235,  2
344: astore        45
346: new           #8
349: dup
350: aload         45
352: invokespecial #9
355: astore        46
357: aload         45
359: invokevirtual #222
362: astore        47
364: new           #40
367: dup
368: invokespecial #41
371: ldc           #42
373: invokevirtual #43
376: dload_3
377: invokevirtual #44
380: ldc           #45
382: invokevirtual #43
385: dconst_0
386: invokevirtual #44
389: ldc           #42
391: invokevirtual #43
394: invokevirtual #46
397: dload_3
398: dconst_0
399: dcmpl
400: ifne          407
403: iconst_1
404: goto          408
407: iconst_0
408: invokestatic  #47
411: aload         5
413: invokestatic  #18
416: aload         6
418: invokestatic  #18
421: aload         7
423: invokestatic  #18
426: aload         8
428: invokestatic  #18
431: aload         10
433: invokestatic  #18
436: aload         11
438: invokestatic  #18
441: aload         12
443: invokestatic  #18
446: aload         13
448: invokestatic  #18
451: aload         14
453: invokestatic  #18
456: aload         15
458: invokestatic  #18
461: dload         17
463: invokestatic  #38
466: invokestatic  #39
469: dload         19
471: invokestatic  #38
474: invokestatic  #39
477: aload         21
479: invokestatic  #18
482: aload         22
484: invokestatic  #18
487: aload         23
489: invokestatic  #18
492: aload         25
494: invokestatic  #18
497: aload         29
499: invokestatic  #18
502: aload         30
504: invokestatic  #18
507: new           #40
510: dup
511: invokespecial #41
514: ldc           #42
516: invokevirtual #43
519: dload         34
521: invokevirtual #44
524: ldc           #45
526: invokevirtual #43
529: dconst_0
530: invokevirtual #44
533: ldc           #42
535: invokevirtual #43
538: invokevirtual #46
541: dload         34
543: dconst_0
544: dcmpl
545: ifne          552
548: iconst_1
549: goto          553
552: iconst_0
553: invokestatic  #47
556: aload         39
558: invokestatic  #18
561: aload         40
563: invokestatic  #18
566: new           #40
569: dup
570: invokespecial #41
573: ldc           #42
575: invokevirtual #43
578: iload         41
580: invokevirtual #48
583: ldc           #45
585: invokevirtual #43
588: iconst_0
589: invokevirtual #48
592: ldc           #42
594: invokevirtual #43
597: invokevirtual #46
600: iload         41
602: ifne          609
605: iconst_1
606: goto          610
609: iconst_0
610: invokestatic  #47
613: new           #40
616: dup
617: invokespecial #41
620: ldc           #42
622: invokevirtual #43
625: iload         42
627: invokevirtual #48
630: ldc           #45
632: invokevirtual #43
635: iconst_0
636: invokevirtual #48
639: ldc           #42
641: invokevirtual #43
644: invokevirtual #46
647: iload         42
649: ifne          656
652: iconst_1
653: goto          657
656: iconst_0
657: invokestatic  #47
660: aload         43
662: invokestatic  #78
665: aload         44
667: invokestatic  #18
670: aload         45
672: invokestatic  #18
675: aload         47
677: invokestatic  #78
680: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test109
Start line: 8737
End line: 8902
Method source code: 
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform20 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion21 = polyhedronsSet1.applyTransform(euclidean3DTransform20);
        double double22 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = polyhedronsSet1.getTree(true);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D25, vector3D28);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = vector3D34.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane36 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D32, vector3D35);
        double double37 = vector3D30.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D35);
        double double38 = plane29.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D35);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane39 = plane29.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion40 = subPlane39.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane45 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D41, vector3D44);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane52 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D48, vector3D51);
        double double53 = vector3D46.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51);
        double double54 = plane45.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D51);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane55 = plane45.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList56 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet57 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList56);
        double double58 = polyhedronsSet57.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList59 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet60 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList59);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree61 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion62 = polyhedronsSet60.buildNew(euclidean3DBSPTree61);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree64 = polyhedronsSet60.getTree(false);
        boolean boolean65 = polyhedronsSet57.isEmpty(euclidean3DBSPTree64);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList66 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet67 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList66);
        double double68 = polyhedronsSet67.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList69 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet70 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList69);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree71 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion72 = polyhedronsSet70.buildNew(euclidean3DBSPTree71);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree74 = polyhedronsSet70.getTree(false);
        boolean boolean75 = polyhedronsSet67.isEmpty(euclidean3DBSPTree74);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D76.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = vector3D78.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane80 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D76, vector3D79);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = vector3D81.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = vector3D83.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D86 = vector3D85.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane87 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D83, vector3D86);
        double double88 = vector3D81.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86);
        double double89 = plane80.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D86);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane90 = plane80.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion91 = subPlane90.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree92 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane55, euclidean3DBSPTree64, euclidean3DBSPTree74, (java.lang.Object) subPlane90);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane93 = subPlane39.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane90);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree94 = euclidean3DBSPTree24.split((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane90);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(subPlane39);
        org.junit.Assert.assertNotNull(euclidean2DRegion40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(subPlane55);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion62);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion72);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D86);
        org.junit.Assert.assertTrue(Double.isNaN(double88));
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(subPlane90);
        org.junit.Assert.assertNotNull(euclidean2DRegion91);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane93);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree94);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #376
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aconst_null
174: astore        24
176: aload_2
177: aload         24
179: invokevirtual #148
182: astore        25
184: aload_2
185: invokevirtual #70
188: dstore        26
190: aload_2
191: iconst_1
192: invokevirtual #30
195: astore        28
197: getstatic     #10
200: astore        29
202: aload         29
204: invokevirtual #11
207: astore        30
209: getstatic     #10
212: astore        31
214: aload         31
216: invokevirtual #11
219: astore        32
221: new           #12
224: dup
225: aload         29
227: aload         32
229: invokespecial #13
232: astore        33
234: getstatic     #10
237: astore        34
239: aload         34
241: invokevirtual #11
244: astore        35
246: getstatic     #10
249: astore        36
251: aload         36
253: invokevirtual #11
256: astore        37
258: getstatic     #10
261: astore        38
263: aload         38
265: invokevirtual #11
268: astore        39
270: new           #12
273: dup
274: aload         36
276: aload         39
278: invokespecial #13
281: astore        40
283: aload         34
285: aload         39
287: invokevirtual #22
290: dstore        41
292: aload         33
294: aload         39
296: invokevirtual #23
299: dstore        43
301: aload         33
303: invokevirtual #24
306: astore        45
308: aload         45
310: invokevirtual #32
313: astore        46
315: getstatic     #10
318: astore        47
320: aload         47
322: invokevirtual #11
325: astore        48
327: getstatic     #10
330: astore        49
332: aload         49
334: invokevirtual #11
337: astore        50
339: new           #12
342: dup
343: aload         47
345: aload         50
347: invokespecial #13
350: astore        51
352: getstatic     #10
355: astore        52
357: aload         52
359: invokevirtual #11
362: astore        53
364: getstatic     #10
367: astore        54
369: aload         54
371: invokevirtual #11
374: astore        55
376: getstatic     #10
379: astore        56
381: aload         56
383: invokevirtual #11
386: astore        57
388: new           #12
391: dup
392: aload         54
394: aload         57
396: invokespecial #13
399: astore        58
401: aload         52
403: aload         57
405: invokevirtual #22
408: dstore        59
410: aload         51
412: aload         57
414: invokevirtual #23
417: dstore        61
419: aload         51
421: invokevirtual #24
424: astore        63
426: new           #25
429: dup
430: invokespecial #26
433: astore        64
435: new           #8
438: dup
439: aload         64
441: invokespecial #27
444: astore        65
446: aload         65
448: invokevirtual #28
451: dstore        66
453: new           #25
456: dup
457: invokespecial #26
460: astore        68
462: new           #8
465: dup
466: aload         68
468: invokespecial #27
471: astore        69
473: aconst_null
474: astore        70
476: aload         69
478: aload         70
480: invokevirtual #29
483: astore        71
485: aload         69
487: iconst_0
488: invokevirtual #30
491: astore        72
493: aload         65
495: aload         72
497: invokevirtual #31
500: istore        73
502: new           #25
505: dup
506: invokespecial #26
509: astore        74
511: new           #8
514: dup
515: aload         74
517: invokespecial #27
520: astore        75
522: aload         75
524: invokevirtual #28
527: dstore        76
529: new           #25
532: dup
533: invokespecial #26
536: astore        78
538: new           #8
541: dup
542: aload         78
544: invokespecial #27
547: astore        79
549: aconst_null
550: astore        80
552: aload         79
554: aload         80
556: invokevirtual #29
559: astore        81
561: aload         79
563: iconst_0
564: invokevirtual #30
567: astore        82
569: aload         75
571: aload         82
573: invokevirtual #31
576: istore        83
578: getstatic     #10
581: astore        84
583: aload         84
585: invokevirtual #11
588: astore        85
590: getstatic     #10
593: astore        86
595: aload         86
597: invokevirtual #11
600: astore        87
602: new           #12
605: dup
606: aload         84
608: aload         87
610: invokespecial #13
613: astore        88
615: getstatic     #10
618: astore        89
620: aload         89
622: invokevirtual #11
625: astore        90
627: getstatic     #10
630: astore        91
632: aload         91
634: invokevirtual #11
637: astore        92
639: getstatic     #10
642: astore        93
644: aload         93
646: invokevirtual #11
649: astore        94
651: new           #12
654: dup
655: aload         91
657: aload         94
659: invokespecial #13
662: astore        95
664: aload         89
666: aload         94
668: invokevirtual #22
671: dstore        96
673: aload         88
675: aload         94
677: invokevirtual #23
680: dstore        98
682: aload         88
684: invokevirtual #24
687: astore        100
689: aload         100
691: invokevirtual #32
694: astore        101
696: new           #33
699: dup
700: aload         63
702: aload         72
704: aload         82
706: aload         100
708: invokespecial #34
711: astore        102
713: aload         45
715: aload         100
717: invokevirtual #72
720: astore        103
722: aload         28
724: aload         100
726: invokevirtual #232
729: astore        104
731: new           #40
734: dup
735: invokespecial #41
738: ldc           #42
740: invokevirtual #43
743: dload_3
744: invokevirtual #44
747: ldc           #45
749: invokevirtual #43
752: dconst_0
753: invokevirtual #44
756: ldc           #42
758: invokevirtual #43
761: invokevirtual #46
764: dload_3
765: dconst_0
766: dcmpl
767: ifne          774
770: iconst_1
771: goto          775
774: iconst_0
775: invokestatic  #47
778: aload         5
780: invokestatic  #18
783: aload         6
785: invokestatic  #18
788: aload         7
790: invokestatic  #18
793: aload         8
795: invokestatic  #18
798: aload         10
800: invokestatic  #18
803: aload         11
805: invokestatic  #18
808: aload         12
810: invokestatic  #18
813: aload         13
815: invokestatic  #18
818: aload         14
820: invokestatic  #18
823: aload         15
825: invokestatic  #18
828: dload         17
830: invokestatic  #38
833: invokestatic  #39
836: dload         19
838: invokestatic  #38
841: invokestatic  #39
844: aload         21
846: invokestatic  #18
849: aload         22
851: invokestatic  #18
854: aload         23
856: invokestatic  #18
859: aload         25
861: invokestatic  #18
864: new           #40
867: dup
868: invokespecial #41
871: ldc           #42
873: invokevirtual #43
876: dload         26
878: invokevirtual #44
881: ldc           #45
883: invokevirtual #43
886: dconst_0
887: invokevirtual #44
890: ldc           #42
892: invokevirtual #43
895: invokevirtual #46
898: dload         26
900: dconst_0
901: dcmpl
902: ifne          909
905: iconst_1
906: goto          910
909: iconst_0
910: invokestatic  #47
913: aload         28
915: invokestatic  #18
918: aload         29
920: invokestatic  #18
923: aload         30
925: invokestatic  #18
928: aload         31
930: invokestatic  #18
933: aload         32
935: invokestatic  #18
938: aload         34
940: invokestatic  #18
943: aload         35
945: invokestatic  #18
948: aload         36
950: invokestatic  #18
953: aload         37
955: invokestatic  #18
958: aload         38
960: invokestatic  #18
963: aload         39
965: invokestatic  #18
968: dload         41
970: invokestatic  #38
973: invokestatic  #39
976: dload         43
978: invokestatic  #38
981: invokestatic  #39
984: aload         45
986: invokestatic  #18
989: aload         46
991: invokestatic  #18
994: aload         47
996: invokestatic  #18
999: aload         48
1001: invokestatic  #18
1004: aload         49
1006: invokestatic  #18
1009: aload         50
1011: invokestatic  #18
1014: aload         52
1016: invokestatic  #18
1019: aload         53
1021: invokestatic  #18
1024: aload         54
1026: invokestatic  #18
1029: aload         55
1031: invokestatic  #18
1034: aload         56
1036: invokestatic  #18
1039: aload         57
1041: invokestatic  #18
1044: dload         59
1046: invokestatic  #38
1049: invokestatic  #39
1052: dload         61
1054: invokestatic  #38
1057: invokestatic  #39
1060: aload         63
1062: invokestatic  #18
1065: new           #40
1068: dup
1069: invokespecial #41
1072: ldc           #42
1074: invokevirtual #43
1077: dload         66
1079: invokevirtual #44
1082: ldc           #45
1084: invokevirtual #43
1087: dconst_0
1088: invokevirtual #44
1091: ldc           #42
1093: invokevirtual #43
1096: invokevirtual #46
1099: dload         66
1101: dconst_0
1102: dcmpl
1103: ifne          1110
1106: iconst_1
1107: goto          1111
1110: iconst_0
1111: invokestatic  #47
1114: aload         71
1116: invokestatic  #18
1119: aload         72
1121: invokestatic  #18
1124: new           #40
1127: dup
1128: invokespecial #41
1131: ldc           #42
1133: invokevirtual #43
1136: iload         73
1138: invokevirtual #48
1141: ldc           #45
1143: invokevirtual #43
1146: iconst_0
1147: invokevirtual #48
1150: ldc           #42
1152: invokevirtual #43
1155: invokevirtual #46
1158: iload         73
1160: ifne          1167
1163: iconst_1
1164: goto          1168
1167: iconst_0
1168: invokestatic  #47
1171: new           #40
1174: dup
1175: invokespecial #41
1178: ldc           #42
1180: invokevirtual #43
1183: dload         76
1185: invokevirtual #44
1188: ldc           #45
1190: invokevirtual #43
1193: dconst_0
1194: invokevirtual #44
1197: ldc           #42
1199: invokevirtual #43
1202: invokevirtual #46
1205: dload         76
1207: dconst_0
1208: dcmpl
1209: ifne          1216
1212: iconst_1
1213: goto          1217
1216: iconst_0
1217: invokestatic  #47
1220: aload         81
1222: invokestatic  #18
1225: aload         82
1227: invokestatic  #18
1230: new           #40
1233: dup
1234: invokespecial #41
1237: ldc           #42
1239: invokevirtual #43
1242: iload         83
1244: invokevirtual #48
1247: ldc           #45
1249: invokevirtual #43
1252: iconst_0
1253: invokevirtual #48
1256: ldc           #42
1258: invokevirtual #43
1261: invokevirtual #46
1264: iload         83
1266: ifne          1273
1269: iconst_1
1270: goto          1274
1273: iconst_0
1274: invokestatic  #47
1277: aload         84
1279: invokestatic  #18
1282: aload         85
1284: invokestatic  #18
1287: aload         86
1289: invokestatic  #18
1292: aload         87
1294: invokestatic  #18
1297: aload         89
1299: invokestatic  #18
1302: aload         90
1304: invokestatic  #18
1307: aload         91
1309: invokestatic  #18
1312: aload         92
1314: invokestatic  #18
1317: aload         93
1319: invokestatic  #18
1322: aload         94
1324: invokestatic  #18
1327: dload         96
1329: invokestatic  #38
1332: invokestatic  #39
1335: dload         98
1337: invokestatic  #38
1340: invokestatic  #39
1343: aload         100
1345: invokestatic  #18
1348: aload         101
1350: invokestatic  #18
1353: aload         103
1355: invokestatic  #18
1358: aload         104
1360: invokestatic  #18
1363: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test110
Start line: 8905
End line: 9006
Method source code: 
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str5 = vector2D4.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line10 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D8, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line15 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, (double) 0.0f);
        boolean boolean16 = line10.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line21 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D19, (double) 0.0f);
        line15.reset(vector2D19, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        double double36 = vector3D29.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        double double37 = plane28.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        plane28.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane43 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D39, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        double double51 = vector3D44.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        double double52 = plane43.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        plane43.revertSelf();
        double double54 = plane28.getOffset(plane43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane60 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D56, vector3D59);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D55, vector3D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = plane43.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59);
        double double63 = vector2D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        double double64 = vector2D4.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = vector2D0.subtract((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        org.apache.commons.math3.geometry.euclidean.twod.Line line67 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D4, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.Line line68 = line67.getReverse();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet69 = line68.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> euclidean2DAbstractRegion70 = polygonsSet69.copySelf();
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{0; -0.43}" + "'", str5, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.1833403984568501d + "'", double64 == 0.1833403984568501d);
        org.junit.Assert.assertNotNull(vector2D65);
        org.junit.Assert.assertNotNull(line68);
        org.junit.Assert.assertNotNull(polygonsSet69);
        org.junit.Assert.assertNotNull(euclidean2DAbstractRegion70);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #377
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #300
28: astore_1
29: new           #60
32: dup
33: dconst_0
34: ldc2_w        #61
37: invokespecial #63
40: astore_2
41: aload_2
42: invokevirtual #192
45: astore_3
46: new           #60
49: dup
50: dconst_0
51: ldc2_w        #61
54: invokespecial #63
57: astore        4
59: new           #64
62: dup
63: aload         4
65: dconst_0
66: invokespecial #65
69: astore        5
71: new           #60
74: dup
75: dconst_0
76: ldc2_w        #61
79: invokespecial #63
82: astore        6
84: new           #64
87: dup
88: aload         6
90: dconst_0
91: invokespecial #65
94: astore        7
96: aload         5
98: aload         7
100: invokevirtual #95
103: istore        8
105: new           #60
108: dup
109: dconst_0
110: ldc2_w        #61
113: invokespecial #63
116: astore        9
118: new           #64
121: dup
122: aload         9
124: dconst_0
125: invokespecial #65
128: astore        10
130: aload         7
132: aload         9
134: ldc2_w        #116
137: invokevirtual #100
140: getstatic     #10
143: astore        11
145: aload         11
147: invokevirtual #11
150: astore        12
152: getstatic     #10
155: astore        13
157: aload         13
159: invokevirtual #11
162: astore        14
164: new           #12
167: dup
168: aload         11
170: aload         14
172: invokespecial #13
175: astore        15
177: getstatic     #10
180: astore        16
182: aload         16
184: invokevirtual #11
187: astore        17
189: getstatic     #10
192: astore        18
194: aload         18
196: invokevirtual #11
199: astore        19
201: getstatic     #10
204: astore        20
206: aload         20
208: invokevirtual #11
211: astore        21
213: new           #12
216: dup
217: aload         18
219: aload         21
221: invokespecial #13
224: astore        22
226: aload         16
228: aload         21
230: invokevirtual #22
233: dstore        23
235: aload         15
237: aload         21
239: invokevirtual #23
242: dstore        25
244: aload         15
246: invokevirtual #20
249: getstatic     #10
252: astore        27
254: aload         27
256: invokevirtual #11
259: astore        28
261: getstatic     #10
264: astore        29
266: aload         29
268: invokevirtual #11
271: astore        30
273: new           #12
276: dup
277: aload         27
279: aload         30
281: invokespecial #13
284: astore        31
286: getstatic     #10
289: astore        32
291: aload         32
293: invokevirtual #11
296: astore        33
298: getstatic     #10
301: astore        34
303: aload         34
305: invokevirtual #11
308: astore        35
310: getstatic     #10
313: astore        36
315: aload         36
317: invokevirtual #11
320: astore        37
322: new           #12
325: dup
326: aload         34
328: aload         37
330: invokespecial #13
333: astore        38
335: aload         32
337: aload         37
339: invokevirtual #22
342: dstore        39
344: aload         31
346: aload         37
348: invokevirtual #23
351: dstore        41
353: aload         31
355: invokevirtual #20
358: aload         15
360: aload         31
362: invokevirtual #82
365: dstore        43
367: getstatic     #10
370: astore        45
372: getstatic     #10
375: astore        46
377: aload         46
379: invokevirtual #11
382: astore        47
384: getstatic     #10
387: astore        48
389: aload         48
391: invokevirtual #11
394: astore        49
396: new           #12
399: dup
400: aload         46
402: aload         49
404: invokespecial #13
407: astore        50
409: aload         45
411: aload         49
413: invokestatic  #96
416: astore        51
418: aload         31
420: aload         49
422: invokevirtual #97
425: astore        52
427: aload         9
429: aload         52
431: invokevirtual #118
434: dstore        53
436: aload_2
437: aload         9
439: invokevirtual #301
442: dstore        55
444: aload_1
445: ldc2_w        #302
448: aload_2
449: invokevirtual #304
452: astore        57
454: new           #64
457: dup
458: aload_2
459: ldc2_w        #119
462: invokespecial #65
465: astore        58
467: aload         58
469: invokevirtual #305
472: astore        59
474: aload         59
476: invokevirtual #121
479: astore        60
481: aload         60
483: invokevirtual #243
486: astore        61
488: aload_1
489: invokestatic  #18
492: new           #40
495: dup
496: invokespecial #41
499: ldc           #42
501: invokevirtual #43
504: aload_3
505: invokevirtual #43
508: ldc           #201
510: invokevirtual #43
513: invokevirtual #46
516: aload_3
517: ldc           #202
519: invokestatic  #203
522: new           #40
525: dup
526: invokespecial #41
529: ldc           #42
531: invokevirtual #43
534: iload         8
536: invokevirtual #48
539: ldc           #45
541: invokevirtual #43
544: iconst_1
545: invokevirtual #48
548: ldc           #42
550: invokevirtual #43
553: invokevirtual #46
556: iload         8
558: iconst_1
559: if_icmpne     566
562: iconst_1
563: goto          567
566: iconst_0
567: invokestatic  #47
570: aload         11
572: invokestatic  #18
575: aload         12
577: invokestatic  #18
580: aload         13
582: invokestatic  #18
585: aload         14
587: invokestatic  #18
590: aload         16
592: invokestatic  #18
595: aload         17
597: invokestatic  #18
600: aload         18
602: invokestatic  #18
605: aload         19
607: invokestatic  #18
610: aload         20
612: invokestatic  #18
615: aload         21
617: invokestatic  #18
620: dload         23
622: invokestatic  #38
625: invokestatic  #39
628: dload         25
630: invokestatic  #38
633: invokestatic  #39
636: aload         27
638: invokestatic  #18
641: aload         28
643: invokestatic  #18
646: aload         29
648: invokestatic  #18
651: aload         30
653: invokestatic  #18
656: aload         32
658: invokestatic  #18
661: aload         33
663: invokestatic  #18
666: aload         34
668: invokestatic  #18
671: aload         35
673: invokestatic  #18
676: aload         36
678: invokestatic  #18
681: aload         37
683: invokestatic  #18
686: dload         39
688: invokestatic  #38
691: invokestatic  #39
694: dload         41
696: invokestatic  #38
699: invokestatic  #39
702: dload         43
704: invokestatic  #38
707: invokestatic  #39
710: aload         45
712: invokestatic  #18
715: aload         46
717: invokestatic  #18
720: aload         47
722: invokestatic  #18
725: aload         48
727: invokestatic  #18
730: aload         49
732: invokestatic  #18
735: aload         51
737: invokestatic  #18
740: aload         52
742: invokestatic  #18
745: dload         53
747: invokestatic  #38
750: invokestatic  #39
753: new           #40
756: dup
757: invokespecial #41
760: ldc           #42
762: invokevirtual #43
765: dload         55
767: invokevirtual #44
770: ldc           #45
772: invokevirtual #43
775: ldc2_w        #154
778: invokevirtual #44
781: ldc           #42
783: invokevirtual #43
786: invokevirtual #46
789: dload         55
791: ldc2_w        #154
794: dcmpl
795: ifne          802
798: iconst_1
799: goto          803
802: iconst_0
803: invokestatic  #47
806: aload         57
808: invokestatic  #18
811: aload         59
813: invokestatic  #18
816: aload         60
818: invokestatic  #18
821: aload         61
823: invokestatic  #18
826: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test111
Start line: 9009
End line: 9104
Method source code: 
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = plane7.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D14, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        double double26 = vector3D19.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        double double27 = plane18.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane28 = plane18.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion29 = subPlane28.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane30 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane7, euclidean2DRegion29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane45 = plane35.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion46 = subPlane45.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane47 = subPlane45.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane48 = subPlane30.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane45);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane49 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane30);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector50 = polyhedronsSet1.getBarycenter();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector51 = polyhedronsSet1.getBarycenter();
        double double52 = polyhedronsSet1.getBoundarySize();
        double double53 = polyhedronsSet1.getBoundarySize();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(subPlane28);
        org.junit.Assert.assertNotNull(euclidean2DRegion29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(subPlane45);
        org.junit.Assert.assertNotNull(euclidean2DRegion46);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane47);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane48);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane49);
        org.junit.Assert.assertNotNull(euclidean3DVector50);
        org.junit.Assert.assertNotNull(euclidean3DVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #378
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #70
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: new           #60
87: dup
88: dconst_0
89: ldc2_w        #61
92: invokespecial #63
95: astore        10
97: new           #64
100: dup
101: aload         10
103: dconst_0
104: invokespecial #65
107: astore        11
109: aload         9
111: aload         10
113: invokevirtual #66
116: astore        12
118: getstatic     #10
121: astore        13
123: aload         13
125: invokevirtual #11
128: astore        14
130: getstatic     #10
133: astore        15
135: aload         15
137: invokevirtual #11
140: astore        16
142: new           #12
145: dup
146: aload         13
148: aload         16
150: invokespecial #13
153: astore        17
155: getstatic     #10
158: astore        18
160: aload         18
162: invokevirtual #11
165: astore        19
167: getstatic     #10
170: astore        20
172: aload         20
174: invokevirtual #11
177: astore        21
179: getstatic     #10
182: astore        22
184: aload         22
186: invokevirtual #11
189: astore        23
191: new           #12
194: dup
195: aload         20
197: aload         23
199: invokespecial #13
202: astore        24
204: aload         18
206: aload         23
208: invokevirtual #22
211: dstore        25
213: aload         17
215: aload         23
217: invokevirtual #23
220: dstore        27
222: aload         17
224: invokevirtual #24
227: astore        29
229: aload         29
231: invokevirtual #32
234: astore        30
236: new           #67
239: dup
240: aload         9
242: aload         30
244: invokespecial #68
247: astore        31
249: getstatic     #10
252: astore        32
254: aload         32
256: invokevirtual #11
259: astore        33
261: getstatic     #10
264: astore        34
266: aload         34
268: invokevirtual #11
271: astore        35
273: new           #12
276: dup
277: aload         32
279: aload         35
281: invokespecial #13
284: astore        36
286: getstatic     #10
289: astore        37
291: aload         37
293: invokevirtual #11
296: astore        38
298: getstatic     #10
301: astore        39
303: aload         39
305: invokevirtual #11
308: astore        40
310: getstatic     #10
313: astore        41
315: aload         41
317: invokevirtual #11
320: astore        42
322: new           #12
325: dup
326: aload         39
328: aload         42
330: invokespecial #13
333: astore        43
335: aload         37
337: aload         42
339: invokevirtual #22
342: dstore        44
344: aload         36
346: aload         42
348: invokevirtual #23
351: dstore        46
353: aload         36
355: invokevirtual #24
358: astore        48
360: aload         48
362: invokevirtual #32
365: astore        49
367: aload         48
369: invokevirtual #71
372: astore        50
374: aload         31
376: aload         48
378: invokevirtual #72
381: astore        51
383: aload_2
384: aload         31
386: invokevirtual #73
389: astore        52
391: aload_2
392: invokevirtual #251
395: astore        53
397: aload_2
398: invokevirtual #251
401: astore        54
403: aload_2
404: invokevirtual #28
407: dstore        55
409: aload_2
410: invokevirtual #28
413: dstore        57
415: new           #40
418: dup
419: invokespecial #41
422: ldc           #42
424: invokevirtual #43
427: dload_3
428: invokevirtual #44
431: ldc           #45
433: invokevirtual #43
436: dconst_0
437: invokevirtual #44
440: ldc           #42
442: invokevirtual #43
445: invokevirtual #46
448: dload_3
449: dconst_0
450: dcmpl
451: ifne          458
454: iconst_1
455: goto          459
458: iconst_0
459: invokestatic  #47
462: aload         5
464: invokestatic  #18
467: aload         6
469: invokestatic  #18
472: aload         7
474: invokestatic  #18
477: aload         8
479: invokestatic  #18
482: aload         12
484: invokestatic  #18
487: aload         13
489: invokestatic  #18
492: aload         14
494: invokestatic  #18
497: aload         15
499: invokestatic  #18
502: aload         16
504: invokestatic  #18
507: aload         18
509: invokestatic  #18
512: aload         19
514: invokestatic  #18
517: aload         20
519: invokestatic  #18
522: aload         21
524: invokestatic  #18
527: aload         22
529: invokestatic  #18
532: aload         23
534: invokestatic  #18
537: dload         25
539: invokestatic  #38
542: invokestatic  #39
545: dload         27
547: invokestatic  #38
550: invokestatic  #39
553: aload         29
555: invokestatic  #18
558: aload         30
560: invokestatic  #18
563: aload         32
565: invokestatic  #18
568: aload         33
570: invokestatic  #18
573: aload         34
575: invokestatic  #18
578: aload         35
580: invokestatic  #18
583: aload         37
585: invokestatic  #18
588: aload         38
590: invokestatic  #18
593: aload         39
595: invokestatic  #18
598: aload         40
600: invokestatic  #18
603: aload         41
605: invokestatic  #18
608: aload         42
610: invokestatic  #18
613: dload         44
615: invokestatic  #38
618: invokestatic  #39
621: dload         46
623: invokestatic  #38
626: invokestatic  #39
629: aload         48
631: invokestatic  #18
634: aload         49
636: invokestatic  #18
639: aload         50
641: invokestatic  #18
644: aload         51
646: invokestatic  #18
649: aload         52
651: invokestatic  #18
654: aload         53
656: invokestatic  #18
659: aload         54
661: invokestatic  #18
664: new           #40
667: dup
668: invokespecial #41
671: ldc           #42
673: invokevirtual #43
676: dload         55
678: invokevirtual #44
681: ldc           #45
683: invokevirtual #43
686: dconst_0
687: invokevirtual #44
690: ldc           #42
692: invokevirtual #43
695: invokevirtual #46
698: dload         55
700: dconst_0
701: dcmpl
702: ifne          709
705: iconst_1
706: goto          710
709: iconst_0
710: invokestatic  #47
713: new           #40
716: dup
717: invokespecial #41
720: ldc           #42
722: invokevirtual #43
725: dload         57
727: invokevirtual #44
730: ldc           #45
732: invokevirtual #43
735: dconst_0
736: invokevirtual #44
739: ldc           #42
741: invokevirtual #43
744: invokevirtual #46
747: dload         57
749: dconst_0
750: dcmpl
751: ifne          758
754: iconst_1
755: goto          759
758: iconst_0
759: invokestatic  #47
762: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test112
Start line: 9107
End line: 9184
Method source code: 
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = vector3D12.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane14 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D10, vector3D13);
        double double15 = vector3D8.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        double double16 = plane7.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D13);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane17 = plane7.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion18 = subPlane17.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane19 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane17);
        double double20 = polyhedronsSet1.getBoundarySize();
        boolean boolean21 = polyhedronsSet1.isEmpty();
        boolean boolean22 = polyhedronsSet1.isEmpty();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane27 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D23, vector3D26);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = vector3D30.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane34 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D30, vector3D33);
        double double35 = vector3D28.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        double double36 = plane27.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = plane27.getOrigin();
        boolean boolean38 = vector3D37.isNaN();
        org.apache.commons.math3.geometry.partitioning.Region.Location location39 = polyhedronsSet1.checkPoint((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(subPlane17);
        org.junit.Assert.assertNotNull(euclidean2DRegion18);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + location39 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location39.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #379
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: getstatic     #10
87: astore        10
89: aload         10
91: invokevirtual #11
94: astore        11
96: getstatic     #10
99: astore        12
101: aload         12
103: invokevirtual #11
106: astore        13
108: getstatic     #10
111: astore        14
113: aload         14
115: invokevirtual #11
118: astore        15
120: new           #12
123: dup
124: aload         12
126: aload         15
128: invokespecial #13
131: astore        16
133: aload         10
135: aload         15
137: invokevirtual #22
140: dstore        17
142: aload         9
144: aload         15
146: invokevirtual #23
149: dstore        19
151: aload         9
153: invokevirtual #24
156: astore        21
158: aload         21
160: invokevirtual #32
163: astore        22
165: aload_2
166: aload         21
168: invokevirtual #73
171: astore        23
173: aload_2
174: invokevirtual #28
177: dstore        24
179: aload_2
180: invokevirtual #151
183: istore        26
185: aload_2
186: invokevirtual #151
189: istore        27
191: getstatic     #10
194: astore        28
196: aload         28
198: invokevirtual #11
201: astore        29
203: getstatic     #10
206: astore        30
208: aload         30
210: invokevirtual #11
213: astore        31
215: new           #12
218: dup
219: aload         28
221: aload         31
223: invokespecial #13
226: astore        32
228: getstatic     #10
231: astore        33
233: aload         33
235: invokevirtual #11
238: astore        34
240: getstatic     #10
243: astore        35
245: aload         35
247: invokevirtual #11
250: astore        36
252: getstatic     #10
255: astore        37
257: aload         37
259: invokevirtual #11
262: astore        38
264: new           #12
267: dup
268: aload         35
270: aload         38
272: invokespecial #13
275: astore        39
277: aload         33
279: aload         38
281: invokevirtual #22
284: dstore        40
286: aload         32
288: aload         38
290: invokevirtual #23
293: dstore        42
295: aload         32
297: invokevirtual #83
300: astore        44
302: aload         44
304: invokevirtual #380
307: istore        45
309: aload_2
310: aload         44
312: invokevirtual #381
315: astore        46
317: new           #40
320: dup
321: invokespecial #41
324: ldc           #42
326: invokevirtual #43
329: dload_3
330: invokevirtual #44
333: ldc           #45
335: invokevirtual #43
338: dconst_0
339: invokevirtual #44
342: ldc           #42
344: invokevirtual #43
347: invokevirtual #46
350: dload_3
351: dconst_0
352: dcmpl
353: ifne          360
356: iconst_1
357: goto          361
360: iconst_0
361: invokestatic  #47
364: aload         5
366: invokestatic  #18
369: aload         6
371: invokestatic  #18
374: aload         7
376: invokestatic  #18
379: aload         8
381: invokestatic  #18
384: aload         10
386: invokestatic  #18
389: aload         11
391: invokestatic  #18
394: aload         12
396: invokestatic  #18
399: aload         13
401: invokestatic  #18
404: aload         14
406: invokestatic  #18
409: aload         15
411: invokestatic  #18
414: dload         17
416: invokestatic  #38
419: invokestatic  #39
422: dload         19
424: invokestatic  #38
427: invokestatic  #39
430: aload         21
432: invokestatic  #18
435: aload         22
437: invokestatic  #18
440: aload         23
442: invokestatic  #18
445: new           #40
448: dup
449: invokespecial #41
452: ldc           #42
454: invokevirtual #43
457: dload         24
459: invokevirtual #44
462: ldc           #45
464: invokevirtual #43
467: dconst_0
468: invokevirtual #44
471: ldc           #42
473: invokevirtual #43
476: invokevirtual #46
479: dload         24
481: dconst_0
482: dcmpl
483: ifne          490
486: iconst_1
487: goto          491
490: iconst_0
491: invokestatic  #47
494: new           #40
497: dup
498: invokespecial #41
501: ldc           #42
503: invokevirtual #43
506: iload         26
508: invokevirtual #48
511: ldc           #45
513: invokevirtual #43
516: iconst_0
517: invokevirtual #48
520: ldc           #42
522: invokevirtual #43
525: invokevirtual #46
528: iload         26
530: ifne          537
533: iconst_1
534: goto          538
537: iconst_0
538: invokestatic  #47
541: new           #40
544: dup
545: invokespecial #41
548: ldc           #42
550: invokevirtual #43
553: iload         27
555: invokevirtual #48
558: ldc           #45
560: invokevirtual #43
563: iconst_0
564: invokevirtual #48
567: ldc           #42
569: invokevirtual #43
572: invokevirtual #46
575: iload         27
577: ifne          584
580: iconst_1
581: goto          585
584: iconst_0
585: invokestatic  #47
588: aload         28
590: invokestatic  #18
593: aload         29
595: invokestatic  #18
598: aload         30
600: invokestatic  #18
603: aload         31
605: invokestatic  #18
608: aload         33
610: invokestatic  #18
613: aload         34
615: invokestatic  #18
618: aload         35
620: invokestatic  #18
623: aload         36
625: invokestatic  #18
628: aload         37
630: invokestatic  #18
633: aload         38
635: invokestatic  #18
638: dload         40
640: invokestatic  #38
643: invokestatic  #39
646: dload         42
648: invokestatic  #38
651: invokestatic  #39
654: aload         44
656: invokestatic  #18
659: new           #40
662: dup
663: invokespecial #41
666: ldc           #42
668: invokevirtual #43
671: iload         45
673: invokevirtual #48
676: ldc           #45
678: invokevirtual #43
681: iconst_1
682: invokevirtual #48
685: ldc           #42
687: invokevirtual #43
690: invokevirtual #46
693: iload         45
695: iconst_1
696: if_icmpne     703
699: iconst_1
700: goto          704
703: iconst_0
704: invokestatic  #47
707: new           #40
710: dup
711: invokespecial #41
714: ldc           #42
716: invokevirtual #43
719: aload         46
721: invokevirtual #102
724: ldc           #45
726: invokevirtual #43
729: getstatic     #258
732: invokevirtual #102
735: ldc           #42
737: invokevirtual #43
740: invokevirtual #46
743: aload         46
745: getstatic     #258
748: invokevirtual #259
751: invokestatic  #47
754: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test113
Start line: 9187
End line: 9279
Method source code: 
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList15 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet16 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList15);
        double double17 = polyhedronsSet16.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList18 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet19 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList18);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree20 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion21 = polyhedronsSet19.buildNew(euclidean3DBSPTree20);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree23 = polyhedronsSet19.getTree(false);
        boolean boolean24 = polyhedronsSet16.isEmpty(euclidean3DBSPTree23);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList25 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet26 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList25);
        double double27 = polyhedronsSet26.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList28 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet29 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList28);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree30 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion31 = polyhedronsSet29.buildNew(euclidean3DBSPTree30);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree33 = polyhedronsSet29.getTree(false);
        boolean boolean34 = polyhedronsSet26.isEmpty(euclidean3DBSPTree33);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        double double47 = vector3D40.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        double double48 = plane39.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane49 = plane39.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion50 = subPlane49.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree51 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14, euclidean3DBSPTree23, euclidean3DBSPTree33, (java.lang.Object) subPlane49);
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane52 = subPlane14.copySelf();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion53 = subPlane14.getRemainingRegion();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion21);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion31);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(subPlane49);
        org.junit.Assert.assertNotNull(euclidean2DRegion50);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane52);
        org.junit.Assert.assertNotNull(euclidean2DRegion53);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #382
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: new           #25
133: dup
134: invokespecial #26
137: astore        18
139: new           #8
142: dup
143: aload         18
145: invokespecial #27
148: astore        19
150: aload         19
152: invokevirtual #28
155: dstore        20
157: new           #25
160: dup
161: invokespecial #26
164: astore        22
166: new           #8
169: dup
170: aload         22
172: invokespecial #27
175: astore        23
177: aconst_null
178: astore        24
180: aload         23
182: aload         24
184: invokevirtual #29
187: astore        25
189: aload         23
191: iconst_0
192: invokevirtual #30
195: astore        26
197: aload         19
199: aload         26
201: invokevirtual #31
204: istore        27
206: new           #25
209: dup
210: invokespecial #26
213: astore        28
215: new           #8
218: dup
219: aload         28
221: invokespecial #27
224: astore        29
226: aload         29
228: invokevirtual #28
231: dstore        30
233: new           #25
236: dup
237: invokespecial #26
240: astore        32
242: new           #8
245: dup
246: aload         32
248: invokespecial #27
251: astore        33
253: aconst_null
254: astore        34
256: aload         33
258: aload         34
260: invokevirtual #29
263: astore        35
265: aload         33
267: iconst_0
268: invokevirtual #30
271: astore        36
273: aload         29
275: aload         36
277: invokevirtual #31
280: istore        37
282: getstatic     #10
285: astore        38
287: aload         38
289: invokevirtual #11
292: astore        39
294: getstatic     #10
297: astore        40
299: aload         40
301: invokevirtual #11
304: astore        41
306: new           #12
309: dup
310: aload         38
312: aload         41
314: invokespecial #13
317: astore        42
319: getstatic     #10
322: astore        43
324: aload         43
326: invokevirtual #11
329: astore        44
331: getstatic     #10
334: astore        45
336: aload         45
338: invokevirtual #11
341: astore        46
343: getstatic     #10
346: astore        47
348: aload         47
350: invokevirtual #11
353: astore        48
355: new           #12
358: dup
359: aload         45
361: aload         48
363: invokespecial #13
366: astore        49
368: aload         43
370: aload         48
372: invokevirtual #22
375: dstore        50
377: aload         42
379: aload         48
381: invokevirtual #23
384: dstore        52
386: aload         42
388: invokevirtual #24
391: astore        54
393: aload         54
395: invokevirtual #32
398: astore        55
400: new           #33
403: dup
404: aload         17
406: aload         26
408: aload         36
410: aload         54
412: invokespecial #34
415: astore        56
417: aload         17
419: invokevirtual #239
422: astore        57
424: aload         17
426: invokevirtual #32
429: astore        58
431: aload_1
432: invokestatic  #18
435: aload_2
436: invokestatic  #18
439: aload_3
440: invokestatic  #18
443: aload         4
445: invokestatic  #18
448: aload         6
450: invokestatic  #18
453: aload         7
455: invokestatic  #18
458: aload         8
460: invokestatic  #18
463: aload         9
465: invokestatic  #18
468: aload         10
470: invokestatic  #18
473: aload         11
475: invokestatic  #18
478: dload         13
480: invokestatic  #38
483: invokestatic  #39
486: dload         15
488: invokestatic  #38
491: invokestatic  #39
494: aload         17
496: invokestatic  #18
499: new           #40
502: dup
503: invokespecial #41
506: ldc           #42
508: invokevirtual #43
511: dload         20
513: invokevirtual #44
516: ldc           #45
518: invokevirtual #43
521: dconst_0
522: invokevirtual #44
525: ldc           #42
527: invokevirtual #43
530: invokevirtual #46
533: dload         20
535: dconst_0
536: dcmpl
537: ifne          544
540: iconst_1
541: goto          545
544: iconst_0
545: invokestatic  #47
548: aload         25
550: invokestatic  #18
553: aload         26
555: invokestatic  #18
558: new           #40
561: dup
562: invokespecial #41
565: ldc           #42
567: invokevirtual #43
570: iload         27
572: invokevirtual #48
575: ldc           #45
577: invokevirtual #43
580: iconst_0
581: invokevirtual #48
584: ldc           #42
586: invokevirtual #43
589: invokevirtual #46
592: iload         27
594: ifne          601
597: iconst_1
598: goto          602
601: iconst_0
602: invokestatic  #47
605: new           #40
608: dup
609: invokespecial #41
612: ldc           #42
614: invokevirtual #43
617: dload         30
619: invokevirtual #44
622: ldc           #45
624: invokevirtual #43
627: dconst_0
628: invokevirtual #44
631: ldc           #42
633: invokevirtual #43
636: invokevirtual #46
639: dload         30
641: dconst_0
642: dcmpl
643: ifne          650
646: iconst_1
647: goto          651
650: iconst_0
651: invokestatic  #47
654: aload         35
656: invokestatic  #18
659: aload         36
661: invokestatic  #18
664: new           #40
667: dup
668: invokespecial #41
671: ldc           #42
673: invokevirtual #43
676: iload         37
678: invokevirtual #48
681: ldc           #45
683: invokevirtual #43
686: iconst_0
687: invokevirtual #48
690: ldc           #42
692: invokevirtual #43
695: invokevirtual #46
698: iload         37
700: ifne          707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #47
711: aload         38
713: invokestatic  #18
716: aload         39
718: invokestatic  #18
721: aload         40
723: invokestatic  #18
726: aload         41
728: invokestatic  #18
731: aload         43
733: invokestatic  #18
736: aload         44
738: invokestatic  #18
741: aload         45
743: invokestatic  #18
746: aload         46
748: invokestatic  #18
751: aload         47
753: invokestatic  #18
756: aload         48
758: invokestatic  #18
761: dload         50
763: invokestatic  #38
766: invokestatic  #39
769: dload         52
771: invokestatic  #38
774: invokestatic  #39
777: aload         54
779: invokestatic  #18
782: aload         55
784: invokestatic  #18
787: aload         57
789: invokestatic  #18
792: aload         58
794: invokestatic  #18
797: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test114
Start line: 9282
End line: 9371
Method source code: 
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = plane7.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D14, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        double double26 = vector3D19.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        double double27 = plane18.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane28 = plane18.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion29 = subPlane28.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane30 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane7, euclidean2DRegion29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane45 = plane35.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion46 = subPlane45.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane47 = subPlane45.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane48 = subPlane30.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane45);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane49 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane30);
        double double50 = polyhedronsSet1.getSize();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(subPlane28);
        org.junit.Assert.assertNotNull(euclidean2DRegion29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(subPlane45);
        org.junit.Assert.assertNotNull(euclidean2DRegion46);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane47);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane48);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #383
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #70
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: new           #60
87: dup
88: dconst_0
89: ldc2_w        #61
92: invokespecial #63
95: astore        10
97: new           #64
100: dup
101: aload         10
103: dconst_0
104: invokespecial #65
107: astore        11
109: aload         9
111: aload         10
113: invokevirtual #66
116: astore        12
118: getstatic     #10
121: astore        13
123: aload         13
125: invokevirtual #11
128: astore        14
130: getstatic     #10
133: astore        15
135: aload         15
137: invokevirtual #11
140: astore        16
142: new           #12
145: dup
146: aload         13
148: aload         16
150: invokespecial #13
153: astore        17
155: getstatic     #10
158: astore        18
160: aload         18
162: invokevirtual #11
165: astore        19
167: getstatic     #10
170: astore        20
172: aload         20
174: invokevirtual #11
177: astore        21
179: getstatic     #10
182: astore        22
184: aload         22
186: invokevirtual #11
189: astore        23
191: new           #12
194: dup
195: aload         20
197: aload         23
199: invokespecial #13
202: astore        24
204: aload         18
206: aload         23
208: invokevirtual #22
211: dstore        25
213: aload         17
215: aload         23
217: invokevirtual #23
220: dstore        27
222: aload         17
224: invokevirtual #24
227: astore        29
229: aload         29
231: invokevirtual #32
234: astore        30
236: new           #67
239: dup
240: aload         9
242: aload         30
244: invokespecial #68
247: astore        31
249: getstatic     #10
252: astore        32
254: aload         32
256: invokevirtual #11
259: astore        33
261: getstatic     #10
264: astore        34
266: aload         34
268: invokevirtual #11
271: astore        35
273: new           #12
276: dup
277: aload         32
279: aload         35
281: invokespecial #13
284: astore        36
286: getstatic     #10
289: astore        37
291: aload         37
293: invokevirtual #11
296: astore        38
298: getstatic     #10
301: astore        39
303: aload         39
305: invokevirtual #11
308: astore        40
310: getstatic     #10
313: astore        41
315: aload         41
317: invokevirtual #11
320: astore        42
322: new           #12
325: dup
326: aload         39
328: aload         42
330: invokespecial #13
333: astore        43
335: aload         37
337: aload         42
339: invokevirtual #22
342: dstore        44
344: aload         36
346: aload         42
348: invokevirtual #23
351: dstore        46
353: aload         36
355: invokevirtual #24
358: astore        48
360: aload         48
362: invokevirtual #32
365: astore        49
367: aload         48
369: invokevirtual #71
372: astore        50
374: aload         31
376: aload         48
378: invokevirtual #72
381: astore        51
383: aload_2
384: aload         31
386: invokevirtual #73
389: astore        52
391: aload_2
392: invokevirtual #70
395: dstore        53
397: new           #40
400: dup
401: invokespecial #41
404: ldc           #42
406: invokevirtual #43
409: dload_3
410: invokevirtual #44
413: ldc           #45
415: invokevirtual #43
418: dconst_0
419: invokevirtual #44
422: ldc           #42
424: invokevirtual #43
427: invokevirtual #46
430: dload_3
431: dconst_0
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #47
444: aload         5
446: invokestatic  #18
449: aload         6
451: invokestatic  #18
454: aload         7
456: invokestatic  #18
459: aload         8
461: invokestatic  #18
464: aload         12
466: invokestatic  #18
469: aload         13
471: invokestatic  #18
474: aload         14
476: invokestatic  #18
479: aload         15
481: invokestatic  #18
484: aload         16
486: invokestatic  #18
489: aload         18
491: invokestatic  #18
494: aload         19
496: invokestatic  #18
499: aload         20
501: invokestatic  #18
504: aload         21
506: invokestatic  #18
509: aload         22
511: invokestatic  #18
514: aload         23
516: invokestatic  #18
519: dload         25
521: invokestatic  #38
524: invokestatic  #39
527: dload         27
529: invokestatic  #38
532: invokestatic  #39
535: aload         29
537: invokestatic  #18
540: aload         30
542: invokestatic  #18
545: aload         32
547: invokestatic  #18
550: aload         33
552: invokestatic  #18
555: aload         34
557: invokestatic  #18
560: aload         35
562: invokestatic  #18
565: aload         37
567: invokestatic  #18
570: aload         38
572: invokestatic  #18
575: aload         39
577: invokestatic  #18
580: aload         40
582: invokestatic  #18
585: aload         41
587: invokestatic  #18
590: aload         42
592: invokestatic  #18
595: dload         44
597: invokestatic  #38
600: invokestatic  #39
603: dload         46
605: invokestatic  #38
608: invokestatic  #39
611: aload         48
613: invokestatic  #18
616: aload         49
618: invokestatic  #18
621: aload         50
623: invokestatic  #18
626: aload         51
628: invokestatic  #18
631: aload         52
633: invokestatic  #18
636: new           #40
639: dup
640: invokespecial #41
643: ldc           #42
645: invokevirtual #43
648: dload         53
650: invokevirtual #44
653: ldc           #45
655: invokevirtual #43
658: dconst_0
659: invokevirtual #44
662: ldc           #42
664: invokevirtual #43
667: invokevirtual #46
670: dload         53
672: dconst_0
673: dcmpl
674: ifne          681
677: iconst_1
678: goto          682
681: iconst_0
682: invokestatic  #47
685: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test115
Start line: 9374
End line: 9473
Method source code: 
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D0 = org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN;
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D4 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        java.lang.String str5 = vector2D4.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D8 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line10 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D8, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line15 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, (double) 0.0f);
        boolean boolean16 = line10.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line15);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D19 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line21 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D19, (double) 0.0f);
        line15.reset(vector2D19, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane28 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D24, vector3D27);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        double double36 = vector3D29.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        double double37 = plane28.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D34);
        plane28.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane43 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D39, vector3D42);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        double double51 = vector3D44.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        double double52 = plane43.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D49);
        plane43.revertSelf();
        double double54 = plane28.getOffset(plane43);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane60 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D56, vector3D59);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D55, vector3D59);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D62 = plane43.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59);
        double double63 = vector2D19.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D62);
        double double64 = vector2D4.dotProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D65 = vector2D0.subtract((-1.0d), (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D4);
        org.apache.commons.math3.geometry.euclidean.twod.Line line67 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D4, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet68 = line67.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DBSPTree70 = polygonsSet68.getTree(true);
        org.junit.Assert.assertNotNull(vector2D0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "{0; -0.43}" + "'", str5, "{0; -0.43}");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector2D62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.1833403984568501d + "'", double64 == 0.1833403984568501d);
        org.junit.Assert.assertNotNull(vector2D65);
        org.junit.Assert.assertNotNull(polygonsSet68);
        org.junit.Assert.assertNotNull(euclidean2DBSPTree70);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #384
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #300
28: astore_1
29: new           #60
32: dup
33: dconst_0
34: ldc2_w        #61
37: invokespecial #63
40: astore_2
41: aload_2
42: invokevirtual #192
45: astore_3
46: new           #60
49: dup
50: dconst_0
51: ldc2_w        #61
54: invokespecial #63
57: astore        4
59: new           #64
62: dup
63: aload         4
65: dconst_0
66: invokespecial #65
69: astore        5
71: new           #60
74: dup
75: dconst_0
76: ldc2_w        #61
79: invokespecial #63
82: astore        6
84: new           #64
87: dup
88: aload         6
90: dconst_0
91: invokespecial #65
94: astore        7
96: aload         5
98: aload         7
100: invokevirtual #95
103: istore        8
105: new           #60
108: dup
109: dconst_0
110: ldc2_w        #61
113: invokespecial #63
116: astore        9
118: new           #64
121: dup
122: aload         9
124: dconst_0
125: invokespecial #65
128: astore        10
130: aload         7
132: aload         9
134: ldc2_w        #116
137: invokevirtual #100
140: getstatic     #10
143: astore        11
145: aload         11
147: invokevirtual #11
150: astore        12
152: getstatic     #10
155: astore        13
157: aload         13
159: invokevirtual #11
162: astore        14
164: new           #12
167: dup
168: aload         11
170: aload         14
172: invokespecial #13
175: astore        15
177: getstatic     #10
180: astore        16
182: aload         16
184: invokevirtual #11
187: astore        17
189: getstatic     #10
192: astore        18
194: aload         18
196: invokevirtual #11
199: astore        19
201: getstatic     #10
204: astore        20
206: aload         20
208: invokevirtual #11
211: astore        21
213: new           #12
216: dup
217: aload         18
219: aload         21
221: invokespecial #13
224: astore        22
226: aload         16
228: aload         21
230: invokevirtual #22
233: dstore        23
235: aload         15
237: aload         21
239: invokevirtual #23
242: dstore        25
244: aload         15
246: invokevirtual #20
249: getstatic     #10
252: astore        27
254: aload         27
256: invokevirtual #11
259: astore        28
261: getstatic     #10
264: astore        29
266: aload         29
268: invokevirtual #11
271: astore        30
273: new           #12
276: dup
277: aload         27
279: aload         30
281: invokespecial #13
284: astore        31
286: getstatic     #10
289: astore        32
291: aload         32
293: invokevirtual #11
296: astore        33
298: getstatic     #10
301: astore        34
303: aload         34
305: invokevirtual #11
308: astore        35
310: getstatic     #10
313: astore        36
315: aload         36
317: invokevirtual #11
320: astore        37
322: new           #12
325: dup
326: aload         34
328: aload         37
330: invokespecial #13
333: astore        38
335: aload         32
337: aload         37
339: invokevirtual #22
342: dstore        39
344: aload         31
346: aload         37
348: invokevirtual #23
351: dstore        41
353: aload         31
355: invokevirtual #20
358: aload         15
360: aload         31
362: invokevirtual #82
365: dstore        43
367: getstatic     #10
370: astore        45
372: getstatic     #10
375: astore        46
377: aload         46
379: invokevirtual #11
382: astore        47
384: getstatic     #10
387: astore        48
389: aload         48
391: invokevirtual #11
394: astore        49
396: new           #12
399: dup
400: aload         46
402: aload         49
404: invokespecial #13
407: astore        50
409: aload         45
411: aload         49
413: invokestatic  #96
416: astore        51
418: aload         31
420: aload         49
422: invokevirtual #97
425: astore        52
427: aload         9
429: aload         52
431: invokevirtual #118
434: dstore        53
436: aload_2
437: aload         9
439: invokevirtual #301
442: dstore        55
444: aload_1
445: ldc2_w        #302
448: aload_2
449: invokevirtual #304
452: astore        57
454: new           #64
457: dup
458: aload_2
459: ldc2_w        #119
462: invokespecial #65
465: astore        58
467: aload         58
469: invokevirtual #121
472: astore        59
474: aload         59
476: iconst_1
477: invokevirtual #385
480: astore        60
482: aload_1
483: invokestatic  #18
486: new           #40
489: dup
490: invokespecial #41
493: ldc           #42
495: invokevirtual #43
498: aload_3
499: invokevirtual #43
502: ldc           #201
504: invokevirtual #43
507: invokevirtual #46
510: aload_3
511: ldc           #202
513: invokestatic  #203
516: new           #40
519: dup
520: invokespecial #41
523: ldc           #42
525: invokevirtual #43
528: iload         8
530: invokevirtual #48
533: ldc           #45
535: invokevirtual #43
538: iconst_1
539: invokevirtual #48
542: ldc           #42
544: invokevirtual #43
547: invokevirtual #46
550: iload         8
552: iconst_1
553: if_icmpne     560
556: iconst_1
557: goto          561
560: iconst_0
561: invokestatic  #47
564: aload         11
566: invokestatic  #18
569: aload         12
571: invokestatic  #18
574: aload         13
576: invokestatic  #18
579: aload         14
581: invokestatic  #18
584: aload         16
586: invokestatic  #18
589: aload         17
591: invokestatic  #18
594: aload         18
596: invokestatic  #18
599: aload         19
601: invokestatic  #18
604: aload         20
606: invokestatic  #18
609: aload         21
611: invokestatic  #18
614: dload         23
616: invokestatic  #38
619: invokestatic  #39
622: dload         25
624: invokestatic  #38
627: invokestatic  #39
630: aload         27
632: invokestatic  #18
635: aload         28
637: invokestatic  #18
640: aload         29
642: invokestatic  #18
645: aload         30
647: invokestatic  #18
650: aload         32
652: invokestatic  #18
655: aload         33
657: invokestatic  #18
660: aload         34
662: invokestatic  #18
665: aload         35
667: invokestatic  #18
670: aload         36
672: invokestatic  #18
675: aload         37
677: invokestatic  #18
680: dload         39
682: invokestatic  #38
685: invokestatic  #39
688: dload         41
690: invokestatic  #38
693: invokestatic  #39
696: dload         43
698: invokestatic  #38
701: invokestatic  #39
704: aload         45
706: invokestatic  #18
709: aload         46
711: invokestatic  #18
714: aload         47
716: invokestatic  #18
719: aload         48
721: invokestatic  #18
724: aload         49
726: invokestatic  #18
729: aload         51
731: invokestatic  #18
734: aload         52
736: invokestatic  #18
739: dload         53
741: invokestatic  #38
744: invokestatic  #39
747: new           #40
750: dup
751: invokespecial #41
754: ldc           #42
756: invokevirtual #43
759: dload         55
761: invokevirtual #44
764: ldc           #45
766: invokevirtual #43
769: ldc2_w        #154
772: invokevirtual #44
775: ldc           #42
777: invokevirtual #43
780: invokevirtual #46
783: dload         55
785: ldc2_w        #154
788: dcmpl
789: ifne          796
792: iconst_1
793: goto          797
796: iconst_0
797: invokestatic  #47
800: aload         57
802: invokestatic  #18
805: aload         59
807: invokestatic  #18
810: aload         60
812: invokestatic  #18
815: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test116
Start line: 9476
End line: 9558
Method source code: 
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree2 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion3 = polyhedronsSet1.buildNew(euclidean3DBSPTree2);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree5 = polyhedronsSet1.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D9, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D8, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D8.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D6.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet22 = polyhedronsSet1.translate(vector3D21);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree24 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((java.lang.Object) 0.1833403984568501d);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet25 = polyhedronsSet1.buildNew(euclidean3DBSPTree24);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree26 = euclidean3DBSPTree24.copySelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane31 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D27, vector3D30);
        plane31.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = vector3D37.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane39 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D35, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D34, vector3D38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D34.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D33, vector3D41);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector43 = plane31.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D33);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane44 = plane31.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane45 = plane31.copySelf();
        boolean boolean46 = euclidean3DBSPTree26.insertCut((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane45);
        org.junit.Assert.assertNotNull(euclidean3DRegion3);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(polyhedronsSet22);
        org.junit.Assert.assertNotNull(polyhedronsSet25);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(euclidean2DVector43);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane44);
        org.junit.Assert.assertNotNull(plane45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #386
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aconst_null
43: astore_3
44: aload_2
45: aload_3
46: invokevirtual #29
49: astore        4
51: aload_2
52: iconst_0
53: invokevirtual #30
56: astore        5
58: getstatic     #10
61: astore        6
63: getstatic     #10
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         7
107: aload         11
109: invokestatic  #96
112: astore        13
114: getstatic     #10
117: astore        14
119: aload         14
121: invokevirtual #11
124: astore        15
126: getstatic     #10
129: astore        16
131: aload         16
133: invokevirtual #11
136: astore        17
138: new           #12
141: dup
142: aload         14
144: aload         17
146: invokespecial #13
149: astore        18
151: aload         7
153: aload         17
155: invokevirtual #111
158: astore        19
160: aload         6
162: dconst_1
163: aload         17
165: invokevirtual #112
168: astore        20
170: aload_2
171: aload         20
173: invokevirtual #153
176: astore        21
178: new           #33
181: dup
182: ldc2_w        #154
185: invokestatic  #156
188: invokespecial #157
191: astore        22
193: aload_2
194: aload         22
196: invokevirtual #29
199: astore        23
201: aload         22
203: invokevirtual #221
206: astore        24
208: getstatic     #10
211: astore        25
213: aload         25
215: invokevirtual #11
218: astore        26
220: getstatic     #10
223: astore        27
225: aload         27
227: invokevirtual #11
230: astore        28
232: new           #12
235: dup
236: aload         25
238: aload         28
240: invokespecial #13
243: astore        29
245: aload         29
247: invokevirtual #20
250: getstatic     #10
253: astore        30
255: getstatic     #10
258: astore        31
260: getstatic     #10
263: astore        32
265: aload         32
267: invokevirtual #11
270: astore        33
272: getstatic     #10
275: astore        34
277: aload         34
279: invokevirtual #11
282: astore        35
284: new           #12
287: dup
288: aload         32
290: aload         35
292: invokespecial #13
295: astore        36
297: aload         31
299: aload         35
301: invokestatic  #96
304: astore        37
306: aload         31
308: invokevirtual #110
311: astore        38
313: aload         30
315: aload         38
317: invokestatic  #96
320: astore        39
322: aload         29
324: aload         30
326: invokevirtual #97
329: astore        40
331: aload         29
333: invokevirtual #24
336: astore        41
338: aload         29
340: invokevirtual #130
343: astore        42
345: aload         24
347: aload         42
349: invokevirtual #387
352: istore        43
354: aload         4
356: invokestatic  #18
359: aload         5
361: invokestatic  #18
364: aload         6
366: invokestatic  #18
369: aload         7
371: invokestatic  #18
374: aload         8
376: invokestatic  #18
379: aload         9
381: invokestatic  #18
384: aload         10
386: invokestatic  #18
389: aload         11
391: invokestatic  #18
394: aload         13
396: invokestatic  #18
399: aload         14
401: invokestatic  #18
404: aload         15
406: invokestatic  #18
409: aload         16
411: invokestatic  #18
414: aload         17
416: invokestatic  #18
419: aload         19
421: invokestatic  #18
424: aload         20
426: invokestatic  #18
429: aload         21
431: invokestatic  #18
434: aload         23
436: invokestatic  #18
439: aload         24
441: invokestatic  #18
444: aload         25
446: invokestatic  #18
449: aload         26
451: invokestatic  #18
454: aload         27
456: invokestatic  #18
459: aload         28
461: invokestatic  #18
464: aload         30
466: invokestatic  #18
469: aload         31
471: invokestatic  #18
474: aload         32
476: invokestatic  #18
479: aload         33
481: invokestatic  #18
484: aload         34
486: invokestatic  #18
489: aload         35
491: invokestatic  #18
494: aload         37
496: invokestatic  #18
499: aload         38
501: invokestatic  #18
504: aload         39
506: invokestatic  #18
509: aload         40
511: invokestatic  #18
514: aload         41
516: invokestatic  #18
519: aload         42
521: invokestatic  #18
524: new           #40
527: dup
528: invokespecial #41
531: ldc           #42
533: invokevirtual #43
536: iload         43
538: invokevirtual #48
541: ldc           #45
543: invokevirtual #43
546: iconst_1
547: invokevirtual #48
550: ldc           #42
552: invokevirtual #43
555: invokevirtual #46
558: iload         43
560: iconst_1
561: if_icmpne     568
564: iconst_1
565: goto          569
568: iconst_0
569: invokestatic  #47
572: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test117
Start line: 9561
End line: 9637
Method source code: 
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet37 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree39 = polyhedronsSet37.getTree(true);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane40 = euclidean3DBSPTree39.getCut();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet41 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree39);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree39);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane40);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #388
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: getstatic     #10
133: astore        18
135: aload         18
137: invokevirtual #11
140: astore        19
142: getstatic     #10
145: astore        20
147: aload         20
149: invokevirtual #11
152: astore        21
154: new           #12
157: dup
158: aload         18
160: aload         21
162: invokespecial #13
165: astore        22
167: getstatic     #10
170: astore        23
172: aload         23
174: invokevirtual #11
177: astore        24
179: getstatic     #10
182: astore        25
184: aload         25
186: invokevirtual #11
189: astore        26
191: getstatic     #10
194: astore        27
196: aload         27
198: invokevirtual #11
201: astore        28
203: new           #12
206: dup
207: aload         25
209: aload         28
211: invokespecial #13
214: astore        29
216: aload         23
218: aload         28
220: invokevirtual #22
223: dstore        30
225: aload         22
227: aload         28
229: invokevirtual #23
232: dstore        32
234: aload         22
236: invokevirtual #24
239: astore        34
241: aload         34
243: invokevirtual #32
246: astore        35
248: aload         34
250: invokevirtual #71
253: astore        36
255: new           #25
258: dup
259: invokespecial #26
262: astore        37
264: aload         37
266: aload         17
268: invokevirtual #189
271: istore        38
273: aload         37
275: aload         34
277: invokevirtual #189
280: istore        39
282: new           #8
285: dup
286: aload         37
288: invokespecial #27
291: astore        40
293: new           #8
296: dup
297: aload         37
299: invokespecial #27
302: astore        41
304: new           #8
307: dup
308: aload         37
310: invokespecial #27
313: astore        42
315: aload         42
317: iconst_1
318: invokevirtual #30
321: astore        43
323: aload         43
325: invokevirtual #149
328: astore        44
330: new           #8
333: dup
334: aload         43
336: invokespecial #9
339: astore        45
341: aload_1
342: invokestatic  #18
345: aload_2
346: invokestatic  #18
349: aload_3
350: invokestatic  #18
353: aload         4
355: invokestatic  #18
358: aload         6
360: invokestatic  #18
363: aload         7
365: invokestatic  #18
368: aload         8
370: invokestatic  #18
373: aload         9
375: invokestatic  #18
378: aload         10
380: invokestatic  #18
383: aload         11
385: invokestatic  #18
388: dload         13
390: invokestatic  #38
393: invokestatic  #39
396: dload         15
398: invokestatic  #38
401: invokestatic  #39
404: aload         17
406: invokestatic  #18
409: aload         18
411: invokestatic  #18
414: aload         19
416: invokestatic  #18
419: aload         20
421: invokestatic  #18
424: aload         21
426: invokestatic  #18
429: aload         23
431: invokestatic  #18
434: aload         24
436: invokestatic  #18
439: aload         25
441: invokestatic  #18
444: aload         26
446: invokestatic  #18
449: aload         27
451: invokestatic  #18
454: aload         28
456: invokestatic  #18
459: dload         30
461: invokestatic  #38
464: invokestatic  #39
467: dload         32
469: invokestatic  #38
472: invokestatic  #39
475: aload         34
477: invokestatic  #18
480: aload         35
482: invokestatic  #18
485: aload         36
487: invokestatic  #18
490: new           #40
493: dup
494: invokespecial #41
497: ldc           #42
499: invokevirtual #43
502: iload         38
504: invokevirtual #48
507: ldc           #45
509: invokevirtual #43
512: iconst_1
513: invokevirtual #48
516: ldc           #42
518: invokevirtual #43
521: invokevirtual #46
524: iload         38
526: iconst_1
527: if_icmpne     534
530: iconst_1
531: goto          535
534: iconst_0
535: invokestatic  #47
538: new           #40
541: dup
542: invokespecial #41
545: ldc           #42
547: invokevirtual #43
550: iload         39
552: invokevirtual #48
555: ldc           #45
557: invokevirtual #43
560: iconst_1
561: invokevirtual #48
564: ldc           #42
566: invokevirtual #43
569: invokevirtual #46
572: iload         39
574: iconst_1
575: if_icmpne     582
578: iconst_1
579: goto          583
582: iconst_0
583: invokestatic  #47
586: aload         43
588: invokestatic  #18
591: aload         44
593: invokestatic  #18
596: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test118
Start line: 9640
End line: 9791
Method source code: 
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane12 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D8, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D7.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D6, vector3D14);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector16 = plane4.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane17 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = plane4.copySelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane23 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D19, vector3D22);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = vector3D26.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = vector3D28.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane30 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D26, vector3D29);
        double double31 = vector3D24.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29);
        double double32 = plane23.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D29);
        plane23.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = vector3D34.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane38 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D34, vector3D37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = vector3D39.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = vector3D41.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = vector3D43.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane45 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D41, vector3D44);
        double double46 = vector3D39.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44);
        double double47 = plane38.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D44);
        plane38.revertSelf();
        double double49 = plane23.getOffset(plane38);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane54 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D50, vector3D53);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = vector3D57.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D60 = vector3D59.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane61 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D57, vector3D60);
        double double62 = vector3D55.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D60);
        double double63 = plane54.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D60);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = plane54.getOrigin();
        double double65 = plane38.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D64);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = vector3D69.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D72 = vector3D71.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane73 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D69, vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D68, vector3D72);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = vector3D68.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D67, vector3D75);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D((double) (byte) 10, vector3D76);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = vector3D64.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D76);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0.428182669496151d, 0.0d);
        double double82 = vector3D76.distanceSq((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D81);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector83 = plane18.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D76);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(euclidean2DVector16);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane17);
        org.junit.Assert.assertNotNull(plane18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D60);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D72);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(euclidean2DVector83);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #389
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: aload         5
58: invokevirtual #20
61: getstatic     #10
64: astore        6
66: getstatic     #10
69: astore        7
71: getstatic     #10
74: astore        8
76: aload         8
78: invokevirtual #11
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: new           #12
98: dup
99: aload         8
101: aload         11
103: invokespecial #13
106: astore        12
108: aload         7
110: aload         11
112: invokestatic  #96
115: astore        13
117: aload         7
119: invokevirtual #110
122: astore        14
124: aload         6
126: aload         14
128: invokestatic  #96
131: astore        15
133: aload         5
135: aload         6
137: invokevirtual #97
140: astore        16
142: aload         5
144: invokevirtual #24
147: astore        17
149: aload         5
151: invokevirtual #130
154: astore        18
156: getstatic     #10
159: astore        19
161: aload         19
163: invokevirtual #11
166: astore        20
168: getstatic     #10
171: astore        21
173: aload         21
175: invokevirtual #11
178: astore        22
180: new           #12
183: dup
184: aload         19
186: aload         22
188: invokespecial #13
191: astore        23
193: getstatic     #10
196: astore        24
198: aload         24
200: invokevirtual #11
203: astore        25
205: getstatic     #10
208: astore        26
210: aload         26
212: invokevirtual #11
215: astore        27
217: getstatic     #10
220: astore        28
222: aload         28
224: invokevirtual #11
227: astore        29
229: new           #12
232: dup
233: aload         26
235: aload         29
237: invokespecial #13
240: astore        30
242: aload         24
244: aload         29
246: invokevirtual #22
249: dstore        31
251: aload         23
253: aload         29
255: invokevirtual #23
258: dstore        33
260: aload         23
262: invokevirtual #20
265: getstatic     #10
268: astore        35
270: aload         35
272: invokevirtual #11
275: astore        36
277: getstatic     #10
280: astore        37
282: aload         37
284: invokevirtual #11
287: astore        38
289: new           #12
292: dup
293: aload         35
295: aload         38
297: invokespecial #13
300: astore        39
302: getstatic     #10
305: astore        40
307: aload         40
309: invokevirtual #11
312: astore        41
314: getstatic     #10
317: astore        42
319: aload         42
321: invokevirtual #11
324: astore        43
326: getstatic     #10
329: astore        44
331: aload         44
333: invokevirtual #11
336: astore        45
338: new           #12
341: dup
342: aload         42
344: aload         45
346: invokespecial #13
349: astore        46
351: aload         40
353: aload         45
355: invokevirtual #22
358: dstore        47
360: aload         39
362: aload         45
364: invokevirtual #23
367: dstore        49
369: aload         39
371: invokevirtual #20
374: aload         23
376: aload         39
378: invokevirtual #82
381: dstore        51
383: getstatic     #10
386: astore        53
388: aload         53
390: invokevirtual #11
393: astore        54
395: getstatic     #10
398: astore        55
400: aload         55
402: invokevirtual #11
405: astore        56
407: new           #12
410: dup
411: aload         53
413: aload         56
415: invokespecial #13
418: astore        57
420: getstatic     #10
423: astore        58
425: aload         58
427: invokevirtual #11
430: astore        59
432: getstatic     #10
435: astore        60
437: aload         60
439: invokevirtual #11
442: astore        61
444: getstatic     #10
447: astore        62
449: aload         62
451: invokevirtual #11
454: astore        63
456: new           #12
459: dup
460: aload         60
462: aload         63
464: invokespecial #13
467: astore        64
469: aload         58
471: aload         63
473: invokevirtual #22
476: dstore        65
478: aload         57
480: aload         63
482: invokevirtual #23
485: dstore        67
487: aload         57
489: invokevirtual #83
492: astore        69
494: aload         39
496: aload         69
498: invokevirtual #23
501: dstore        70
503: getstatic     #10
506: astore        72
508: getstatic     #10
511: astore        73
513: getstatic     #10
516: astore        74
518: aload         74
520: invokevirtual #11
523: astore        75
525: getstatic     #10
528: astore        76
530: aload         76
532: invokevirtual #11
535: astore        77
537: new           #12
540: dup
541: aload         74
543: aload         77
545: invokespecial #13
548: astore        78
550: aload         73
552: aload         77
554: invokestatic  #96
557: astore        79
559: aload         73
561: invokevirtual #110
564: astore        80
566: aload         72
568: aload         80
570: invokestatic  #96
573: astore        81
575: new           #175
578: dup
579: ldc2_w        #198
582: aload         81
584: invokespecial #180
587: astore        82
589: aload         69
591: aload         81
593: invokevirtual #294
596: astore        83
598: new           #175
601: dup
602: ldc2_w        #176
605: dconst_0
606: invokespecial #178
609: astore        84
611: aload         81
613: aload         84
615: invokevirtual #390
618: dstore        85
620: aload         18
622: aload         81
624: invokevirtual #97
627: astore        87
629: aload_1
630: invokestatic  #18
633: aload_2
634: invokestatic  #18
637: aload_3
638: invokestatic  #18
641: aload         4
643: invokestatic  #18
646: aload         6
648: invokestatic  #18
651: aload         7
653: invokestatic  #18
656: aload         8
658: invokestatic  #18
661: aload         9
663: invokestatic  #18
666: aload         10
668: invokestatic  #18
671: aload         11
673: invokestatic  #18
676: aload         13
678: invokestatic  #18
681: aload         14
683: invokestatic  #18
686: aload         15
688: invokestatic  #18
691: aload         16
693: invokestatic  #18
696: aload         17
698: invokestatic  #18
701: aload         18
703: invokestatic  #18
706: aload         19
708: invokestatic  #18
711: aload         20
713: invokestatic  #18
716: aload         21
718: invokestatic  #18
721: aload         22
723: invokestatic  #18
726: aload         24
728: invokestatic  #18
731: aload         25
733: invokestatic  #18
736: aload         26
738: invokestatic  #18
741: aload         27
743: invokestatic  #18
746: aload         28
748: invokestatic  #18
751: aload         29
753: invokestatic  #18
756: dload         31
758: invokestatic  #38
761: invokestatic  #39
764: dload         33
766: invokestatic  #38
769: invokestatic  #39
772: aload         35
774: invokestatic  #18
777: aload         36
779: invokestatic  #18
782: aload         37
784: invokestatic  #18
787: aload         38
789: invokestatic  #18
792: aload         40
794: invokestatic  #18
797: aload         41
799: invokestatic  #18
802: aload         42
804: invokestatic  #18
807: aload         43
809: invokestatic  #18
812: aload         44
814: invokestatic  #18
817: aload         45
819: invokestatic  #18
822: dload         47
824: invokestatic  #38
827: invokestatic  #39
830: dload         49
832: invokestatic  #38
835: invokestatic  #39
838: dload         51
840: invokestatic  #38
843: invokestatic  #39
846: aload         53
848: invokestatic  #18
851: aload         54
853: invokestatic  #18
856: aload         55
858: invokestatic  #18
861: aload         56
863: invokestatic  #18
866: aload         58
868: invokestatic  #18
871: aload         59
873: invokestatic  #18
876: aload         60
878: invokestatic  #18
881: aload         61
883: invokestatic  #18
886: aload         62
888: invokestatic  #18
891: aload         63
893: invokestatic  #18
896: dload         65
898: invokestatic  #38
901: invokestatic  #39
904: dload         67
906: invokestatic  #38
909: invokestatic  #39
912: aload         69
914: invokestatic  #18
917: dload         70
919: invokestatic  #38
922: invokestatic  #39
925: aload         72
927: invokestatic  #18
930: aload         73
932: invokestatic  #18
935: aload         74
937: invokestatic  #18
940: aload         75
942: invokestatic  #18
945: aload         76
947: invokestatic  #18
950: aload         77
952: invokestatic  #18
955: aload         79
957: invokestatic  #18
960: aload         80
962: invokestatic  #18
965: aload         81
967: invokestatic  #18
970: aload         83
972: invokestatic  #18
975: dload         85
977: invokestatic  #38
980: invokestatic  #39
983: aload         87
985: invokestatic  #18
988: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test119
Start line: 9794
End line: 9897
Method source code: 
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line4 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D2, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        boolean boolean8 = vector2D7.isInfinite();
        line4.translateToPoint(vector2D7);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>> euclidean2DSubHyperplaneList10 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>();
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet11 = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>>) euclidean2DSubHyperplaneList10);
        boolean boolean12 = polygonsSet11.isEmpty();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D15 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line17 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D15, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D20 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line22 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D20, (double) 0.0f);
        boolean boolean23 = line17.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line22);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D26 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line28 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D26, (double) 0.0f);
        line22.reset(vector2D26, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        plane35.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        double double58 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        double double59 = plane50.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        plane50.revertSelf();
        double double61 = plane35.getOffset(plane50);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = vector3D63.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = vector3D65.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane67 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D63, vector3D66);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D62, vector3D66);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = plane50.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66);
        double double70 = vector2D26.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D69);
        org.apache.commons.math3.geometry.euclidean.twod.Line line72 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D26, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet73 = line72.wholeSpace();
        org.apache.commons.math3.geometry.partitioning.Side side74 = polygonsSet11.side((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line72);
        boolean boolean75 = line4.isParallelTo(line72);
        line4.setOriginOffset(2.2250738585072014E-308d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(polygonsSet73);
        org.junit.Assert.assertTrue("'" + side74 + "' != '" + org.apache.commons.math3.geometry.partitioning.Side.BOTH + "'", side74.equals(org.apache.commons.math3.geometry.partitioning.Side.BOTH));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #391
20: aastore
21: invokevirtual #7
24: pop
25: new           #60
28: dup
29: dconst_0
30: ldc2_w        #61
33: invokespecial #63
36: astore_1
37: new           #64
40: dup
41: aload_1
42: dconst_0
43: invokespecial #65
46: astore_2
47: new           #60
50: dup
51: dconst_0
52: ldc2_w        #61
55: invokespecial #63
58: astore_3
59: aload_3
60: invokevirtual #352
63: istore        4
65: aload_2
66: aload_3
67: invokevirtual #353
70: new           #25
73: dup
74: invokespecial #26
77: astore        5
79: new           #56
82: dup
83: aload         5
85: invokespecial #57
88: astore        6
90: aload         6
92: invokevirtual #145
95: istore        7
97: new           #60
100: dup
101: dconst_0
102: ldc2_w        #61
105: invokespecial #63
108: astore        8
110: new           #64
113: dup
114: aload         8
116: dconst_0
117: invokespecial #65
120: astore        9
122: new           #60
125: dup
126: dconst_0
127: ldc2_w        #61
130: invokespecial #63
133: astore        10
135: new           #64
138: dup
139: aload         10
141: dconst_0
142: invokespecial #65
145: astore        11
147: aload         9
149: aload         11
151: invokevirtual #95
154: istore        12
156: new           #60
159: dup
160: dconst_0
161: ldc2_w        #61
164: invokespecial #63
167: astore        13
169: new           #64
172: dup
173: aload         13
175: dconst_0
176: invokespecial #65
179: astore        14
181: aload         11
183: aload         13
185: ldc2_w        #116
188: invokevirtual #100
191: getstatic     #10
194: astore        15
196: aload         15
198: invokevirtual #11
201: astore        16
203: getstatic     #10
206: astore        17
208: aload         17
210: invokevirtual #11
213: astore        18
215: new           #12
218: dup
219: aload         15
221: aload         18
223: invokespecial #13
226: astore        19
228: getstatic     #10
231: astore        20
233: aload         20
235: invokevirtual #11
238: astore        21
240: getstatic     #10
243: astore        22
245: aload         22
247: invokevirtual #11
250: astore        23
252: getstatic     #10
255: astore        24
257: aload         24
259: invokevirtual #11
262: astore        25
264: new           #12
267: dup
268: aload         22
270: aload         25
272: invokespecial #13
275: astore        26
277: aload         20
279: aload         25
281: invokevirtual #22
284: dstore        27
286: aload         19
288: aload         25
290: invokevirtual #23
293: dstore        29
295: aload         19
297: invokevirtual #20
300: getstatic     #10
303: astore        31
305: aload         31
307: invokevirtual #11
310: astore        32
312: getstatic     #10
315: astore        33
317: aload         33
319: invokevirtual #11
322: astore        34
324: new           #12
327: dup
328: aload         31
330: aload         34
332: invokespecial #13
335: astore        35
337: getstatic     #10
340: astore        36
342: aload         36
344: invokevirtual #11
347: astore        37
349: getstatic     #10
352: astore        38
354: aload         38
356: invokevirtual #11
359: astore        39
361: getstatic     #10
364: astore        40
366: aload         40
368: invokevirtual #11
371: astore        41
373: new           #12
376: dup
377: aload         38
379: aload         41
381: invokespecial #13
384: astore        42
386: aload         36
388: aload         41
390: invokevirtual #22
393: dstore        43
395: aload         35
397: aload         41
399: invokevirtual #23
402: dstore        45
404: aload         35
406: invokevirtual #20
409: aload         19
411: aload         35
413: invokevirtual #82
416: dstore        47
418: getstatic     #10
421: astore        49
423: getstatic     #10
426: astore        50
428: aload         50
430: invokevirtual #11
433: astore        51
435: getstatic     #10
438: astore        52
440: aload         52
442: invokevirtual #11
445: astore        53
447: new           #12
450: dup
451: aload         50
453: aload         53
455: invokespecial #13
458: astore        54
460: aload         49
462: aload         53
464: invokestatic  #96
467: astore        55
469: aload         35
471: aload         53
473: invokevirtual #97
476: astore        56
478: aload         13
480: aload         56
482: invokevirtual #118
485: dstore        57
487: new           #64
490: dup
491: aload         13
493: ldc2_w        #119
496: invokespecial #65
499: astore        59
501: aload         59
503: invokevirtual #121
506: astore        60
508: aload         6
510: aload         59
512: invokevirtual #101
515: astore        61
517: aload_2
518: aload         59
520: invokevirtual #355
523: istore        62
525: aload_2
526: ldc2_w        #119
529: invokevirtual #392
532: new           #40
535: dup
536: invokespecial #41
539: ldc           #42
541: invokevirtual #43
544: iload         4
546: invokevirtual #48
549: ldc           #45
551: invokevirtual #43
554: iconst_0
555: invokevirtual #48
558: ldc           #42
560: invokevirtual #43
563: invokevirtual #46
566: iload         4
568: ifne          575
571: iconst_1
572: goto          576
575: iconst_0
576: invokestatic  #47
579: new           #40
582: dup
583: invokespecial #41
586: ldc           #42
588: invokevirtual #43
591: iload         7
593: invokevirtual #48
596: ldc           #45
598: invokevirtual #43
601: iconst_0
602: invokevirtual #48
605: ldc           #42
607: invokevirtual #43
610: invokevirtual #46
613: iload         7
615: ifne          622
618: iconst_1
619: goto          623
622: iconst_0
623: invokestatic  #47
626: new           #40
629: dup
630: invokespecial #41
633: ldc           #42
635: invokevirtual #43
638: iload         12
640: invokevirtual #48
643: ldc           #45
645: invokevirtual #43
648: iconst_1
649: invokevirtual #48
652: ldc           #42
654: invokevirtual #43
657: invokevirtual #46
660: iload         12
662: iconst_1
663: if_icmpne     670
666: iconst_1
667: goto          671
670: iconst_0
671: invokestatic  #47
674: aload         15
676: invokestatic  #18
679: aload         16
681: invokestatic  #18
684: aload         17
686: invokestatic  #18
689: aload         18
691: invokestatic  #18
694: aload         20
696: invokestatic  #18
699: aload         21
701: invokestatic  #18
704: aload         22
706: invokestatic  #18
709: aload         23
711: invokestatic  #18
714: aload         24
716: invokestatic  #18
719: aload         25
721: invokestatic  #18
724: dload         27
726: invokestatic  #38
729: invokestatic  #39
732: dload         29
734: invokestatic  #38
737: invokestatic  #39
740: aload         31
742: invokestatic  #18
745: aload         32
747: invokestatic  #18
750: aload         33
752: invokestatic  #18
755: aload         34
757: invokestatic  #18
760: aload         36
762: invokestatic  #18
765: aload         37
767: invokestatic  #18
770: aload         38
772: invokestatic  #18
775: aload         39
777: invokestatic  #18
780: aload         40
782: invokestatic  #18
785: aload         41
787: invokestatic  #18
790: dload         43
792: invokestatic  #38
795: invokestatic  #39
798: dload         45
800: invokestatic  #38
803: invokestatic  #39
806: dload         47
808: invokestatic  #38
811: invokestatic  #39
814: aload         49
816: invokestatic  #18
819: aload         50
821: invokestatic  #18
824: aload         51
826: invokestatic  #18
829: aload         52
831: invokestatic  #18
834: aload         53
836: invokestatic  #18
839: aload         55
841: invokestatic  #18
844: aload         56
846: invokestatic  #18
849: dload         57
851: invokestatic  #38
854: invokestatic  #39
857: aload         60
859: invokestatic  #18
862: new           #40
865: dup
866: invokespecial #41
869: ldc           #42
871: invokevirtual #43
874: aload         61
876: invokevirtual #102
879: ldc           #45
881: invokevirtual #43
884: getstatic     #103
887: invokevirtual #102
890: ldc           #42
892: invokevirtual #43
895: invokevirtual #46
898: aload         61
900: getstatic     #103
903: invokevirtual #104
906: invokestatic  #47
909: new           #40
912: dup
913: invokespecial #41
916: ldc           #42
918: invokevirtual #43
921: iload         62
923: invokevirtual #48
926: ldc           #45
928: invokevirtual #43
931: iconst_1
932: invokevirtual #48
935: ldc           #42
937: invokevirtual #43
940: invokevirtual #46
943: iload         62
945: iconst_1
946: if_icmpne     953
949: iconst_1
950: goto          954
953: iconst_0
954: invokestatic  #47
957: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test120
Start line: 9900
End line: 9979
Method source code: 
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        boolean boolean37 = polyhedronsSet36.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            double double38 = polyhedronsSet36.getBoundarySize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathInternalError; message: illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH");
        } catch (org.apache.commons.math3.exception.MathInternalError e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #393
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: getstatic     #10
133: astore        18
135: aload         18
137: invokevirtual #11
140: astore        19
142: getstatic     #10
145: astore        20
147: aload         20
149: invokevirtual #11
152: astore        21
154: new           #12
157: dup
158: aload         18
160: aload         21
162: invokespecial #13
165: astore        22
167: getstatic     #10
170: astore        23
172: aload         23
174: invokevirtual #11
177: astore        24
179: getstatic     #10
182: astore        25
184: aload         25
186: invokevirtual #11
189: astore        26
191: getstatic     #10
194: astore        27
196: aload         27
198: invokevirtual #11
201: astore        28
203: new           #12
206: dup
207: aload         25
209: aload         28
211: invokespecial #13
214: astore        29
216: aload         23
218: aload         28
220: invokevirtual #22
223: dstore        30
225: aload         22
227: aload         28
229: invokevirtual #23
232: dstore        32
234: aload         22
236: invokevirtual #24
239: astore        34
241: aload         34
243: invokevirtual #32
246: astore        35
248: aload         34
250: invokevirtual #71
253: astore        36
255: new           #25
258: dup
259: invokespecial #26
262: astore        37
264: aload         37
266: aload         17
268: invokevirtual #189
271: istore        38
273: aload         37
275: aload         34
277: invokevirtual #189
280: istore        39
282: new           #8
285: dup
286: aload         37
288: invokespecial #27
291: astore        40
293: new           #8
296: dup
297: aload         37
299: invokespecial #27
302: astore        41
304: aload         41
306: invokevirtual #151
309: istore        42
311: aload         41
313: invokevirtual #28
316: dstore        43
318: ldc           #216
320: invokestatic  #16
323: goto          328
326: astore        43
328: aload_1
329: invokestatic  #18
332: aload_2
333: invokestatic  #18
336: aload_3
337: invokestatic  #18
340: aload         4
342: invokestatic  #18
345: aload         6
347: invokestatic  #18
350: aload         7
352: invokestatic  #18
355: aload         8
357: invokestatic  #18
360: aload         9
362: invokestatic  #18
365: aload         10
367: invokestatic  #18
370: aload         11
372: invokestatic  #18
375: dload         13
377: invokestatic  #38
380: invokestatic  #39
383: dload         15
385: invokestatic  #38
388: invokestatic  #39
391: aload         17
393: invokestatic  #18
396: aload         18
398: invokestatic  #18
401: aload         19
403: invokestatic  #18
406: aload         20
408: invokestatic  #18
411: aload         21
413: invokestatic  #18
416: aload         23
418: invokestatic  #18
421: aload         24
423: invokestatic  #18
426: aload         25
428: invokestatic  #18
431: aload         26
433: invokestatic  #18
436: aload         27
438: invokestatic  #18
441: aload         28
443: invokestatic  #18
446: dload         30
448: invokestatic  #38
451: invokestatic  #39
454: dload         32
456: invokestatic  #38
459: invokestatic  #39
462: aload         34
464: invokestatic  #18
467: aload         35
469: invokestatic  #18
472: aload         36
474: invokestatic  #18
477: new           #40
480: dup
481: invokespecial #41
484: ldc           #42
486: invokevirtual #43
489: iload         38
491: invokevirtual #48
494: ldc           #45
496: invokevirtual #43
499: iconst_1
500: invokevirtual #48
503: ldc           #42
505: invokevirtual #43
508: invokevirtual #46
511: iload         38
513: iconst_1
514: if_icmpne     521
517: iconst_1
518: goto          522
521: iconst_0
522: invokestatic  #47
525: new           #40
528: dup
529: invokespecial #41
532: ldc           #42
534: invokevirtual #43
537: iload         39
539: invokevirtual #48
542: ldc           #45
544: invokevirtual #43
547: iconst_1
548: invokevirtual #48
551: ldc           #42
553: invokevirtual #43
556: invokevirtual #46
559: iload         39
561: iconst_1
562: if_icmpne     569
565: iconst_1
566: goto          570
569: iconst_0
570: invokestatic  #47
573: new           #40
576: dup
577: invokespecial #41
580: ldc           #42
582: invokevirtual #43
585: iload         42
587: invokevirtual #48
590: ldc           #45
592: invokevirtual #43
595: iconst_0
596: invokevirtual #48
599: ldc           #42
601: invokevirtual #43
604: invokevirtual #46
607: iload         42
609: ifne          616
612: iconst_1
613: goto          617
616: iconst_0
617: invokestatic  #47
620: return
Exception table:
from    to  target type
311   323   326   Class org/apache/commons/math3/exception/MathInternalError
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test121
Start line: 9982
End line: 10096
Method source code: 
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getBoundarySize();
        org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DTransform3 = null;
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion4 = polyhedronsSet1.applyTransform(euclidean3DTransform3);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList5 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet6 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList5);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree7 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion8 = polyhedronsSet6.buildNew(euclidean3DBSPTree7);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree10 = polyhedronsSet6.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet11 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree10);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector12 = null;
        org.apache.commons.math3.geometry.partitioning.Region.Location location13 = polyhedronsSet11.checkPoint(euclidean3DVector12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D14, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        double double26 = vector3D19.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        double double27 = plane18.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane28 = plane18.wholeHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList29 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet30 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList29);
        double double31 = polyhedronsSet30.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet33 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree34 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion35 = polyhedronsSet33.buildNew(euclidean3DBSPTree34);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree37 = polyhedronsSet33.getTree(false);
        boolean boolean38 = polyhedronsSet30.isEmpty(euclidean3DBSPTree37);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList39 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet40 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList39);
        double double41 = polyhedronsSet40.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList42 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet43 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList42);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree44 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion45 = polyhedronsSet43.buildNew(euclidean3DBSPTree44);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree47 = polyhedronsSet43.getTree(false);
        boolean boolean48 = polyhedronsSet40.isEmpty(euclidean3DBSPTree47);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = vector3D49.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane53 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D49, vector3D52);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = vector3D54.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D57 = vector3D56.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D58 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = vector3D58.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane60 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D56, vector3D59);
        double double61 = vector3D54.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59);
        double double62 = plane53.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D59);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane63 = plane53.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion64 = subPlane63.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree65 = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane28, euclidean3DBSPTree37, euclidean3DBSPTree47, (java.lang.Object) subPlane63);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree66 = euclidean3DBSPTree37.copySelf();
        boolean boolean67 = polyhedronsSet11.isEmpty(euclidean3DBSPTree37);
        boolean boolean68 = polyhedronsSet1.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) polyhedronsSet11);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector69 = polyhedronsSet11.getBarycenter();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion4);
        org.junit.Assert.assertNotNull(euclidean3DRegion8);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree10);
        org.junit.Assert.assertTrue("'" + location13 + "' != '" + org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE + "'", location13.equals(org.apache.commons.math3.geometry.partitioning.Region.Location.INSIDE));
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(subPlane28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion35);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion45);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertNotNull(vector3D57);
        org.junit.Assert.assertNotNull(vector3D58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(subPlane63);
        org.junit.Assert.assertNotNull(euclidean2DRegion64);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(euclidean3DVector69);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #394
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #28
46: dstore_3
47: aconst_null
48: astore        5
50: aload_2
51: aload         5
53: invokevirtual #148
56: astore        6
58: new           #25
61: dup
62: invokespecial #26
65: astore        7
67: new           #8
70: dup
71: aload         7
73: invokespecial #27
76: astore        8
78: aconst_null
79: astore        9
81: aload         8
83: aload         9
85: invokevirtual #29
88: astore        10
90: aload         8
92: iconst_0
93: invokevirtual #30
96: astore        11
98: new           #8
101: dup
102: aload         11
104: invokespecial #9
107: astore        12
109: aconst_null
110: astore        13
112: aload         12
114: aload         13
116: invokevirtual #381
119: astore        14
121: getstatic     #10
124: astore        15
126: aload         15
128: invokevirtual #11
131: astore        16
133: getstatic     #10
136: astore        17
138: aload         17
140: invokevirtual #11
143: astore        18
145: new           #12
148: dup
149: aload         15
151: aload         18
153: invokespecial #13
156: astore        19
158: getstatic     #10
161: astore        20
163: aload         20
165: invokevirtual #11
168: astore        21
170: getstatic     #10
173: astore        22
175: aload         22
177: invokevirtual #11
180: astore        23
182: getstatic     #10
185: astore        24
187: aload         24
189: invokevirtual #11
192: astore        25
194: new           #12
197: dup
198: aload         22
200: aload         25
202: invokespecial #13
205: astore        26
207: aload         20
209: aload         25
211: invokevirtual #22
214: dstore        27
216: aload         19
218: aload         25
220: invokevirtual #23
223: dstore        29
225: aload         19
227: invokevirtual #24
230: astore        31
232: new           #25
235: dup
236: invokespecial #26
239: astore        32
241: new           #8
244: dup
245: aload         32
247: invokespecial #27
250: astore        33
252: aload         33
254: invokevirtual #28
257: dstore        34
259: new           #25
262: dup
263: invokespecial #26
266: astore        36
268: new           #8
271: dup
272: aload         36
274: invokespecial #27
277: astore        37
279: aconst_null
280: astore        38
282: aload         37
284: aload         38
286: invokevirtual #29
289: astore        39
291: aload         37
293: iconst_0
294: invokevirtual #30
297: astore        40
299: aload         33
301: aload         40
303: invokevirtual #31
306: istore        41
308: new           #25
311: dup
312: invokespecial #26
315: astore        42
317: new           #8
320: dup
321: aload         42
323: invokespecial #27
326: astore        43
328: aload         43
330: invokevirtual #28
333: dstore        44
335: new           #25
338: dup
339: invokespecial #26
342: astore        46
344: new           #8
347: dup
348: aload         46
350: invokespecial #27
353: astore        47
355: aconst_null
356: astore        48
358: aload         47
360: aload         48
362: invokevirtual #29
365: astore        49
367: aload         47
369: iconst_0
370: invokevirtual #30
373: astore        50
375: aload         43
377: aload         50
379: invokevirtual #31
382: istore        51
384: getstatic     #10
387: astore        52
389: aload         52
391: invokevirtual #11
394: astore        53
396: getstatic     #10
399: astore        54
401: aload         54
403: invokevirtual #11
406: astore        55
408: new           #12
411: dup
412: aload         52
414: aload         55
416: invokespecial #13
419: astore        56
421: getstatic     #10
424: astore        57
426: aload         57
428: invokevirtual #11
431: astore        58
433: getstatic     #10
436: astore        59
438: aload         59
440: invokevirtual #11
443: astore        60
445: getstatic     #10
448: astore        61
450: aload         61
452: invokevirtual #11
455: astore        62
457: new           #12
460: dup
461: aload         59
463: aload         62
465: invokespecial #13
468: astore        63
470: aload         57
472: aload         62
474: invokevirtual #22
477: dstore        64
479: aload         56
481: aload         62
483: invokevirtual #23
486: dstore        66
488: aload         56
490: invokevirtual #24
493: astore        68
495: aload         68
497: invokevirtual #32
500: astore        69
502: new           #33
505: dup
506: aload         31
508: aload         40
510: aload         50
512: aload         68
514: invokespecial #34
517: astore        70
519: aload         40
521: invokevirtual #221
524: astore        71
526: aload         12
528: aload         40
530: invokevirtual #31
533: istore        72
535: aload_2
536: aload         12
538: invokevirtual #261
541: istore        73
543: aload         12
545: invokevirtual #251
548: astore        74
550: new           #40
553: dup
554: invokespecial #41
557: ldc           #42
559: invokevirtual #43
562: dload_3
563: invokevirtual #44
566: ldc           #45
568: invokevirtual #43
571: dconst_0
572: invokevirtual #44
575: ldc           #42
577: invokevirtual #43
580: invokevirtual #46
583: dload_3
584: dconst_0
585: dcmpl
586: ifne          593
589: iconst_1
590: goto          594
593: iconst_0
594: invokestatic  #47
597: aload         6
599: invokestatic  #18
602: aload         10
604: invokestatic  #18
607: aload         11
609: invokestatic  #18
612: new           #40
615: dup
616: invokespecial #41
619: ldc           #42
621: invokevirtual #43
624: aload         14
626: invokevirtual #102
629: ldc           #45
631: invokevirtual #43
634: getstatic     #258
637: invokevirtual #102
640: ldc           #42
642: invokevirtual #43
645: invokevirtual #46
648: aload         14
650: getstatic     #258
653: invokevirtual #259
656: invokestatic  #47
659: aload         15
661: invokestatic  #18
664: aload         16
666: invokestatic  #18
669: aload         17
671: invokestatic  #18
674: aload         18
676: invokestatic  #18
679: aload         20
681: invokestatic  #18
684: aload         21
686: invokestatic  #18
689: aload         22
691: invokestatic  #18
694: aload         23
696: invokestatic  #18
699: aload         24
701: invokestatic  #18
704: aload         25
706: invokestatic  #18
709: dload         27
711: invokestatic  #38
714: invokestatic  #39
717: dload         29
719: invokestatic  #38
722: invokestatic  #39
725: aload         31
727: invokestatic  #18
730: new           #40
733: dup
734: invokespecial #41
737: ldc           #42
739: invokevirtual #43
742: dload         34
744: invokevirtual #44
747: ldc           #45
749: invokevirtual #43
752: dconst_0
753: invokevirtual #44
756: ldc           #42
758: invokevirtual #43
761: invokevirtual #46
764: dload         34
766: dconst_0
767: dcmpl
768: ifne          775
771: iconst_1
772: goto          776
775: iconst_0
776: invokestatic  #47
779: aload         39
781: invokestatic  #18
784: aload         40
786: invokestatic  #18
789: new           #40
792: dup
793: invokespecial #41
796: ldc           #42
798: invokevirtual #43
801: iload         41
803: invokevirtual #48
806: ldc           #45
808: invokevirtual #43
811: iconst_0
812: invokevirtual #48
815: ldc           #42
817: invokevirtual #43
820: invokevirtual #46
823: iload         41
825: ifne          832
828: iconst_1
829: goto          833
832: iconst_0
833: invokestatic  #47
836: new           #40
839: dup
840: invokespecial #41
843: ldc           #42
845: invokevirtual #43
848: dload         44
850: invokevirtual #44
853: ldc           #45
855: invokevirtual #43
858: dconst_0
859: invokevirtual #44
862: ldc           #42
864: invokevirtual #43
867: invokevirtual #46
870: dload         44
872: dconst_0
873: dcmpl
874: ifne          881
877: iconst_1
878: goto          882
881: iconst_0
882: invokestatic  #47
885: aload         49
887: invokestatic  #18
890: aload         50
892: invokestatic  #18
895: new           #40
898: dup
899: invokespecial #41
902: ldc           #42
904: invokevirtual #43
907: iload         51
909: invokevirtual #48
912: ldc           #45
914: invokevirtual #43
917: iconst_0
918: invokevirtual #48
921: ldc           #42
923: invokevirtual #43
926: invokevirtual #46
929: iload         51
931: ifne          938
934: iconst_1
935: goto          939
938: iconst_0
939: invokestatic  #47
942: aload         52
944: invokestatic  #18
947: aload         53
949: invokestatic  #18
952: aload         54
954: invokestatic  #18
957: aload         55
959: invokestatic  #18
962: aload         57
964: invokestatic  #18
967: aload         58
969: invokestatic  #18
972: aload         59
974: invokestatic  #18
977: aload         60
979: invokestatic  #18
982: aload         61
984: invokestatic  #18
987: aload         62
989: invokestatic  #18
992: dload         64
994: invokestatic  #38
997: invokestatic  #39
1000: dload         66
1002: invokestatic  #38
1005: invokestatic  #39
1008: aload         68
1010: invokestatic  #18
1013: aload         69
1015: invokestatic  #18
1018: aload         71
1020: invokestatic  #18
1023: new           #40
1026: dup
1027: invokespecial #41
1030: ldc           #42
1032: invokevirtual #43
1035: iload         72
1037: invokevirtual #48
1040: ldc           #45
1042: invokevirtual #43
1045: iconst_0
1046: invokevirtual #48
1049: ldc           #42
1051: invokevirtual #43
1054: invokevirtual #46
1057: iload         72
1059: ifne          1066
1062: iconst_1
1063: goto          1067
1066: iconst_0
1067: invokestatic  #47
1070: new           #40
1073: dup
1074: invokespecial #41
1077: ldc           #42
1079: invokevirtual #43
1082: iload         73
1084: invokevirtual #48
1087: ldc           #45
1089: invokevirtual #43
1092: iconst_1
1093: invokevirtual #48
1096: ldc           #42
1098: invokevirtual #43
1101: invokevirtual #46
1104: iload         73
1106: iconst_1
1107: if_icmpne     1114
1110: iconst_1
1111: goto          1115
1114: iconst_0
1115: invokestatic  #47
1118: aload         74
1120: invokestatic  #18
1123: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test122
Start line: 10099
End line: 10172
Method source code: 
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet37 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet38 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet39 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #395
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: getstatic     #10
133: astore        18
135: aload         18
137: invokevirtual #11
140: astore        19
142: getstatic     #10
145: astore        20
147: aload         20
149: invokevirtual #11
152: astore        21
154: new           #12
157: dup
158: aload         18
160: aload         21
162: invokespecial #13
165: astore        22
167: getstatic     #10
170: astore        23
172: aload         23
174: invokevirtual #11
177: astore        24
179: getstatic     #10
182: astore        25
184: aload         25
186: invokevirtual #11
189: astore        26
191: getstatic     #10
194: astore        27
196: aload         27
198: invokevirtual #11
201: astore        28
203: new           #12
206: dup
207: aload         25
209: aload         28
211: invokespecial #13
214: astore        29
216: aload         23
218: aload         28
220: invokevirtual #22
223: dstore        30
225: aload         22
227: aload         28
229: invokevirtual #23
232: dstore        32
234: aload         22
236: invokevirtual #24
239: astore        34
241: aload         34
243: invokevirtual #32
246: astore        35
248: aload         34
250: invokevirtual #71
253: astore        36
255: new           #25
258: dup
259: invokespecial #26
262: astore        37
264: aload         37
266: aload         17
268: invokevirtual #189
271: istore        38
273: aload         37
275: aload         34
277: invokevirtual #189
280: istore        39
282: new           #8
285: dup
286: aload         37
288: invokespecial #27
291: astore        40
293: new           #8
296: dup
297: aload         37
299: invokespecial #27
302: astore        41
304: new           #8
307: dup
308: aload         37
310: invokespecial #27
313: astore        42
315: new           #8
318: dup
319: aload         37
321: invokespecial #27
324: astore        43
326: new           #8
329: dup
330: aload         37
332: invokespecial #27
335: astore        44
337: aload_1
338: invokestatic  #18
341: aload_2
342: invokestatic  #18
345: aload_3
346: invokestatic  #18
349: aload         4
351: invokestatic  #18
354: aload         6
356: invokestatic  #18
359: aload         7
361: invokestatic  #18
364: aload         8
366: invokestatic  #18
369: aload         9
371: invokestatic  #18
374: aload         10
376: invokestatic  #18
379: aload         11
381: invokestatic  #18
384: dload         13
386: invokestatic  #38
389: invokestatic  #39
392: dload         15
394: invokestatic  #38
397: invokestatic  #39
400: aload         17
402: invokestatic  #18
405: aload         18
407: invokestatic  #18
410: aload         19
412: invokestatic  #18
415: aload         20
417: invokestatic  #18
420: aload         21
422: invokestatic  #18
425: aload         23
427: invokestatic  #18
430: aload         24
432: invokestatic  #18
435: aload         25
437: invokestatic  #18
440: aload         26
442: invokestatic  #18
445: aload         27
447: invokestatic  #18
450: aload         28
452: invokestatic  #18
455: dload         30
457: invokestatic  #38
460: invokestatic  #39
463: dload         32
465: invokestatic  #38
468: invokestatic  #39
471: aload         34
473: invokestatic  #18
476: aload         35
478: invokestatic  #18
481: aload         36
483: invokestatic  #18
486: new           #40
489: dup
490: invokespecial #41
493: ldc           #42
495: invokevirtual #43
498: iload         38
500: invokevirtual #48
503: ldc           #45
505: invokevirtual #43
508: iconst_1
509: invokevirtual #48
512: ldc           #42
514: invokevirtual #43
517: invokevirtual #46
520: iload         38
522: iconst_1
523: if_icmpne     530
526: iconst_1
527: goto          531
530: iconst_0
531: invokestatic  #47
534: new           #40
537: dup
538: invokespecial #41
541: ldc           #42
543: invokevirtual #43
546: iload         39
548: invokevirtual #48
551: ldc           #45
553: invokevirtual #43
556: iconst_1
557: invokevirtual #48
560: ldc           #42
562: invokevirtual #43
565: invokevirtual #46
568: iload         39
570: iconst_1
571: if_icmpne     578
574: iconst_1
575: goto          579
578: iconst_0
579: invokestatic  #47
582: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test123
Start line: 10175
End line: 10250
Method source code: 
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        plane4.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = vector3D8.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = vector3D10.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane12 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D8, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D11);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = vector3D7.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D6, vector3D14);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector16 = plane4.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D6);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane17 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane18 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane23 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D19, vector3D22);
        plane23.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane31 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D27, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D26, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D26.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D25, vector3D33);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector35 = plane23.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane36 = plane23.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = plane23.copySelf();
        boolean boolean38 = plane4.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane23);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(euclidean2DVector16);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane17);
        org.junit.Assert.assertNotNull(subPlane18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(euclidean2DVector35);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane36);
        org.junit.Assert.assertNotNull(plane37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #396
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: aload         5
58: invokevirtual #20
61: getstatic     #10
64: astore        6
66: getstatic     #10
69: astore        7
71: getstatic     #10
74: astore        8
76: aload         8
78: invokevirtual #11
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: new           #12
98: dup
99: aload         8
101: aload         11
103: invokespecial #13
106: astore        12
108: aload         7
110: aload         11
112: invokestatic  #96
115: astore        13
117: aload         7
119: invokevirtual #110
122: astore        14
124: aload         6
126: aload         14
128: invokestatic  #96
131: astore        15
133: aload         5
135: aload         6
137: invokevirtual #97
140: astore        16
142: aload         5
144: invokevirtual #24
147: astore        17
149: aload         5
151: invokevirtual #24
154: astore        18
156: getstatic     #10
159: astore        19
161: aload         19
163: invokevirtual #11
166: astore        20
168: getstatic     #10
171: astore        21
173: aload         21
175: invokevirtual #11
178: astore        22
180: new           #12
183: dup
184: aload         19
186: aload         22
188: invokespecial #13
191: astore        23
193: aload         23
195: invokevirtual #20
198: getstatic     #10
201: astore        24
203: getstatic     #10
206: astore        25
208: getstatic     #10
211: astore        26
213: aload         26
215: invokevirtual #11
218: astore        27
220: getstatic     #10
223: astore        28
225: aload         28
227: invokevirtual #11
230: astore        29
232: new           #12
235: dup
236: aload         26
238: aload         29
240: invokespecial #13
243: astore        30
245: aload         25
247: aload         29
249: invokestatic  #96
252: astore        31
254: aload         25
256: invokevirtual #110
259: astore        32
261: aload         24
263: aload         32
265: invokestatic  #96
268: astore        33
270: aload         23
272: aload         24
274: invokevirtual #97
277: astore        34
279: aload         23
281: invokevirtual #24
284: astore        35
286: aload         23
288: invokevirtual #130
291: astore        36
293: aload         5
295: aload         23
297: invokevirtual #309
300: istore        37
302: aload_1
303: invokestatic  #18
306: aload_2
307: invokestatic  #18
310: aload_3
311: invokestatic  #18
314: aload         4
316: invokestatic  #18
319: aload         6
321: invokestatic  #18
324: aload         7
326: invokestatic  #18
329: aload         8
331: invokestatic  #18
334: aload         9
336: invokestatic  #18
339: aload         10
341: invokestatic  #18
344: aload         11
346: invokestatic  #18
349: aload         13
351: invokestatic  #18
354: aload         14
356: invokestatic  #18
359: aload         15
361: invokestatic  #18
364: aload         16
366: invokestatic  #18
369: aload         17
371: invokestatic  #18
374: aload         18
376: invokestatic  #18
379: aload         19
381: invokestatic  #18
384: aload         20
386: invokestatic  #18
389: aload         21
391: invokestatic  #18
394: aload         22
396: invokestatic  #18
399: aload         24
401: invokestatic  #18
404: aload         25
406: invokestatic  #18
409: aload         26
411: invokestatic  #18
414: aload         27
416: invokestatic  #18
419: aload         28
421: invokestatic  #18
424: aload         29
426: invokestatic  #18
429: aload         31
431: invokestatic  #18
434: aload         32
436: invokestatic  #18
439: aload         33
441: invokestatic  #18
444: aload         34
446: invokestatic  #18
449: aload         35
451: invokestatic  #18
454: aload         36
456: invokestatic  #18
459: new           #40
462: dup
463: invokespecial #41
466: ldc           #42
468: invokevirtual #43
471: iload         37
473: invokevirtual #48
476: ldc           #45
478: invokevirtual #43
481: iconst_0
482: invokevirtual #48
485: ldc           #42
487: invokevirtual #43
490: invokevirtual #46
493: iload         37
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #47
506: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test124
Start line: 10253
End line: 10351
Method source code: 
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D2 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line4 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D2, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D7 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line9 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D7, (double) 0.0f);
        boolean boolean10 = line4.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line9);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D13 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line15 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, (double) 0.0f);
        line9.reset(vector2D13, (-0.8414709848078965d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane22 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D18, vector3D21);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = vector3D25.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane29 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D25, vector3D28);
        double double30 = vector3D23.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28);
        double double31 = plane22.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D28);
        plane22.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = vector3D35.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane37 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D33, vector3D36);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane44 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D40, vector3D43);
        double double45 = vector3D38.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43);
        double double46 = plane37.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D43);
        plane37.revertSelf();
        double double48 = plane22.getOffset(plane37);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = vector3D50.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = vector3D52.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane54 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D50, vector3D53);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D49, vector3D53);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D56 = plane37.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D53);
        double double57 = vector2D13.distance1((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D56);
        org.apache.commons.math3.geometry.euclidean.twod.Line line59 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D13, 2.2250738585072014E-308d);
        org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet polygonsSet60 = line59.wholeSpace();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D63 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line65 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D63, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D68 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        boolean boolean69 = vector2D68.isInfinite();
        line65.translateToPoint(vector2D68);
        org.apache.commons.math3.geometry.euclidean.twod.SubLine subLine71 = line65.wholeHyperplane();
        boolean boolean72 = line59.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line65);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector2D56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(polygonsSet60);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(subLine71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #397
20: aastore
21: invokevirtual #7
24: pop
25: new           #60
28: dup
29: dconst_0
30: ldc2_w        #61
33: invokespecial #63
36: astore_1
37: new           #64
40: dup
41: aload_1
42: dconst_0
43: invokespecial #65
46: astore_2
47: new           #60
50: dup
51: dconst_0
52: ldc2_w        #61
55: invokespecial #63
58: astore_3
59: new           #64
62: dup
63: aload_3
64: dconst_0
65: invokespecial #65
68: astore        4
70: aload_2
71: aload         4
73: invokevirtual #95
76: istore        5
78: new           #60
81: dup
82: dconst_0
83: ldc2_w        #61
86: invokespecial #63
89: astore        6
91: new           #64
94: dup
95: aload         6
97: dconst_0
98: invokespecial #65
101: astore        7
103: aload         4
105: aload         6
107: ldc2_w        #116
110: invokevirtual #100
113: getstatic     #10
116: astore        8
118: aload         8
120: invokevirtual #11
123: astore        9
125: getstatic     #10
128: astore        10
130: aload         10
132: invokevirtual #11
135: astore        11
137: new           #12
140: dup
141: aload         8
143: aload         11
145: invokespecial #13
148: astore        12
150: getstatic     #10
153: astore        13
155: aload         13
157: invokevirtual #11
160: astore        14
162: getstatic     #10
165: astore        15
167: aload         15
169: invokevirtual #11
172: astore        16
174: getstatic     #10
177: astore        17
179: aload         17
181: invokevirtual #11
184: astore        18
186: new           #12
189: dup
190: aload         15
192: aload         18
194: invokespecial #13
197: astore        19
199: aload         13
201: aload         18
203: invokevirtual #22
206: dstore        20
208: aload         12
210: aload         18
212: invokevirtual #23
215: dstore        22
217: aload         12
219: invokevirtual #20
222: getstatic     #10
225: astore        24
227: aload         24
229: invokevirtual #11
232: astore        25
234: getstatic     #10
237: astore        26
239: aload         26
241: invokevirtual #11
244: astore        27
246: new           #12
249: dup
250: aload         24
252: aload         27
254: invokespecial #13
257: astore        28
259: getstatic     #10
262: astore        29
264: aload         29
266: invokevirtual #11
269: astore        30
271: getstatic     #10
274: astore        31
276: aload         31
278: invokevirtual #11
281: astore        32
283: getstatic     #10
286: astore        33
288: aload         33
290: invokevirtual #11
293: astore        34
295: new           #12
298: dup
299: aload         31
301: aload         34
303: invokespecial #13
306: astore        35
308: aload         29
310: aload         34
312: invokevirtual #22
315: dstore        36
317: aload         28
319: aload         34
321: invokevirtual #23
324: dstore        38
326: aload         28
328: invokevirtual #20
331: aload         12
333: aload         28
335: invokevirtual #82
338: dstore        40
340: getstatic     #10
343: astore        42
345: getstatic     #10
348: astore        43
350: aload         43
352: invokevirtual #11
355: astore        44
357: getstatic     #10
360: astore        45
362: aload         45
364: invokevirtual #11
367: astore        46
369: new           #12
372: dup
373: aload         43
375: aload         46
377: invokespecial #13
380: astore        47
382: aload         42
384: aload         46
386: invokestatic  #96
389: astore        48
391: aload         28
393: aload         46
395: invokevirtual #97
398: astore        49
400: aload         6
402: aload         49
404: invokevirtual #118
407: dstore        50
409: new           #64
412: dup
413: aload         6
415: ldc2_w        #119
418: invokespecial #65
421: astore        52
423: aload         52
425: invokevirtual #121
428: astore        53
430: new           #60
433: dup
434: dconst_0
435: ldc2_w        #61
438: invokespecial #63
441: astore        54
443: new           #64
446: dup
447: aload         54
449: dconst_0
450: invokespecial #65
453: astore        55
455: new           #60
458: dup
459: dconst_0
460: ldc2_w        #61
463: invokespecial #63
466: astore        56
468: aload         56
470: invokevirtual #352
473: istore        57
475: aload         55
477: aload         56
479: invokevirtual #353
482: aload         55
484: invokevirtual #329
487: astore        58
489: aload         52
491: aload         55
493: invokevirtual #95
496: istore        59
498: new           #40
501: dup
502: invokespecial #41
505: ldc           #42
507: invokevirtual #43
510: iload         5
512: invokevirtual #48
515: ldc           #45
517: invokevirtual #43
520: iconst_1
521: invokevirtual #48
524: ldc           #42
526: invokevirtual #43
529: invokevirtual #46
532: iload         5
534: iconst_1
535: if_icmpne     542
538: iconst_1
539: goto          543
542: iconst_0
543: invokestatic  #47
546: aload         8
548: invokestatic  #18
551: aload         9
553: invokestatic  #18
556: aload         10
558: invokestatic  #18
561: aload         11
563: invokestatic  #18
566: aload         13
568: invokestatic  #18
571: aload         14
573: invokestatic  #18
576: aload         15
578: invokestatic  #18
581: aload         16
583: invokestatic  #18
586: aload         17
588: invokestatic  #18
591: aload         18
593: invokestatic  #18
596: dload         20
598: invokestatic  #38
601: invokestatic  #39
604: dload         22
606: invokestatic  #38
609: invokestatic  #39
612: aload         24
614: invokestatic  #18
617: aload         25
619: invokestatic  #18
622: aload         26
624: invokestatic  #18
627: aload         27
629: invokestatic  #18
632: aload         29
634: invokestatic  #18
637: aload         30
639: invokestatic  #18
642: aload         31
644: invokestatic  #18
647: aload         32
649: invokestatic  #18
652: aload         33
654: invokestatic  #18
657: aload         34
659: invokestatic  #18
662: dload         36
664: invokestatic  #38
667: invokestatic  #39
670: dload         38
672: invokestatic  #38
675: invokestatic  #39
678: dload         40
680: invokestatic  #38
683: invokestatic  #39
686: aload         42
688: invokestatic  #18
691: aload         43
693: invokestatic  #18
696: aload         44
698: invokestatic  #18
701: aload         45
703: invokestatic  #18
706: aload         46
708: invokestatic  #18
711: aload         48
713: invokestatic  #18
716: aload         49
718: invokestatic  #18
721: dload         50
723: invokestatic  #38
726: invokestatic  #39
729: aload         53
731: invokestatic  #18
734: new           #40
737: dup
738: invokespecial #41
741: ldc           #42
743: invokevirtual #43
746: iload         57
748: invokevirtual #48
751: ldc           #45
753: invokevirtual #43
756: iconst_0
757: invokevirtual #48
760: ldc           #42
762: invokevirtual #43
765: invokevirtual #46
768: iload         57
770: ifne          777
773: iconst_1
774: goto          778
777: iconst_0
778: invokestatic  #47
781: aload         58
783: invokestatic  #18
786: new           #40
789: dup
790: invokespecial #41
793: ldc           #42
795: invokevirtual #43
798: iload         59
800: invokevirtual #48
803: ldc           #45
805: invokevirtual #43
808: iconst_1
809: invokevirtual #48
812: ldc           #42
814: invokevirtual #43
817: invokevirtual #46
820: iload         59
822: iconst_1
823: if_icmpne     830
826: iconst_1
827: goto          831
830: iconst_0
831: invokestatic  #47
834: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test125
Start line: 10354
End line: 10472
Method source code: 
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList0 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet1 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList0);
        double double2 = polyhedronsSet1.getSize();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane7 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D3, vector3D6);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D10 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line12 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D10, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D13 = plane7.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D10);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D14.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane18 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D14, vector3D17);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = vector3D19.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = vector3D21.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = vector3D23.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane25 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D21, vector3D24);
        double double26 = vector3D19.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        double double27 = plane18.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D24);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane28 = plane18.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion29 = subPlane28.getRemainingRegion();
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane30 = new org.apache.commons.math3.geometry.euclidean.threed.SubPlane((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) plane7, euclidean2DRegion29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane45 = plane35.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion46 = subPlane45.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane47 = subPlane45.getHyperplane();
        org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractSubHyperplane48 = subPlane30.reunite((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane45);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane49 = polyhedronsSet1.intersection((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane30);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector50 = polyhedronsSet1.getBarycenter();
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DVector51 = polyhedronsSet1.getBarycenter();
        org.apache.commons.math3.geometry.partitioning.AbstractRegion<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean3DAbstractRegion52 = polyhedronsSet1.copySelf();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList53 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet54 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList53);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree55 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion56 = polyhedronsSet54.buildNew(euclidean3DBSPTree55);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree58 = polyhedronsSet54.getTree(false);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet59 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet(euclidean3DBSPTree58);
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList60 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet61 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList60);
        double double62 = polyhedronsSet61.getBoundarySize();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList63 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet64 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList63);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree65 = null;
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion66 = polyhedronsSet64.buildNew(euclidean3DBSPTree65);
        org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DBSPTree68 = polyhedronsSet64.getTree(false);
        boolean boolean69 = polyhedronsSet61.isEmpty(euclidean3DBSPTree68);
        boolean boolean70 = polyhedronsSet59.isEmpty(euclidean3DBSPTree68);
        boolean boolean71 = euclidean3DAbstractRegion52.contains((org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) polyhedronsSet59);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D13);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(subPlane28);
        org.junit.Assert.assertNotNull(euclidean2DRegion29);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(subPlane45);
        org.junit.Assert.assertNotNull(euclidean2DRegion46);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane47);
        org.junit.Assert.assertNotNull(euclidean3DAbstractSubHyperplane48);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane49);
        org.junit.Assert.assertNotNull(euclidean3DVector50);
        org.junit.Assert.assertNotNull(euclidean3DVector51);
        org.junit.Assert.assertNotNull(euclidean3DAbstractRegion52);
        org.junit.Assert.assertNotNull(euclidean3DRegion56);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree58);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d);
        org.junit.Assert.assertNotNull(euclidean3DRegion66);
        org.junit.Assert.assertNotNull(euclidean3DBSPTree68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #398
20: aastore
21: invokevirtual #7
24: pop
25: new           #25
28: dup
29: invokespecial #26
32: astore_1
33: new           #8
36: dup
37: aload_1
38: invokespecial #27
41: astore_2
42: aload_2
43: invokevirtual #70
46: dstore_3
47: getstatic     #10
50: astore        5
52: aload         5
54: invokevirtual #11
57: astore        6
59: getstatic     #10
62: astore        7
64: aload         7
66: invokevirtual #11
69: astore        8
71: new           #12
74: dup
75: aload         5
77: aload         8
79: invokespecial #13
82: astore        9
84: new           #60
87: dup
88: dconst_0
89: ldc2_w        #61
92: invokespecial #63
95: astore        10
97: new           #64
100: dup
101: aload         10
103: dconst_0
104: invokespecial #65
107: astore        11
109: aload         9
111: aload         10
113: invokevirtual #66
116: astore        12
118: getstatic     #10
121: astore        13
123: aload         13
125: invokevirtual #11
128: astore        14
130: getstatic     #10
133: astore        15
135: aload         15
137: invokevirtual #11
140: astore        16
142: new           #12
145: dup
146: aload         13
148: aload         16
150: invokespecial #13
153: astore        17
155: getstatic     #10
158: astore        18
160: aload         18
162: invokevirtual #11
165: astore        19
167: getstatic     #10
170: astore        20
172: aload         20
174: invokevirtual #11
177: astore        21
179: getstatic     #10
182: astore        22
184: aload         22
186: invokevirtual #11
189: astore        23
191: new           #12
194: dup
195: aload         20
197: aload         23
199: invokespecial #13
202: astore        24
204: aload         18
206: aload         23
208: invokevirtual #22
211: dstore        25
213: aload         17
215: aload         23
217: invokevirtual #23
220: dstore        27
222: aload         17
224: invokevirtual #24
227: astore        29
229: aload         29
231: invokevirtual #32
234: astore        30
236: new           #67
239: dup
240: aload         9
242: aload         30
244: invokespecial #68
247: astore        31
249: getstatic     #10
252: astore        32
254: aload         32
256: invokevirtual #11
259: astore        33
261: getstatic     #10
264: astore        34
266: aload         34
268: invokevirtual #11
271: astore        35
273: new           #12
276: dup
277: aload         32
279: aload         35
281: invokespecial #13
284: astore        36
286: getstatic     #10
289: astore        37
291: aload         37
293: invokevirtual #11
296: astore        38
298: getstatic     #10
301: astore        39
303: aload         39
305: invokevirtual #11
308: astore        40
310: getstatic     #10
313: astore        41
315: aload         41
317: invokevirtual #11
320: astore        42
322: new           #12
325: dup
326: aload         39
328: aload         42
330: invokespecial #13
333: astore        43
335: aload         37
337: aload         42
339: invokevirtual #22
342: dstore        44
344: aload         36
346: aload         42
348: invokevirtual #23
351: dstore        46
353: aload         36
355: invokevirtual #24
358: astore        48
360: aload         48
362: invokevirtual #32
365: astore        49
367: aload         48
369: invokevirtual #71
372: astore        50
374: aload         31
376: aload         48
378: invokevirtual #72
381: astore        51
383: aload_2
384: aload         31
386: invokevirtual #73
389: astore        52
391: aload_2
392: invokevirtual #251
395: astore        53
397: aload_2
398: invokevirtual #251
401: astore        54
403: aload_2
404: invokevirtual #253
407: astore        55
409: new           #25
412: dup
413: invokespecial #26
416: astore        56
418: new           #8
421: dup
422: aload         56
424: invokespecial #27
427: astore        57
429: aconst_null
430: astore        58
432: aload         57
434: aload         58
436: invokevirtual #29
439: astore        59
441: aload         57
443: iconst_0
444: invokevirtual #30
447: astore        60
449: new           #8
452: dup
453: aload         60
455: invokespecial #9
458: astore        61
460: new           #25
463: dup
464: invokespecial #26
467: astore        62
469: new           #8
472: dup
473: aload         62
475: invokespecial #27
478: astore        63
480: aload         63
482: invokevirtual #28
485: dstore        64
487: new           #25
490: dup
491: invokespecial #26
494: astore        66
496: new           #8
499: dup
500: aload         66
502: invokespecial #27
505: astore        67
507: aconst_null
508: astore        68
510: aload         67
512: aload         68
514: invokevirtual #29
517: astore        69
519: aload         67
521: iconst_0
522: invokevirtual #30
525: astore        70
527: aload         63
529: aload         70
531: invokevirtual #31
534: istore        71
536: aload         61
538: aload         70
540: invokevirtual #31
543: istore        72
545: aload         55
547: aload         61
549: invokevirtual #152
552: istore        73
554: new           #40
557: dup
558: invokespecial #41
561: ldc           #42
563: invokevirtual #43
566: dload_3
567: invokevirtual #44
570: ldc           #45
572: invokevirtual #43
575: dconst_0
576: invokevirtual #44
579: ldc           #42
581: invokevirtual #43
584: invokevirtual #46
587: dload_3
588: dconst_0
589: dcmpl
590: ifne          597
593: iconst_1
594: goto          598
597: iconst_0
598: invokestatic  #47
601: aload         5
603: invokestatic  #18
606: aload         6
608: invokestatic  #18
611: aload         7
613: invokestatic  #18
616: aload         8
618: invokestatic  #18
621: aload         12
623: invokestatic  #18
626: aload         13
628: invokestatic  #18
631: aload         14
633: invokestatic  #18
636: aload         15
638: invokestatic  #18
641: aload         16
643: invokestatic  #18
646: aload         18
648: invokestatic  #18
651: aload         19
653: invokestatic  #18
656: aload         20
658: invokestatic  #18
661: aload         21
663: invokestatic  #18
666: aload         22
668: invokestatic  #18
671: aload         23
673: invokestatic  #18
676: dload         25
678: invokestatic  #38
681: invokestatic  #39
684: dload         27
686: invokestatic  #38
689: invokestatic  #39
692: aload         29
694: invokestatic  #18
697: aload         30
699: invokestatic  #18
702: aload         32
704: invokestatic  #18
707: aload         33
709: invokestatic  #18
712: aload         34
714: invokestatic  #18
717: aload         35
719: invokestatic  #18
722: aload         37
724: invokestatic  #18
727: aload         38
729: invokestatic  #18
732: aload         39
734: invokestatic  #18
737: aload         40
739: invokestatic  #18
742: aload         41
744: invokestatic  #18
747: aload         42
749: invokestatic  #18
752: dload         44
754: invokestatic  #38
757: invokestatic  #39
760: dload         46
762: invokestatic  #38
765: invokestatic  #39
768: aload         48
770: invokestatic  #18
773: aload         49
775: invokestatic  #18
778: aload         50
780: invokestatic  #18
783: aload         51
785: invokestatic  #18
788: aload         52
790: invokestatic  #18
793: aload         53
795: invokestatic  #18
798: aload         54
800: invokestatic  #18
803: aload         55
805: invokestatic  #18
808: aload         59
810: invokestatic  #18
813: aload         60
815: invokestatic  #18
818: new           #40
821: dup
822: invokespecial #41
825: ldc           #42
827: invokevirtual #43
830: dload         64
832: invokevirtual #44
835: ldc           #45
837: invokevirtual #43
840: dconst_0
841: invokevirtual #44
844: ldc           #42
846: invokevirtual #43
849: invokevirtual #46
852: dload         64
854: dconst_0
855: dcmpl
856: ifne          863
859: iconst_1
860: goto          864
863: iconst_0
864: invokestatic  #47
867: aload         69
869: invokestatic  #18
872: aload         70
874: invokestatic  #18
877: new           #40
880: dup
881: invokespecial #41
884: ldc           #42
886: invokevirtual #43
889: iload         71
891: invokevirtual #48
894: ldc           #45
896: invokevirtual #43
899: iconst_0
900: invokevirtual #48
903: ldc           #42
905: invokevirtual #43
908: invokevirtual #46
911: iload         71
913: ifne          920
916: iconst_1
917: goto          921
920: iconst_0
921: invokestatic  #47
924: new           #40
927: dup
928: invokespecial #41
931: ldc           #42
933: invokevirtual #43
936: iload         72
938: invokevirtual #48
941: ldc           #45
943: invokevirtual #43
946: iconst_0
947: invokevirtual #48
950: ldc           #42
952: invokevirtual #43
955: invokevirtual #46
958: iload         72
960: ifne          967
963: iconst_1
964: goto          968
967: iconst_0
968: invokestatic  #47
971: new           #40
974: dup
975: invokespecial #41
978: ldc           #42
980: invokevirtual #43
983: iload         73
985: invokevirtual #48
988: ldc           #45
990: invokevirtual #43
993: iconst_1
994: invokevirtual #48
997: ldc           #42
999: invokevirtual #43
1002: invokevirtual #46
1005: iload         73
1007: iconst_1
1008: if_icmpne     1015
1011: iconst_1
1012: goto          1016
1015: iconst_0
1016: invokestatic  #47
1019: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test126
Start line: 10475
End line: 10547
Method source code: 
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = vector3D15.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = vector3D17.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D15, vector3D18);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D20 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D21 = vector3D20.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D22 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D23 = vector3D22.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D24 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D25 = vector3D24.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane26 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D22, vector3D25);
        double double27 = vector3D20.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        double double28 = plane19.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D25);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane29 = plane19.wholeHyperplane();
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DRegion30 = subPlane29.getRemainingRegion();
        org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DHyperplane31 = subPlane29.getHyperplane();
        java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>> euclidean3DSubHyperplaneList32 = new java.util.ArrayList<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>();
        boolean boolean33 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane14);
        boolean boolean34 = euclidean3DSubHyperplaneList32.add((org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) subPlane29);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet35 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet polyhedronsSet36 = new org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet((java.util.Collection<org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>>) euclidean3DSubHyperplaneList32);
        org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DRegion37 = polyhedronsSet36.copySelf();
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D20);
        org.junit.Assert.assertNotNull(vector3D21);
        org.junit.Assert.assertNotNull(vector3D22);
        org.junit.Assert.assertNotNull(vector3D23);
        org.junit.Assert.assertNotNull(vector3D24);
        org.junit.Assert.assertNotNull(vector3D25);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(subPlane29);
        org.junit.Assert.assertNotNull(euclidean2DRegion30);
        org.junit.Assert.assertNotNull(euclidean3DHyperplane31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(euclidean3DRegion37);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #399
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: getstatic     #10
133: astore        18
135: aload         18
137: invokevirtual #11
140: astore        19
142: getstatic     #10
145: astore        20
147: aload         20
149: invokevirtual #11
152: astore        21
154: new           #12
157: dup
158: aload         18
160: aload         21
162: invokespecial #13
165: astore        22
167: getstatic     #10
170: astore        23
172: aload         23
174: invokevirtual #11
177: astore        24
179: getstatic     #10
182: astore        25
184: aload         25
186: invokevirtual #11
189: astore        26
191: getstatic     #10
194: astore        27
196: aload         27
198: invokevirtual #11
201: astore        28
203: new           #12
206: dup
207: aload         25
209: aload         28
211: invokespecial #13
214: astore        29
216: aload         23
218: aload         28
220: invokevirtual #22
223: dstore        30
225: aload         22
227: aload         28
229: invokevirtual #23
232: dstore        32
234: aload         22
236: invokevirtual #24
239: astore        34
241: aload         34
243: invokevirtual #32
246: astore        35
248: aload         34
250: invokevirtual #71
253: astore        36
255: new           #25
258: dup
259: invokespecial #26
262: astore        37
264: aload         37
266: aload         17
268: invokevirtual #189
271: istore        38
273: aload         37
275: aload         34
277: invokevirtual #189
280: istore        39
282: new           #8
285: dup
286: aload         37
288: invokespecial #27
291: astore        40
293: new           #8
296: dup
297: aload         37
299: invokespecial #27
302: astore        41
304: aload         41
306: invokevirtual #253
309: astore        42
311: aload_1
312: invokestatic  #18
315: aload_2
316: invokestatic  #18
319: aload_3
320: invokestatic  #18
323: aload         4
325: invokestatic  #18
328: aload         6
330: invokestatic  #18
333: aload         7
335: invokestatic  #18
338: aload         8
340: invokestatic  #18
343: aload         9
345: invokestatic  #18
348: aload         10
350: invokestatic  #18
353: aload         11
355: invokestatic  #18
358: dload         13
360: invokestatic  #38
363: invokestatic  #39
366: dload         15
368: invokestatic  #38
371: invokestatic  #39
374: aload         17
376: invokestatic  #18
379: aload         18
381: invokestatic  #18
384: aload         19
386: invokestatic  #18
389: aload         20
391: invokestatic  #18
394: aload         21
396: invokestatic  #18
399: aload         23
401: invokestatic  #18
404: aload         24
406: invokestatic  #18
409: aload         25
411: invokestatic  #18
414: aload         26
416: invokestatic  #18
419: aload         27
421: invokestatic  #18
424: aload         28
426: invokestatic  #18
429: dload         30
431: invokestatic  #38
434: invokestatic  #39
437: dload         32
439: invokestatic  #38
442: invokestatic  #39
445: aload         34
447: invokestatic  #18
450: aload         35
452: invokestatic  #18
455: aload         36
457: invokestatic  #18
460: new           #40
463: dup
464: invokespecial #41
467: ldc           #42
469: invokevirtual #43
472: iload         38
474: invokevirtual #48
477: ldc           #45
479: invokevirtual #43
482: iconst_1
483: invokevirtual #48
486: ldc           #42
488: invokevirtual #43
491: invokevirtual #46
494: iload         38
496: iconst_1
497: if_icmpne     504
500: iconst_1
501: goto          505
504: iconst_0
505: invokestatic  #47
508: new           #40
511: dup
512: invokespecial #41
515: ldc           #42
517: invokevirtual #43
520: iload         39
522: invokevirtual #48
525: ldc           #45
527: invokevirtual #43
530: iconst_1
531: invokevirtual #48
534: ldc           #42
536: invokevirtual #43
539: invokevirtual #46
542: iload         39
544: iconst_1
545: if_icmpne     552
548: iconst_1
549: goto          553
552: iconst_0
553: invokestatic  #47
556: aload         42
558: invokestatic  #18
561: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test127
Start line: 10550
End line: 10675
Method source code: 
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = vector3D1.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D4 = vector3D3.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane5 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D1, vector3D4);
        plane5.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D11 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D12 = vector3D11.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane13 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D9, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D14 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D8, vector3D12);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = vector3D8.getZero();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D7, vector3D15);
        org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> euclidean2DVector17 = plane5.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D7);
        org.apache.commons.math3.geometry.partitioning.SubHyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> euclidean3DSubHyperplane18 = plane5.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane19 = plane5.copySelf();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D22 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line24 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D22, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D27 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line29 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D27, (double) 0.0f);
        boolean boolean30 = line24.sameOrientationAs((org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) line29);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D31 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = vector3D31.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = vector3D33.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane35 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D31, vector3D34);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D38 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D39 = vector3D38.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D40 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D41 = vector3D40.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane42 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D38, vector3D41);
        double double43 = vector3D36.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        double double44 = plane35.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D41);
        plane35.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D46 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = vector3D46.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = vector3D48.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane50 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D46, vector3D49);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D53 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D54 = vector3D53.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D55 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D56 = vector3D55.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane57 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D53, vector3D56);
        double double58 = vector3D51.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        double double59 = plane50.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D56);
        plane50.revertSelf();
        double double61 = plane35.getOffset(plane50);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = vector3D63.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D66 = vector3D65.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane67 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D63, vector3D66);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D62, vector3D66);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D69 = plane50.toSubSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D66);
        line24.reset(vector2D69, (double) (-127));
        java.lang.String str72 = vector2D69.toString();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = plane5.getPointAt(vector2D69, (double) (-213608790));
        java.lang.String str75 = vector2D69.toString();
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D76 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 11013L, vector2D69);
        double double77 = vector2D76.getNorm1();
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D4);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertNotNull(vector3D11);
        org.junit.Assert.assertNotNull(vector3D12);
        org.junit.Assert.assertNotNull(vector3D14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(euclidean2DVector17);
        org.junit.Assert.assertNotNull(euclidean3DSubHyperplane18);
        org.junit.Assert.assertNotNull(plane19);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(vector3D31);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertNotNull(vector3D38);
        org.junit.Assert.assertNotNull(vector3D39);
        org.junit.Assert.assertNotNull(vector3D40);
        org.junit.Assert.assertNotNull(vector3D41);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(vector3D46);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertNotNull(vector3D53);
        org.junit.Assert.assertNotNull(vector3D54);
        org.junit.Assert.assertNotNull(vector3D55);
        org.junit.Assert.assertNotNull(vector3D56);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D66);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector2D69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "{(NaN); (NaN)}" + "'", str72, "{(NaN); (NaN)}");
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "{(NaN); (NaN)}" + "'", str75, "{(NaN); (NaN)}");
        org.junit.Assert.assertTrue(Double.isNaN(double77));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #400
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: aload         5
58: invokevirtual #20
61: getstatic     #10
64: astore        6
66: getstatic     #10
69: astore        7
71: getstatic     #10
74: astore        8
76: aload         8
78: invokevirtual #11
81: astore        9
83: getstatic     #10
86: astore        10
88: aload         10
90: invokevirtual #11
93: astore        11
95: new           #12
98: dup
99: aload         8
101: aload         11
103: invokespecial #13
106: astore        12
108: aload         7
110: aload         11
112: invokestatic  #96
115: astore        13
117: aload         7
119: invokevirtual #110
122: astore        14
124: aload         6
126: aload         14
128: invokestatic  #96
131: astore        15
133: aload         5
135: aload         6
137: invokevirtual #97
140: astore        16
142: aload         5
144: invokevirtual #24
147: astore        17
149: aload         5
151: invokevirtual #130
154: astore        18
156: new           #60
159: dup
160: dconst_0
161: ldc2_w        #61
164: invokespecial #63
167: astore        19
169: new           #64
172: dup
173: aload         19
175: dconst_0
176: invokespecial #65
179: astore        20
181: new           #60
184: dup
185: dconst_0
186: ldc2_w        #61
189: invokespecial #63
192: astore        21
194: new           #64
197: dup
198: aload         21
200: dconst_0
201: invokespecial #65
204: astore        22
206: aload         20
208: aload         22
210: invokevirtual #95
213: istore        23
215: getstatic     #10
218: astore        24
220: aload         24
222: invokevirtual #11
225: astore        25
227: getstatic     #10
230: astore        26
232: aload         26
234: invokevirtual #11
237: astore        27
239: new           #12
242: dup
243: aload         24
245: aload         27
247: invokespecial #13
250: astore        28
252: getstatic     #10
255: astore        29
257: aload         29
259: invokevirtual #11
262: astore        30
264: getstatic     #10
267: astore        31
269: aload         31
271: invokevirtual #11
274: astore        32
276: getstatic     #10
279: astore        33
281: aload         33
283: invokevirtual #11
286: astore        34
288: new           #12
291: dup
292: aload         31
294: aload         34
296: invokespecial #13
299: astore        35
301: aload         29
303: aload         34
305: invokevirtual #22
308: dstore        36
310: aload         28
312: aload         34
314: invokevirtual #23
317: dstore        38
319: aload         28
321: invokevirtual #20
324: getstatic     #10
327: astore        40
329: aload         40
331: invokevirtual #11
334: astore        41
336: getstatic     #10
339: astore        42
341: aload         42
343: invokevirtual #11
346: astore        43
348: new           #12
351: dup
352: aload         40
354: aload         43
356: invokespecial #13
359: astore        44
361: getstatic     #10
364: astore        45
366: aload         45
368: invokevirtual #11
371: astore        46
373: getstatic     #10
376: astore        47
378: aload         47
380: invokevirtual #11
383: astore        48
385: getstatic     #10
388: astore        49
390: aload         49
392: invokevirtual #11
395: astore        50
397: new           #12
400: dup
401: aload         47
403: aload         50
405: invokespecial #13
408: astore        51
410: aload         45
412: aload         50
414: invokevirtual #22
417: dstore        52
419: aload         44
421: aload         50
423: invokevirtual #23
426: dstore        54
428: aload         44
430: invokevirtual #20
433: aload         28
435: aload         44
437: invokevirtual #82
440: dstore        56
442: getstatic     #10
445: astore        58
447: getstatic     #10
450: astore        59
452: aload         59
454: invokevirtual #11
457: astore        60
459: getstatic     #10
462: astore        61
464: aload         61
466: invokevirtual #11
469: astore        62
471: new           #12
474: dup
475: aload         59
477: aload         62
479: invokespecial #13
482: astore        63
484: aload         58
486: aload         62
488: invokestatic  #96
491: astore        64
493: aload         44
495: aload         62
497: invokevirtual #97
500: astore        65
502: aload         20
504: aload         65
506: ldc2_w        #98
509: invokevirtual #100
512: aload         65
514: invokevirtual #192
517: astore        66
519: aload         5
521: aload         65
523: ldc2_w        #265
526: invokevirtual #197
529: astore        67
531: aload         65
533: invokevirtual #192
536: astore        68
538: new           #60
541: dup
542: ldc2_w        #401
545: aload         65
547: invokespecial #200
550: astore        69
552: aload         69
554: invokevirtual #403
557: dstore        70
559: aload_1
560: invokestatic  #18
563: aload_2
564: invokestatic  #18
567: aload_3
568: invokestatic  #18
571: aload         4
573: invokestatic  #18
576: aload         6
578: invokestatic  #18
581: aload         7
583: invokestatic  #18
586: aload         8
588: invokestatic  #18
591: aload         9
593: invokestatic  #18
596: aload         10
598: invokestatic  #18
601: aload         11
603: invokestatic  #18
606: aload         13
608: invokestatic  #18
611: aload         14
613: invokestatic  #18
616: aload         15
618: invokestatic  #18
621: aload         16
623: invokestatic  #18
626: aload         17
628: invokestatic  #18
631: aload         18
633: invokestatic  #18
636: new           #40
639: dup
640: invokespecial #41
643: ldc           #42
645: invokevirtual #43
648: iload         23
650: invokevirtual #48
653: ldc           #45
655: invokevirtual #43
658: iconst_1
659: invokevirtual #48
662: ldc           #42
664: invokevirtual #43
667: invokevirtual #46
670: iload         23
672: iconst_1
673: if_icmpne     680
676: iconst_1
677: goto          681
680: iconst_0
681: invokestatic  #47
684: aload         24
686: invokestatic  #18
689: aload         25
691: invokestatic  #18
694: aload         26
696: invokestatic  #18
699: aload         27
701: invokestatic  #18
704: aload         29
706: invokestatic  #18
709: aload         30
711: invokestatic  #18
714: aload         31
716: invokestatic  #18
719: aload         32
721: invokestatic  #18
724: aload         33
726: invokestatic  #18
729: aload         34
731: invokestatic  #18
734: dload         36
736: invokestatic  #38
739: invokestatic  #39
742: dload         38
744: invokestatic  #38
747: invokestatic  #39
750: aload         40
752: invokestatic  #18
755: aload         41
757: invokestatic  #18
760: aload         42
762: invokestatic  #18
765: aload         43
767: invokestatic  #18
770: aload         45
772: invokestatic  #18
775: aload         46
777: invokestatic  #18
780: aload         47
782: invokestatic  #18
785: aload         48
787: invokestatic  #18
790: aload         49
792: invokestatic  #18
795: aload         50
797: invokestatic  #18
800: dload         52
802: invokestatic  #38
805: invokestatic  #39
808: dload         54
810: invokestatic  #38
813: invokestatic  #39
816: dload         56
818: invokestatic  #38
821: invokestatic  #39
824: aload         58
826: invokestatic  #18
829: aload         59
831: invokestatic  #18
834: aload         60
836: invokestatic  #18
839: aload         61
841: invokestatic  #18
844: aload         62
846: invokestatic  #18
849: aload         64
851: invokestatic  #18
854: aload         65
856: invokestatic  #18
859: new           #40
862: dup
863: invokespecial #41
866: ldc           #42
868: invokevirtual #43
871: aload         66
873: invokevirtual #43
876: ldc_w         #268
879: invokevirtual #43
882: invokevirtual #46
885: aload         66
887: ldc_w         #269
890: invokestatic  #203
893: aload         67
895: invokestatic  #18
898: new           #40
901: dup
902: invokespecial #41
905: ldc           #42
907: invokevirtual #43
910: aload         68
912: invokevirtual #43
915: ldc_w         #268
918: invokevirtual #43
921: invokevirtual #46
924: aload         68
926: ldc_w         #269
929: invokestatic  #203
932: dload         70
934: invokestatic  #38
937: invokestatic  #39
940: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/RegressionTest0.class
Class name: RegressionTest0
Method name: test128
Start line: 10678
End line: 10848
Method source code: 
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D0 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D1 = vector3D0.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D2 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D3 = vector3D2.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane4 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D0, vector3D3);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D5 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D6 = vector3D5.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D7 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D8 = vector3D7.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D9 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D10 = vector3D9.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane11 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D7, vector3D10);
        double double12 = vector3D5.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        double double13 = plane4.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D10);
        org.apache.commons.math3.geometry.euclidean.threed.SubPlane subPlane14 = plane4.wholeHyperplane();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D15 = plane4.getNormal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D16 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D17 = vector3D16.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D18 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D19 = vector3D18.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane20 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D16, vector3D19);
        org.apache.commons.math3.geometry.euclidean.twod.Vector2D vector2D23 = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D((double) 0L, (-0.428182669496151d));
        org.apache.commons.math3.geometry.euclidean.twod.Line line25 = new org.apache.commons.math3.geometry.euclidean.twod.Line(vector2D23, (double) 0.0f);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D26 = plane20.toSpace((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>) vector2D23);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D27 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D28 = vector3D27.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D29 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D30 = vector3D29.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane31 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D27, vector3D30);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D32 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D33 = vector3D32.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D34 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D35 = vector3D34.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D36 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D37 = vector3D36.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane38 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D34, vector3D37);
        double double39 = vector3D32.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        double double40 = plane31.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D37);
        plane31.revertSelf();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D42 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D43 = vector3D42.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D44 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D45 = vector3D44.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane46 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D42, vector3D45);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D47 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D48 = vector3D47.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D49 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D50 = vector3D49.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D51 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D52 = vector3D51.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane53 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D49, vector3D52);
        double double54 = vector3D47.distance((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52);
        double double55 = plane46.getOffset((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D52);
        plane46.revertSelf();
        double double57 = plane31.getOffset(plane46);
        org.apache.commons.math3.geometry.euclidean.threed.Line line58 = plane20.intersection(plane31);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D59 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D61 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D62 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D63 = vector3D62.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D64 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D65 = vector3D64.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane66 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D62, vector3D65);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D67 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D61, vector3D65);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D68 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D69 = vector3D68.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D70 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D71 = vector3D70.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane72 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D68, vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D73 = vector3D61.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D74 = vector3D59.add(1.0d, (org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D71);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D75 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D76 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D77 = vector3D76.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D78 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D79 = vector3D78.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane80 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D76, vector3D79);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D81 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(vector3D75, vector3D79);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D82 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D83 = vector3D82.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D84 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.NaN;
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D85 = vector3D84.orthogonal();
        org.apache.commons.math3.geometry.euclidean.threed.Plane plane86 = new org.apache.commons.math3.geometry.euclidean.threed.Plane(vector3D82, vector3D85);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D87 = vector3D75.crossProduct((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85);
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D88 = vector3D59.subtract((org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>) vector3D85);
        double double89 = line58.getAbscissa(vector3D85);
        org.apache.commons.math3.geometry.euclidean.threed.Line line90 = line58.revert();
        org.apache.commons.math3.geometry.euclidean.threed.Line line91 = line58.revert();
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D93 = line58.pointAt((-0.5440211108893698d));
        org.apache.commons.math3.geometry.euclidean.threed.Vector3D vector3D94 = line58.getDirection();
        double double95 = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.distance(vector3D15, vector3D94);
        org.junit.Assert.assertNotNull(vector3D0);
        org.junit.Assert.assertNotNull(vector3D1);
        org.junit.Assert.assertNotNull(vector3D2);
        org.junit.Assert.assertNotNull(vector3D3);
        org.junit.Assert.assertNotNull(vector3D5);
        org.junit.Assert.assertNotNull(vector3D6);
        org.junit.Assert.assertNotNull(vector3D7);
        org.junit.Assert.assertNotNull(vector3D8);
        org.junit.Assert.assertNotNull(vector3D9);
        org.junit.Assert.assertNotNull(vector3D10);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(subPlane14);
        org.junit.Assert.assertNotNull(vector3D15);
        org.junit.Assert.assertNotNull(vector3D16);
        org.junit.Assert.assertNotNull(vector3D17);
        org.junit.Assert.assertNotNull(vector3D18);
        org.junit.Assert.assertNotNull(vector3D19);
        org.junit.Assert.assertNotNull(vector3D26);
        org.junit.Assert.assertNotNull(vector3D27);
        org.junit.Assert.assertNotNull(vector3D28);
        org.junit.Assert.assertNotNull(vector3D29);
        org.junit.Assert.assertNotNull(vector3D30);
        org.junit.Assert.assertNotNull(vector3D32);
        org.junit.Assert.assertNotNull(vector3D33);
        org.junit.Assert.assertNotNull(vector3D34);
        org.junit.Assert.assertNotNull(vector3D35);
        org.junit.Assert.assertNotNull(vector3D36);
        org.junit.Assert.assertNotNull(vector3D37);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(vector3D42);
        org.junit.Assert.assertNotNull(vector3D43);
        org.junit.Assert.assertNotNull(vector3D44);
        org.junit.Assert.assertNotNull(vector3D45);
        org.junit.Assert.assertNotNull(vector3D47);
        org.junit.Assert.assertNotNull(vector3D48);
        org.junit.Assert.assertNotNull(vector3D49);
        org.junit.Assert.assertNotNull(vector3D50);
        org.junit.Assert.assertNotNull(vector3D51);
        org.junit.Assert.assertNotNull(vector3D52);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(line58);
        org.junit.Assert.assertNotNull(vector3D59);
        org.junit.Assert.assertNotNull(vector3D61);
        org.junit.Assert.assertNotNull(vector3D62);
        org.junit.Assert.assertNotNull(vector3D63);
        org.junit.Assert.assertNotNull(vector3D64);
        org.junit.Assert.assertNotNull(vector3D65);
        org.junit.Assert.assertNotNull(vector3D67);
        org.junit.Assert.assertNotNull(vector3D68);
        org.junit.Assert.assertNotNull(vector3D69);
        org.junit.Assert.assertNotNull(vector3D70);
        org.junit.Assert.assertNotNull(vector3D71);
        org.junit.Assert.assertNotNull(vector3D73);
        org.junit.Assert.assertNotNull(vector3D74);
        org.junit.Assert.assertNotNull(vector3D75);
        org.junit.Assert.assertNotNull(vector3D76);
        org.junit.Assert.assertNotNull(vector3D77);
        org.junit.Assert.assertNotNull(vector3D78);
        org.junit.Assert.assertNotNull(vector3D79);
        org.junit.Assert.assertNotNull(vector3D81);
        org.junit.Assert.assertNotNull(vector3D82);
        org.junit.Assert.assertNotNull(vector3D83);
        org.junit.Assert.assertNotNull(vector3D84);
        org.junit.Assert.assertNotNull(vector3D85);
        org.junit.Assert.assertNotNull(vector3D87);
        org.junit.Assert.assertNotNull(vector3D88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(line90);
        org.junit.Assert.assertNotNull(line91);
        org.junit.Assert.assertNotNull(vector3D93);
        org.junit.Assert.assertNotNull(vector3D94);
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #404
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #10
28: astore_1
29: aload_1
30: invokevirtual #11
33: astore_2
34: getstatic     #10
37: astore_3
38: aload_3
39: invokevirtual #11
42: astore        4
44: new           #12
47: dup
48: aload_1
49: aload         4
51: invokespecial #13
54: astore        5
56: getstatic     #10
59: astore        6
61: aload         6
63: invokevirtual #11
66: astore        7
68: getstatic     #10
71: astore        8
73: aload         8
75: invokevirtual #11
78: astore        9
80: getstatic     #10
83: astore        10
85: aload         10
87: invokevirtual #11
90: astore        11
92: new           #12
95: dup
96: aload         8
98: aload         11
100: invokespecial #13
103: astore        12
105: aload         6
107: aload         11
109: invokevirtual #22
112: dstore        13
114: aload         5
116: aload         11
118: invokevirtual #23
121: dstore        15
123: aload         5
125: invokevirtual #24
128: astore        17
130: aload         5
132: invokevirtual #135
135: astore        18
137: getstatic     #10
140: astore        19
142: aload         19
144: invokevirtual #11
147: astore        20
149: getstatic     #10
152: astore        21
154: aload         21
156: invokevirtual #11
159: astore        22
161: new           #12
164: dup
165: aload         19
167: aload         22
169: invokespecial #13
172: astore        23
174: new           #60
177: dup
178: dconst_0
179: ldc2_w        #61
182: invokespecial #63
185: astore        24
187: new           #64
190: dup
191: aload         24
193: dconst_0
194: invokespecial #65
197: astore        25
199: aload         23
201: aload         24
203: invokevirtual #66
206: astore        26
208: getstatic     #10
211: astore        27
213: aload         27
215: invokevirtual #11
218: astore        28
220: getstatic     #10
223: astore        29
225: aload         29
227: invokevirtual #11
230: astore        30
232: new           #12
235: dup
236: aload         27
238: aload         30
240: invokespecial #13
243: astore        31
245: getstatic     #10
248: astore        32
250: aload         32
252: invokevirtual #11
255: astore        33
257: getstatic     #10
260: astore        34
262: aload         34
264: invokevirtual #11
267: astore        35
269: getstatic     #10
272: astore        36
274: aload         36
276: invokevirtual #11
279: astore        37
281: new           #12
284: dup
285: aload         34
287: aload         37
289: invokespecial #13
292: astore        38
294: aload         32
296: aload         37
298: invokevirtual #22
301: dstore        39
303: aload         31
305: aload         37
307: invokevirtual #23
310: dstore        41
312: aload         31
314: invokevirtual #20
317: getstatic     #10
320: astore        43
322: aload         43
324: invokevirtual #11
327: astore        44
329: getstatic     #10
332: astore        45
334: aload         45
336: invokevirtual #11
339: astore        46
341: new           #12
344: dup
345: aload         43
347: aload         46
349: invokespecial #13
352: astore        47
354: getstatic     #10
357: astore        48
359: aload         48
361: invokevirtual #11
364: astore        49
366: getstatic     #10
369: astore        50
371: aload         50
373: invokevirtual #11
376: astore        51
378: getstatic     #10
381: astore        52
383: aload         52
385: invokevirtual #11
388: astore        53
390: new           #12
393: dup
394: aload         50
396: aload         53
398: invokespecial #13
401: astore        54
403: aload         48
405: aload         53
407: invokevirtual #22
410: dstore        55
412: aload         47
414: aload         53
416: invokevirtual #23
419: dstore        57
421: aload         47
423: invokevirtual #20
426: aload         31
428: aload         47
430: invokevirtual #82
433: dstore        59
435: aload         23
437: aload         31
439: invokevirtual #134
442: astore        61
444: getstatic     #10
447: astore        62
449: getstatic     #10
452: astore        63
454: getstatic     #10
457: astore        64
459: aload         64
461: invokevirtual #11
464: astore        65
466: getstatic     #10
469: astore        66
471: aload         66
473: invokevirtual #11
476: astore        67
478: new           #12
481: dup
482: aload         64
484: aload         67
486: invokespecial #13
489: astore        68
491: aload         63
493: aload         67
495: invokestatic  #96
498: astore        69
500: getstatic     #10
503: astore        70
505: aload         70
507: invokevirtual #11
510: astore        71
512: getstatic     #10
515: astore        72
517: aload         72
519: invokevirtual #11
522: astore        73
524: new           #12
527: dup
528: aload         70
530: aload         73
532: invokespecial #13
535: astore        74
537: aload         63
539: aload         73
541: invokevirtual #111
544: astore        75
546: aload         62
548: dconst_1
549: aload         73
551: invokevirtual #112
554: astore        76
556: getstatic     #10
559: astore        77
561: getstatic     #10
564: astore        78
566: aload         78
568: invokevirtual #11
571: astore        79
573: getstatic     #10
576: astore        80
578: aload         80
580: invokevirtual #11
583: astore        81
585: new           #12
588: dup
589: aload         78
591: aload         81
593: invokespecial #13
596: astore        82
598: aload         77
600: aload         81
602: invokestatic  #96
605: astore        83
607: getstatic     #10
610: astore        84
612: aload         84
614: invokevirtual #11
617: astore        85
619: getstatic     #10
622: astore        86
624: aload         86
626: invokevirtual #11
629: astore        87
631: new           #12
634: dup
635: aload         84
637: aload         87
639: invokespecial #13
642: astore        88
644: aload         77
646: aload         87
648: invokevirtual #111
651: astore        89
653: aload         62
655: aload         87
657: invokevirtual #294
660: astore        90
662: aload         61
664: aload         87
666: invokevirtual #295
669: dstore        91
671: aload         61
673: invokevirtual #405
676: astore        93
678: aload         61
680: invokevirtual #405
683: astore        94
685: aload         61
687: ldc2_w        #406
690: invokevirtual #408
693: astore        95
695: aload         61
697: invokevirtual #409
700: astore        96
702: aload         18
704: aload         96
706: invokestatic  #410
709: dstore        97
711: aload_1
712: invokestatic  #18
715: aload_2
716: invokestatic  #18
719: aload_3
720: invokestatic  #18
723: aload         4
725: invokestatic  #18
728: aload         6
730: invokestatic  #18
733: aload         7
735: invokestatic  #18
738: aload         8
740: invokestatic  #18
743: aload         9
745: invokestatic  #18
748: aload         10
750: invokestatic  #18
753: aload         11
755: invokestatic  #18
758: dload         13
760: invokestatic  #38
763: invokestatic  #39
766: dload         15
768: invokestatic  #38
771: invokestatic  #39
774: aload         17
776: invokestatic  #18
779: aload         18
781: invokestatic  #18
784: aload         19
786: invokestatic  #18
789: aload         20
791: invokestatic  #18
794: aload         21
796: invokestatic  #18
799: aload         22
801: invokestatic  #18
804: aload         26
806: invokestatic  #18
809: aload         27
811: invokestatic  #18
814: aload         28
816: invokestatic  #18
819: aload         29
821: invokestatic  #18
824: aload         30
826: invokestatic  #18
829: aload         32
831: invokestatic  #18
834: aload         33
836: invokestatic  #18
839: aload         34
841: invokestatic  #18
844: aload         35
846: invokestatic  #18
849: aload         36
851: invokestatic  #18
854: aload         37
856: invokestatic  #18
859: dload         39
861: invokestatic  #38
864: invokestatic  #39
867: dload         41
869: invokestatic  #38
872: invokestatic  #39
875: aload         43
877: invokestatic  #18
880: aload         44
882: invokestatic  #18
885: aload         45
887: invokestatic  #18
890: aload         46
892: invokestatic  #18
895: aload         48
897: invokestatic  #18
900: aload         49
902: invokestatic  #18
905: aload         50
907: invokestatic  #18
910: aload         51
912: invokestatic  #18
915: aload         52
917: invokestatic  #18
920: aload         53
922: invokestatic  #18
925: dload         55
927: invokestatic  #38
930: invokestatic  #39
933: dload         57
935: invokestatic  #38
938: invokestatic  #39
941: dload         59
943: invokestatic  #38
946: invokestatic  #39
949: aload         61
951: invokestatic  #18
954: aload         62
956: invokestatic  #18
959: aload         63
961: invokestatic  #18
964: aload         64
966: invokestatic  #18
969: aload         65
971: invokestatic  #18
974: aload         66
976: invokestatic  #18
979: aload         67
981: invokestatic  #18
984: aload         69
986: invokestatic  #18
989: aload         70
991: invokestatic  #18
994: aload         71
996: invokestatic  #18
999: aload         72
1001: invokestatic  #18
1004: aload         73
1006: invokestatic  #18
1009: aload         75
1011: invokestatic  #18
1014: aload         76
1016: invokestatic  #18
1019: aload         77
1021: invokestatic  #18
1024: aload         78
1026: invokestatic  #18
1029: aload         79
1031: invokestatic  #18
1034: aload         80
1036: invokestatic  #18
1039: aload         81
1041: invokestatic  #18
1044: aload         83
1046: invokestatic  #18
1049: aload         84
1051: invokestatic  #18
1054: aload         85
1056: invokestatic  #18
1059: aload         86
1061: invokestatic  #18
1064: aload         87
1066: invokestatic  #18
1069: aload         89
1071: invokestatic  #18
1074: aload         90
1076: invokestatic  #18
1079: dload         91
1081: invokestatic  #38
1084: invokestatic  #39
1087: aload         93
1089: invokestatic  #18
1092: aload         94
1094: invokestatic  #18
1097: aload         95
1099: invokestatic  #18
1102: aload         96
1104: invokestatic  #18
1107: dload         97
1109: invokestatic  #38
1112: invokestatic  #39
1115: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.class
Class name: PolyhedronsSetTest
Method name: testBox
Start line: 37
End line: 73
Method source code: 
    public void testBox() {
        PolyhedronsSet tree = new PolyhedronsSet(0, 1, 0, 1, 0, 1);
        Assert.assertEquals(1.0, tree.getSize(), 1.0e-10);
        Assert.assertEquals(6.0, tree.getBoundarySize(), 1.0e-10);
        Vector3D barycenter = (Vector3D) tree.getBarycenter();
        Assert.assertEquals(0.5, barycenter.getX(), 1.0e-10);
        Assert.assertEquals(0.5, barycenter.getY(), 1.0e-10);
        Assert.assertEquals(0.5, barycenter.getZ(), 1.0e-10);
        for (double x = -0.25; x < 1.25; x += 0.1) {
            boolean xOK = (x >= 0.0) && (x <= 1.0);
            for (double y = -0.25; y < 1.25; y += 0.1) {
                boolean yOK = (y >= 0.0) && (y <= 1.0);
                for (double z = -0.25; z < 1.25; z += 0.1) {
                    boolean zOK = (z >= 0.0) && (z <= 1.0);
                    Region.Location expected =
                        (xOK && yOK && zOK) ? Region.Location.INSIDE : Region.Location.OUTSIDE;
                    Assert.assertEquals(expected, tree.checkPoint(new Vector3D(x, y, z)));
                }
            }
        }
        checkPoints(Region.Location.BOUNDARY, tree, new Vector3D[] {
            new Vector3D(0.0, 0.5, 0.5),
            new Vector3D(1.0, 0.5, 0.5),
            new Vector3D(0.5, 0.0, 0.5),
            new Vector3D(0.5, 1.0, 0.5),
            new Vector3D(0.5, 0.5, 0.0),
            new Vector3D(0.5, 0.5, 1.0)
        });
        checkPoints(Region.Location.OUTSIDE, tree, new Vector3D[] {
            new Vector3D(0.0, 1.2, 1.2),
            new Vector3D(1.0, 1.2, 1.2),
            new Vector3D(1.2, 0.0, 1.2),
            new Vector3D(1.2, 1.0, 1.2),
            new Vector3D(1.2, 1.2, 0.0),
            new Vector3D(1.2, 1.2, 1.0)
        });
    }
Method byte code: 
0: new           #2
3: dup
4: dconst_0
5: dconst_1
6: dconst_0
7: dconst_1
8: dconst_0
9: dconst_1
10: invokespecial #3
13: astore_1
14: dconst_1
15: aload_1
16: invokevirtual #4
19: ldc2_w        #5
22: invokestatic  #7
25: ldc2_w        #8
28: aload_1
29: invokevirtual #10
32: ldc2_w        #5
35: invokestatic  #7
38: aload_1
39: invokevirtual #11
42: checkcast     #12
45: astore_2
46: ldc2_w        #13
49: aload_2
50: invokevirtual #15
53: ldc2_w        #5
56: invokestatic  #7
59: ldc2_w        #13
62: aload_2
63: invokevirtual #16
66: ldc2_w        #5
69: invokestatic  #7
72: ldc2_w        #13
75: aload_2
76: invokevirtual #17
79: ldc2_w        #5
82: invokestatic  #7
85: ldc2_w        #18
88: dstore_3
89: dload_3
90: ldc2_w        #20
93: dcmpg
94: ifge          264
97: dload_3
98: dconst_0
99: dcmpl
100: iflt          113
103: dload_3
104: dconst_1
105: dcmpg
106: ifgt          113
109: iconst_1
110: goto          114
113: iconst_0
114: istore        5
116: ldc2_w        #18
119: dstore        6
121: dload         6
123: ldc2_w        #20
126: dcmpg
127: ifge          255
130: dload         6
132: dconst_0
133: dcmpl
134: iflt          148
137: dload         6
139: dconst_1
140: dcmpg
141: ifgt          148
144: iconst_1
145: goto          149
148: iconst_0
149: istore        8
151: ldc2_w        #18
154: dstore        9
156: dload         9
158: ldc2_w        #20
161: dcmpg
162: ifge          244
165: dload         9
167: dconst_0
168: dcmpl
169: iflt          183
172: dload         9
174: dconst_1
175: dcmpg
176: ifgt          183
179: iconst_1
180: goto          184
183: iconst_0
184: istore        11
186: iload         5
188: ifeq          207
191: iload         8
193: ifeq          207
196: iload         11
198: ifeq          207
201: getstatic     #22
204: goto          210
207: getstatic     #23
210: astore        12
212: aload         12
214: aload_1
215: new           #12
218: dup
219: dload_3
220: dload         6
222: dload         9
224: invokespecial #24
227: invokevirtual #25
230: invokestatic  #26
233: dload         9
235: ldc2_w        #27
238: dadd
239: dstore        9
241: goto          156
244: dload         6
246: ldc2_w        #27
249: dadd
250: dstore        6
252: goto          121
255: dload_3
256: ldc2_w        #27
259: dadd
260: dstore_3
261: goto          89
264: aload_0
265: getstatic     #29
268: aload_1
269: bipush        6
271: anewarray     #12
274: dup
275: iconst_0
276: new           #12
279: dup
280: dconst_0
281: ldc2_w        #13
284: ldc2_w        #13
287: invokespecial #24
290: aastore
291: dup
292: iconst_1
293: new           #12
296: dup
297: dconst_1
298: ldc2_w        #13
301: ldc2_w        #13
304: invokespecial #24
307: aastore
308: dup
309: iconst_2
310: new           #12
313: dup
314: ldc2_w        #13
317: dconst_0
318: ldc2_w        #13
321: invokespecial #24
324: aastore
325: dup
326: iconst_3
327: new           #12
330: dup
331: ldc2_w        #13
334: dconst_1
335: ldc2_w        #13
338: invokespecial #24
341: aastore
342: dup
343: iconst_4
344: new           #12
347: dup
348: ldc2_w        #13
351: ldc2_w        #13
354: dconst_0
355: invokespecial #24
358: aastore
359: dup
360: iconst_5
361: new           #12
364: dup
365: ldc2_w        #13
368: ldc2_w        #13
371: dconst_1
372: invokespecial #24
375: aastore
376: invokespecial #30
379: aload_0
380: getstatic     #23
383: aload_1
384: bipush        6
386: anewarray     #12
389: dup
390: iconst_0
391: new           #12
394: dup
395: dconst_0
396: ldc2_w        #31
399: ldc2_w        #31
402: invokespecial #24
405: aastore
406: dup
407: iconst_1
408: new           #12
411: dup
412: dconst_1
413: ldc2_w        #31
416: ldc2_w        #31
419: invokespecial #24
422: aastore
423: dup
424: iconst_2
425: new           #12
428: dup
429: ldc2_w        #31
432: dconst_0
433: ldc2_w        #31
436: invokespecial #24
439: aastore
440: dup
441: iconst_3
442: new           #12
445: dup
446: ldc2_w        #31
449: dconst_1
450: ldc2_w        #31
453: invokespecial #24
456: aastore
457: dup
458: iconst_4
459: new           #12
462: dup
463: ldc2_w        #31
466: ldc2_w        #31
469: dconst_0
470: invokespecial #24
473: aastore
474: dup
475: iconst_5
476: new           #12
479: dup
480: ldc2_w        #31
483: ldc2_w        #31
486: dconst_1
487: invokespecial #24
490: aastore
491: invokespecial #30
494: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.class
Class name: PolyhedronsSetTest
Method name: testTetrahedron
Start line: 76
End line: 108
Method source code: 
    public void testTetrahedron() {
        Vector3D vertex1 = new Vector3D(1, 2, 3);
        Vector3D vertex2 = new Vector3D(2, 2, 4);
        Vector3D vertex3 = new Vector3D(2, 3, 3);
        Vector3D vertex4 = new Vector3D(1, 3, 4);
        @SuppressWarnings("unchecked")
        PolyhedronsSet tree =
            (PolyhedronsSet) new RegionFactory<Euclidean3D>().buildConvex(
                new Plane(vertex3, vertex2, vertex1),
                new Plane(vertex2, vertex3, vertex4),
                new Plane(vertex4, vertex3, vertex1),
                new Plane(vertex1, vertex2, vertex4));
        Assert.assertEquals(1.0 / 3.0, tree.getSize(), 1.0e-10);
        Assert.assertEquals(2.0 * FastMath.sqrt(3.0), tree.getBoundarySize(), 1.0e-10);
        Vector3D barycenter = (Vector3D) tree.getBarycenter();
        Assert.assertEquals(1.5, barycenter.getX(), 1.0e-10);
        Assert.assertEquals(2.5, barycenter.getY(), 1.0e-10);
        Assert.assertEquals(3.5, barycenter.getZ(), 1.0e-10);
        double third = 1.0 / 3.0;
        checkPoints(Region.Location.BOUNDARY, tree, new Vector3D[] {
            vertex1, vertex2, vertex3, vertex4,
            new Vector3D(third, vertex1, third, vertex2, third, vertex3),
            new Vector3D(third, vertex2, third, vertex3, third, vertex4),
            new Vector3D(third, vertex3, third, vertex4, third, vertex1),
            new Vector3D(third, vertex4, third, vertex1, third, vertex2)
        });
        checkPoints(Region.Location.OUTSIDE, tree, new Vector3D[] {
            new Vector3D(1, 2, 4),
            new Vector3D(2, 2, 3),
            new Vector3D(2, 3, 4),
            new Vector3D(1, 3, 3)
        });
    }
Method byte code: 
0: new           #12
3: dup
4: dconst_1
5: ldc2_w        #33
8: ldc2_w        #35
11: invokespecial #24
14: astore_1
15: new           #12
18: dup
19: ldc2_w        #33
22: ldc2_w        #33
25: ldc2_w        #37
28: invokespecial #24
31: astore_2
32: new           #12
35: dup
36: ldc2_w        #33
39: ldc2_w        #35
42: ldc2_w        #35
45: invokespecial #24
48: astore_3
49: new           #12
52: dup
53: dconst_1
54: ldc2_w        #35
57: ldc2_w        #37
60: invokespecial #24
63: astore        4
65: new           #39
68: dup
69: invokespecial #40
72: iconst_4
73: anewarray     #41
76: dup
77: iconst_0
78: new           #42
81: dup
82: aload_3
83: aload_2
84: aload_1
85: invokespecial #43
88: aastore
89: dup
90: iconst_1
91: new           #42
94: dup
95: aload_2
96: aload_3
97: aload         4
99: invokespecial #43
102: aastore
103: dup
104: iconst_2
105: new           #42
108: dup
109: aload         4
111: aload_3
112: aload_1
113: invokespecial #43
116: aastore
117: dup
118: iconst_3
119: new           #42
122: dup
123: aload_1
124: aload_2
125: aload         4
127: invokespecial #43
130: aastore
131: invokevirtual #44
134: checkcast     #2
137: astore        5
139: ldc2_w        #45
142: aload         5
144: invokevirtual #4
147: ldc2_w        #5
150: invokestatic  #7
153: ldc2_w        #33
156: ldc2_w        #35
159: invokestatic  #47
162: dmul
163: aload         5
165: invokevirtual #10
168: ldc2_w        #5
171: invokestatic  #7
174: aload         5
176: invokevirtual #11
179: checkcast     #12
182: astore        6
184: ldc2_w        #48
187: aload         6
189: invokevirtual #15
192: ldc2_w        #5
195: invokestatic  #7
198: ldc2_w        #50
201: aload         6
203: invokevirtual #16
206: ldc2_w        #5
209: invokestatic  #7
212: ldc2_w        #52
215: aload         6
217: invokevirtual #17
220: ldc2_w        #5
223: invokestatic  #7
226: ldc2_w        #45
229: dstore        7
231: aload_0
232: getstatic     #29
235: aload         5
237: bipush        8
239: anewarray     #12
242: dup
243: iconst_0
244: aload_1
245: aastore
246: dup
247: iconst_1
248: aload_2
249: aastore
250: dup
251: iconst_2
252: aload_3
253: aastore
254: dup
255: iconst_3
256: aload         4
258: aastore
259: dup
260: iconst_4
261: new           #12
264: dup
265: dload         7
267: aload_1
268: dload         7
270: aload_2
271: dload         7
273: aload_3
274: invokespecial #54
277: aastore
278: dup
279: iconst_5
280: new           #12
283: dup
284: dload         7
286: aload_2
287: dload         7
289: aload_3
290: dload         7
292: aload         4
294: invokespecial #54
297: aastore
298: dup
299: bipush        6
301: new           #12
304: dup
305: dload         7
307: aload_3
308: dload         7
310: aload         4
312: dload         7
314: aload_1
315: invokespecial #54
318: aastore
319: dup
320: bipush        7
322: new           #12
325: dup
326: dload         7
328: aload         4
330: dload         7
332: aload_1
333: dload         7
335: aload_2
336: invokespecial #54
339: aastore
340: invokespecial #30
343: aload_0
344: getstatic     #23
347: aload         5
349: iconst_4
350: anewarray     #12
353: dup
354: iconst_0
355: new           #12
358: dup
359: dconst_1
360: ldc2_w        #33
363: ldc2_w        #37
366: invokespecial #24
369: aastore
370: dup
371: iconst_1
372: new           #12
375: dup
376: ldc2_w        #33
379: ldc2_w        #33
382: ldc2_w        #35
385: invokespecial #24
388: aastore
389: dup
390: iconst_2
391: new           #12
394: dup
395: ldc2_w        #33
398: ldc2_w        #35
401: ldc2_w        #37
404: invokespecial #24
407: aastore
408: dup
409: iconst_3
410: new           #12
413: dup
414: dconst_1
415: ldc2_w        #35
418: ldc2_w        #35
421: invokespecial #24
424: aastore
425: invokespecial #30
428: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.class
Class name: PolyhedronsSetTest
Method name: testIsometry
Start line: 111
End line: 190
Method source code: 
    public void testIsometry() {
        Vector3D vertex1 = new Vector3D(1.1, 2.2, 3.3);
        Vector3D vertex2 = new Vector3D(2.0, 2.4, 4.2);
        Vector3D vertex3 = new Vector3D(2.8, 3.3, 3.7);
        Vector3D vertex4 = new Vector3D(1.0, 3.6, 4.5);
        @SuppressWarnings("unchecked")
        PolyhedronsSet tree =
            (PolyhedronsSet) new RegionFactory<Euclidean3D>().buildConvex(
                new Plane(vertex3, vertex2, vertex1),
                new Plane(vertex2, vertex3, vertex4),
                new Plane(vertex4, vertex3, vertex1),
                new Plane(vertex1, vertex2, vertex4));
        Vector3D barycenter = (Vector3D) tree.getBarycenter();
        Vector3D s = new Vector3D(10.2, 4.3, -6.7);
        Vector3D c = new Vector3D(-0.2, 2.1, -3.2);
        Rotation r = new Rotation(new Vector3D(6.2, -4.4, 2.1), 0.12);

        tree = tree.rotate(c, r).translate(s);

        Vector3D newB =
            new Vector3D(1.0, s,
                         1.0, c,
                         1.0, r.applyTo(barycenter.subtract(c)));
        Assert.assertEquals(0.0,
                            newB.subtract(tree.getBarycenter()).getNorm(),
                            1.0e-10);

        final Vector3D[] expectedV = new Vector3D[] {
            new Vector3D(1.0, s,
                         1.0, c,
                         1.0, r.applyTo(vertex1.subtract(c))),
                         new Vector3D(1.0, s,
                                      1.0, c,
                                      1.0, r.applyTo(vertex2.subtract(c))),
                                      new Vector3D(1.0, s,
                                                   1.0, c,
                                                   1.0, r.applyTo(vertex3.subtract(c))),
                                                   new Vector3D(1.0, s,
                                                                1.0, c,
                                                                1.0, r.applyTo(vertex4.subtract(c)))
        };
        tree.getTree(true).visit(new BSPTreeVisitor<Euclidean3D>() {

            public Order visitOrder(BSPTree<Euclidean3D> node) {
                return Order.MINUS_SUB_PLUS;
            }

            public void visitInternalNode(BSPTree<Euclidean3D> node) {
                @SuppressWarnings("unchecked")
                BoundaryAttribute<Euclidean3D> attribute =
                    (BoundaryAttribute<Euclidean3D>) node.getAttribute();
                if (attribute.getPlusOutside() != null) {
                    checkFacet((SubPlane) attribute.getPlusOutside());
                }
                if (attribute.getPlusInside() != null) {
                    checkFacet((SubPlane) attribute.getPlusInside());
                }
            }

            public void visitLeafNode(BSPTree<Euclidean3D> node) {
            }

            private void checkFacet(SubPlane facet) {
                Plane plane = (Plane) facet.getHyperplane();
                Vector2D[][] vertices =
                    ((PolygonsSet) facet.getRemainingRegion()).getVertices();
                Assert.assertEquals(1, vertices.length);
                for (int i = 0; i < vertices[0].length; ++i) {
                    Vector3D v = plane.toSpace(vertices[0][i]);
                    double d = Double.POSITIVE_INFINITY;
                    for (int k = 0; k < expectedV.length; ++k) {
                        d = FastMath.min(d, v.subtract(expectedV[k]).getNorm());
                    }
                    Assert.assertEquals(0, d, 1.0e-10);
                }
            }

        });

    }
Method byte code: 
0: new           #12
3: dup
4: ldc2_w        #55
7: ldc2_w        #57
10: ldc2_w        #59
13: invokespecial #24
16: astore_1
17: new           #12
20: dup
21: ldc2_w        #33
24: ldc2_w        #61
27: ldc2_w        #63
30: invokespecial #24
33: astore_2
34: new           #12
37: dup
38: ldc2_w        #65
41: ldc2_w        #59
44: ldc2_w        #67
47: invokespecial #24
50: astore_3
51: new           #12
54: dup
55: dconst_1
56: ldc2_w        #69
59: ldc2_w        #71
62: invokespecial #24
65: astore        4
67: new           #39
70: dup
71: invokespecial #40
74: iconst_4
75: anewarray     #41
78: dup
79: iconst_0
80: new           #42
83: dup
84: aload_3
85: aload_2
86: aload_1
87: invokespecial #43
90: aastore
91: dup
92: iconst_1
93: new           #42
96: dup
97: aload_2
98: aload_3
99: aload         4
101: invokespecial #43
104: aastore
105: dup
106: iconst_2
107: new           #42
110: dup
111: aload         4
113: aload_3
114: aload_1
115: invokespecial #43
118: aastore
119: dup
120: iconst_3
121: new           #42
124: dup
125: aload_1
126: aload_2
127: aload         4
129: invokespecial #43
132: aastore
133: invokevirtual #44
136: checkcast     #2
139: astore        5
141: aload         5
143: invokevirtual #11
146: checkcast     #12
149: astore        6
151: new           #12
154: dup
155: ldc2_w        #73
158: ldc2_w        #75
161: ldc2_w        #77
164: invokespecial #24
167: astore        7
169: new           #12
172: dup
173: ldc2_w        #79
176: ldc2_w        #81
179: ldc2_w        #83
182: invokespecial #24
185: astore        8
187: new           #85
190: dup
191: new           #12
194: dup
195: ldc2_w        #86
198: ldc2_w        #88
201: ldc2_w        #81
204: invokespecial #24
207: ldc2_w        #90
210: invokespecial #92
213: astore        9
215: aload         5
217: aload         8
219: aload         9
221: invokevirtual #93
224: aload         7
226: invokevirtual #94
229: astore        5
231: new           #12
234: dup
235: dconst_1
236: aload         7
238: dconst_1
239: aload         8
241: dconst_1
242: aload         9
244: aload         6
246: aload         8
248: invokevirtual #95
251: invokevirtual #96
254: invokespecial #54
257: astore        10
259: dconst_0
260: aload         10
262: aload         5
264: invokevirtual #11
267: invokevirtual #95
270: invokevirtual #97
273: ldc2_w        #5
276: invokestatic  #7
279: iconst_4
280: anewarray     #12
283: dup
284: iconst_0
285: new           #12
288: dup
289: dconst_1
290: aload         7
292: dconst_1
293: aload         8
295: dconst_1
296: aload         9
298: aload_1
299: aload         8
301: invokevirtual #95
304: invokevirtual #96
307: invokespecial #54
310: aastore
311: dup
312: iconst_1
313: new           #12
316: dup
317: dconst_1
318: aload         7
320: dconst_1
321: aload         8
323: dconst_1
324: aload         9
326: aload_2
327: aload         8
329: invokevirtual #95
332: invokevirtual #96
335: invokespecial #54
338: aastore
339: dup
340: iconst_2
341: new           #12
344: dup
345: dconst_1
346: aload         7
348: dconst_1
349: aload         8
351: dconst_1
352: aload         9
354: aload_3
355: aload         8
357: invokevirtual #95
360: invokevirtual #96
363: invokespecial #54
366: aastore
367: dup
368: iconst_3
369: new           #12
372: dup
373: dconst_1
374: aload         7
376: dconst_1
377: aload         8
379: dconst_1
380: aload         9
382: aload         4
384: aload         8
386: invokevirtual #95
389: invokevirtual #96
392: invokespecial #54
395: aastore
396: astore        11
398: aload         5
400: iconst_1
401: invokevirtual #98
404: new           #99
407: dup
408: aload_0
409: aload         11
411: invokespecial #100
414: invokevirtual #101
417: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.class
Class name: PolyhedronsSetTest
Method name: testBuildBox
Start line: 193
End line: 207
Method source code: 
    public void testBuildBox() {
        double x = 1.0;
        double y = 2.0;
        double z = 3.0;
        double w = 0.1;
        double l = 1.0;
        PolyhedronsSet tree =
            new PolyhedronsSet(x - l, x + l, y - w, y + w, z - w, z + w);
        Vector3D barycenter = (Vector3D) tree.getBarycenter();
        Assert.assertEquals(x, barycenter.getX(), 1.0e-10);
        Assert.assertEquals(y, barycenter.getY(), 1.0e-10);
        Assert.assertEquals(z, barycenter.getZ(), 1.0e-10);
        Assert.assertEquals(8 * l * w * w, tree.getSize(), 1.0e-10);
        Assert.assertEquals(8 * w * (2 * l + w), tree.getBoundarySize(), 1.0e-10);
    }
Method byte code: 
0: dconst_1
1: dstore_1
2: ldc2_w        #33
5: dstore_3
6: ldc2_w        #35
9: dstore        5
11: ldc2_w        #27
14: dstore        7
16: dconst_1
17: dstore        9
19: new           #2
22: dup
23: dload_1
24: dload         9
26: dsub
27: dload_1
28: dload         9
30: dadd
31: dload_3
32: dload         7
34: dsub
35: dload_3
36: dload         7
38: dadd
39: dload         5
41: dload         7
43: dsub
44: dload         5
46: dload         7
48: dadd
49: invokespecial #3
52: astore        11
54: aload         11
56: invokevirtual #11
59: checkcast     #12
62: astore        12
64: dload_1
65: aload         12
67: invokevirtual #15
70: ldc2_w        #5
73: invokestatic  #7
76: dload_3
77: aload         12
79: invokevirtual #16
82: ldc2_w        #5
85: invokestatic  #7
88: dload         5
90: aload         12
92: invokevirtual #17
95: ldc2_w        #5
98: invokestatic  #7
101: ldc2_w        #102
104: dload         9
106: dmul
107: dload         7
109: dmul
110: dload         7
112: dmul
113: aload         11
115: invokevirtual #4
118: ldc2_w        #5
121: invokestatic  #7
124: ldc2_w        #102
127: dload         7
129: dmul
130: ldc2_w        #33
133: dload         9
135: dmul
136: dload         7
138: dadd
139: dmul
140: aload         11
142: invokevirtual #10
145: ldc2_w        #5
148: invokestatic  #7
151: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.class
Class name: PolyhedronsSetTest
Method name: testCross
Start line: 210
End line: 233
Method source code: 
    public void testCross() {

        double x = 1.0;
        double y = 2.0;
        double z = 3.0;
        double w = 0.1;
        double l = 1.0;
        PolyhedronsSet xBeam =
            new PolyhedronsSet(x - l, x + l, y - w, y + w, z - w, z + w);
        PolyhedronsSet yBeam =
            new PolyhedronsSet(x - w, x + w, y - l, y + l, z - w, z + w);
        PolyhedronsSet zBeam =
            new PolyhedronsSet(x - w, x + w, y - w, y + w, z - l, z + l);
        RegionFactory<Euclidean3D> factory = new RegionFactory<Euclidean3D>();
        PolyhedronsSet tree = (PolyhedronsSet) factory.union(xBeam, factory.union(yBeam, zBeam));
        Vector3D barycenter = (Vector3D) tree.getBarycenter();

        Assert.assertEquals(x, barycenter.getX(), 1.0e-10);
        Assert.assertEquals(y, barycenter.getY(), 1.0e-10);
        Assert.assertEquals(z, barycenter.getZ(), 1.0e-10);
        Assert.assertEquals(8 * w * w * (3 * l - 2 * w), tree.getSize(), 1.0e-10);
        Assert.assertEquals(24 * w * (2 * l - w), tree.getBoundarySize(), 1.0e-10);

    }
Method byte code: 
0: dconst_1
1: dstore_1
2: ldc2_w        #33
5: dstore_3
6: ldc2_w        #35
9: dstore        5
11: ldc2_w        #27
14: dstore        7
16: dconst_1
17: dstore        9
19: new           #2
22: dup
23: dload_1
24: dload         9
26: dsub
27: dload_1
28: dload         9
30: dadd
31: dload_3
32: dload         7
34: dsub
35: dload_3
36: dload         7
38: dadd
39: dload         5
41: dload         7
43: dsub
44: dload         5
46: dload         7
48: dadd
49: invokespecial #3
52: astore        11
54: new           #2
57: dup
58: dload_1
59: dload         7
61: dsub
62: dload_1
63: dload         7
65: dadd
66: dload_3
67: dload         9
69: dsub
70: dload_3
71: dload         9
73: dadd
74: dload         5
76: dload         7
78: dsub
79: dload         5
81: dload         7
83: dadd
84: invokespecial #3
87: astore        12
89: new           #2
92: dup
93: dload_1
94: dload         7
96: dsub
97: dload_1
98: dload         7
100: dadd
101: dload_3
102: dload         7
104: dsub
105: dload_3
106: dload         7
108: dadd
109: dload         5
111: dload         9
113: dsub
114: dload         5
116: dload         9
118: dadd
119: invokespecial #3
122: astore        13
124: new           #39
127: dup
128: invokespecial #40
131: astore        14
133: aload         14
135: aload         11
137: aload         14
139: aload         12
141: aload         13
143: invokevirtual #104
146: invokevirtual #104
149: checkcast     #2
152: astore        15
154: aload         15
156: invokevirtual #11
159: checkcast     #12
162: astore        16
164: dload_1
165: aload         16
167: invokevirtual #15
170: ldc2_w        #5
173: invokestatic  #7
176: dload_3
177: aload         16
179: invokevirtual #16
182: ldc2_w        #5
185: invokestatic  #7
188: dload         5
190: aload         16
192: invokevirtual #17
195: ldc2_w        #5
198: invokestatic  #7
201: ldc2_w        #102
204: dload         7
206: dmul
207: dload         7
209: dmul
210: ldc2_w        #35
213: dload         9
215: dmul
216: ldc2_w        #33
219: dload         7
221: dmul
222: dsub
223: dmul
224: aload         15
226: invokevirtual #4
229: ldc2_w        #5
232: invokestatic  #7
235: ldc2_w        #105
238: dload         7
240: dmul
241: ldc2_w        #33
244: dload         9
246: dmul
247: dload         7
249: dsub
250: dmul
251: aload         15
253: invokevirtual #10
256: ldc2_w        #5
259: invokestatic  #7
262: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.class
Class name: PolyhedronsSetTest
Method name: testIssue780
Start line: 236
End line: 282
Method source code: 
    public void testIssue780() {
        float[] coords = {
            1.000000f, -1.000000f, -1.000000f, 
            1.000000f, -1.000000f, 1.000000f, 
            -1.000000f, -1.000000f, 1.000000f, 
            -1.000000f, -1.000000f, -1.000000f, 
            1.000000f, 1.000000f, -1f, 
            0.999999f, 1.000000f, 1.000000f,   // 1.000000f, 1.000000f, 1.000000f, 
            -1.000000f, 1.000000f, 1.000000f, 
            -1.000000f, 1.000000f, -1.000000f};
        int[] indices = {
            0, 1, 2, 0, 2, 3, 
            4, 7, 6, 4, 6, 5, 
            0, 4, 5, 0, 5, 1, 
            1, 5, 6, 1, 6, 2, 
            2, 6, 7, 2, 7, 3, 
            4, 0, 3, 4, 3, 7};
        ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList = new ArrayList<SubHyperplane<Euclidean3D>>();
        for (int idx = 0; idx < indices.length; idx += 3) {
            int idxA = indices[idx] * 3;
            int idxB = indices[idx + 1] * 3;
            int idxC = indices[idx + 2] * 3;
            Vector3D v_1 = new Vector3D(coords[idxA], coords[idxA + 1], coords[idxA + 2]);
            Vector3D v_2 = new Vector3D(coords[idxB], coords[idxB + 1], coords[idxB + 2]);
            Vector3D v_3 = new Vector3D(coords[idxC], coords[idxC + 1], coords[idxC + 2]);
            Vector3D[] vertices = {v_1, v_2, v_3};
            Plane polyPlane = new Plane(v_1, v_2, v_3);
            ArrayList<SubHyperplane<Euclidean2D>> lines = new ArrayList<SubHyperplane<Euclidean2D>>();

            Vector2D[] projPts = new Vector2D[vertices.length];
            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
                projPts[ptIdx] = polyPlane.toSubSpace(vertices[ptIdx]);
            }

            SubLine lineInPlane = null;
            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
                lineInPlane = new SubLine(projPts[ptIdx], projPts[(ptIdx + 1) % projPts.length]);
                lines.add(lineInPlane);
            }
            Region<Euclidean2D> polyRegion = new PolygonsSet(lines);
            SubPlane polygon = new SubPlane(polyPlane, polyRegion);
            subHyperplaneList.add(polygon);
        }
        PolyhedronsSet polyhedronsSet = new PolyhedronsSet(subHyperplaneList);
        Assert.assertEquals( 8.0, polyhedronsSet.getSize(), 3.0e-6);
        Assert.assertEquals(24.0, polyhedronsSet.getBoundarySize(), 5.0e-6);
    }
Method byte code: 
0: bipush        24
2: newarray       float
4: dup
5: iconst_0
6: fconst_1
7: fastore
8: dup
9: iconst_1
10: ldc           #107
12: fastore
13: dup
14: iconst_2
15: ldc           #107
17: fastore
18: dup
19: iconst_3
20: fconst_1
21: fastore
22: dup
23: iconst_4
24: ldc           #107
26: fastore
27: dup
28: iconst_5
29: fconst_1
30: fastore
31: dup
32: bipush        6
34: ldc           #107
36: fastore
37: dup
38: bipush        7
40: ldc           #107
42: fastore
43: dup
44: bipush        8
46: fconst_1
47: fastore
48: dup
49: bipush        9
51: ldc           #107
53: fastore
54: dup
55: bipush        10
57: ldc           #107
59: fastore
60: dup
61: bipush        11
63: ldc           #107
65: fastore
66: dup
67: bipush        12
69: fconst_1
70: fastore
71: dup
72: bipush        13
74: fconst_1
75: fastore
76: dup
77: bipush        14
79: ldc           #107
81: fastore
82: dup
83: bipush        15
85: ldc           #108
87: fastore
88: dup
89: bipush        16
91: fconst_1
92: fastore
93: dup
94: bipush        17
96: fconst_1
97: fastore
98: dup
99: bipush        18
101: ldc           #107
103: fastore
104: dup
105: bipush        19
107: fconst_1
108: fastore
109: dup
110: bipush        20
112: fconst_1
113: fastore
114: dup
115: bipush        21
117: ldc           #107
119: fastore
120: dup
121: bipush        22
123: fconst_1
124: fastore
125: dup
126: bipush        23
128: ldc           #107
130: fastore
131: astore_1
132: bipush        36
134: newarray       int
136: dup
137: iconst_0
138: iconst_0
139: iastore
140: dup
141: iconst_1
142: iconst_1
143: iastore
144: dup
145: iconst_2
146: iconst_2
147: iastore
148: dup
149: iconst_3
150: iconst_0
151: iastore
152: dup
153: iconst_4
154: iconst_2
155: iastore
156: dup
157: iconst_5
158: iconst_3
159: iastore
160: dup
161: bipush        6
163: iconst_4
164: iastore
165: dup
166: bipush        7
168: bipush        7
170: iastore
171: dup
172: bipush        8
174: bipush        6
176: iastore
177: dup
178: bipush        9
180: iconst_4
181: iastore
182: dup
183: bipush        10
185: bipush        6
187: iastore
188: dup
189: bipush        11
191: iconst_5
192: iastore
193: dup
194: bipush        12
196: iconst_0
197: iastore
198: dup
199: bipush        13
201: iconst_4
202: iastore
203: dup
204: bipush        14
206: iconst_5
207: iastore
208: dup
209: bipush        15
211: iconst_0
212: iastore
213: dup
214: bipush        16
216: iconst_5
217: iastore
218: dup
219: bipush        17
221: iconst_1
222: iastore
223: dup
224: bipush        18
226: iconst_1
227: iastore
228: dup
229: bipush        19
231: iconst_5
232: iastore
233: dup
234: bipush        20
236: bipush        6
238: iastore
239: dup
240: bipush        21
242: iconst_1
243: iastore
244: dup
245: bipush        22
247: bipush        6
249: iastore
250: dup
251: bipush        23
253: iconst_2
254: iastore
255: dup
256: bipush        24
258: iconst_2
259: iastore
260: dup
261: bipush        25
263: bipush        6
265: iastore
266: dup
267: bipush        26
269: bipush        7
271: iastore
272: dup
273: bipush        27
275: iconst_2
276: iastore
277: dup
278: bipush        28
280: bipush        7
282: iastore
283: dup
284: bipush        29
286: iconst_3
287: iastore
288: dup
289: bipush        30
291: iconst_4
292: iastore
293: dup
294: bipush        31
296: iconst_0
297: iastore
298: dup
299: bipush        32
301: iconst_3
302: iastore
303: dup
304: bipush        33
306: iconst_4
307: iastore
308: dup
309: bipush        34
311: iconst_3
312: iastore
313: dup
314: bipush        35
316: bipush        7
318: iastore
319: astore_2
320: new           #109
323: dup
324: invokespecial #110
327: astore_3
328: iconst_0
329: istore        4
331: iload         4
333: aload_2
334: arraylength
335: if_icmpge     625
338: aload_2
339: iload         4
341: iaload
342: iconst_3
343: imul
344: istore        5
346: aload_2
347: iload         4
349: iconst_1
350: iadd
351: iaload
352: iconst_3
353: imul
354: istore        6
356: aload_2
357: iload         4
359: iconst_2
360: iadd
361: iaload
362: iconst_3
363: imul
364: istore        7
366: new           #12
369: dup
370: aload_1
371: iload         5
373: faload
374: f2d
375: aload_1
376: iload         5
378: iconst_1
379: iadd
380: faload
381: f2d
382: aload_1
383: iload         5
385: iconst_2
386: iadd
387: faload
388: f2d
389: invokespecial #24
392: astore        8
394: new           #12
397: dup
398: aload_1
399: iload         6
401: faload
402: f2d
403: aload_1
404: iload         6
406: iconst_1
407: iadd
408: faload
409: f2d
410: aload_1
411: iload         6
413: iconst_2
414: iadd
415: faload
416: f2d
417: invokespecial #24
420: astore        9
422: new           #12
425: dup
426: aload_1
427: iload         7
429: faload
430: f2d
431: aload_1
432: iload         7
434: iconst_1
435: iadd
436: faload
437: f2d
438: aload_1
439: iload         7
441: iconst_2
442: iadd
443: faload
444: f2d
445: invokespecial #24
448: astore        10
450: iconst_3
451: anewarray     #12
454: dup
455: iconst_0
456: aload         8
458: aastore
459: dup
460: iconst_1
461: aload         9
463: aastore
464: dup
465: iconst_2
466: aload         10
468: aastore
469: astore        11
471: new           #42
474: dup
475: aload         8
477: aload         9
479: aload         10
481: invokespecial #43
484: astore        12
486: new           #109
489: dup
490: invokespecial #110
493: astore        13
495: aload         11
497: arraylength
498: anewarray     #111
501: astore        14
503: iconst_0
504: istore        15
506: iload         15
508: aload         14
510: arraylength
511: if_icmpge     535
514: aload         14
516: iload         15
518: aload         12
520: aload         11
522: iload         15
524: aaload
525: invokevirtual #112
528: aastore
529: iinc          15, 1
532: goto          506
535: aconst_null
536: astore        15
538: iconst_0
539: istore        16
541: iload         16
543: aload         14
545: arraylength
546: if_icmpge     588
549: new           #113
552: dup
553: aload         14
555: iload         16
557: aaload
558: aload         14
560: iload         16
562: iconst_1
563: iadd
564: aload         14
566: arraylength
567: irem
568: aaload
569: invokespecial #114
572: astore        15
574: aload         13
576: aload         15
578: invokevirtual #115
581: pop
582: iinc          16, 1
585: goto          541
588: new           #116
591: dup
592: aload         13
594: invokespecial #117
597: astore        16
599: new           #118
602: dup
603: aload         12
605: aload         16
607: invokespecial #119
610: astore        17
612: aload_3
613: aload         17
615: invokevirtual #115
618: pop
619: iinc          4, 3
622: goto          331
625: new           #2
628: dup
629: aload_3
630: invokespecial #120
633: astore        4
635: ldc2_w        #102
638: aload         4
640: invokevirtual #4
643: ldc2_w        #121
646: invokestatic  #7
649: ldc2_w        #105
652: aload         4
654: invokevirtual #10
657: ldc2_w        #123
660: invokestatic  #7
663: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testSimplyConnected
Start line: 38
End line: 76
Method source code: 
    public void testSimplyConnected() {
        Vector2D[][] vertices = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(36.0, 22.0),
                new Vector2D(39.0, 32.0),
                new Vector2D(19.0, 32.0),
                new Vector2D( 6.0, 16.0),
                new Vector2D(31.0, 10.0),
                new Vector2D(42.0, 16.0),
                new Vector2D(34.0, 20.0),
                new Vector2D(29.0, 19.0),
                new Vector2D(23.0, 22.0),
                new Vector2D(33.0, 25.0)
            }
        };
        PolygonsSet set = buildSet(vertices);
        Assert.assertEquals(Region.Location.OUTSIDE, set.checkPoint(new Vector2D(50.0, 30.0)));
        checkPoints(Region.Location.INSIDE, set, new Vector2D[] {
            new Vector2D(30.0, 15.0),
            new Vector2D(15.0, 20.0),
            new Vector2D(24.0, 25.0),
            new Vector2D(35.0, 30.0),
            new Vector2D(19.0, 17.0)
        });
        checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {
            new Vector2D(50.0, 30.0),
            new Vector2D(30.0, 35.0),
            new Vector2D(10.0, 25.0),
            new Vector2D(10.0, 10.0),
            new Vector2D(40.0, 10.0),
            new Vector2D(50.0, 15.0),
            new Vector2D(30.0, 22.0)
        });
        checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {
            new Vector2D(30.0, 32.0),
            new Vector2D(34.0, 20.0)
        });
        checkVertices(set.getVertices(), vertices);
    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: bipush        10
8: anewarray     #3
11: dup
12: iconst_0
13: new           #3
16: dup
17: ldc2_w        #4
20: ldc2_w        #6
23: invokespecial #8
26: aastore
27: dup
28: iconst_1
29: new           #3
32: dup
33: ldc2_w        #9
36: ldc2_w        #11
39: invokespecial #8
42: aastore
43: dup
44: iconst_2
45: new           #3
48: dup
49: ldc2_w        #13
52: ldc2_w        #11
55: invokespecial #8
58: aastore
59: dup
60: iconst_3
61: new           #3
64: dup
65: ldc2_w        #15
68: ldc2_w        #17
71: invokespecial #8
74: aastore
75: dup
76: iconst_4
77: new           #3
80: dup
81: ldc2_w        #19
84: ldc2_w        #21
87: invokespecial #8
90: aastore
91: dup
92: iconst_5
93: new           #3
96: dup
97: ldc2_w        #23
100: ldc2_w        #17
103: invokespecial #8
106: aastore
107: dup
108: bipush        6
110: new           #3
113: dup
114: ldc2_w        #25
117: ldc2_w        #27
120: invokespecial #8
123: aastore
124: dup
125: bipush        7
127: new           #3
130: dup
131: ldc2_w        #29
134: ldc2_w        #13
137: invokespecial #8
140: aastore
141: dup
142: bipush        8
144: new           #3
147: dup
148: ldc2_w        #31
151: ldc2_w        #6
154: invokespecial #8
157: aastore
158: dup
159: bipush        9
161: new           #3
164: dup
165: ldc2_w        #33
168: ldc2_w        #35
171: invokespecial #8
174: aastore
175: aastore
176: astore_1
177: aload_0
178: aload_1
179: invokespecial #37
182: astore_2
183: getstatic     #38
186: aload_2
187: new           #3
190: dup
191: ldc2_w        #39
194: ldc2_w        #41
197: invokespecial #8
200: invokevirtual #43
203: invokestatic  #44
206: aload_0
207: getstatic     #45
210: aload_2
211: iconst_5
212: anewarray     #3
215: dup
216: iconst_0
217: new           #3
220: dup
221: ldc2_w        #41
224: ldc2_w        #46
227: invokespecial #8
230: aastore
231: dup
232: iconst_1
233: new           #3
236: dup
237: ldc2_w        #46
240: ldc2_w        #27
243: invokespecial #8
246: aastore
247: dup
248: iconst_2
249: new           #3
252: dup
253: ldc2_w        #48
256: ldc2_w        #35
259: invokespecial #8
262: aastore
263: dup
264: iconst_3
265: new           #3
268: dup
269: ldc2_w        #50
272: ldc2_w        #41
275: invokespecial #8
278: aastore
279: dup
280: iconst_4
281: new           #3
284: dup
285: ldc2_w        #13
288: ldc2_w        #52
291: invokespecial #8
294: aastore
295: invokespecial #54
298: aload_0
299: getstatic     #38
302: aload_2
303: bipush        7
305: anewarray     #3
308: dup
309: iconst_0
310: new           #3
313: dup
314: ldc2_w        #39
317: ldc2_w        #41
320: invokespecial #8
323: aastore
324: dup
325: iconst_1
326: new           #3
329: dup
330: ldc2_w        #41
333: ldc2_w        #50
336: invokespecial #8
339: aastore
340: dup
341: iconst_2
342: new           #3
345: dup
346: ldc2_w        #21
349: ldc2_w        #35
352: invokespecial #8
355: aastore
356: dup
357: iconst_3
358: new           #3
361: dup
362: ldc2_w        #21
365: ldc2_w        #21
368: invokespecial #8
371: aastore
372: dup
373: iconst_4
374: new           #3
377: dup
378: ldc2_w        #55
381: ldc2_w        #21
384: invokespecial #8
387: aastore
388: dup
389: iconst_5
390: new           #3
393: dup
394: ldc2_w        #39
397: ldc2_w        #46
400: invokespecial #8
403: aastore
404: dup
405: bipush        6
407: new           #3
410: dup
411: ldc2_w        #41
414: ldc2_w        #6
417: invokespecial #8
420: aastore
421: invokespecial #54
424: aload_0
425: getstatic     #57
428: aload_2
429: iconst_2
430: anewarray     #3
433: dup
434: iconst_0
435: new           #3
438: dup
439: ldc2_w        #41
442: ldc2_w        #11
445: invokespecial #8
448: aastore
449: dup
450: iconst_1
451: new           #3
454: dup
455: ldc2_w        #25
458: ldc2_w        #27
461: invokespecial #8
464: aastore
465: invokespecial #54
468: aload_0
469: aload_2
470: invokevirtual #58
473: aload_1
474: invokespecial #59
477: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testStair
Start line: 79
End line: 101
Method source code: 
    public void testStair() {
        Vector2D[][] vertices = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0, 0.0),
                new Vector2D( 0.0, 2.0),
                new Vector2D(-0.1, 2.0),
                new Vector2D(-0.1, 1.0),
                new Vector2D(-0.3, 1.0),
                new Vector2D(-0.3, 1.5),
                new Vector2D(-1.3, 1.5),
                new Vector2D(-1.3, 2.0),
                new Vector2D(-1.8, 2.0),
                new Vector2D(-1.8 - 1.0 / FastMath.sqrt(2.0),
                            2.0 - 1.0 / FastMath.sqrt(2.0))
            }
        };

        PolygonsSet set = buildSet(vertices);
        checkVertices(set.getVertices(), vertices);

        Assert.assertEquals(1.1 + 0.95 * FastMath.sqrt(2.0), set.getSize(), 1.0e-10);

    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: bipush        10
8: anewarray     #3
11: dup
12: iconst_0
13: new           #3
16: dup
17: dconst_0
18: dconst_0
19: invokespecial #8
22: aastore
23: dup
24: iconst_1
25: new           #3
28: dup
29: dconst_0
30: ldc2_w        #60
33: invokespecial #8
36: aastore
37: dup
38: iconst_2
39: new           #3
42: dup
43: ldc2_w        #62
46: ldc2_w        #60
49: invokespecial #8
52: aastore
53: dup
54: iconst_3
55: new           #3
58: dup
59: ldc2_w        #62
62: dconst_1
63: invokespecial #8
66: aastore
67: dup
68: iconst_4
69: new           #3
72: dup
73: ldc2_w        #64
76: dconst_1
77: invokespecial #8
80: aastore
81: dup
82: iconst_5
83: new           #3
86: dup
87: ldc2_w        #64
90: ldc2_w        #66
93: invokespecial #8
96: aastore
97: dup
98: bipush        6
100: new           #3
103: dup
104: ldc2_w        #68
107: ldc2_w        #66
110: invokespecial #8
113: aastore
114: dup
115: bipush        7
117: new           #3
120: dup
121: ldc2_w        #68
124: ldc2_w        #60
127: invokespecial #8
130: aastore
131: dup
132: bipush        8
134: new           #3
137: dup
138: ldc2_w        #70
141: ldc2_w        #60
144: invokespecial #8
147: aastore
148: dup
149: bipush        9
151: new           #3
154: dup
155: ldc2_w        #70
158: dconst_1
159: ldc2_w        #60
162: invokestatic  #72
165: ddiv
166: dsub
167: ldc2_w        #60
170: dconst_1
171: ldc2_w        #60
174: invokestatic  #72
177: ddiv
178: dsub
179: invokespecial #8
182: aastore
183: aastore
184: astore_1
185: aload_0
186: aload_1
187: invokespecial #37
190: astore_2
191: aload_0
192: aload_2
193: invokevirtual #58
196: aload_1
197: invokespecial #59
200: ldc2_w        #73
203: ldc2_w        #75
206: ldc2_w        #60
209: invokestatic  #72
212: dmul
213: dadd
214: aload_2
215: invokevirtual #77
218: ldc2_w        #78
221: invokestatic  #80
224: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testHole
Start line: 104
End line: 145
Method source code: 
    public void testHole() {
        Vector2D[][] vertices = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(0.0, 0.0),
                new Vector2D(3.0, 0.0),
                new Vector2D(3.0, 3.0),
                new Vector2D(0.0, 3.0)
            }, new Vector2D[] {
                new Vector2D(1.0, 2.0),
                new Vector2D(2.0, 2.0),
                new Vector2D(2.0, 1.0),
                new Vector2D(1.0, 1.0)
            }
        };
        PolygonsSet set = buildSet(vertices);
        checkPoints(Region.Location.INSIDE, set, new Vector2D[] {
            new Vector2D(0.5, 0.5),
            new Vector2D(1.5, 0.5),
            new Vector2D(2.5, 0.5),
            new Vector2D(0.5, 1.5),
            new Vector2D(2.5, 1.5),
            new Vector2D(0.5, 2.5),
            new Vector2D(1.5, 2.5),
            new Vector2D(2.5, 2.5),
            new Vector2D(0.5, 1.0)
        });
        checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {
            new Vector2D(1.5, 1.5),
            new Vector2D(3.5, 1.0),
            new Vector2D(4.0, 1.5),
            new Vector2D(6.0, 6.0)
        });
        checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {
            new Vector2D(1.0, 1.0),
            new Vector2D(1.5, 0.0),
            new Vector2D(1.5, 1.0),
            new Vector2D(1.5, 2.0),
            new Vector2D(1.5, 3.0),
            new Vector2D(3.0, 3.0)
        });
        checkVertices(set.getVertices(), vertices);
    }
Method byte code: 
0: iconst_2
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_4
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: dconst_0
17: dconst_0
18: invokespecial #8
21: aastore
22: dup
23: iconst_1
24: new           #3
27: dup
28: ldc2_w        #81
31: dconst_0
32: invokespecial #8
35: aastore
36: dup
37: iconst_2
38: new           #3
41: dup
42: ldc2_w        #81
45: ldc2_w        #81
48: invokespecial #8
51: aastore
52: dup
53: iconst_3
54: new           #3
57: dup
58: dconst_0
59: ldc2_w        #81
62: invokespecial #8
65: aastore
66: aastore
67: dup
68: iconst_1
69: iconst_4
70: anewarray     #3
73: dup
74: iconst_0
75: new           #3
78: dup
79: dconst_1
80: ldc2_w        #60
83: invokespecial #8
86: aastore
87: dup
88: iconst_1
89: new           #3
92: dup
93: ldc2_w        #60
96: ldc2_w        #60
99: invokespecial #8
102: aastore
103: dup
104: iconst_2
105: new           #3
108: dup
109: ldc2_w        #60
112: dconst_1
113: invokespecial #8
116: aastore
117: dup
118: iconst_3
119: new           #3
122: dup
123: dconst_1
124: dconst_1
125: invokespecial #8
128: aastore
129: aastore
130: astore_1
131: aload_0
132: aload_1
133: invokespecial #37
136: astore_2
137: aload_0
138: getstatic     #45
141: aload_2
142: bipush        9
144: anewarray     #3
147: dup
148: iconst_0
149: new           #3
152: dup
153: ldc2_w        #83
156: ldc2_w        #83
159: invokespecial #8
162: aastore
163: dup
164: iconst_1
165: new           #3
168: dup
169: ldc2_w        #66
172: ldc2_w        #83
175: invokespecial #8
178: aastore
179: dup
180: iconst_2
181: new           #3
184: dup
185: ldc2_w        #85
188: ldc2_w        #83
191: invokespecial #8
194: aastore
195: dup
196: iconst_3
197: new           #3
200: dup
201: ldc2_w        #83
204: ldc2_w        #66
207: invokespecial #8
210: aastore
211: dup
212: iconst_4
213: new           #3
216: dup
217: ldc2_w        #85
220: ldc2_w        #66
223: invokespecial #8
226: aastore
227: dup
228: iconst_5
229: new           #3
232: dup
233: ldc2_w        #83
236: ldc2_w        #85
239: invokespecial #8
242: aastore
243: dup
244: bipush        6
246: new           #3
249: dup
250: ldc2_w        #66
253: ldc2_w        #85
256: invokespecial #8
259: aastore
260: dup
261: bipush        7
263: new           #3
266: dup
267: ldc2_w        #85
270: ldc2_w        #85
273: invokespecial #8
276: aastore
277: dup
278: bipush        8
280: new           #3
283: dup
284: ldc2_w        #83
287: dconst_1
288: invokespecial #8
291: aastore
292: invokespecial #54
295: aload_0
296: getstatic     #38
299: aload_2
300: iconst_4
301: anewarray     #3
304: dup
305: iconst_0
306: new           #3
309: dup
310: ldc2_w        #66
313: ldc2_w        #66
316: invokespecial #8
319: aastore
320: dup
321: iconst_1
322: new           #3
325: dup
326: ldc2_w        #87
329: dconst_1
330: invokespecial #8
333: aastore
334: dup
335: iconst_2
336: new           #3
339: dup
340: ldc2_w        #89
343: ldc2_w        #66
346: invokespecial #8
349: aastore
350: dup
351: iconst_3
352: new           #3
355: dup
356: ldc2_w        #15
359: ldc2_w        #15
362: invokespecial #8
365: aastore
366: invokespecial #54
369: aload_0
370: getstatic     #57
373: aload_2
374: bipush        6
376: anewarray     #3
379: dup
380: iconst_0
381: new           #3
384: dup
385: dconst_1
386: dconst_1
387: invokespecial #8
390: aastore
391: dup
392: iconst_1
393: new           #3
396: dup
397: ldc2_w        #66
400: dconst_0
401: invokespecial #8
404: aastore
405: dup
406: iconst_2
407: new           #3
410: dup
411: ldc2_w        #66
414: dconst_1
415: invokespecial #8
418: aastore
419: dup
420: iconst_3
421: new           #3
424: dup
425: ldc2_w        #66
428: ldc2_w        #60
431: invokespecial #8
434: aastore
435: dup
436: iconst_4
437: new           #3
440: dup
441: ldc2_w        #66
444: ldc2_w        #81
447: invokespecial #8
450: aastore
451: dup
452: iconst_5
453: new           #3
456: dup
457: ldc2_w        #81
460: ldc2_w        #81
463: invokespecial #8
466: aastore
467: invokespecial #54
470: aload_0
471: aload_2
472: invokevirtual #58
475: aload_1
476: invokespecial #59
479: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testDisjointPolygons
Start line: 148
End line: 178
Method source code: 
    public void testDisjointPolygons() {
        Vector2D[][] vertices = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(0.0, 1.0),
                new Vector2D(2.0, 1.0),
                new Vector2D(1.0, 2.0)
            }, new Vector2D[] {
                new Vector2D(4.0, 0.0),
                new Vector2D(5.0, 1.0),
                new Vector2D(3.0, 1.0)
            }
        };
        PolygonsSet set = buildSet(vertices);
        Assert.assertEquals(Region.Location.INSIDE, set.checkPoint(new Vector2D(1.0, 1.5)));
        checkPoints(Region.Location.INSIDE, set, new Vector2D[] {
            new Vector2D(1.0, 1.5),
            new Vector2D(4.5, 0.8)
        });
        checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {
            new Vector2D(1.0, 0.0),
            new Vector2D(3.5, 1.2),
            new Vector2D(2.5, 1.0),
            new Vector2D(3.0, 4.0)
        });
        checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {
            new Vector2D(1.0, 1.0),
            new Vector2D(3.5, 0.5),
            new Vector2D(0.0, 1.0)
        });
        checkVertices(set.getVertices(), vertices);
    }
Method byte code: 
0: iconst_2
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_3
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: dconst_0
17: dconst_1
18: invokespecial #8
21: aastore
22: dup
23: iconst_1
24: new           #3
27: dup
28: ldc2_w        #60
31: dconst_1
32: invokespecial #8
35: aastore
36: dup
37: iconst_2
38: new           #3
41: dup
42: dconst_1
43: ldc2_w        #60
46: invokespecial #8
49: aastore
50: aastore
51: dup
52: iconst_1
53: iconst_3
54: anewarray     #3
57: dup
58: iconst_0
59: new           #3
62: dup
63: ldc2_w        #89
66: dconst_0
67: invokespecial #8
70: aastore
71: dup
72: iconst_1
73: new           #3
76: dup
77: ldc2_w        #91
80: dconst_1
81: invokespecial #8
84: aastore
85: dup
86: iconst_2
87: new           #3
90: dup
91: ldc2_w        #81
94: dconst_1
95: invokespecial #8
98: aastore
99: aastore
100: astore_1
101: aload_0
102: aload_1
103: invokespecial #37
106: astore_2
107: getstatic     #45
110: aload_2
111: new           #3
114: dup
115: dconst_1
116: ldc2_w        #66
119: invokespecial #8
122: invokevirtual #43
125: invokestatic  #44
128: aload_0
129: getstatic     #45
132: aload_2
133: iconst_2
134: anewarray     #3
137: dup
138: iconst_0
139: new           #3
142: dup
143: dconst_1
144: ldc2_w        #66
147: invokespecial #8
150: aastore
151: dup
152: iconst_1
153: new           #3
156: dup
157: ldc2_w        #93
160: ldc2_w        #95
163: invokespecial #8
166: aastore
167: invokespecial #54
170: aload_0
171: getstatic     #38
174: aload_2
175: iconst_4
176: anewarray     #3
179: dup
180: iconst_0
181: new           #3
184: dup
185: dconst_1
186: dconst_0
187: invokespecial #8
190: aastore
191: dup
192: iconst_1
193: new           #3
196: dup
197: ldc2_w        #87
200: ldc2_w        #97
203: invokespecial #8
206: aastore
207: dup
208: iconst_2
209: new           #3
212: dup
213: ldc2_w        #85
216: dconst_1
217: invokespecial #8
220: aastore
221: dup
222: iconst_3
223: new           #3
226: dup
227: ldc2_w        #81
230: ldc2_w        #89
233: invokespecial #8
236: aastore
237: invokespecial #54
240: aload_0
241: getstatic     #57
244: aload_2
245: iconst_3
246: anewarray     #3
249: dup
250: iconst_0
251: new           #3
254: dup
255: dconst_1
256: dconst_1
257: invokespecial #8
260: aastore
261: dup
262: iconst_1
263: new           #3
266: dup
267: ldc2_w        #87
270: ldc2_w        #83
273: invokespecial #8
276: aastore
277: dup
278: iconst_2
279: new           #3
282: dup
283: dconst_0
284: dconst_1
285: invokespecial #8
288: aastore
289: invokespecial #54
292: aload_0
293: aload_2
294: invokevirtual #58
297: aload_1
298: invokespecial #59
301: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testOppositeHyperplanes
Start line: 181
End line: 194
Method source code: 
    public void testOppositeHyperplanes() {
        Vector2D[][] vertices = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(1.0, 0.0),
                new Vector2D(2.0, 1.0),
                new Vector2D(3.0, 1.0),
                new Vector2D(2.0, 2.0),
                new Vector2D(1.0, 1.0),
                new Vector2D(0.0, 1.0)
            }
        };
        PolygonsSet set = buildSet(vertices);
        checkVertices(set.getVertices(), vertices);
    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: bipush        6
8: anewarray     #3
11: dup
12: iconst_0
13: new           #3
16: dup
17: dconst_1
18: dconst_0
19: invokespecial #8
22: aastore
23: dup
24: iconst_1
25: new           #3
28: dup
29: ldc2_w        #60
32: dconst_1
33: invokespecial #8
36: aastore
37: dup
38: iconst_2
39: new           #3
42: dup
43: ldc2_w        #81
46: dconst_1
47: invokespecial #8
50: aastore
51: dup
52: iconst_3
53: new           #3
56: dup
57: ldc2_w        #60
60: ldc2_w        #60
63: invokespecial #8
66: aastore
67: dup
68: iconst_4
69: new           #3
72: dup
73: dconst_1
74: dconst_1
75: invokespecial #8
78: aastore
79: dup
80: iconst_5
81: new           #3
84: dup
85: dconst_0
86: dconst_1
87: invokespecial #8
90: aastore
91: aastore
92: astore_1
93: aload_0
94: aload_1
95: invokespecial #37
98: astore_2
99: aload_0
100: aload_2
101: invokevirtual #58
104: aload_1
105: invokespecial #59
108: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testSingularPoint
Start line: 197
End line: 212
Method source code: 
    public void testSingularPoint() {
        Vector2D[][] vertices = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 1.0,  0.0),
                new Vector2D( 1.0,  1.0),
                new Vector2D( 0.0,  1.0),
                new Vector2D( 0.0,  0.0),
                new Vector2D(-1.0,  0.0),
                new Vector2D(-1.0, -1.0),
                new Vector2D( 0.0, -1.0)
            }
        };
        PolygonsSet set = buildSet(vertices);
        checkVertices(set.getVertices(), vertices);
    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: bipush        8
8: anewarray     #3
11: dup
12: iconst_0
13: new           #3
16: dup
17: dconst_0
18: dconst_0
19: invokespecial #8
22: aastore
23: dup
24: iconst_1
25: new           #3
28: dup
29: dconst_1
30: dconst_0
31: invokespecial #8
34: aastore
35: dup
36: iconst_2
37: new           #3
40: dup
41: dconst_1
42: dconst_1
43: invokespecial #8
46: aastore
47: dup
48: iconst_3
49: new           #3
52: dup
53: dconst_0
54: dconst_1
55: invokespecial #8
58: aastore
59: dup
60: iconst_4
61: new           #3
64: dup
65: dconst_0
66: dconst_0
67: invokespecial #8
70: aastore
71: dup
72: iconst_5
73: new           #3
76: dup
77: ldc2_w        #99
80: dconst_0
81: invokespecial #8
84: aastore
85: dup
86: bipush        6
88: new           #3
91: dup
92: ldc2_w        #99
95: ldc2_w        #99
98: invokespecial #8
101: aastore
102: dup
103: bipush        7
105: new           #3
108: dup
109: dconst_0
110: ldc2_w        #99
113: invokespecial #8
116: aastore
117: aastore
118: astore_1
119: aload_0
120: aload_1
121: invokespecial #37
124: astore_2
125: aload_0
126: aload_2
127: invokevirtual #58
130: aload_1
131: invokespecial #59
134: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testLineIntersection
Start line: 215
End line: 261
Method source code: 
    public void testLineIntersection() {
        Vector2D[][] vertices = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  1.0),
                new Vector2D( 3.0,  1.0),
                new Vector2D( 3.0,  3.0),
                new Vector2D( 1.0,  3.0),
                new Vector2D( 1.0,  2.0),
                new Vector2D( 0.0,  2.0)
            }
        };
        PolygonsSet set = buildSet(vertices);

        Line l1 = new Line(new Vector2D(-1.5, 0.0), FastMath.PI / 4);
        SubLine s1 = (SubLine) set.intersection(l1.wholeHyperplane());
        List<Interval> i1 = ((IntervalsSet) s1.getRemainingRegion()).asList();
        Assert.assertEquals(2, i1.size());
        Interval v10 = i1.get(0);
        Vector2D p10Lower = l1.toSpace(new Vector1D(v10.getLower()));
        Assert.assertEquals(0.0, p10Lower.getX(), 1.0e-10);
        Assert.assertEquals(1.5, p10Lower.getY(), 1.0e-10);
        Vector2D p10Upper = l1.toSpace(new Vector1D(v10.getUpper()));
        Assert.assertEquals(0.5, p10Upper.getX(), 1.0e-10);
        Assert.assertEquals(2.0, p10Upper.getY(), 1.0e-10);
        Interval v11 = i1.get(1);
        Vector2D p11Lower = l1.toSpace(new Vector1D(v11.getLower()));
        Assert.assertEquals(1.0, p11Lower.getX(), 1.0e-10);
        Assert.assertEquals(2.5, p11Lower.getY(), 1.0e-10);
        Vector2D p11Upper = l1.toSpace(new Vector1D(v11.getUpper()));
        Assert.assertEquals(1.5, p11Upper.getX(), 1.0e-10);
        Assert.assertEquals(3.0, p11Upper.getY(), 1.0e-10);

        Line l2 = new Line(new Vector2D(-1.0, 2.0), 0);
        SubLine s2 = (SubLine) set.intersection(l2.wholeHyperplane());
        List<Interval> i2 = ((IntervalsSet) s2.getRemainingRegion()).asList();
        Assert.assertEquals(1, i2.size());
        Interval v20 = i2.get(0);
        Vector2D p20Lower = l2.toSpace(new Vector1D(v20.getLower()));
        Assert.assertEquals(1.0, p20Lower.getX(), 1.0e-10);
        Assert.assertEquals(2.0, p20Lower.getY(), 1.0e-10);
        Vector2D p20Upper = l2.toSpace(new Vector1D(v20.getUpper()));
        Assert.assertEquals(3.0, p20Upper.getX(), 1.0e-10);
        Assert.assertEquals(2.0, p20Upper.getY(), 1.0e-10);

    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: bipush        8
8: anewarray     #3
11: dup
12: iconst_0
13: new           #3
16: dup
17: dconst_0
18: dconst_0
19: invokespecial #8
22: aastore
23: dup
24: iconst_1
25: new           #3
28: dup
29: ldc2_w        #60
32: dconst_0
33: invokespecial #8
36: aastore
37: dup
38: iconst_2
39: new           #3
42: dup
43: ldc2_w        #60
46: dconst_1
47: invokespecial #8
50: aastore
51: dup
52: iconst_3
53: new           #3
56: dup
57: ldc2_w        #81
60: dconst_1
61: invokespecial #8
64: aastore
65: dup
66: iconst_4
67: new           #3
70: dup
71: ldc2_w        #81
74: ldc2_w        #81
77: invokespecial #8
80: aastore
81: dup
82: iconst_5
83: new           #3
86: dup
87: dconst_1
88: ldc2_w        #81
91: invokespecial #8
94: aastore
95: dup
96: bipush        6
98: new           #3
101: dup
102: dconst_1
103: ldc2_w        #60
106: invokespecial #8
109: aastore
110: dup
111: bipush        7
113: new           #3
116: dup
117: dconst_0
118: ldc2_w        #60
121: invokespecial #8
124: aastore
125: aastore
126: astore_1
127: aload_0
128: aload_1
129: invokespecial #37
132: astore_2
133: new           #101
136: dup
137: new           #3
140: dup
141: ldc2_w        #102
144: dconst_0
145: invokespecial #8
148: ldc2_w        #105
151: invokespecial #107
154: astore_3
155: aload_2
156: aload_3
157: invokevirtual #108
160: invokevirtual #109
163: checkcast     #110
166: astore        4
168: aload         4
170: invokevirtual #111
173: checkcast     #112
176: invokevirtual #113
179: astore        5
181: ldc2_w        #114
184: aload         5
186: invokeinterface #116,  1
191: i2l
192: invokestatic  #117
195: aload         5
197: iconst_0
198: invokeinterface #118,  2
203: checkcast     #119
206: astore        6
208: aload_3
209: new           #120
212: dup
213: aload         6
215: invokevirtual #121
218: invokespecial #122
221: invokevirtual #123
224: astore        7
226: dconst_0
227: aload         7
229: invokevirtual #124
232: ldc2_w        #78
235: invokestatic  #80
238: ldc2_w        #66
241: aload         7
243: invokevirtual #125
246: ldc2_w        #78
249: invokestatic  #80
252: aload_3
253: new           #120
256: dup
257: aload         6
259: invokevirtual #126
262: invokespecial #122
265: invokevirtual #123
268: astore        8
270: ldc2_w        #83
273: aload         8
275: invokevirtual #124
278: ldc2_w        #78
281: invokestatic  #80
284: ldc2_w        #60
287: aload         8
289: invokevirtual #125
292: ldc2_w        #78
295: invokestatic  #80
298: aload         5
300: iconst_1
301: invokeinterface #118,  2
306: checkcast     #119
309: astore        9
311: aload_3
312: new           #120
315: dup
316: aload         9
318: invokevirtual #121
321: invokespecial #122
324: invokevirtual #123
327: astore        10
329: dconst_1
330: aload         10
332: invokevirtual #124
335: ldc2_w        #78
338: invokestatic  #80
341: ldc2_w        #85
344: aload         10
346: invokevirtual #125
349: ldc2_w        #78
352: invokestatic  #80
355: aload_3
356: new           #120
359: dup
360: aload         9
362: invokevirtual #126
365: invokespecial #122
368: invokevirtual #123
371: astore        11
373: ldc2_w        #66
376: aload         11
378: invokevirtual #124
381: ldc2_w        #78
384: invokestatic  #80
387: ldc2_w        #81
390: aload         11
392: invokevirtual #125
395: ldc2_w        #78
398: invokestatic  #80
401: new           #101
404: dup
405: new           #3
408: dup
409: ldc2_w        #99
412: ldc2_w        #60
415: invokespecial #8
418: dconst_0
419: invokespecial #107
422: astore        12
424: aload_2
425: aload         12
427: invokevirtual #108
430: invokevirtual #109
433: checkcast     #110
436: astore        13
438: aload         13
440: invokevirtual #111
443: checkcast     #112
446: invokevirtual #113
449: astore        14
451: lconst_1
452: aload         14
454: invokeinterface #116,  1
459: i2l
460: invokestatic  #117
463: aload         14
465: iconst_0
466: invokeinterface #118,  2
471: checkcast     #119
474: astore        15
476: aload         12
478: new           #120
481: dup
482: aload         15
484: invokevirtual #121
487: invokespecial #122
490: invokevirtual #123
493: astore        16
495: dconst_1
496: aload         16
498: invokevirtual #124
501: ldc2_w        #78
504: invokestatic  #80
507: ldc2_w        #60
510: aload         16
512: invokevirtual #125
515: ldc2_w        #78
518: invokestatic  #80
521: aload         12
523: new           #120
526: dup
527: aload         15
529: invokevirtual #126
532: invokespecial #122
535: invokevirtual #123
538: astore        17
540: ldc2_w        #81
543: aload         17
545: invokevirtual #124
548: ldc2_w        #78
551: invokestatic  #80
554: ldc2_w        #60
557: aload         17
559: invokevirtual #125
562: ldc2_w        #78
565: invokestatic  #80
568: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testUnlimitedSubHyperplane
Start line: 264
End line: 300
Method source code: 
    public void testUnlimitedSubHyperplane() {
        Vector2D[][] vertices1 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(0.0, 0.0),
                new Vector2D(4.0, 0.0),
                new Vector2D(1.4, 1.5),
                new Vector2D(0.0, 3.5)
            }
        };
        PolygonsSet set1 = buildSet(vertices1);
        Vector2D[][] vertices2 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(1.4,  0.2),
                new Vector2D(2.8, -1.2),
                new Vector2D(2.5,  0.6)
            }
        };
        PolygonsSet set2 = buildSet(vertices2);

        PolygonsSet set =
            (PolygonsSet) new RegionFactory<Euclidean2D>().union(set1.copySelf(),
                                                                 set2.copySelf());
        checkVertices(set1.getVertices(), vertices1);
        checkVertices(set2.getVertices(), vertices2);
        checkVertices(set.getVertices(), new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(0.0,  0.0),
                new Vector2D(1.6,  0.0),
                new Vector2D(2.8, -1.2),
                new Vector2D(2.6,  0.0),
                new Vector2D(4.0,  0.0),
                new Vector2D(1.4,  1.5),
                new Vector2D(0.0,  3.5)
            }
        });

    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_4
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: dconst_0
17: dconst_0
18: invokespecial #8
21: aastore
22: dup
23: iconst_1
24: new           #3
27: dup
28: ldc2_w        #89
31: dconst_0
32: invokespecial #8
35: aastore
36: dup
37: iconst_2
38: new           #3
41: dup
42: ldc2_w        #127
45: ldc2_w        #66
48: invokespecial #8
51: aastore
52: dup
53: iconst_3
54: new           #3
57: dup
58: dconst_0
59: ldc2_w        #87
62: invokespecial #8
65: aastore
66: aastore
67: astore_1
68: aload_0
69: aload_1
70: invokespecial #37
73: astore_2
74: iconst_1
75: anewarray     #2
78: dup
79: iconst_0
80: iconst_3
81: anewarray     #3
84: dup
85: iconst_0
86: new           #3
89: dup
90: ldc2_w        #127
93: ldc2_w        #129
96: invokespecial #8
99: aastore
100: dup
101: iconst_1
102: new           #3
105: dup
106: ldc2_w        #131
109: ldc2_w        #133
112: invokespecial #8
115: aastore
116: dup
117: iconst_2
118: new           #3
121: dup
122: ldc2_w        #85
125: ldc2_w        #135
128: invokespecial #8
131: aastore
132: aastore
133: astore_3
134: aload_0
135: aload_3
136: invokespecial #37
139: astore        4
141: new           #137
144: dup
145: invokespecial #138
148: aload_2
149: invokevirtual #139
152: aload         4
154: invokevirtual #139
157: invokevirtual #140
160: checkcast     #141
163: astore        5
165: aload_0
166: aload_2
167: invokevirtual #58
170: aload_1
171: invokespecial #59
174: aload_0
175: aload         4
177: invokevirtual #58
180: aload_3
181: invokespecial #59
184: aload_0
185: aload         5
187: invokevirtual #58
190: iconst_1
191: anewarray     #2
194: dup
195: iconst_0
196: bipush        7
198: anewarray     #3
201: dup
202: iconst_0
203: new           #3
206: dup
207: dconst_0
208: dconst_0
209: invokespecial #8
212: aastore
213: dup
214: iconst_1
215: new           #3
218: dup
219: ldc2_w        #142
222: dconst_0
223: invokespecial #8
226: aastore
227: dup
228: iconst_2
229: new           #3
232: dup
233: ldc2_w        #131
236: ldc2_w        #133
239: invokespecial #8
242: aastore
243: dup
244: iconst_3
245: new           #3
248: dup
249: ldc2_w        #144
252: dconst_0
253: invokespecial #8
256: aastore
257: dup
258: iconst_4
259: new           #3
262: dup
263: ldc2_w        #89
266: dconst_0
267: invokespecial #8
270: aastore
271: dup
272: iconst_5
273: new           #3
276: dup
277: ldc2_w        #127
280: ldc2_w        #66
283: invokespecial #8
286: aastore
287: dup
288: bipush        6
290: new           #3
293: dup
294: dconst_0
295: ldc2_w        #87
298: invokespecial #8
301: aastore
302: aastore
303: invokespecial #59
306: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testUnion
Start line: 303
End line: 364
Method source code: 
    public void testUnion() {
        Vector2D[][] vertices1 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  2.0),
                new Vector2D( 0.0,  2.0)
            }
        };
        PolygonsSet set1 = buildSet(vertices1);
        Vector2D[][] vertices2 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 1.0,  1.0),
                new Vector2D( 3.0,  1.0),
                new Vector2D( 3.0,  3.0),
                new Vector2D( 1.0,  3.0)
            }
        };
        PolygonsSet set2 = buildSet(vertices2);
        PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().union(set1.copySelf(),
                                                                                set2.copySelf());
        checkVertices(set1.getVertices(), vertices1);
        checkVertices(set2.getVertices(), vertices2);
        checkVertices(set.getVertices(), new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  1.0),
                new Vector2D( 3.0,  1.0),
                new Vector2D( 3.0,  3.0),
                new Vector2D( 1.0,  3.0),
                new Vector2D( 1.0,  2.0),
                new Vector2D( 0.0,  2.0)
            }
        });
        checkPoints(Region.Location.INSIDE, set, new Vector2D[] {
            new Vector2D(1.0, 1.0),
            new Vector2D(0.5, 0.5),
            new Vector2D(2.0, 2.0),
            new Vector2D(2.5, 2.5),
            new Vector2D(0.5, 1.5),
            new Vector2D(1.5, 1.5),
            new Vector2D(1.5, 0.5),
            new Vector2D(1.5, 2.5),
            new Vector2D(2.5, 1.5),
            new Vector2D(2.5, 2.5)
        });
        checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {
            new Vector2D(-0.5, 0.5),
            new Vector2D( 0.5, 2.5),
            new Vector2D( 2.5, 0.5),
            new Vector2D( 3.5, 2.5)
        });
        checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {
            new Vector2D(0.0, 0.0),
            new Vector2D(0.5, 2.0),
            new Vector2D(2.0, 0.5),
            new Vector2D(2.5, 1.0),
            new Vector2D(3.0, 2.5)
        });

    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_4
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: dconst_0
17: dconst_0
18: invokespecial #8
21: aastore
22: dup
23: iconst_1
24: new           #3
27: dup
28: ldc2_w        #60
31: dconst_0
32: invokespecial #8
35: aastore
36: dup
37: iconst_2
38: new           #3
41: dup
42: ldc2_w        #60
45: ldc2_w        #60
48: invokespecial #8
51: aastore
52: dup
53: iconst_3
54: new           #3
57: dup
58: dconst_0
59: ldc2_w        #60
62: invokespecial #8
65: aastore
66: aastore
67: astore_1
68: aload_0
69: aload_1
70: invokespecial #37
73: astore_2
74: iconst_1
75: anewarray     #2
78: dup
79: iconst_0
80: iconst_4
81: anewarray     #3
84: dup
85: iconst_0
86: new           #3
89: dup
90: dconst_1
91: dconst_1
92: invokespecial #8
95: aastore
96: dup
97: iconst_1
98: new           #3
101: dup
102: ldc2_w        #81
105: dconst_1
106: invokespecial #8
109: aastore
110: dup
111: iconst_2
112: new           #3
115: dup
116: ldc2_w        #81
119: ldc2_w        #81
122: invokespecial #8
125: aastore
126: dup
127: iconst_3
128: new           #3
131: dup
132: dconst_1
133: ldc2_w        #81
136: invokespecial #8
139: aastore
140: aastore
141: astore_3
142: aload_0
143: aload_3
144: invokespecial #37
147: astore        4
149: new           #137
152: dup
153: invokespecial #138
156: aload_2
157: invokevirtual #139
160: aload         4
162: invokevirtual #139
165: invokevirtual #140
168: checkcast     #141
171: astore        5
173: aload_0
174: aload_2
175: invokevirtual #58
178: aload_1
179: invokespecial #59
182: aload_0
183: aload         4
185: invokevirtual #58
188: aload_3
189: invokespecial #59
192: aload_0
193: aload         5
195: invokevirtual #58
198: iconst_1
199: anewarray     #2
202: dup
203: iconst_0
204: bipush        8
206: anewarray     #3
209: dup
210: iconst_0
211: new           #3
214: dup
215: dconst_0
216: dconst_0
217: invokespecial #8
220: aastore
221: dup
222: iconst_1
223: new           #3
226: dup
227: ldc2_w        #60
230: dconst_0
231: invokespecial #8
234: aastore
235: dup
236: iconst_2
237: new           #3
240: dup
241: ldc2_w        #60
244: dconst_1
245: invokespecial #8
248: aastore
249: dup
250: iconst_3
251: new           #3
254: dup
255: ldc2_w        #81
258: dconst_1
259: invokespecial #8
262: aastore
263: dup
264: iconst_4
265: new           #3
268: dup
269: ldc2_w        #81
272: ldc2_w        #81
275: invokespecial #8
278: aastore
279: dup
280: iconst_5
281: new           #3
284: dup
285: dconst_1
286: ldc2_w        #81
289: invokespecial #8
292: aastore
293: dup
294: bipush        6
296: new           #3
299: dup
300: dconst_1
301: ldc2_w        #60
304: invokespecial #8
307: aastore
308: dup
309: bipush        7
311: new           #3
314: dup
315: dconst_0
316: ldc2_w        #60
319: invokespecial #8
322: aastore
323: aastore
324: invokespecial #59
327: aload_0
328: getstatic     #45
331: aload         5
333: bipush        10
335: anewarray     #3
338: dup
339: iconst_0
340: new           #3
343: dup
344: dconst_1
345: dconst_1
346: invokespecial #8
349: aastore
350: dup
351: iconst_1
352: new           #3
355: dup
356: ldc2_w        #83
359: ldc2_w        #83
362: invokespecial #8
365: aastore
366: dup
367: iconst_2
368: new           #3
371: dup
372: ldc2_w        #60
375: ldc2_w        #60
378: invokespecial #8
381: aastore
382: dup
383: iconst_3
384: new           #3
387: dup
388: ldc2_w        #85
391: ldc2_w        #85
394: invokespecial #8
397: aastore
398: dup
399: iconst_4
400: new           #3
403: dup
404: ldc2_w        #83
407: ldc2_w        #66
410: invokespecial #8
413: aastore
414: dup
415: iconst_5
416: new           #3
419: dup
420: ldc2_w        #66
423: ldc2_w        #66
426: invokespecial #8
429: aastore
430: dup
431: bipush        6
433: new           #3
436: dup
437: ldc2_w        #66
440: ldc2_w        #83
443: invokespecial #8
446: aastore
447: dup
448: bipush        7
450: new           #3
453: dup
454: ldc2_w        #66
457: ldc2_w        #85
460: invokespecial #8
463: aastore
464: dup
465: bipush        8
467: new           #3
470: dup
471: ldc2_w        #85
474: ldc2_w        #66
477: invokespecial #8
480: aastore
481: dup
482: bipush        9
484: new           #3
487: dup
488: ldc2_w        #85
491: ldc2_w        #85
494: invokespecial #8
497: aastore
498: invokespecial #54
501: aload_0
502: getstatic     #38
505: aload         5
507: iconst_4
508: anewarray     #3
511: dup
512: iconst_0
513: new           #3
516: dup
517: ldc2_w        #146
520: ldc2_w        #83
523: invokespecial #8
526: aastore
527: dup
528: iconst_1
529: new           #3
532: dup
533: ldc2_w        #83
536: ldc2_w        #85
539: invokespecial #8
542: aastore
543: dup
544: iconst_2
545: new           #3
548: dup
549: ldc2_w        #85
552: ldc2_w        #83
555: invokespecial #8
558: aastore
559: dup
560: iconst_3
561: new           #3
564: dup
565: ldc2_w        #87
568: ldc2_w        #85
571: invokespecial #8
574: aastore
575: invokespecial #54
578: aload_0
579: getstatic     #57
582: aload         5
584: iconst_5
585: anewarray     #3
588: dup
589: iconst_0
590: new           #3
593: dup
594: dconst_0
595: dconst_0
596: invokespecial #8
599: aastore
600: dup
601: iconst_1
602: new           #3
605: dup
606: ldc2_w        #83
609: ldc2_w        #60
612: invokespecial #8
615: aastore
616: dup
617: iconst_2
618: new           #3
621: dup
622: ldc2_w        #60
625: ldc2_w        #83
628: invokespecial #8
631: aastore
632: dup
633: iconst_3
634: new           #3
637: dup
638: ldc2_w        #85
641: dconst_1
642: invokespecial #8
645: aastore
646: dup
647: iconst_4
648: new           #3
651: dup
652: ldc2_w        #81
655: ldc2_w        #85
658: invokespecial #8
661: aastore
662: invokespecial #54
665: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testIntersection
Start line: 367
End line: 413
Method source code: 
    public void testIntersection() {
        Vector2D[][] vertices1 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  2.0),
                new Vector2D( 0.0,  2.0)
            }
        };
        PolygonsSet set1 = buildSet(vertices1);
        Vector2D[][] vertices2 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 1.0,  1.0),
                new Vector2D( 3.0,  1.0),
                new Vector2D( 3.0,  3.0),
                new Vector2D( 1.0,  3.0)
            }
        };
        PolygonsSet set2 = buildSet(vertices2);
        PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().intersection(set1.copySelf(),
                                                                                       set2.copySelf());
        checkVertices(set1.getVertices(), vertices1);
        checkVertices(set2.getVertices(), vertices2);
        checkVertices(set.getVertices(), new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 1.0,  1.0),
                new Vector2D( 2.0,  1.0),
                new Vector2D( 2.0,  2.0),
                new Vector2D( 1.0,  2.0)
            }
        });
        checkPoints(Region.Location.INSIDE, set, new Vector2D[] {
            new Vector2D(1.5, 1.5)
        });
        checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {
            new Vector2D(0.5, 1.5),
            new Vector2D(2.5, 1.5),
            new Vector2D(1.5, 0.5),
            new Vector2D(0.5, 0.5)
        });
        checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {
            new Vector2D(1.0, 1.0),
            new Vector2D(2.0, 2.0),
            new Vector2D(1.0, 1.5),
            new Vector2D(1.5, 2.0)
        });
    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_4
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: dconst_0
17: dconst_0
18: invokespecial #8
21: aastore
22: dup
23: iconst_1
24: new           #3
27: dup
28: ldc2_w        #60
31: dconst_0
32: invokespecial #8
35: aastore
36: dup
37: iconst_2
38: new           #3
41: dup
42: ldc2_w        #60
45: ldc2_w        #60
48: invokespecial #8
51: aastore
52: dup
53: iconst_3
54: new           #3
57: dup
58: dconst_0
59: ldc2_w        #60
62: invokespecial #8
65: aastore
66: aastore
67: astore_1
68: aload_0
69: aload_1
70: invokespecial #37
73: astore_2
74: iconst_1
75: anewarray     #2
78: dup
79: iconst_0
80: iconst_4
81: anewarray     #3
84: dup
85: iconst_0
86: new           #3
89: dup
90: dconst_1
91: dconst_1
92: invokespecial #8
95: aastore
96: dup
97: iconst_1
98: new           #3
101: dup
102: ldc2_w        #81
105: dconst_1
106: invokespecial #8
109: aastore
110: dup
111: iconst_2
112: new           #3
115: dup
116: ldc2_w        #81
119: ldc2_w        #81
122: invokespecial #8
125: aastore
126: dup
127: iconst_3
128: new           #3
131: dup
132: dconst_1
133: ldc2_w        #81
136: invokespecial #8
139: aastore
140: aastore
141: astore_3
142: aload_0
143: aload_3
144: invokespecial #37
147: astore        4
149: new           #137
152: dup
153: invokespecial #138
156: aload_2
157: invokevirtual #139
160: aload         4
162: invokevirtual #139
165: invokevirtual #148
168: checkcast     #141
171: astore        5
173: aload_0
174: aload_2
175: invokevirtual #58
178: aload_1
179: invokespecial #59
182: aload_0
183: aload         4
185: invokevirtual #58
188: aload_3
189: invokespecial #59
192: aload_0
193: aload         5
195: invokevirtual #58
198: iconst_1
199: anewarray     #2
202: dup
203: iconst_0
204: iconst_4
205: anewarray     #3
208: dup
209: iconst_0
210: new           #3
213: dup
214: dconst_1
215: dconst_1
216: invokespecial #8
219: aastore
220: dup
221: iconst_1
222: new           #3
225: dup
226: ldc2_w        #60
229: dconst_1
230: invokespecial #8
233: aastore
234: dup
235: iconst_2
236: new           #3
239: dup
240: ldc2_w        #60
243: ldc2_w        #60
246: invokespecial #8
249: aastore
250: dup
251: iconst_3
252: new           #3
255: dup
256: dconst_1
257: ldc2_w        #60
260: invokespecial #8
263: aastore
264: aastore
265: invokespecial #59
268: aload_0
269: getstatic     #45
272: aload         5
274: iconst_1
275: anewarray     #3
278: dup
279: iconst_0
280: new           #3
283: dup
284: ldc2_w        #66
287: ldc2_w        #66
290: invokespecial #8
293: aastore
294: invokespecial #54
297: aload_0
298: getstatic     #38
301: aload         5
303: iconst_4
304: anewarray     #3
307: dup
308: iconst_0
309: new           #3
312: dup
313: ldc2_w        #83
316: ldc2_w        #66
319: invokespecial #8
322: aastore
323: dup
324: iconst_1
325: new           #3
328: dup
329: ldc2_w        #85
332: ldc2_w        #66
335: invokespecial #8
338: aastore
339: dup
340: iconst_2
341: new           #3
344: dup
345: ldc2_w        #66
348: ldc2_w        #83
351: invokespecial #8
354: aastore
355: dup
356: iconst_3
357: new           #3
360: dup
361: ldc2_w        #83
364: ldc2_w        #83
367: invokespecial #8
370: aastore
371: invokespecial #54
374: aload_0
375: getstatic     #57
378: aload         5
380: iconst_4
381: anewarray     #3
384: dup
385: iconst_0
386: new           #3
389: dup
390: dconst_1
391: dconst_1
392: invokespecial #8
395: aastore
396: dup
397: iconst_1
398: new           #3
401: dup
402: ldc2_w        #60
405: ldc2_w        #60
408: invokespecial #8
411: aastore
412: dup
413: iconst_2
414: new           #3
417: dup
418: dconst_1
419: ldc2_w        #66
422: invokespecial #8
425: aastore
426: dup
427: iconst_3
428: new           #3
431: dup
432: ldc2_w        #66
435: ldc2_w        #60
438: invokespecial #8
441: aastore
442: invokespecial #54
445: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testXor
Start line: 416
End line: 484
Method source code: 
    public void testXor() {
        Vector2D[][] vertices1 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  2.0),
                new Vector2D( 0.0,  2.0)
            }
        };
        PolygonsSet set1 = buildSet(vertices1);
        Vector2D[][] vertices2 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 1.0,  1.0),
                new Vector2D( 3.0,  1.0),
                new Vector2D( 3.0,  3.0),
                new Vector2D( 1.0,  3.0)
            }
        };
        PolygonsSet set2 = buildSet(vertices2);
        PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().xor(set1.copySelf(),
                                                                              set2.copySelf());
        checkVertices(set1.getVertices(), vertices1);
        checkVertices(set2.getVertices(), vertices2);
        checkVertices(set.getVertices(), new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  1.0),
                new Vector2D( 3.0,  1.0),
                new Vector2D( 3.0,  3.0),
                new Vector2D( 1.0,  3.0),
                new Vector2D( 1.0,  2.0),
                new Vector2D( 0.0,  2.0)
            },
            new Vector2D[] {
                new Vector2D( 1.0,  1.0),
                new Vector2D( 1.0,  2.0),
                new Vector2D( 2.0,  2.0),
                new Vector2D( 2.0,  1.0)
            }
        });
        checkPoints(Region.Location.INSIDE, set, new Vector2D[] {
            new Vector2D(0.5, 0.5),
            new Vector2D(2.5, 2.5),
            new Vector2D(0.5, 1.5),
            new Vector2D(1.5, 0.5),
            new Vector2D(1.5, 2.5),
            new Vector2D(2.5, 1.5),
            new Vector2D(2.5, 2.5)
        });
        checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {
            new Vector2D(-0.5, 0.5),
            new Vector2D( 0.5, 2.5),
            new Vector2D( 2.5, 0.5),
            new Vector2D( 1.5, 1.5),
            new Vector2D( 3.5, 2.5)
        });
        checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {
            new Vector2D(1.0, 1.0),
            new Vector2D(2.0, 2.0),
            new Vector2D(1.5, 1.0),
            new Vector2D(2.0, 1.5),
            new Vector2D(0.0, 0.0),
            new Vector2D(0.5, 2.0),
            new Vector2D(2.0, 0.5),
            new Vector2D(2.5, 1.0),
            new Vector2D(3.0, 2.5)
        });
    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_4
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: dconst_0
17: dconst_0
18: invokespecial #8
21: aastore
22: dup
23: iconst_1
24: new           #3
27: dup
28: ldc2_w        #60
31: dconst_0
32: invokespecial #8
35: aastore
36: dup
37: iconst_2
38: new           #3
41: dup
42: ldc2_w        #60
45: ldc2_w        #60
48: invokespecial #8
51: aastore
52: dup
53: iconst_3
54: new           #3
57: dup
58: dconst_0
59: ldc2_w        #60
62: invokespecial #8
65: aastore
66: aastore
67: astore_1
68: aload_0
69: aload_1
70: invokespecial #37
73: astore_2
74: iconst_1
75: anewarray     #2
78: dup
79: iconst_0
80: iconst_4
81: anewarray     #3
84: dup
85: iconst_0
86: new           #3
89: dup
90: dconst_1
91: dconst_1
92: invokespecial #8
95: aastore
96: dup
97: iconst_1
98: new           #3
101: dup
102: ldc2_w        #81
105: dconst_1
106: invokespecial #8
109: aastore
110: dup
111: iconst_2
112: new           #3
115: dup
116: ldc2_w        #81
119: ldc2_w        #81
122: invokespecial #8
125: aastore
126: dup
127: iconst_3
128: new           #3
131: dup
132: dconst_1
133: ldc2_w        #81
136: invokespecial #8
139: aastore
140: aastore
141: astore_3
142: aload_0
143: aload_3
144: invokespecial #37
147: astore        4
149: new           #137
152: dup
153: invokespecial #138
156: aload_2
157: invokevirtual #139
160: aload         4
162: invokevirtual #139
165: invokevirtual #149
168: checkcast     #141
171: astore        5
173: aload_0
174: aload_2
175: invokevirtual #58
178: aload_1
179: invokespecial #59
182: aload_0
183: aload         4
185: invokevirtual #58
188: aload_3
189: invokespecial #59
192: aload_0
193: aload         5
195: invokevirtual #58
198: iconst_2
199: anewarray     #2
202: dup
203: iconst_0
204: bipush        8
206: anewarray     #3
209: dup
210: iconst_0
211: new           #3
214: dup
215: dconst_0
216: dconst_0
217: invokespecial #8
220: aastore
221: dup
222: iconst_1
223: new           #3
226: dup
227: ldc2_w        #60
230: dconst_0
231: invokespecial #8
234: aastore
235: dup
236: iconst_2
237: new           #3
240: dup
241: ldc2_w        #60
244: dconst_1
245: invokespecial #8
248: aastore
249: dup
250: iconst_3
251: new           #3
254: dup
255: ldc2_w        #81
258: dconst_1
259: invokespecial #8
262: aastore
263: dup
264: iconst_4
265: new           #3
268: dup
269: ldc2_w        #81
272: ldc2_w        #81
275: invokespecial #8
278: aastore
279: dup
280: iconst_5
281: new           #3
284: dup
285: dconst_1
286: ldc2_w        #81
289: invokespecial #8
292: aastore
293: dup
294: bipush        6
296: new           #3
299: dup
300: dconst_1
301: ldc2_w        #60
304: invokespecial #8
307: aastore
308: dup
309: bipush        7
311: new           #3
314: dup
315: dconst_0
316: ldc2_w        #60
319: invokespecial #8
322: aastore
323: aastore
324: dup
325: iconst_1
326: iconst_4
327: anewarray     #3
330: dup
331: iconst_0
332: new           #3
335: dup
336: dconst_1
337: dconst_1
338: invokespecial #8
341: aastore
342: dup
343: iconst_1
344: new           #3
347: dup
348: dconst_1
349: ldc2_w        #60
352: invokespecial #8
355: aastore
356: dup
357: iconst_2
358: new           #3
361: dup
362: ldc2_w        #60
365: ldc2_w        #60
368: invokespecial #8
371: aastore
372: dup
373: iconst_3
374: new           #3
377: dup
378: ldc2_w        #60
381: dconst_1
382: invokespecial #8
385: aastore
386: aastore
387: invokespecial #59
390: aload_0
391: getstatic     #45
394: aload         5
396: bipush        7
398: anewarray     #3
401: dup
402: iconst_0
403: new           #3
406: dup
407: ldc2_w        #83
410: ldc2_w        #83
413: invokespecial #8
416: aastore
417: dup
418: iconst_1
419: new           #3
422: dup
423: ldc2_w        #85
426: ldc2_w        #85
429: invokespecial #8
432: aastore
433: dup
434: iconst_2
435: new           #3
438: dup
439: ldc2_w        #83
442: ldc2_w        #66
445: invokespecial #8
448: aastore
449: dup
450: iconst_3
451: new           #3
454: dup
455: ldc2_w        #66
458: ldc2_w        #83
461: invokespecial #8
464: aastore
465: dup
466: iconst_4
467: new           #3
470: dup
471: ldc2_w        #66
474: ldc2_w        #85
477: invokespecial #8
480: aastore
481: dup
482: iconst_5
483: new           #3
486: dup
487: ldc2_w        #85
490: ldc2_w        #66
493: invokespecial #8
496: aastore
497: dup
498: bipush        6
500: new           #3
503: dup
504: ldc2_w        #85
507: ldc2_w        #85
510: invokespecial #8
513: aastore
514: invokespecial #54
517: aload_0
518: getstatic     #38
521: aload         5
523: iconst_5
524: anewarray     #3
527: dup
528: iconst_0
529: new           #3
532: dup
533: ldc2_w        #146
536: ldc2_w        #83
539: invokespecial #8
542: aastore
543: dup
544: iconst_1
545: new           #3
548: dup
549: ldc2_w        #83
552: ldc2_w        #85
555: invokespecial #8
558: aastore
559: dup
560: iconst_2
561: new           #3
564: dup
565: ldc2_w        #85
568: ldc2_w        #83
571: invokespecial #8
574: aastore
575: dup
576: iconst_3
577: new           #3
580: dup
581: ldc2_w        #66
584: ldc2_w        #66
587: invokespecial #8
590: aastore
591: dup
592: iconst_4
593: new           #3
596: dup
597: ldc2_w        #87
600: ldc2_w        #85
603: invokespecial #8
606: aastore
607: invokespecial #54
610: aload_0
611: getstatic     #57
614: aload         5
616: bipush        9
618: anewarray     #3
621: dup
622: iconst_0
623: new           #3
626: dup
627: dconst_1
628: dconst_1
629: invokespecial #8
632: aastore
633: dup
634: iconst_1
635: new           #3
638: dup
639: ldc2_w        #60
642: ldc2_w        #60
645: invokespecial #8
648: aastore
649: dup
650: iconst_2
651: new           #3
654: dup
655: ldc2_w        #66
658: dconst_1
659: invokespecial #8
662: aastore
663: dup
664: iconst_3
665: new           #3
668: dup
669: ldc2_w        #60
672: ldc2_w        #66
675: invokespecial #8
678: aastore
679: dup
680: iconst_4
681: new           #3
684: dup
685: dconst_0
686: dconst_0
687: invokespecial #8
690: aastore
691: dup
692: iconst_5
693: new           #3
696: dup
697: ldc2_w        #83
700: ldc2_w        #60
703: invokespecial #8
706: aastore
707: dup
708: bipush        6
710: new           #3
713: dup
714: ldc2_w        #60
717: ldc2_w        #83
720: invokespecial #8
723: aastore
724: dup
725: bipush        7
727: new           #3
730: dup
731: ldc2_w        #85
734: dconst_1
735: invokespecial #8
738: aastore
739: dup
740: bipush        8
742: new           #3
745: dup
746: ldc2_w        #81
749: ldc2_w        #85
752: invokespecial #8
755: aastore
756: invokespecial #54
759: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testDifference
Start line: 487
End line: 547
Method source code: 
    public void testDifference() {
        Vector2D[][] vertices1 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  2.0),
                new Vector2D( 0.0,  2.0)
            }
        };
        PolygonsSet set1 = buildSet(vertices1);
        Vector2D[][] vertices2 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 1.0,  1.0),
                new Vector2D( 3.0,  1.0),
                new Vector2D( 3.0,  3.0),
                new Vector2D( 1.0,  3.0)
            }
        };
        PolygonsSet set2 = buildSet(vertices2);
        PolygonsSet set  = (PolygonsSet) new RegionFactory<Euclidean2D>().difference(set1.copySelf(),
                                                                                     set2.copySelf());
        checkVertices(set1.getVertices(), vertices1);
        checkVertices(set2.getVertices(), vertices2);
        checkVertices(set.getVertices(), new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.0,  0.0),
                new Vector2D( 2.0,  0.0),
                new Vector2D( 2.0,  1.0),
                new Vector2D( 1.0,  1.0),
                new Vector2D( 1.0,  2.0),
                new Vector2D( 0.0,  2.0)
            }
        });
        checkPoints(Region.Location.INSIDE, set, new Vector2D[] {
            new Vector2D(0.5, 0.5),
            new Vector2D(0.5, 1.5),
            new Vector2D(1.5, 0.5)
        });
        checkPoints(Region.Location.OUTSIDE, set, new Vector2D[] {
            new Vector2D( 2.5, 2.5),
            new Vector2D(-0.5, 0.5),
            new Vector2D( 0.5, 2.5),
            new Vector2D( 2.5, 0.5),
            new Vector2D( 1.5, 1.5),
            new Vector2D( 3.5, 2.5),
            new Vector2D( 1.5, 2.5),
            new Vector2D( 2.5, 1.5),
            new Vector2D( 2.0, 1.5),
            new Vector2D( 2.0, 2.0),
            new Vector2D( 2.5, 1.0),
            new Vector2D( 2.5, 2.5),
            new Vector2D( 3.0, 2.5)
        });
        checkPoints(Region.Location.BOUNDARY, set, new Vector2D[] {
            new Vector2D(1.0, 1.0),
            new Vector2D(1.5, 1.0),
            new Vector2D(0.0, 0.0),
            new Vector2D(0.5, 2.0),
            new Vector2D(2.0, 0.5)
        });
    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_4
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: dconst_0
17: dconst_0
18: invokespecial #8
21: aastore
22: dup
23: iconst_1
24: new           #3
27: dup
28: ldc2_w        #60
31: dconst_0
32: invokespecial #8
35: aastore
36: dup
37: iconst_2
38: new           #3
41: dup
42: ldc2_w        #60
45: ldc2_w        #60
48: invokespecial #8
51: aastore
52: dup
53: iconst_3
54: new           #3
57: dup
58: dconst_0
59: ldc2_w        #60
62: invokespecial #8
65: aastore
66: aastore
67: astore_1
68: aload_0
69: aload_1
70: invokespecial #37
73: astore_2
74: iconst_1
75: anewarray     #2
78: dup
79: iconst_0
80: iconst_4
81: anewarray     #3
84: dup
85: iconst_0
86: new           #3
89: dup
90: dconst_1
91: dconst_1
92: invokespecial #8
95: aastore
96: dup
97: iconst_1
98: new           #3
101: dup
102: ldc2_w        #81
105: dconst_1
106: invokespecial #8
109: aastore
110: dup
111: iconst_2
112: new           #3
115: dup
116: ldc2_w        #81
119: ldc2_w        #81
122: invokespecial #8
125: aastore
126: dup
127: iconst_3
128: new           #3
131: dup
132: dconst_1
133: ldc2_w        #81
136: invokespecial #8
139: aastore
140: aastore
141: astore_3
142: aload_0
143: aload_3
144: invokespecial #37
147: astore        4
149: new           #137
152: dup
153: invokespecial #138
156: aload_2
157: invokevirtual #139
160: aload         4
162: invokevirtual #139
165: invokevirtual #150
168: checkcast     #141
171: astore        5
173: aload_0
174: aload_2
175: invokevirtual #58
178: aload_1
179: invokespecial #59
182: aload_0
183: aload         4
185: invokevirtual #58
188: aload_3
189: invokespecial #59
192: aload_0
193: aload         5
195: invokevirtual #58
198: iconst_1
199: anewarray     #2
202: dup
203: iconst_0
204: bipush        6
206: anewarray     #3
209: dup
210: iconst_0
211: new           #3
214: dup
215: dconst_0
216: dconst_0
217: invokespecial #8
220: aastore
221: dup
222: iconst_1
223: new           #3
226: dup
227: ldc2_w        #60
230: dconst_0
231: invokespecial #8
234: aastore
235: dup
236: iconst_2
237: new           #3
240: dup
241: ldc2_w        #60
244: dconst_1
245: invokespecial #8
248: aastore
249: dup
250: iconst_3
251: new           #3
254: dup
255: dconst_1
256: dconst_1
257: invokespecial #8
260: aastore
261: dup
262: iconst_4
263: new           #3
266: dup
267: dconst_1
268: ldc2_w        #60
271: invokespecial #8
274: aastore
275: dup
276: iconst_5
277: new           #3
280: dup
281: dconst_0
282: ldc2_w        #60
285: invokespecial #8
288: aastore
289: aastore
290: invokespecial #59
293: aload_0
294: getstatic     #45
297: aload         5
299: iconst_3
300: anewarray     #3
303: dup
304: iconst_0
305: new           #3
308: dup
309: ldc2_w        #83
312: ldc2_w        #83
315: invokespecial #8
318: aastore
319: dup
320: iconst_1
321: new           #3
324: dup
325: ldc2_w        #83
328: ldc2_w        #66
331: invokespecial #8
334: aastore
335: dup
336: iconst_2
337: new           #3
340: dup
341: ldc2_w        #66
344: ldc2_w        #83
347: invokespecial #8
350: aastore
351: invokespecial #54
354: aload_0
355: getstatic     #38
358: aload         5
360: bipush        13
362: anewarray     #3
365: dup
366: iconst_0
367: new           #3
370: dup
371: ldc2_w        #85
374: ldc2_w        #85
377: invokespecial #8
380: aastore
381: dup
382: iconst_1
383: new           #3
386: dup
387: ldc2_w        #146
390: ldc2_w        #83
393: invokespecial #8
396: aastore
397: dup
398: iconst_2
399: new           #3
402: dup
403: ldc2_w        #83
406: ldc2_w        #85
409: invokespecial #8
412: aastore
413: dup
414: iconst_3
415: new           #3
418: dup
419: ldc2_w        #85
422: ldc2_w        #83
425: invokespecial #8
428: aastore
429: dup
430: iconst_4
431: new           #3
434: dup
435: ldc2_w        #66
438: ldc2_w        #66
441: invokespecial #8
444: aastore
445: dup
446: iconst_5
447: new           #3
450: dup
451: ldc2_w        #87
454: ldc2_w        #85
457: invokespecial #8
460: aastore
461: dup
462: bipush        6
464: new           #3
467: dup
468: ldc2_w        #66
471: ldc2_w        #85
474: invokespecial #8
477: aastore
478: dup
479: bipush        7
481: new           #3
484: dup
485: ldc2_w        #85
488: ldc2_w        #66
491: invokespecial #8
494: aastore
495: dup
496: bipush        8
498: new           #3
501: dup
502: ldc2_w        #60
505: ldc2_w        #66
508: invokespecial #8
511: aastore
512: dup
513: bipush        9
515: new           #3
518: dup
519: ldc2_w        #60
522: ldc2_w        #60
525: invokespecial #8
528: aastore
529: dup
530: bipush        10
532: new           #3
535: dup
536: ldc2_w        #85
539: dconst_1
540: invokespecial #8
543: aastore
544: dup
545: bipush        11
547: new           #3
550: dup
551: ldc2_w        #85
554: ldc2_w        #85
557: invokespecial #8
560: aastore
561: dup
562: bipush        12
564: new           #3
567: dup
568: ldc2_w        #81
571: ldc2_w        #85
574: invokespecial #8
577: aastore
578: invokespecial #54
581: aload_0
582: getstatic     #57
585: aload         5
587: iconst_5
588: anewarray     #3
591: dup
592: iconst_0
593: new           #3
596: dup
597: dconst_1
598: dconst_1
599: invokespecial #8
602: aastore
603: dup
604: iconst_1
605: new           #3
608: dup
609: ldc2_w        #66
612: dconst_1
613: invokespecial #8
616: aastore
617: dup
618: iconst_2
619: new           #3
622: dup
623: dconst_0
624: dconst_0
625: invokespecial #8
628: aastore
629: dup
630: iconst_3
631: new           #3
634: dup
635: ldc2_w        #83
638: ldc2_w        #60
641: invokespecial #8
644: aastore
645: dup
646: iconst_4
647: new           #3
650: dup
651: ldc2_w        #60
654: ldc2_w        #83
657: invokespecial #8
660: aastore
661: invokespecial #54
664: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testEmptyDifference
Start line: 550
End line: 570
Method source code: 
    public void testEmptyDifference() {
        Vector2D[][] vertices1 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.5, 3.5),
                new Vector2D( 0.5, 4.5),
                new Vector2D(-0.5, 4.5),
                new Vector2D(-0.5, 3.5)
            }
        };
        PolygonsSet set1 = buildSet(vertices1);
        Vector2D[][] vertices2 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 1.0, 2.0),
                new Vector2D( 1.0, 8.0),
                new Vector2D(-1.0, 8.0),
                new Vector2D(-1.0, 2.0)
            }
        };
        PolygonsSet set2 = buildSet(vertices2);
        Assert.assertTrue(new RegionFactory<Euclidean2D>().difference(set1.copySelf(), set2.copySelf()).isEmpty());
    }
Method byte code: 
0: iconst_1
1: anewarray     #2
4: dup
5: iconst_0
6: iconst_4
7: anewarray     #3
10: dup
11: iconst_0
12: new           #3
15: dup
16: ldc2_w        #83
19: ldc2_w        #87
22: invokespecial #8
25: aastore
26: dup
27: iconst_1
28: new           #3
31: dup
32: ldc2_w        #83
35: ldc2_w        #93
38: invokespecial #8
41: aastore
42: dup
43: iconst_2
44: new           #3
47: dup
48: ldc2_w        #146
51: ldc2_w        #93
54: invokespecial #8
57: aastore
58: dup
59: iconst_3
60: new           #3
63: dup
64: ldc2_w        #146
67: ldc2_w        #87
70: invokespecial #8
73: aastore
74: aastore
75: astore_1
76: aload_0
77: aload_1
78: invokespecial #37
81: astore_2
82: iconst_1
83: anewarray     #2
86: dup
87: iconst_0
88: iconst_4
89: anewarray     #3
92: dup
93: iconst_0
94: new           #3
97: dup
98: dconst_1
99: ldc2_w        #60
102: invokespecial #8
105: aastore
106: dup
107: iconst_1
108: new           #3
111: dup
112: dconst_1
113: ldc2_w        #151
116: invokespecial #8
119: aastore
120: dup
121: iconst_2
122: new           #3
125: dup
126: ldc2_w        #99
129: ldc2_w        #151
132: invokespecial #8
135: aastore
136: dup
137: iconst_3
138: new           #3
141: dup
142: ldc2_w        #99
145: ldc2_w        #60
148: invokespecial #8
151: aastore
152: aastore
153: astore_3
154: aload_0
155: aload_3
156: invokespecial #37
159: astore        4
161: new           #137
164: dup
165: invokespecial #138
168: aload_2
169: invokevirtual #139
172: aload         4
174: invokevirtual #139
177: invokevirtual #150
180: invokeinterface #153,  1
185: invokestatic  #154
188: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testChoppedHexagon
Start line: 573
End line: 606
Method source code: 
    public void testChoppedHexagon() {
        double pi6   = FastMath.PI / 6.0;
        double sqrt3 = FastMath.sqrt(3.0);
        SubLine[] hyp = {
            new Line(new Vector2D(   0.0, 1.0),  5 * pi6).wholeHyperplane(),
            new Line(new Vector2D(-sqrt3, 1.0),  7 * pi6).wholeHyperplane(),
            new Line(new Vector2D(-sqrt3, 1.0),  9 * pi6).wholeHyperplane(),
            new Line(new Vector2D(-sqrt3, 0.0), 11 * pi6).wholeHyperplane(),
            new Line(new Vector2D(   0.0, 0.0), 13 * pi6).wholeHyperplane(),
            new Line(new Vector2D(   0.0, 1.0),  3 * pi6).wholeHyperplane(),
            new Line(new Vector2D(-5.0 * sqrt3 / 6.0, 0.0), 9 * pi6).wholeHyperplane()
        };
        hyp[1] = (SubLine) hyp[1].split(hyp[0].getHyperplane()).getMinus();
        hyp[2] = (SubLine) hyp[2].split(hyp[1].getHyperplane()).getMinus();
        hyp[3] = (SubLine) hyp[3].split(hyp[2].getHyperplane()).getMinus();
        hyp[4] = (SubLine) hyp[4].split(hyp[3].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
        hyp[5] = (SubLine) hyp[5].split(hyp[4].getHyperplane()).getMinus().split(hyp[0].getHyperplane()).getMinus();
        hyp[6] = (SubLine) hyp[6].split(hyp[3].getHyperplane()).getMinus().split(hyp[1].getHyperplane()).getMinus();
        BSPTree<Euclidean2D> tree = new BSPTree<Euclidean2D>(Boolean.TRUE);
        for (int i = hyp.length - 1; i >= 0; --i) {
            tree = new BSPTree<Euclidean2D>(hyp[i], new BSPTree<Euclidean2D>(Boolean.FALSE), tree, null);
        }
        PolygonsSet set = new PolygonsSet(tree);
        SubLine splitter =
            new Line(new Vector2D(-2.0 * sqrt3 / 3.0, 0.0), 9 * pi6).wholeHyperplane();
        PolygonsSet slice =
            new PolygonsSet(new BSPTree<Euclidean2D>(splitter,
                                                     set.getTree(false).split(splitter).getPlus(),
                                                     new BSPTree<Euclidean2D>(Boolean.FALSE), null));
        Assert.assertEquals(Region.Location.OUTSIDE,
                            slice.checkPoint(new Vector2D(0.1, 0.5)));
        Assert.assertEquals(11.0 / 3.0, slice.getBoundarySize(), 1.0e-10);

    }
Method byte code: 
0: ldc2_w        #155
3: dstore_1
4: ldc2_w        #81
7: invokestatic  #72
10: dstore_3
11: bipush        7
13: anewarray     #110
16: dup
17: iconst_0
18: new           #101
21: dup
22: new           #3
25: dup
26: dconst_0
27: dconst_1
28: invokespecial #8
31: ldc2_w        #91
34: dload_1
35: dmul
36: invokespecial #107
39: invokevirtual #108
42: aastore
43: dup
44: iconst_1
45: new           #101
48: dup
49: new           #3
52: dup
53: dload_3
54: dneg
55: dconst_1
56: invokespecial #8
59: ldc2_w        #157
62: dload_1
63: dmul
64: invokespecial #107
67: invokevirtual #108
70: aastore
71: dup
72: iconst_2
73: new           #101
76: dup
77: new           #3
80: dup
81: dload_3
82: dneg
83: dconst_1
84: invokespecial #8
87: ldc2_w        #159
90: dload_1
91: dmul
92: invokespecial #107
95: invokevirtual #108
98: aastore
99: dup
100: iconst_3
101: new           #101
104: dup
105: new           #3
108: dup
109: dload_3
110: dneg
111: dconst_0
112: invokespecial #8
115: ldc2_w        #161
118: dload_1
119: dmul
120: invokespecial #107
123: invokevirtual #108
126: aastore
127: dup
128: iconst_4
129: new           #101
132: dup
133: new           #3
136: dup
137: dconst_0
138: dconst_0
139: invokespecial #8
142: ldc2_w        #163
145: dload_1
146: dmul
147: invokespecial #107
150: invokevirtual #108
153: aastore
154: dup
155: iconst_5
156: new           #101
159: dup
160: new           #3
163: dup
164: dconst_0
165: dconst_1
166: invokespecial #8
169: ldc2_w        #81
172: dload_1
173: dmul
174: invokespecial #107
177: invokevirtual #108
180: aastore
181: dup
182: bipush        6
184: new           #101
187: dup
188: new           #3
191: dup
192: ldc2_w        #165
195: dload_3
196: dmul
197: ldc2_w        #15
200: ddiv
201: dconst_0
202: invokespecial #8
205: ldc2_w        #159
208: dload_1
209: dmul
210: invokespecial #107
213: invokevirtual #108
216: aastore
217: astore        5
219: aload         5
221: iconst_1
222: aload         5
224: iconst_1
225: aaload
226: aload         5
228: iconst_0
229: aaload
230: invokevirtual #167
233: invokevirtual #168
236: invokevirtual #169
239: checkcast     #110
242: aastore
243: aload         5
245: iconst_2
246: aload         5
248: iconst_2
249: aaload
250: aload         5
252: iconst_1
253: aaload
254: invokevirtual #167
257: invokevirtual #168
260: invokevirtual #169
263: checkcast     #110
266: aastore
267: aload         5
269: iconst_3
270: aload         5
272: iconst_3
273: aaload
274: aload         5
276: iconst_2
277: aaload
278: invokevirtual #167
281: invokevirtual #168
284: invokevirtual #169
287: checkcast     #110
290: aastore
291: aload         5
293: iconst_4
294: aload         5
296: iconst_4
297: aaload
298: aload         5
300: iconst_3
301: aaload
302: invokevirtual #167
305: invokevirtual #168
308: invokevirtual #169
311: aload         5
313: iconst_0
314: aaload
315: invokevirtual #167
318: invokeinterface #170,  2
323: invokevirtual #169
326: checkcast     #110
329: aastore
330: aload         5
332: iconst_5
333: aload         5
335: iconst_5
336: aaload
337: aload         5
339: iconst_4
340: aaload
341: invokevirtual #167
344: invokevirtual #168
347: invokevirtual #169
350: aload         5
352: iconst_0
353: aaload
354: invokevirtual #167
357: invokeinterface #170,  2
362: invokevirtual #169
365: checkcast     #110
368: aastore
369: aload         5
371: bipush        6
373: aload         5
375: bipush        6
377: aaload
378: aload         5
380: iconst_3
381: aaload
382: invokevirtual #167
385: invokevirtual #168
388: invokevirtual #169
391: aload         5
393: iconst_1
394: aaload
395: invokevirtual #167
398: invokeinterface #170,  2
403: invokevirtual #169
406: checkcast     #110
409: aastore
410: new           #171
413: dup
414: getstatic     #172
417: invokespecial #173
420: astore        6
422: aload         5
424: arraylength
425: iconst_1
426: isub
427: istore        7
429: iload         7
431: iflt          467
434: new           #171
437: dup
438: aload         5
440: iload         7
442: aaload
443: new           #171
446: dup
447: getstatic     #174
450: invokespecial #173
453: aload         6
455: aconst_null
456: invokespecial #175
459: astore        6
461: iinc          7, -1
464: goto          429
467: new           #141
470: dup
471: aload         6
473: invokespecial #176
476: astore        7
478: new           #101
481: dup
482: new           #3
485: dup
486: ldc2_w        #177
489: dload_3
490: dmul
491: ldc2_w        #81
494: ddiv
495: dconst_0
496: invokespecial #8
499: ldc2_w        #159
502: dload_1
503: dmul
504: invokespecial #107
507: invokevirtual #108
510: astore        8
512: new           #141
515: dup
516: new           #171
519: dup
520: aload         8
522: aload         7
524: iconst_0
525: invokevirtual #179
528: aload         8
530: invokevirtual #180
533: invokevirtual #181
536: new           #171
539: dup
540: getstatic     #174
543: invokespecial #173
546: aconst_null
547: invokespecial #175
550: invokespecial #176
553: astore        9
555: getstatic     #38
558: aload         9
560: new           #3
563: dup
564: ldc2_w        #182
567: ldc2_w        #83
570: invokespecial #8
573: invokevirtual #43
576: invokestatic  #44
579: ldc2_w        #184
582: aload         9
584: invokevirtual #186
587: ldc2_w        #78
590: invokestatic  #80
593: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testConcentric
Start line: 609
End line: 636
Method source code: 
    public void testConcentric() {
        double h = FastMath.sqrt(3.0) / 2.0;
        Vector2D[][] vertices1 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.00, 0.1 * h),
                new Vector2D( 0.05, 0.1 * h),
                new Vector2D( 0.10, 0.2 * h),
                new Vector2D( 0.05, 0.3 * h),
                new Vector2D(-0.05, 0.3 * h),
                new Vector2D(-0.10, 0.2 * h),
                new Vector2D(-0.05, 0.1 * h)
            }
        };
        PolygonsSet set1 = buildSet(vertices1);
        Vector2D[][] vertices2 = new Vector2D[][] {
            new Vector2D[] {
                new Vector2D( 0.00, 0.0 * h),
                new Vector2D( 0.10, 0.0 * h),
                new Vector2D( 0.20, 0.2 * h),
                new Vector2D( 0.10, 0.4 * h),
                new Vector2D(-0.10, 0.4 * h),
                new Vector2D(-0.20, 0.2 * h),
                new Vector2D(-0.10, 0.0 * h)
            }
        };
        PolygonsSet set2 = buildSet(vertices2);
        Assert.assertTrue(set2.contains(set1));
    }
Method byte code: 
0: ldc2_w        #81
3: invokestatic  #72
6: ldc2_w        #60
9: ddiv
10: dstore_1
11: iconst_1
12: anewarray     #2
15: dup
16: iconst_0
17: bipush        7
19: anewarray     #3
22: dup
23: iconst_0
24: new           #3
27: dup
28: dconst_0
29: ldc2_w        #182
32: dload_1
33: dmul
34: invokespecial #8
37: aastore
38: dup
39: iconst_1
40: new           #3
43: dup
44: ldc2_w        #187
47: ldc2_w        #182
50: dload_1
51: dmul
52: invokespecial #8
55: aastore
56: dup
57: iconst_2
58: new           #3
61: dup
62: ldc2_w        #182
65: ldc2_w        #129
68: dload_1
69: dmul
70: invokespecial #8
73: aastore
74: dup
75: iconst_3
76: new           #3
79: dup
80: ldc2_w        #187
83: ldc2_w        #189
86: dload_1
87: dmul
88: invokespecial #8
91: aastore
92: dup
93: iconst_4
94: new           #3
97: dup
98: ldc2_w        #191
101: ldc2_w        #189
104: dload_1
105: dmul
106: invokespecial #8
109: aastore
110: dup
111: iconst_5
112: new           #3
115: dup
116: ldc2_w        #62
119: ldc2_w        #129
122: dload_1
123: dmul
124: invokespecial #8
127: aastore
128: dup
129: bipush        6
131: new           #3
134: dup
135: ldc2_w        #191
138: ldc2_w        #182
141: dload_1
142: dmul
143: invokespecial #8
146: aastore
147: aastore
148: astore_3
149: aload_0
150: aload_3
151: invokespecial #37
154: astore        4
156: iconst_1
157: anewarray     #2
160: dup
161: iconst_0
162: bipush        7
164: anewarray     #3
167: dup
168: iconst_0
169: new           #3
172: dup
173: dconst_0
174: dconst_0
175: dload_1
176: dmul
177: invokespecial #8
180: aastore
181: dup
182: iconst_1
183: new           #3
186: dup
187: ldc2_w        #182
190: dconst_0
191: dload_1
192: dmul
193: invokespecial #8
196: aastore
197: dup
198: iconst_2
199: new           #3
202: dup
203: ldc2_w        #129
206: ldc2_w        #129
209: dload_1
210: dmul
211: invokespecial #8
214: aastore
215: dup
216: iconst_3
217: new           #3
220: dup
221: ldc2_w        #182
224: ldc2_w        #193
227: dload_1
228: dmul
229: invokespecial #8
232: aastore
233: dup
234: iconst_4
235: new           #3
238: dup
239: ldc2_w        #62
242: ldc2_w        #193
245: dload_1
246: dmul
247: invokespecial #8
250: aastore
251: dup
252: iconst_5
253: new           #3
256: dup
257: ldc2_w        #195
260: ldc2_w        #129
263: dload_1
264: dmul
265: invokespecial #8
268: aastore
269: dup
270: bipush        6
272: new           #3
275: dup
276: ldc2_w        #62
279: dconst_0
280: dload_1
281: dmul
282: invokespecial #8
285: aastore
286: aastore
287: astore        5
289: aload_0
290: aload         5
292: invokespecial #37
295: astore        6
297: aload         6
299: aload         4
301: invokevirtual #197
304: invokestatic  #154
307: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testBug20040520
Start line: 639
End line: 764
Method source code: 
    public void testBug20040520() {
        BSPTree<Euclidean2D> a0 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85, -0.05),
                                                  new Vector2D(0.90, -0.10)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE),
                                                  new BSPTree<Euclidean2D>(Boolean.TRUE),
                                                  null);
        BSPTree<Euclidean2D> a1 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85, -0.10),
                                                  new Vector2D(0.90, -0.10)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE), a0, null);
        BSPTree<Euclidean2D> a2 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.90, -0.05),
                                                  new Vector2D(0.85, -0.05)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE), a1, null);
        BSPTree<Euclidean2D> a3 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.82, -0.05),
                                                  new Vector2D(0.82, -0.08)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE),
                                                  new BSPTree<Euclidean2D>(Boolean.TRUE),
                                                  null);
        BSPTree<Euclidean2D> a4 =
            new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85, -0.05),
                                                   new Vector2D(0.80, -0.05),
                                                   false),
                                                   new BSPTree<Euclidean2D>(Boolean.FALSE), a3, null);
        BSPTree<Euclidean2D> a5 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.82, -0.08),
                                                  new Vector2D(0.82, -0.18)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE),
                                                  new BSPTree<Euclidean2D>(Boolean.TRUE),
                                                  null);
        BSPTree<Euclidean2D> a6 =
            new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.82, -0.18),
                                                   new Vector2D(0.85, -0.15),
                                                   true),
                                                   new BSPTree<Euclidean2D>(Boolean.FALSE), a5, null);
        BSPTree<Euclidean2D> a7 =
            new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85, -0.05),
                                                   new Vector2D(0.82, -0.08),
                                                   false),
                                                   a4, a6, null);
        BSPTree<Euclidean2D> a8 =
            new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.85, -0.25),
                                               new Vector2D(0.85,  0.05)),
                                               a2, a7, null);
        BSPTree<Euclidean2D> a9 =
            new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.90,  0.05),
                                               new Vector2D(0.90, -0.50)),
                                               a8, new BSPTree<Euclidean2D>(Boolean.FALSE), null);

        BSPTree<Euclidean2D> b0 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.92, -0.12),
                                                  new Vector2D(0.92, -0.08)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE), new BSPTree<Euclidean2D>(Boolean.TRUE),
                                                  null);
        BSPTree<Euclidean2D> b1 =
            new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.92, -0.08),
                                                   new Vector2D(0.90, -0.10),
                                                   true),
                                                   new BSPTree<Euclidean2D>(Boolean.FALSE), b0, null);
        BSPTree<Euclidean2D> b2 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.92, -0.18),
                                                  new Vector2D(0.92, -0.12)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE), new BSPTree<Euclidean2D>(Boolean.TRUE),
                                                  null);
        BSPTree<Euclidean2D> b3 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.85, -0.15),
                                                  new Vector2D(0.90, -0.20)),
                                                  new BSPTree<Euclidean2D>(Boolean.FALSE), b2, null);
        BSPTree<Euclidean2D> b4 =
            new BSPTree<Euclidean2D>(buildSegment(new Vector2D(0.95, -0.15),
                                                  new Vector2D(0.85, -0.05)),
                                                  b1, b3, null);
        BSPTree<Euclidean2D> b5 =
            new BSPTree<Euclidean2D>(buildHalfLine(new Vector2D(0.85, -0.05),
                                                   new Vector2D(0.85, -0.25),
                                                   true),
                                                   new BSPTree<Euclidean2D>(Boolean.FALSE), b4, null);
        BSPTree<Euclidean2D> b6 =
            new BSPTree<Euclidean2D>(buildLine(new Vector2D(0.0, -1.10),
                                               new Vector2D(1.0, -0.10)),
                                               new BSPTree<Euclidean2D>(Boolean.FALSE), b5, null);

        PolygonsSet c =
            (PolygonsSet) new RegionFactory<Euclidean2D>().union(new PolygonsSet(a9),
                                                                 new PolygonsSet(b6));

        checkPoints(Region.Location.INSIDE, c, new Vector2D[] {
            new Vector2D(0.83, -0.06),
            new Vector2D(0.83, -0.15),
            new Vector2D(0.88, -0.15),
            new Vector2D(0.88, -0.09),
            new Vector2D(0.88, -0.07),
            new Vector2D(0.91, -0.18),
            new Vector2D(0.91, -0.10)
        });

        checkPoints(Region.Location.OUTSIDE, c, new Vector2D[] {
            new Vector2D(0.80, -0.10),
            new Vector2D(0.83, -0.50),
            new Vector2D(0.83, -0.20),
            new Vector2D(0.83, -0.02),
            new Vector2D(0.87, -0.50),
            new Vector2D(0.87, -0.20),
            new Vector2D(0.87, -0.02),
            new Vector2D(0.91, -0.20),
            new Vector2D(0.91, -0.08),
            new Vector2D(0.93, -0.15)
        });

        checkVertices(c.getVertices(),
                      new Vector2D[][] {
            new Vector2D[] {
                new Vector2D(0.85, -0.15),
                new Vector2D(0.90, -0.20),
                new Vector2D(0.92, -0.18),
                new Vector2D(0.92, -0.08),
                new Vector2D(0.90, -0.10),
                new Vector2D(0.90, -0.05),
                new Vector2D(0.82, -0.05),
                new Vector2D(0.82, -0.18),
            }
        });

    }
Method byte code: 
0: new           #171
3: dup
4: aload_0
5: new           #3
8: dup
9: ldc2_w        #198
12: ldc2_w        #191
15: invokespecial #8
18: new           #3
21: dup
22: ldc2_w        #200
25: ldc2_w        #62
28: invokespecial #8
31: invokespecial #202
34: new           #171
37: dup
38: getstatic     #174
41: invokespecial #173
44: new           #171
47: dup
48: getstatic     #172
51: invokespecial #173
54: aconst_null
55: invokespecial #175
58: astore_1
59: new           #171
62: dup
63: aload_0
64: new           #3
67: dup
68: ldc2_w        #198
71: ldc2_w        #62
74: invokespecial #8
77: new           #3
80: dup
81: ldc2_w        #200
84: ldc2_w        #62
87: invokespecial #8
90: invokespecial #202
93: new           #171
96: dup
97: getstatic     #174
100: invokespecial #173
103: aload_1
104: aconst_null
105: invokespecial #175
108: astore_2
109: new           #171
112: dup
113: aload_0
114: new           #3
117: dup
118: ldc2_w        #200
121: ldc2_w        #191
124: invokespecial #8
127: new           #3
130: dup
131: ldc2_w        #198
134: ldc2_w        #191
137: invokespecial #8
140: invokespecial #202
143: new           #171
146: dup
147: getstatic     #174
150: invokespecial #173
153: aload_2
154: aconst_null
155: invokespecial #175
158: astore_3
159: new           #171
162: dup
163: aload_0
164: new           #3
167: dup
168: ldc2_w        #203
171: ldc2_w        #191
174: invokespecial #8
177: new           #3
180: dup
181: ldc2_w        #203
184: ldc2_w        #205
187: invokespecial #8
190: invokespecial #202
193: new           #171
196: dup
197: getstatic     #174
200: invokespecial #173
203: new           #171
206: dup
207: getstatic     #172
210: invokespecial #173
213: aconst_null
214: invokespecial #175
217: astore        4
219: new           #171
222: dup
223: aload_0
224: new           #3
227: dup
228: ldc2_w        #198
231: ldc2_w        #191
234: invokespecial #8
237: new           #3
240: dup
241: ldc2_w        #95
244: ldc2_w        #191
247: invokespecial #8
250: iconst_0
251: invokespecial #207
254: new           #171
257: dup
258: getstatic     #174
261: invokespecial #173
264: aload         4
266: aconst_null
267: invokespecial #175
270: astore        5
272: new           #171
275: dup
276: aload_0
277: new           #3
280: dup
281: ldc2_w        #203
284: ldc2_w        #205
287: invokespecial #8
290: new           #3
293: dup
294: ldc2_w        #203
297: ldc2_w        #208
300: invokespecial #8
303: invokespecial #202
306: new           #171
309: dup
310: getstatic     #174
313: invokespecial #173
316: new           #171
319: dup
320: getstatic     #172
323: invokespecial #173
326: aconst_null
327: invokespecial #175
330: astore        6
332: new           #171
335: dup
336: aload_0
337: new           #3
340: dup
341: ldc2_w        #203
344: ldc2_w        #208
347: invokespecial #8
350: new           #3
353: dup
354: ldc2_w        #198
357: ldc2_w        #210
360: invokespecial #8
363: iconst_1
364: invokespecial #207
367: new           #171
370: dup
371: getstatic     #174
374: invokespecial #173
377: aload         6
379: aconst_null
380: invokespecial #175
383: astore        7
385: new           #171
388: dup
389: aload_0
390: new           #3
393: dup
394: ldc2_w        #198
397: ldc2_w        #191
400: invokespecial #8
403: new           #3
406: dup
407: ldc2_w        #203
410: ldc2_w        #205
413: invokespecial #8
416: iconst_0
417: invokespecial #207
420: aload         5
422: aload         7
424: aconst_null
425: invokespecial #175
428: astore        8
430: new           #171
433: dup
434: aload_0
435: new           #3
438: dup
439: ldc2_w        #198
442: ldc2_w        #212
445: invokespecial #8
448: new           #3
451: dup
452: ldc2_w        #198
455: ldc2_w        #187
458: invokespecial #8
461: invokespecial #214
464: aload_3
465: aload         8
467: aconst_null
468: invokespecial #175
471: astore        9
473: new           #171
476: dup
477: aload_0
478: new           #3
481: dup
482: ldc2_w        #200
485: ldc2_w        #187
488: invokespecial #8
491: new           #3
494: dup
495: ldc2_w        #200
498: ldc2_w        #146
501: invokespecial #8
504: invokespecial #214
507: aload         9
509: new           #171
512: dup
513: getstatic     #174
516: invokespecial #173
519: aconst_null
520: invokespecial #175
523: astore        10
525: new           #171
528: dup
529: aload_0
530: new           #3
533: dup
534: ldc2_w        #215
537: ldc2_w        #217
540: invokespecial #8
543: new           #3
546: dup
547: ldc2_w        #215
550: ldc2_w        #205
553: invokespecial #8
556: invokespecial #202
559: new           #171
562: dup
563: getstatic     #174
566: invokespecial #173
569: new           #171
572: dup
573: getstatic     #172
576: invokespecial #173
579: aconst_null
580: invokespecial #175
583: astore        11
585: new           #171
588: dup
589: aload_0
590: new           #3
593: dup
594: ldc2_w        #215
597: ldc2_w        #205
600: invokespecial #8
603: new           #3
606: dup
607: ldc2_w        #200
610: ldc2_w        #62
613: invokespecial #8
616: iconst_1
617: invokespecial #207
620: new           #171
623: dup
624: getstatic     #174
627: invokespecial #173
630: aload         11
632: aconst_null
633: invokespecial #175
636: astore        12
638: new           #171
641: dup
642: aload_0
643: new           #3
646: dup
647: ldc2_w        #215
650: ldc2_w        #208
653: invokespecial #8
656: new           #3
659: dup
660: ldc2_w        #215
663: ldc2_w        #217
666: invokespecial #8
669: invokespecial #202
672: new           #171
675: dup
676: getstatic     #174
679: invokespecial #173
682: new           #171
685: dup
686: getstatic     #172
689: invokespecial #173
692: aconst_null
693: invokespecial #175
696: astore        13
698: new           #171
701: dup
702: aload_0
703: new           #3
706: dup
707: ldc2_w        #198
710: ldc2_w        #210
713: invokespecial #8
716: new           #3
719: dup
720: ldc2_w        #200
723: ldc2_w        #195
726: invokespecial #8
729: invokespecial #202
732: new           #171
735: dup
736: getstatic     #174
739: invokespecial #173
742: aload         13
744: aconst_null
745: invokespecial #175
748: astore        14
750: new           #171
753: dup
754: aload_0
755: new           #3
758: dup
759: ldc2_w        #75
762: ldc2_w        #210
765: invokespecial #8
768: new           #3
771: dup
772: ldc2_w        #198
775: ldc2_w        #191
778: invokespecial #8
781: invokespecial #202
784: aload         12
786: aload         14
788: aconst_null
789: invokespecial #175
792: astore        15
794: new           #171
797: dup
798: aload_0
799: new           #3
802: dup
803: ldc2_w        #198
806: ldc2_w        #191
809: invokespecial #8
812: new           #3
815: dup
816: ldc2_w        #198
819: ldc2_w        #212
822: invokespecial #8
825: iconst_1
826: invokespecial #207
829: new           #171
832: dup
833: getstatic     #174
836: invokespecial #173
839: aload         15
841: aconst_null
842: invokespecial #175
845: astore        16
847: new           #171
850: dup
851: aload_0
852: new           #3
855: dup
856: dconst_0
857: ldc2_w        #219
860: invokespecial #8
863: new           #3
866: dup
867: dconst_1
868: ldc2_w        #62
871: invokespecial #8
874: invokespecial #214
877: new           #171
880: dup
881: getstatic     #174
884: invokespecial #173
887: aload         16
889: aconst_null
890: invokespecial #175
893: astore        17
895: new           #137
898: dup
899: invokespecial #138
902: new           #141
905: dup
906: aload         10
908: invokespecial #176
911: new           #141
914: dup
915: aload         17
917: invokespecial #176
920: invokevirtual #140
923: checkcast     #141
926: astore        18
928: aload_0
929: getstatic     #45
932: aload         18
934: bipush        7
936: anewarray     #3
939: dup
940: iconst_0
941: new           #3
944: dup
945: ldc2_w        #221
948: ldc2_w        #223
951: invokespecial #8
954: aastore
955: dup
956: iconst_1
957: new           #3
960: dup
961: ldc2_w        #221
964: ldc2_w        #210
967: invokespecial #8
970: aastore
971: dup
972: iconst_2
973: new           #3
976: dup
977: ldc2_w        #225
980: ldc2_w        #210
983: invokespecial #8
986: aastore
987: dup
988: iconst_3
989: new           #3
992: dup
993: ldc2_w        #225
996: ldc2_w        #227
999: invokespecial #8
1002: aastore
1003: dup
1004: iconst_4
1005: new           #3
1008: dup
1009: ldc2_w        #225
1012: ldc2_w        #229
1015: invokespecial #8
1018: aastore
1019: dup
1020: iconst_5
1021: new           #3
1024: dup
1025: ldc2_w        #231
1028: ldc2_w        #208
1031: invokespecial #8
1034: aastore
1035: dup
1036: bipush        6
1038: new           #3
1041: dup
1042: ldc2_w        #231
1045: ldc2_w        #62
1048: invokespecial #8
1051: aastore
1052: invokespecial #54
1055: aload_0
1056: getstatic     #38
1059: aload         18
1061: bipush        10
1063: anewarray     #3
1066: dup
1067: iconst_0
1068: new           #3
1071: dup
1072: ldc2_w        #95
1075: ldc2_w        #62
1078: invokespecial #8
1081: aastore
1082: dup
1083: iconst_1
1084: new           #3
1087: dup
1088: ldc2_w        #221
1091: ldc2_w        #146
1094: invokespecial #8
1097: aastore
1098: dup
1099: iconst_2
1100: new           #3
1103: dup
1104: ldc2_w        #221
1107: ldc2_w        #195
1110: invokespecial #8
1113: aastore
1114: dup
1115: iconst_3
1116: new           #3
1119: dup
1120: ldc2_w        #221
1123: ldc2_w        #233
1126: invokespecial #8
1129: aastore
1130: dup
1131: iconst_4
1132: new           #3
1135: dup
1136: ldc2_w        #235
1139: ldc2_w        #146
1142: invokespecial #8
1145: aastore
1146: dup
1147: iconst_5
1148: new           #3
1151: dup
1152: ldc2_w        #235
1155: ldc2_w        #195
1158: invokespecial #8
1161: aastore
1162: dup
1163: bipush        6
1165: new           #3
1168: dup
1169: ldc2_w        #235
1172: ldc2_w        #233
1175: invokespecial #8
1178: aastore
1179: dup
1180: bipush        7
1182: new           #3
1185: dup
1186: ldc2_w        #231
1189: ldc2_w        #195
1192: invokespecial #8
1195: aastore
1196: dup
1197: bipush        8
1199: new           #3
1202: dup
1203: ldc2_w        #231
1206: ldc2_w        #205
1209: invokespecial #8
1212: aastore
1213: dup
1214: bipush        9
1216: new           #3
1219: dup
1220: ldc2_w        #237
1223: ldc2_w        #210
1226: invokespecial #8
1229: aastore
1230: invokespecial #54
1233: aload_0
1234: aload         18
1236: invokevirtual #58
1239: iconst_1
1240: anewarray     #2
1243: dup
1244: iconst_0
1245: bipush        8
1247: anewarray     #3
1250: dup
1251: iconst_0
1252: new           #3
1255: dup
1256: ldc2_w        #198
1259: ldc2_w        #210
1262: invokespecial #8
1265: aastore
1266: dup
1267: iconst_1
1268: new           #3
1271: dup
1272: ldc2_w        #200
1275: ldc2_w        #195
1278: invokespecial #8
1281: aastore
1282: dup
1283: iconst_2
1284: new           #3
1287: dup
1288: ldc2_w        #215
1291: ldc2_w        #208
1294: invokespecial #8
1297: aastore
1298: dup
1299: iconst_3
1300: new           #3
1303: dup
1304: ldc2_w        #215
1307: ldc2_w        #205
1310: invokespecial #8
1313: aastore
1314: dup
1315: iconst_4
1316: new           #3
1319: dup
1320: ldc2_w        #200
1323: ldc2_w        #62
1326: invokespecial #8
1329: aastore
1330: dup
1331: iconst_5
1332: new           #3
1335: dup
1336: ldc2_w        #200
1339: ldc2_w        #191
1342: invokespecial #8
1345: aastore
1346: dup
1347: bipush        6
1349: new           #3
1352: dup
1353: ldc2_w        #203
1356: ldc2_w        #191
1359: invokespecial #8
1362: aastore
1363: dup
1364: bipush        7
1366: new           #3
1369: dup
1370: ldc2_w        #203
1373: ldc2_w        #208
1376: invokespecial #8
1379: aastore
1380: aastore
1381: invokespecial #59
1384: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSetTest.class
Class name: PolygonsSetTest
Method name: testBug20041003
Start line: 767
End line: 802
Method source code: 
    public void testBug20041003() {

        Line[] l = {
            new Line(new Vector2D(0.0, 0.625000007541172),
                     new Vector2D(1.0, 0.625000007541172)),
                     new Line(new Vector2D(-0.19204433621902645, 0.0),
                              new Vector2D(-0.19204433621902645, 1.0)),
                              new Line(new Vector2D(-0.40303524786887,  0.4248364535319128),
                                       new Vector2D(-1.12851149797877, -0.2634107480798909)),
                                       new Line(new Vector2D(0.0, 2.0),
                                                new Vector2D(1.0, 2.0))
        };

        BSPTree<Euclidean2D> node1 =
            new BSPTree<Euclidean2D>(new SubLine(l[0],
                                          new IntervalsSet(intersectionAbscissa(l[0], l[1]),
                                                           intersectionAbscissa(l[0], l[2]))),
                                                           new BSPTree<Euclidean2D>(Boolean.TRUE), new BSPTree<Euclidean2D>(Boolean.FALSE),
                                                           null);
        BSPTree<Euclidean2D> node2 =
            new BSPTree<Euclidean2D>(new SubLine(l[1],
                                          new IntervalsSet(intersectionAbscissa(l[1], l[2]),
                                                           intersectionAbscissa(l[1], l[3]))),
                                                           node1, new BSPTree<Euclidean2D>(Boolean.FALSE), null);
        BSPTree<Euclidean2D> node3 =
            new BSPTree<Euclidean2D>(new SubLine(l[2],
                                          new IntervalsSet(intersectionAbscissa(l[2], l[3]),
                                                           Double.POSITIVE_INFINITY)),
                                                           node2, new BSPTree<Euclidean2D>(Boolean.FALSE), null);
        BSPTree<Euclidean2D> node4 =
            new BSPTree<Euclidean2D>(l[3].wholeHyperplane(), node3, new BSPTree<Euclidean2D>(Boolean.FALSE), null);

        PolygonsSet set = new PolygonsSet(node4);
        Assert.assertEquals(0, set.getVertices().length);

    }
Method byte code: 
0: iconst_4
1: anewarray     #101
4: dup
5: iconst_0
6: new           #101
9: dup
10: new           #3
13: dup
14: dconst_0
15: ldc2_w        #239
18: invokespecial #8
21: new           #3
24: dup
25: dconst_1
26: ldc2_w        #239
29: invokespecial #8
32: invokespecial #241
35: aastore
36: dup
37: iconst_1
38: new           #101
41: dup
42: new           #3
45: dup
46: ldc2_w        #242
49: dconst_0
50: invokespecial #8
53: new           #3
56: dup
57: ldc2_w        #242
60: dconst_1
61: invokespecial #8
64: invokespecial #241
67: aastore
68: dup
69: iconst_2
70: new           #101
73: dup
74: new           #3
77: dup
78: ldc2_w        #244
81: ldc2_w        #246
84: invokespecial #8
87: new           #3
90: dup
91: ldc2_w        #248
94: ldc2_w        #250
97: invokespecial #8
100: invokespecial #241
103: aastore
104: dup
105: iconst_3
106: new           #101
109: dup
110: new           #3
113: dup
114: dconst_0
115: ldc2_w        #60
118: invokespecial #8
121: new           #3
124: dup
125: dconst_1
126: ldc2_w        #60
129: invokespecial #8
132: invokespecial #241
135: aastore
136: astore_1
137: new           #171
140: dup
141: new           #110
144: dup
145: aload_1
146: iconst_0
147: aaload
148: new           #112
151: dup
152: aload_0
153: aload_1
154: iconst_0
155: aaload
156: aload_1
157: iconst_1
158: aaload
159: invokespecial #252
162: aload_0
163: aload_1
164: iconst_0
165: aaload
166: aload_1
167: iconst_2
168: aaload
169: invokespecial #252
172: invokespecial #253
175: invokespecial #254
178: new           #171
181: dup
182: getstatic     #172
185: invokespecial #173
188: new           #171
191: dup
192: getstatic     #174
195: invokespecial #173
198: aconst_null
199: invokespecial #175
202: astore_2
203: new           #171
206: dup
207: new           #110
210: dup
211: aload_1
212: iconst_1
213: aaload
214: new           #112
217: dup
218: aload_0
219: aload_1
220: iconst_1
221: aaload
222: aload_1
223: iconst_2
224: aaload
225: invokespecial #252
228: aload_0
229: aload_1
230: iconst_1
231: aaload
232: aload_1
233: iconst_3
234: aaload
235: invokespecial #252
238: invokespecial #253
241: invokespecial #254
244: aload_2
245: new           #171
248: dup
249: getstatic     #174
252: invokespecial #173
255: aconst_null
256: invokespecial #175
259: astore_3
260: new           #171
263: dup
264: new           #110
267: dup
268: aload_1
269: iconst_2
270: aaload
271: new           #112
274: dup
275: aload_0
276: aload_1
277: iconst_2
278: aaload
279: aload_1
280: iconst_3
281: aaload
282: invokespecial #252
285: ldc2_w        #256
288: invokespecial #253
291: invokespecial #254
294: aload_3
295: new           #171
298: dup
299: getstatic     #174
302: invokespecial #173
305: aconst_null
306: invokespecial #175
309: astore        4
311: new           #171
314: dup
315: aload_1
316: iconst_3
317: aaload
318: invokevirtual #108
321: aload         4
323: new           #171
326: dup
327: getstatic     #174
330: invokespecial #173
333: aconst_null
334: invokespecial #175
337: astore        5
339: new           #141
342: dup
343: aload         5
345: invokespecial #176
348: astore        6
350: lconst_0
351: aload         6
353: invokevirtual #58
356: arraylength
357: i2l
358: invokestatic  #117
361: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test00
Start line: 22
End line: 26
Method source code: 
  public void test00()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(0.0, 2.0217439756338078E-10, 0.0, 2.0217439756338078E-10);
      polygonsSet0.computeGeometricalProperties();
      assertFalse(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #2
3: dup
4: dconst_0
5: ldc2_w        #3
8: dconst_0
9: ldc2_w        #3
12: invokespecial #5
15: astore_1
16: aload_1
17: invokevirtual #6
20: aload_1
21: invokevirtual #7
24: invokestatic  #8
27: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test01
Start line: 29
End line: 34
Method source code: 
  public void test01()  throws Throwable  {
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>();
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      PolygonsSet polygonsSet1 = polygonsSet0.buildNew(bSPTree0);
      assertFalse(polygonsSet1.equals((Object)polygonsSet0));
  }
Method byte code: 
0: new           #9
3: dup
4: invokespecial #10
7: astore_1
8: new           #2
11: dup
12: aload_1
13: invokespecial #11
16: astore_2
17: aload_2
18: aload_1
19: invokevirtual #12
22: astore_3
23: aload_3
24: aload_2
25: invokevirtual #13
28: invokestatic  #8
31: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test02
Start line: 37
End line: 41
Method source code: 
  public void test02()  throws Throwable  {
      LinkedList<SubHyperplane<Euclidean2D>> linkedList0 = new LinkedList<SubHyperplane<Euclidean2D>>();
      PolygonsSet polygonsSet0 = new PolygonsSet(linkedList0);
      assertFalse(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #14
3: dup
4: invokespecial #15
7: astore_1
8: new           #2
11: dup
12: aload_1
13: invokespecial #16
16: astore_2
17: aload_2
18: invokevirtual #7
21: invokestatic  #8
24: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test03
Start line: 44
End line: 48
Method source code: 
  public void test03()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-1.0E-10), 1.760626356541821E-15, 877.6386339206349, 1319.0434542683095);
      polygonsSet0.computeGeometricalProperties();
      assertFalse(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #17
7: ldc2_w        #19
10: ldc2_w        #21
13: ldc2_w        #23
16: invokespecial #5
19: astore_1
20: aload_1
21: invokevirtual #6
24: aload_1
25: invokevirtual #7
28: invokestatic  #8
31: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test04
Start line: 51
End line: 57
Method source code: 
  public void test04()  throws Throwable  {
      Boolean boolean0 = new Boolean("NOT_DECREASING_NUMBER_OF_POINTS");
      BSPTree<Euclidean2D> bSPTree0 = new BSPTree<Euclidean2D>(boolean0);
      PolygonsSet polygonsSet0 = new PolygonsSet(bSPTree0);
      polygonsSet0.computeGeometricalProperties();
      assertTrue(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #25
3: dup
4: ldc           #26
6: invokespecial #27
9: astore_1
10: new           #9
13: dup
14: aload_1
15: invokespecial #28
18: astore_2
19: new           #2
22: dup
23: aload_2
24: invokespecial #11
27: astore_3
28: aload_3
29: invokevirtual #6
32: aload_3
33: invokevirtual #7
36: invokestatic  #29
39: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test05
Start line: 60
End line: 64
Method source code: 
  public void test05()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      polygonsSet0.computeGeometricalProperties();
      assertFalse(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #30
7: astore_1
8: aload_1
9: invokevirtual #6
12: aload_1
13: invokevirtual #7
16: invokestatic  #8
19: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test06
Start line: 67
End line: 71
Method source code: 
  public void test06()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-1012.2042559278339), 2971.0, (-1.7976931348623157E308), 2971.0);
      polygonsSet0.computeGeometricalProperties();
      assertFalse(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #31
7: ldc2_w        #33
10: ldc2_w        #35
13: ldc2_w        #33
16: invokespecial #5
19: astore_1
20: aload_1
21: invokevirtual #6
24: aload_1
25: invokevirtual #7
28: invokestatic  #8
31: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test07
Start line: 74
End line: 79
Method source code: 
  public void test07()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet();
      polygonsSet0.getVertices();
      Vector2D[][] vector2DArray0 = polygonsSet0.getVertices();
      assertEquals(0, vector2DArray0.length);
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #30
7: astore_1
8: aload_1
9: invokevirtual #37
12: pop
13: aload_1
14: invokevirtual #37
17: astore_2
18: lconst_0
19: aload_2
20: arraylength
21: i2l
22: invokestatic  #38
25: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test08
Start line: 82
End line: 86
Method source code: 
  public void test08()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(3.4028234663852886E38, 311.8141199999, 311.8141199999, 1.0E-10);
      polygonsSet0.computeGeometricalProperties();
      assertFalse(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #39
7: ldc2_w        #41
10: ldc2_w        #41
13: ldc2_w        #43
16: invokespecial #5
19: astore_1
20: aload_1
21: invokevirtual #6
24: aload_1
25: invokevirtual #7
28: invokestatic  #8
31: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test09
Start line: 89
End line: 93
Method source code: 
  public void test09()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(2902.6279309056713, 3462.8341447399994, 2902.6279309056713, 3462.8341447399994);
      polygonsSet0.computeGeometricalProperties();
      assertFalse(polygonsSet0.isEmpty());
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #45
7: ldc2_w        #47
10: ldc2_w        #45
13: ldc2_w        #47
16: invokespecial #5
19: astore_1
20: aload_1
21: invokevirtual #6
24: aload_1
25: invokevirtual #7
28: invokestatic  #8
31: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test10
Start line: 96
End line: 109
Method source code: 
  public void test10()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet((-8.0E298), 1.0E-10, (-8.0E298), 1.0E-10);
      // Undeclared exception!
      try { 
        polygonsSet0.computeGeometricalProperties();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.Line", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #49
7: ldc2_w        #43
10: ldc2_w        #49
13: ldc2_w        #43
16: invokespecial #5
19: astore_1
20: aload_1
21: invokevirtual #6
24: ldc           #51
26: invokestatic  #52
29: goto          39
32: astore_2
33: ldc           #54
35: aload_2
36: invokestatic  #55
39: return
Exception table:
from    to  target type
20    29    32   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/32/target/test-classes/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet_ESTest.class
Class name: PolygonsSet_ESTest
Method name: test11
Start line: 112
End line: 125
Method source code: 
  public void test11()  throws Throwable  {
      PolygonsSet polygonsSet0 = new PolygonsSet(Double.NEGATIVE_INFINITY, 0.1428571343421936, 0.1428571343421936, Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      try { 
        polygonsSet0.computeGeometricalProperties();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: internal error, please fill a bug report at https://issues.apache.org/jira/browse/MATH
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #57
7: ldc2_w        #59
10: ldc2_w        #59
13: ldc2_w        #57
16: invokespecial #5
19: astore_1
20: aload_1
21: invokevirtual #6
24: ldc           #61
26: invokestatic  #52
29: goto          39
32: astore_2
33: ldc           #63
35: aload_2
36: invokestatic  #55
39: return
Exception table:
from    to  target type
20    29    32   Class java/lang/IllegalStateException
}
