Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test001
Start line: 12
End line: 22
Method source code: 
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("hi!");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #6
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #8
26: invokestatic  #9
29: istore_1
30: ldc           #10
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test002
Start line: 25
End line: 35
Method source code: 
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("", (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #13
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #14
26: iconst_0
27: invokestatic  #15
30: istore_1
31: ldc           #16
33: invokestatic  #11
36: goto          40
39: astore_1
40: return
Exception table:
from    to  target type
24    36    39   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test003
Start line: 38
End line: 66
Method source code: 
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType2 = periodType1.withWeeksRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.ReadableInterval readableInterval5 = null;
        org.joda.time.Chronology chronology6 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology9 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone8);
        org.joda.time.Period period10 = new org.joda.time.Period((long) (short) 100, chronology6);
        boolean boolean11 = dateTimeFieldType3.isSupported(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period12 = new org.joda.time.Period((java.lang.Object) dateTimeOfYear0, periodType1, chronology6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(zonedChronology9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #18
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: invokestatic  #20
31: astore_2
32: aload_2
33: invokevirtual #21
36: astore_3
37: invokestatic  #22
40: astore        4
42: aconst_null
43: astore        5
45: aload         5
47: invokestatic  #23
50: astore        6
52: iconst_0
53: invokestatic  #24
56: astore        7
58: aload         6
60: aload         7
62: invokestatic  #25
65: astore        8
67: new           #26
70: dup
71: ldc2_w        #27
74: aload         6
76: invokespecial #29
79: astore        9
81: aload         4
83: aload         6
85: invokevirtual #30
88: istore        10
90: new           #26
93: dup
94: aload_1
95: aload_2
96: aload         6
98: invokespecial #31
101: astore        11
103: ldc           #32
105: invokestatic  #11
108: goto          113
111: astore        11
113: aload_1
114: invokestatic  #34
117: aload_2
118: invokestatic  #34
121: aload_3
122: invokestatic  #34
125: aload         4
127: invokestatic  #34
130: aload         6
132: invokestatic  #34
135: aload         7
137: invokestatic  #34
140: aload         8
142: invokestatic  #34
145: new           #35
148: dup
149: invokespecial #36
152: ldc           #37
154: invokevirtual #38
157: iload         10
159: invokevirtual #39
162: ldc           #40
164: invokevirtual #38
167: iconst_1
168: invokevirtual #39
171: ldc           #37
173: invokevirtual #38
176: invokevirtual #41
179: iload         10
181: iconst_1
182: if_icmpne     189
185: iconst_1
186: goto          190
189: iconst_0
190: invokestatic  #42
193: return
Exception table:
from    to  target type
90   108   111   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test004
Start line: 69
End line: 81
Method source code: 
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.BufferedReader bufferedReader1 = null;
        // The following exception was thrown during execution in test generation
        try {
            zoneInfoCompiler0.parseDataFile(bufferedReader1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #43
19: aastore
20: invokevirtual #7
23: pop
24: new           #44
27: dup
28: invokespecial #45
31: astore_1
32: aconst_null
33: astore_2
34: aload_1
35: aload_2
36: invokevirtual #46
39: ldc           #47
41: invokestatic  #11
44: goto          48
47: astore_3
48: return
Exception table:
from    to  target type
34    44    47   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test005
Start line: 84
End line: 94
Method source code: 
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("GregorianChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: GregorianChronology[UTC]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #49
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #50
26: invokestatic  #51
29: istore_1
30: ldc           #52
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test006
Start line: 97
End line: 102
Method source code: 
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.joda.time.Chronology chronology0 = org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology();
        org.junit.Assert.assertNotNull(chronology0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #53
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #54
27: astore_1
28: aload_1
29: invokestatic  #34
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test007
Start line: 105
End line: 115
Method source code: 
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("ISOChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ISOChronology[UTC]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #55
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #56
26: invokestatic  #57
29: istore_1
30: ldc           #58
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test008
Start line: 118
End line: 128
Method source code: 
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MonthOfYear: 1?DayOfMonth: 1?DayOfWeek: 0?AdvanceDayOfWeek: false?MillisOfDay: 0?ZoneChar: w?");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #59
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #60
26: invokestatic  #51
29: istore_1
30: ldc           #61
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test009
Start line: 131
End line: 136
Method source code: 
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("71");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "71" + "'", str1, "71");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #62
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #63
26: invokestatic  #64
29: astore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: aload_1
43: invokevirtual #38
46: ldc           #65
48: invokevirtual #38
51: invokevirtual #41
54: aload_1
55: ldc           #63
57: invokestatic  #66
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test010
Start line: 139
End line: 149
Method source code: 
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #67
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #8
26: invokestatic  #51
29: istore_1
30: ldc           #68
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test011
Start line: 152
End line: 164
Method source code: 
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        java.io.DataOutputStream dataOutputStream0 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #69
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aconst_null
27: astore_2
28: aload_1
29: aload_2
30: invokestatic  #70
33: ldc           #47
35: invokestatic  #11
38: goto          42
41: astore_3
42: return
Exception table:
from    to  target type
28    38    41   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test012
Start line: 167
End line: 177
Method source code: 
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("10");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"10\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #71
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #72
26: invokestatic  #9
29: istore_1
30: ldc           #73
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test013
Start line: 180
End line: 190
Method source code: 
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("70");
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"70\": Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #74
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #75
26: invokestatic  #51
29: istore_1
30: goto          34
33: astore_1
34: return
Exception table:
from    to  target type
24    30    33   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test014
Start line: 193
End line: 198
Method source code: 
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('#');
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #76
19: aastore
20: invokevirtual #7
23: pop
24: bipush        35
26: invokestatic  #77
29: istore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: iload_1
43: invokevirtual #78
46: ldc           #40
48: invokevirtual #38
51: bipush        119
53: invokevirtual #78
56: ldc           #37
58: invokevirtual #38
61: invokevirtual #41
64: iload_1
65: bipush        119
67: if_icmpne     74
70: iconst_1
71: goto          75
74: iconst_0
75: invokestatic  #42
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test015
Start line: 201
End line: 211
Method source code: 
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("millis", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"millis\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #79
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #80
26: iconst_0
27: invokestatic  #15
30: istore_1
31: ldc           #81
33: invokestatic  #11
36: goto          40
39: astore_1
40: return
Exception table:
from    to  target type
24    36    39   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test016
Start line: 214
End line: 219
Method source code: 
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("3465", (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3465 + "'", int2 == 3465);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #82
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #83
26: bipush        100
28: invokestatic  #15
31: istore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: iload_1
45: invokevirtual #84
48: ldc           #40
50: invokevirtual #38
53: sipush        3465
56: invokevirtual #84
59: ldc           #37
61: invokevirtual #38
64: invokevirtual #41
67: iload_1
68: sipush        3465
71: if_icmpne     78
74: iconst_1
75: goto          79
78: iconst_0
79: invokestatic  #42
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test017
Start line: 222
End line: 232
Method source code: 
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"MonthOfYear: 1?DayOfMonth: 1?DayOfWeek: 0?AdvanceDayOfWeek: false?MillisOfDay: 0?ZoneChar: w?\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #85
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #60
26: invokestatic  #9
29: istore_1
30: ldc           #86
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test018
Start line: 235
End line: 240
Method source code: 
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("minutes");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #87
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #88
26: invokestatic  #64
29: astore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: aload_1
43: invokevirtual #38
46: ldc           #89
48: invokevirtual #38
51: invokevirtual #41
54: aload_1
55: ldc           #88
57: invokestatic  #66
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test019
Start line: 243
End line: 248
Method source code: 
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('a');
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #90
19: aastore
20: invokevirtual #7
23: pop
24: bipush        97
26: invokestatic  #77
29: istore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: iload_1
43: invokevirtual #78
46: ldc           #40
48: invokevirtual #38
51: bipush        119
53: invokevirtual #78
56: ldc           #37
58: invokevirtual #38
61: invokevirtual #41
64: iload_1
65: bipush        119
67: if_icmpne     74
70: iconst_1
71: goto          75
74: iconst_0
75: invokestatic  #42
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test020
Start line: 251
End line: 261
Method source code: 
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("UTC", 2024);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"utc\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #91
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #92
26: sipush        2024
29: invokestatic  #15
32: istore_1
33: ldc           #93
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
24    38    41   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test021
Start line: 264
End line: 281
Method source code: 
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        java.io.BufferedReader bufferedReader4 = null;
        // The following exception was thrown during execution in test generation
        try {
            zoneInfoCompiler0.parseDataFile(bufferedReader4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #94
19: aastore
20: invokevirtual #7
23: pop
24: new           #44
27: dup
28: invokespecial #45
31: astore_1
32: aconst_null
33: astore_2
34: iconst_0
35: anewarray     #95
38: astore_3
39: aload_1
40: aload_2
41: aload_3
42: invokevirtual #96
45: astore        4
47: aconst_null
48: astore        5
50: aload_1
51: aload         5
53: invokevirtual #46
56: ldc           #47
58: invokestatic  #11
61: goto          66
64: astore        6
66: aload_3
67: invokestatic  #34
70: aload         4
72: invokestatic  #34
75: return
Exception table:
from    to  target type
50    61    64   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test022
Start line: 284
End line: 289
Method source code: 
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #97
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #14
26: invokestatic  #64
29: astore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: aload_1
43: invokevirtual #38
46: ldc           #98
48: invokevirtual #38
51: invokevirtual #41
54: aload_1
55: ldc           #14
57: invokestatic  #66
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test023
Start line: 292
End line: 312
Method source code: 
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        java.io.File file4 = null;
        java.io.File file5 = null;
        java.io.File[] fileArray6 = new java.io.File[] { file5 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = zoneInfoCompiler0.compile(file4, fileArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(fileArray6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #99
19: aastore
20: invokevirtual #7
23: pop
24: new           #44
27: dup
28: invokespecial #45
31: astore_1
32: aconst_null
33: astore_2
34: iconst_0
35: anewarray     #95
38: astore_3
39: aload_1
40: aload_2
41: aload_3
42: invokevirtual #96
45: astore        4
47: aconst_null
48: astore        5
50: aconst_null
51: astore        6
53: iconst_1
54: anewarray     #95
57: dup
58: iconst_0
59: aload         6
61: aastore
62: astore        7
64: aload_1
65: aload         5
67: aload         7
69: invokevirtual #96
72: astore        8
74: ldc           #47
76: invokestatic  #11
79: goto          84
82: astore        8
84: aload_3
85: invokestatic  #34
88: aload         4
90: invokestatic  #34
93: aload         7
95: invokestatic  #34
98: return
Exception table:
from    to  target type
64    79    82   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test024
Start line: 315
End line: 325
Method source code: 
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("-292275054");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-292275054\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #100
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #101
26: invokestatic  #9
29: istore_1
30: ldc           #102
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test025
Start line: 328
End line: 338
Method source code: 
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("P1D");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P1D\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #103
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #104
26: invokestatic  #57
29: istore_1
30: ldc           #105
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test026
Start line: 341
End line: 393
Method source code: 
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = zonedChronology5.weekyear();
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.Chronology chronology8 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology11 = org.joda.time.chrono.ZonedChronology.getInstance(chronology8, dateTimeZone10);
        org.joda.time.Period period14 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray17 = zonedChronology11.get((org.joda.time.ReadablePeriod) period14, (long) (byte) -1, (long) 1);
        java.lang.String str18 = zonedChronology11.toString();
        org.joda.time.DateTimeField dateTimeField19 = zonedChronology11.hourOfDay();
        org.joda.time.Chronology chronology20 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology11);
        org.joda.time.DurationField durationField21 = zonedChronology11.hours();
        org.joda.time.chrono.LenientChronology lenientChronology22 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology11);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone26);
        java.util.TimeZone timeZone28 = dateTimeZone26.toTimeZone();
        org.joda.time.ReadableInstant readableInstant29 = null;
        int int30 = dateTimeZone26.getOffset(readableInstant29);
        org.joda.time.Chronology chronology31 = lenientChronology22.withZone(dateTimeZone26);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology) zonedChronology5, dateTimeZone26);
        boolean boolean33 = org.joda.time.tz.ZoneInfoCompiler.test("(\"org.joda.time.JodaTimePermission\" \"DateTimeField[yearOfCentury]\")", dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zonedChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(zonedChronology11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str18, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(lenientChronology22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #106
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aload_1
27: invokestatic  #23
30: astore_2
31: iconst_0
32: invokestatic  #24
35: astore_3
36: aload_2
37: aload_3
38: invokestatic  #25
41: astore        4
43: aload         4
45: invokevirtual #107
48: astore        5
50: aconst_null
51: astore        6
53: aload         6
55: invokestatic  #23
58: astore        7
60: iconst_0
61: invokestatic  #24
64: astore        8
66: aload         7
68: aload         8
70: invokestatic  #25
73: astore        9
75: new           #26
78: dup
79: ldc2_w        #108
82: ldc2_w        #110
85: invokespecial #112
88: astore        10
90: aload         9
92: aload         10
94: ldc2_w        #113
97: lconst_1
98: invokevirtual #115
101: astore        11
103: aload         9
105: invokevirtual #116
108: astore        12
110: aload         9
112: invokevirtual #117
115: astore        13
117: aload         9
119: invokestatic  #118
122: astore        14
124: aload         9
126: invokevirtual #119
129: astore        15
131: aload         9
133: invokestatic  #120
136: astore        16
138: aconst_null
139: astore        17
141: aload         17
143: invokestatic  #23
146: astore        18
148: iconst_0
149: invokestatic  #24
152: astore        19
154: aload         18
156: aload         19
158: invokestatic  #25
161: astore        20
163: aload         19
165: invokevirtual #121
168: astore        21
170: aconst_null
171: astore        22
173: aload         19
175: aload         22
177: invokevirtual #122
180: istore        23
182: aload         16
184: aload         19
186: invokevirtual #123
189: astore        24
191: aload         4
193: aload         19
195: invokestatic  #25
198: astore        25
200: ldc           #124
202: aload         19
204: invokestatic  #125
207: istore        26
209: aload_2
210: invokestatic  #34
213: aload_3
214: invokestatic  #34
217: aload         4
219: invokestatic  #34
222: aload         5
224: invokestatic  #34
227: aload         7
229: invokestatic  #34
232: aload         8
234: invokestatic  #34
237: aload         9
239: invokestatic  #34
242: aload         11
244: invokestatic  #34
247: aload         11
249: invokestatic  #126
252: ldc           #127
254: invokestatic  #128
257: new           #35
260: dup
261: invokespecial #36
264: ldc           #37
266: invokevirtual #38
269: aload         12
271: invokevirtual #38
274: ldc           #129
276: invokevirtual #38
279: invokevirtual #41
282: aload         12
284: ldc           #130
286: invokestatic  #66
289: aload         13
291: invokestatic  #34
294: aload         14
296: invokestatic  #34
299: aload         15
301: invokestatic  #34
304: aload         16
306: invokestatic  #34
309: aload         18
311: invokestatic  #34
314: aload         19
316: invokestatic  #34
319: aload         20
321: invokestatic  #34
324: aload         21
326: invokestatic  #34
329: aload         21
331: invokevirtual #131
334: ldc           #132
336: invokestatic  #128
339: new           #35
342: dup
343: invokespecial #36
346: ldc           #37
348: invokevirtual #38
351: iload         23
353: invokevirtual #84
356: ldc           #40
358: invokevirtual #38
361: iconst_0
362: invokevirtual #84
365: ldc           #37
367: invokevirtual #38
370: invokevirtual #41
373: iload         23
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #42
386: aload         24
388: invokestatic  #34
391: aload         25
393: invokestatic  #34
396: new           #35
399: dup
400: invokespecial #36
403: ldc           #37
405: invokevirtual #38
408: iload         26
410: invokevirtual #39
413: ldc           #40
415: invokevirtual #38
418: iconst_1
419: invokevirtual #39
422: ldc           #37
424: invokevirtual #38
427: invokevirtual #41
430: iload         26
432: iconst_1
433: if_icmpne     440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #42
444: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test027
Start line: 396
End line: 409
Method source code: 
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        java.io.DataOutputStream dataOutputStream0 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap1 = org.joda.time.DateTimeUtils.getDefaultTimeZoneNames();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #133
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: invokestatic  #134
29: astore_2
30: aload_1
31: aload_2
32: invokestatic  #70
35: ldc           #47
37: invokestatic  #11
40: goto          44
43: astore_3
44: aload_2
45: invokestatic  #34
48: return
Exception table:
from    to  target type
30    40    43   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test028
Start line: 412
End line: 419
Method source code: 
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #135
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: aload_1
29: getfield      #136
32: istore_2
33: aload_1
34: invokestatic  #34
37: new           #35
40: dup
41: invokespecial #36
44: ldc           #37
46: invokevirtual #38
49: iload_2
50: invokevirtual #78
53: ldc           #40
55: invokevirtual #38
58: bipush        119
60: invokevirtual #78
63: ldc           #37
65: invokevirtual #38
68: invokevirtual #41
71: iload_2
72: bipush        119
74: if_icmpne     81
77: iconst_1
78: goto          82
81: iconst_0
82: invokestatic  #42
85: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test029
Start line: 422
End line: 427
Method source code: 
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("10");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "10" + "'", str1, "10");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #137
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #72
26: invokestatic  #64
29: astore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: aload_1
43: invokevirtual #38
46: ldc           #138
48: invokevirtual #38
51: invokevirtual #41
54: aload_1
55: ldc           #72
57: invokestatic  #66
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test030
Start line: 430
End line: 440
Method source code: 
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("millis");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: millis");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #139
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #80
26: invokestatic  #51
29: istore_1
30: ldc           #140
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test031
Start line: 443
End line: 472
Method source code: 
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder5.setStandardOffset(3465);
        java.io.DataOutput dataOutput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeZoneBuilder27.writeTo("PT0.100S", dataOutput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder25);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #141
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: aload_1
29: getfield      #142
32: istore_2
33: new           #143
36: dup
37: invokespecial #144
40: astore_3
41: aload_3
42: getfield      #136
45: istore        4
47: aload_3
48: getfield      #145
51: istore        5
53: new           #146
56: dup
57: invokespecial #147
60: astore        6
62: aload         6
64: bipush        35
66: invokevirtual #148
69: astore        7
71: aload_3
72: aload         6
74: ldc           #92
76: iconst_1
77: bipush        10
79: iconst_m1
80: invokevirtual #149
83: aload_1
84: aload         6
86: bipush        52
88: invokevirtual #150
91: aload         6
93: ldc           #151
95: iconst_3
96: bipush        32
98: bipush        8
100: bipush        97
102: bipush        -71
104: bipush        70
106: ldc           #152
108: iconst_0
109: iconst_0
110: invokevirtual #153
113: astore        8
115: aload         6
117: sipush        3465
120: invokevirtual #148
123: astore        9
125: aconst_null
126: astore        10
128: aload         9
130: ldc           #154
132: aload         10
134: invokevirtual #155
137: ldc           #47
139: invokestatic  #11
142: goto          147
145: astore        11
147: aload_1
148: invokestatic  #34
151: new           #35
154: dup
155: invokespecial #36
158: ldc           #37
160: invokevirtual #38
163: iload_2
164: invokevirtual #39
167: ldc           #40
169: invokevirtual #38
172: iconst_0
173: invokevirtual #39
176: ldc           #37
178: invokevirtual #38
181: invokevirtual #41
184: iload_2
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #42
196: new           #35
199: dup
200: invokespecial #36
203: ldc           #37
205: invokevirtual #38
208: iload         4
210: invokevirtual #78
213: ldc           #40
215: invokevirtual #38
218: bipush        119
220: invokevirtual #78
223: ldc           #37
225: invokevirtual #38
228: invokevirtual #41
231: iload         4
233: bipush        119
235: if_icmpne     242
238: iconst_1
239: goto          243
242: iconst_0
243: invokestatic  #42
246: new           #35
249: dup
250: invokespecial #36
253: ldc           #37
255: invokevirtual #38
258: iload         5
260: invokevirtual #84
263: ldc           #40
265: invokevirtual #38
268: iconst_0
269: invokevirtual #84
272: ldc           #37
274: invokevirtual #38
277: invokevirtual #41
280: iload         5
282: ifne          289
285: iconst_1
286: goto          290
289: iconst_0
290: invokestatic  #42
293: aload         7
295: invokestatic  #34
298: aload         8
300: invokestatic  #34
303: aload         9
305: invokestatic  #34
308: return
Exception table:
from    to  target type
128   142   145   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test032
Start line: 475
End line: 485
Method source code: 
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("PM", (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"pm\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #156
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #157
26: bipush        35
28: invokestatic  #15
31: istore_1
32: ldc           #158
34: invokestatic  #11
37: goto          41
40: astore_1
41: return
Exception table:
from    to  target type
24    37    40   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test033
Start line: 488
End line: 493
Method source code: 
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("DateTimeField[year]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DateTimeField[year]" + "'", str1, "DateTimeField[year]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #159
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #160
26: invokestatic  #64
29: astore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: aload_1
43: invokevirtual #38
46: ldc           #161
48: invokevirtual #38
51: invokevirtual #41
54: aload_1
55: ldc           #160
57: invokestatic  #66
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test034
Start line: 496
End line: 501
Method source code: 
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("0");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #162
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #163
26: invokestatic  #51
29: istore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: iload_1
43: invokevirtual #84
46: ldc           #40
48: invokevirtual #38
51: iconst_0
52: invokevirtual #84
55: ldc           #37
57: invokevirtual #38
60: invokevirtual #41
63: iload_1
64: ifne          71
67: iconst_1
68: goto          72
71: iconst_0
72: invokestatic  #42
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test035
Start line: 504
End line: 530
Method source code: 
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder25.addCutover(70, 'a', 4, 0, 3, true, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: a");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #164
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: aload_1
29: getfield      #142
32: istore_2
33: new           #143
36: dup
37: invokespecial #144
40: astore_3
41: aload_3
42: getfield      #136
45: istore        4
47: aload_3
48: getfield      #145
51: istore        5
53: new           #146
56: dup
57: invokespecial #147
60: astore        6
62: aload         6
64: bipush        35
66: invokevirtual #148
69: astore        7
71: aload_3
72: aload         6
74: ldc           #92
76: iconst_1
77: bipush        10
79: iconst_m1
80: invokevirtual #149
83: aload_1
84: aload         6
86: bipush        52
88: invokevirtual #150
91: aload         6
93: ldc           #151
95: iconst_3
96: bipush        32
98: bipush        8
100: bipush        97
102: bipush        -71
104: bipush        70
106: ldc           #152
108: iconst_0
109: iconst_0
110: invokevirtual #153
113: astore        8
115: aload         8
117: bipush        70
119: bipush        97
121: iconst_4
122: iconst_0
123: iconst_3
124: iconst_1
125: bipush        99
127: invokevirtual #165
130: astore        9
132: ldc           #166
134: invokestatic  #11
137: goto          142
140: astore        9
142: aload_1
143: invokestatic  #34
146: new           #35
149: dup
150: invokespecial #36
153: ldc           #37
155: invokevirtual #38
158: iload_2
159: invokevirtual #39
162: ldc           #40
164: invokevirtual #38
167: iconst_0
168: invokevirtual #39
171: ldc           #37
173: invokevirtual #38
176: invokevirtual #41
179: iload_2
180: ifne          187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #42
191: new           #35
194: dup
195: invokespecial #36
198: ldc           #37
200: invokevirtual #38
203: iload         4
205: invokevirtual #78
208: ldc           #40
210: invokevirtual #38
213: bipush        119
215: invokevirtual #78
218: ldc           #37
220: invokevirtual #38
223: invokevirtual #41
226: iload         4
228: bipush        119
230: if_icmpne     237
233: iconst_1
234: goto          238
237: iconst_0
238: invokestatic  #42
241: new           #35
244: dup
245: invokespecial #36
248: ldc           #37
250: invokevirtual #38
253: iload         5
255: invokevirtual #84
258: ldc           #40
260: invokevirtual #38
263: iconst_0
264: invokevirtual #84
267: ldc           #37
269: invokevirtual #38
272: invokevirtual #41
275: iload         5
277: ifne          284
280: iconst_1
281: goto          285
284: iconst_0
285: invokestatic  #42
288: aload         7
290: invokestatic  #34
293: aload         8
295: invokestatic  #34
298: return
Exception table:
from    to  target type
115   137   140   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test036
Start line: 533
End line: 538
Method source code: 
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('4');
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #167
19: aastore
20: invokevirtual #7
23: pop
24: bipush        52
26: invokestatic  #77
29: istore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: iload_1
43: invokevirtual #78
46: ldc           #40
48: invokevirtual #38
51: bipush        119
53: invokevirtual #78
56: ldc           #37
58: invokevirtual #38
61: invokevirtual #41
64: iload_1
65: bipush        119
67: if_icmpne     74
70: iconst_1
71: goto          75
74: iconst_0
75: invokestatic  #42
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test037
Start line: 541
End line: 551
Method source code: 
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("centuries");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: centuries");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #168
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #169
26: invokestatic  #51
29: istore_1
30: ldc           #170
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test038
Start line: 554
End line: 565
Method source code: 
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3);
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3);
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #171
19: aastore
20: invokevirtual #7
23: pop
24: new           #44
27: dup
28: invokespecial #45
31: astore_1
32: aconst_null
33: astore_2
34: iconst_0
35: anewarray     #95
38: astore_3
39: aload_1
40: aload_2
41: aload_3
42: invokevirtual #96
45: astore        4
47: aload         4
49: invokestatic  #172
52: aload         4
54: invokestatic  #172
57: aload_3
58: invokestatic  #34
61: aload         4
63: invokestatic  #34
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test039
Start line: 568
End line: 597
Method source code: 
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        java.io.DataOutputStream dataOutputStream0 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file2 = null;
        java.io.File[] fileArray3 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3);
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap4);
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear6 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char7 = dateTimeOfYear6.iZoneChar;
        int int8 = dateTimeOfYear6.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder11 = dateTimeZoneBuilder9.setStandardOffset(0);
        dateTimeOfYear6.addCutover(dateTimeZoneBuilder11, (int) (short) 0);
        boolean boolean14 = org.joda.time.field.FieldUtils.equals((java.lang.Object) strMap4, (java.lang.Object) dateTimeOfYear6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + 'w' + "'", char7 == 'w');
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #173
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #44
29: dup
30: invokespecial #45
33: astore_2
34: aconst_null
35: astore_3
36: iconst_0
37: anewarray     #95
40: astore        4
42: aload_2
43: aload_3
44: aload         4
46: invokevirtual #96
49: astore        5
51: aload         5
53: invokestatic  #172
56: new           #143
59: dup
60: invokespecial #144
63: astore        6
65: aload         6
67: getfield      #136
70: istore        7
72: aload         6
74: getfield      #145
77: istore        8
79: new           #146
82: dup
83: invokespecial #147
86: astore        9
88: aload         9
90: iconst_0
91: invokevirtual #148
94: astore        10
96: aload         6
98: aload         10
100: iconst_0
101: invokevirtual #150
104: aload         5
106: aload         6
108: invokestatic  #174
111: istore        11
113: aload_1
114: aload         5
116: invokestatic  #70
119: ldc           #47
121: invokestatic  #11
124: goto          129
127: astore        12
129: aload         4
131: invokestatic  #34
134: aload         5
136: invokestatic  #34
139: new           #35
142: dup
143: invokespecial #36
146: ldc           #37
148: invokevirtual #38
151: iload         7
153: invokevirtual #78
156: ldc           #40
158: invokevirtual #38
161: bipush        119
163: invokevirtual #78
166: ldc           #37
168: invokevirtual #38
171: invokevirtual #41
174: iload         7
176: bipush        119
178: if_icmpne     185
181: iconst_1
182: goto          186
185: iconst_0
186: invokestatic  #42
189: new           #35
192: dup
193: invokespecial #36
196: ldc           #37
198: invokevirtual #38
201: iload         8
203: invokevirtual #84
206: ldc           #40
208: invokevirtual #38
211: iconst_0
212: invokevirtual #84
215: ldc           #37
217: invokevirtual #38
220: invokevirtual #41
223: iload         8
225: ifne          232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #42
236: aload         10
238: invokestatic  #34
241: new           #35
244: dup
245: invokespecial #36
248: ldc           #37
250: invokevirtual #38
253: iload         11
255: invokevirtual #39
258: ldc           #40
260: invokevirtual #38
263: iconst_0
264: invokevirtual #39
267: ldc           #37
269: invokevirtual #38
272: invokevirtual #41
275: iload         11
277: ifne          284
280: iconst_1
281: goto          285
284: iconst_0
285: invokestatic  #42
288: return
Exception table:
from    to  target type
113   124   127   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test040
Start line: 600
End line: 624
Method source code: 
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("97", (int) '4', (int) ' ', (int) '#', 'a', (int) '#', 2836, 2024, true, (-42));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: a");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #175
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: aload_1
29: getfield      #142
32: istore_2
33: new           #143
36: dup
37: invokespecial #144
40: astore_3
41: aload_3
42: getfield      #136
45: istore        4
47: aload_3
48: getfield      #145
51: istore        5
53: new           #146
56: dup
57: invokespecial #147
60: astore        6
62: aload         6
64: bipush        35
66: invokevirtual #148
69: astore        7
71: aload_3
72: aload         6
74: ldc           #92
76: iconst_1
77: bipush        10
79: iconst_m1
80: invokevirtual #149
83: aload_1
84: aload         6
86: bipush        52
88: invokevirtual #150
91: aload         6
93: ldc           #176
95: bipush        52
97: bipush        32
99: bipush        35
101: bipush        97
103: bipush        35
105: sipush        2836
108: sipush        2024
111: iconst_1
112: bipush        -42
114: invokevirtual #153
117: astore        8
119: ldc           #166
121: invokestatic  #11
124: goto          129
127: astore        8
129: aload_1
130: invokestatic  #34
133: new           #35
136: dup
137: invokespecial #36
140: ldc           #37
142: invokevirtual #38
145: iload_2
146: invokevirtual #39
149: ldc           #40
151: invokevirtual #38
154: iconst_0
155: invokevirtual #39
158: ldc           #37
160: invokevirtual #38
163: invokevirtual #41
166: iload_2
167: ifne          174
170: iconst_1
171: goto          175
174: iconst_0
175: invokestatic  #42
178: new           #35
181: dup
182: invokespecial #36
185: ldc           #37
187: invokevirtual #38
190: iload         4
192: invokevirtual #78
195: ldc           #40
197: invokevirtual #38
200: bipush        119
202: invokevirtual #78
205: ldc           #37
207: invokevirtual #38
210: invokevirtual #41
213: iload         4
215: bipush        119
217: if_icmpne     224
220: iconst_1
221: goto          225
224: iconst_0
225: invokestatic  #42
228: new           #35
231: dup
232: invokespecial #36
235: ldc           #37
237: invokevirtual #38
240: iload         5
242: invokevirtual #84
245: ldc           #40
247: invokevirtual #38
250: iconst_0
251: invokevirtual #84
254: ldc           #37
256: invokevirtual #38
259: invokevirtual #41
262: iload         5
264: ifne          271
267: iconst_1
268: goto          272
271: iconst_0
272: invokestatic  #42
275: aload         7
277: invokestatic  #34
280: return
Exception table:
from    to  target type
91   124   127   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test041
Start line: 627
End line: 644
Method source code: 
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        int int5 = cachedDateTimeZone3.getOffset(10L);
        java.lang.String str7 = cachedDateTimeZone3.getNameKey((long) 71);
        int int9 = cachedDateTimeZone3.getStandardOffset((long) (-292275054));
        int int11 = cachedDateTimeZone3.getStandardOffset(315569520000L);
        boolean boolean12 = org.joda.time.tz.ZoneInfoCompiler.test("1970-01-01T00:00:03.654Z/1970-01-01T00:00:03.654Z", (org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #177
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: invokestatic  #24
28: astore_1
29: aload_1
30: invokestatic  #178
33: astore_2
34: aload_2
35: ldc2_w        #110
38: invokevirtual #179
41: istore_3
42: aload_2
43: ldc2_w        #180
46: invokevirtual #182
49: astore        4
51: aload_2
52: ldc2_w        #183
55: invokevirtual #185
58: istore        5
60: aload_2
61: ldc2_w        #186
64: invokevirtual #185
67: istore        6
69: ldc           #188
71: aload_2
72: invokestatic  #125
75: istore        7
77: aload_1
78: invokestatic  #34
81: aload_2
82: invokestatic  #34
85: new           #35
88: dup
89: invokespecial #36
92: ldc           #37
94: invokevirtual #38
97: iload_3
98: invokevirtual #84
101: ldc           #40
103: invokevirtual #38
106: iconst_0
107: invokevirtual #84
110: ldc           #37
112: invokevirtual #38
115: invokevirtual #41
118: iload_3
119: ifne          126
122: iconst_1
123: goto          127
126: iconst_0
127: invokestatic  #42
130: new           #35
133: dup
134: invokespecial #36
137: ldc           #37
139: invokevirtual #38
142: aload         4
144: invokevirtual #38
147: ldc           #189
149: invokevirtual #38
152: invokevirtual #41
155: aload         4
157: ldc           #92
159: invokestatic  #66
162: new           #35
165: dup
166: invokespecial #36
169: ldc           #37
171: invokevirtual #38
174: iload         5
176: invokevirtual #84
179: ldc           #40
181: invokevirtual #38
184: iconst_0
185: invokevirtual #84
188: ldc           #37
190: invokevirtual #38
193: invokevirtual #41
196: iload         5
198: ifne          205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #42
209: new           #35
212: dup
213: invokespecial #36
216: ldc           #37
218: invokevirtual #38
221: iload         6
223: invokevirtual #84
226: ldc           #40
228: invokevirtual #38
231: iconst_0
232: invokevirtual #84
235: ldc           #37
237: invokevirtual #38
240: invokevirtual #41
243: iload         6
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #42
256: new           #35
259: dup
260: invokespecial #36
263: ldc           #37
265: invokevirtual #38
268: iload         7
270: invokevirtual #39
273: ldc           #40
275: invokevirtual #38
278: iconst_1
279: invokevirtual #39
282: ldc           #37
284: invokevirtual #38
287: invokevirtual #41
290: iload         7
292: iconst_1
293: if_icmpne     300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #42
304: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test042
Start line: 647
End line: 657
Method source code: 
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("24");
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"24\": Value 24 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #190
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #191
26: invokestatic  #51
29: istore_1
30: goto          34
33: astore_1
34: return
Exception table:
from    to  target type
24    30    33   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test043
Start line: 660
End line: 670
Method source code: 
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("2024-05-15T11:04:14.045Z/2024-05-15T11:04:14.045Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2024-05-15T11:04:14.045Z/2024-05-15T11:04:14.045Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #192
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #193
26: invokestatic  #9
29: istore_1
30: ldc           #194
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test044
Start line: 673
End line: 696
Method source code: 
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3);
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear5 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char6 = dateTimeOfYear5.iZoneChar;
        int int7 = dateTimeOfYear5.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder8 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder10 = dateTimeZoneBuilder8.setStandardOffset(0);
        dateTimeOfYear5.addCutover(dateTimeZoneBuilder10, (int) (short) 0);
        boolean boolean13 = org.joda.time.field.FieldUtils.equals((java.lang.Object) strMap3, (java.lang.Object) dateTimeOfYear5);
        int int14 = dateTimeOfYear5.iDayOfWeek;
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'w' + "'", char6 == 'w');
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #195
19: aastore
20: invokevirtual #7
23: pop
24: new           #44
27: dup
28: invokespecial #45
31: astore_1
32: aconst_null
33: astore_2
34: iconst_0
35: anewarray     #95
38: astore_3
39: aload_1
40: aload_2
41: aload_3
42: invokevirtual #96
45: astore        4
47: aload         4
49: invokestatic  #172
52: new           #143
55: dup
56: invokespecial #144
59: astore        5
61: aload         5
63: getfield      #136
66: istore        6
68: aload         5
70: getfield      #145
73: istore        7
75: new           #146
78: dup
79: invokespecial #147
82: astore        8
84: aload         8
86: iconst_0
87: invokevirtual #148
90: astore        9
92: aload         5
94: aload         9
96: iconst_0
97: invokevirtual #150
100: aload         4
102: aload         5
104: invokestatic  #174
107: istore        10
109: aload         5
111: getfield      #196
114: istore        11
116: aload_3
117: invokestatic  #34
120: aload         4
122: invokestatic  #34
125: new           #35
128: dup
129: invokespecial #36
132: ldc           #37
134: invokevirtual #38
137: iload         6
139: invokevirtual #78
142: ldc           #40
144: invokevirtual #38
147: bipush        119
149: invokevirtual #78
152: ldc           #37
154: invokevirtual #38
157: invokevirtual #41
160: iload         6
162: bipush        119
164: if_icmpne     171
167: iconst_1
168: goto          172
171: iconst_0
172: invokestatic  #42
175: new           #35
178: dup
179: invokespecial #36
182: ldc           #37
184: invokevirtual #38
187: iload         7
189: invokevirtual #84
192: ldc           #40
194: invokevirtual #38
197: iconst_0
198: invokevirtual #84
201: ldc           #37
203: invokevirtual #38
206: invokevirtual #41
209: iload         7
211: ifne          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #42
222: aload         9
224: invokestatic  #34
227: new           #35
230: dup
231: invokespecial #36
234: ldc           #37
236: invokevirtual #38
239: iload         10
241: invokevirtual #39
244: ldc           #40
246: invokevirtual #38
249: iconst_0
250: invokevirtual #39
253: ldc           #37
255: invokevirtual #38
258: invokevirtual #41
261: iload         10
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #42
274: new           #35
277: dup
278: invokespecial #36
281: ldc           #37
283: invokevirtual #38
286: iload         11
288: invokevirtual #84
291: ldc           #40
293: invokevirtual #38
296: iconst_0
297: invokevirtual #84
300: ldc           #37
302: invokevirtual #38
305: invokevirtual #41
308: iload         11
310: ifne          317
313: iconst_1
314: goto          318
317: iconst_0
318: invokestatic  #42
321: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test045
Start line: 699
End line: 709
Method source code: 
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("PT0.071S", 69);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"pt0.071s\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #197
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #198
26: bipush        69
28: invokestatic  #15
31: istore_1
32: ldc           #199
34: invokestatic  #11
37: goto          41
40: astore_1
41: return
Exception table:
from    to  target type
24    37    40   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test046
Start line: 712
End line: 717
Method source code: 
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("PeriodType[YearMonthDayTime]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PeriodType[YearMonthDayTime]" + "'", str1, "PeriodType[YearMonthDayTime]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #200
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #201
26: invokestatic  #64
29: astore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: aload_1
43: invokevirtual #38
46: ldc           #202
48: invokevirtual #38
51: invokevirtual #41
54: aload_1
55: ldc           #201
57: invokestatic  #66
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test047
Start line: 720
End line: 773
Method source code: 
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long42 = zonedChronology19.getDateTimeMillis(0, 25, (int) (byte) -1, (-3464), 99, (int) '#', 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3464 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #203
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: aload_1
29: getfield      #142
32: istore_2
33: new           #143
36: dup
37: invokespecial #144
40: astore_3
41: aload_3
42: getfield      #136
45: istore        4
47: aload_3
48: getfield      #145
51: istore        5
53: new           #146
56: dup
57: invokespecial #147
60: astore        6
62: aload         6
64: bipush        35
66: invokevirtual #148
69: astore        7
71: aload_3
72: aload         6
74: ldc           #92
76: iconst_1
77: bipush        10
79: iconst_m1
80: invokevirtual #149
83: aload_1
84: aload         6
86: bipush        52
88: invokevirtual #150
91: aconst_null
92: astore        8
94: aload         8
96: invokestatic  #23
99: astore        9
101: iconst_0
102: invokestatic  #24
105: astore        10
107: aload         9
109: aload         10
111: invokestatic  #25
114: astore        11
116: new           #26
119: dup
120: ldc2_w        #108
123: ldc2_w        #110
126: invokespecial #112
129: astore        12
131: aload         11
133: aload         12
135: ldc2_w        #113
138: lconst_1
139: invokevirtual #115
142: astore        13
144: aload         11
146: invokevirtual #116
149: astore        14
151: aload         11
153: invokevirtual #117
156: astore        15
158: aload         11
160: invokestatic  #118
163: astore        16
165: aload         11
167: invokevirtual #204
170: astore        17
172: aload         11
174: invokevirtual #205
177: astore        18
179: aload         11
181: invokevirtual #206
184: astore        19
186: aload         11
188: invokevirtual #207
191: astore        20
193: aload_1
194: aload         11
196: invokestatic  #174
199: istore        21
201: aload         11
203: invokevirtual #208
206: astore        22
208: aload         11
210: iconst_0
211: bipush        25
213: iconst_m1
214: sipush        -3464
217: bipush        99
219: bipush        35
221: bipush        35
223: invokevirtual #209
226: lstore        23
228: ldc           #210
230: invokestatic  #11
233: goto          238
236: astore        23
238: aload_1
239: invokestatic  #34
242: new           #35
245: dup
246: invokespecial #36
249: ldc           #37
251: invokevirtual #38
254: iload_2
255: invokevirtual #39
258: ldc           #40
260: invokevirtual #38
263: iconst_0
264: invokevirtual #39
267: ldc           #37
269: invokevirtual #38
272: invokevirtual #41
275: iload_2
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #42
287: new           #35
290: dup
291: invokespecial #36
294: ldc           #37
296: invokevirtual #38
299: iload         4
301: invokevirtual #78
304: ldc           #40
306: invokevirtual #38
309: bipush        119
311: invokevirtual #78
314: ldc           #37
316: invokevirtual #38
319: invokevirtual #41
322: iload         4
324: bipush        119
326: if_icmpne     333
329: iconst_1
330: goto          334
333: iconst_0
334: invokestatic  #42
337: new           #35
340: dup
341: invokespecial #36
344: ldc           #37
346: invokevirtual #38
349: iload         5
351: invokevirtual #84
354: ldc           #40
356: invokevirtual #38
359: iconst_0
360: invokevirtual #84
363: ldc           #37
365: invokevirtual #38
368: invokevirtual #41
371: iload         5
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #42
384: aload         7
386: invokestatic  #34
389: aload         9
391: invokestatic  #34
394: aload         10
396: invokestatic  #34
399: aload         11
401: invokestatic  #34
404: aload         13
406: invokestatic  #34
409: aload         13
411: invokestatic  #126
414: ldc           #127
416: invokestatic  #128
419: new           #35
422: dup
423: invokespecial #36
426: ldc           #37
428: invokevirtual #38
431: aload         14
433: invokevirtual #38
436: ldc           #129
438: invokevirtual #38
441: invokevirtual #41
444: aload         14
446: ldc           #130
448: invokestatic  #66
451: aload         15
453: invokestatic  #34
456: aload         16
458: invokestatic  #34
461: aload         17
463: invokestatic  #34
466: aload         18
468: invokestatic  #34
471: aload         19
473: invokestatic  #34
476: aload         20
478: invokestatic  #34
481: new           #35
484: dup
485: invokespecial #36
488: ldc           #37
490: invokevirtual #38
493: iload         21
495: invokevirtual #39
498: ldc           #40
500: invokevirtual #38
503: iconst_0
504: invokevirtual #39
507: ldc           #37
509: invokevirtual #38
512: invokevirtual #41
515: iload         21
517: ifne          524
520: iconst_1
521: goto          525
524: iconst_0
525: invokestatic  #42
528: aload         22
530: invokestatic  #34
533: return
Exception table:
from    to  target type
208   233   236   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test048
Start line: 776
End line: 781
Method source code: 
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("1");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1" + "'", str1, "1");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #211
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #212
26: invokestatic  #64
29: astore_1
30: new           #35
33: dup
34: invokespecial #36
37: ldc           #37
39: invokevirtual #38
42: aload_1
43: invokevirtual #38
46: ldc           #213
48: invokevirtual #38
51: invokevirtual #41
54: aload_1
55: ldc           #212
57: invokestatic  #66
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test049
Start line: 784
End line: 794
Method source code: 
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("2024-05-15T11:04:13.339Z/2024-05-15T11:04:13.339Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2024-05-15T11:04:13.339Z/2024-05-15T11:04:13.339Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #214
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #215
26: invokestatic  #9
29: istore_1
30: ldc           #216
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test050
Start line: 797
End line: 807
Method source code: 
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: yearOfCentury");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #217
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #218
26: invokestatic  #51
29: istore_1
30: ldc           #219
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test051
Start line: 810
End line: 841
Method source code: 
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean3 = dateTimeOfYear2.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char5 = dateTimeOfYear4.iZoneChar;
        int int6 = dateTimeOfYear4.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = dateTimeZoneBuilder7.setStandardOffset((int) '#');
        dateTimeOfYear4.addRecurring(dateTimeZoneBuilder7, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear2.addCutover(dateTimeZoneBuilder7, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder7.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, 25);
        java.io.OutputStream outputStream31 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeZoneBuilder7.writeTo("69", outputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
        org.junit.Assert.assertNotNull(dateTimeOfYear2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'w' + "'", char5 == 'w');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder9);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #220
19: aastore
20: invokevirtual #7
23: pop
24: new           #143
27: dup
28: invokespecial #144
31: astore_1
32: aload_1
33: getfield      #136
36: istore_2
37: invokestatic  #19
40: astore_3
41: aload_3
42: getfield      #142
45: istore        4
47: new           #143
50: dup
51: invokespecial #144
54: astore        5
56: aload         5
58: getfield      #136
61: istore        6
63: aload         5
65: getfield      #145
68: istore        7
70: new           #146
73: dup
74: invokespecial #147
77: astore        8
79: aload         8
81: bipush        35
83: invokevirtual #148
86: astore        9
88: aload         5
90: aload         8
92: ldc           #92
94: iconst_1
95: bipush        10
97: iconst_m1
98: invokevirtual #149
101: aload_3
102: aload         8
104: bipush        52
106: invokevirtual #150
109: aload         8
111: ldc           #151
113: iconst_3
114: bipush        32
116: bipush        8
118: bipush        97
120: bipush        -71
122: bipush        70
124: ldc           #152
126: iconst_0
127: iconst_0
128: invokevirtual #153
131: astore        10
133: aload_1
134: aload         8
136: bipush        25
138: invokevirtual #150
141: aconst_null
142: astore        11
144: aload         8
146: ldc           #221
148: aload         11
150: invokevirtual #222
153: ldc           #47
155: invokestatic  #11
158: goto          163
161: astore        12
163: new           #35
166: dup
167: invokespecial #36
170: ldc           #37
172: invokevirtual #38
175: iload_2
176: invokevirtual #78
179: ldc           #40
181: invokevirtual #38
184: bipush        119
186: invokevirtual #78
189: ldc           #37
191: invokevirtual #38
194: invokevirtual #41
197: iload_2
198: bipush        119
200: if_icmpne     207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #42
211: aload_3
212: invokestatic  #34
215: new           #35
218: dup
219: invokespecial #36
222: ldc           #37
224: invokevirtual #38
227: iload         4
229: invokevirtual #39
232: ldc           #40
234: invokevirtual #38
237: iconst_0
238: invokevirtual #39
241: ldc           #37
243: invokevirtual #38
246: invokevirtual #41
249: iload         4
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #42
262: new           #35
265: dup
266: invokespecial #36
269: ldc           #37
271: invokevirtual #38
274: iload         6
276: invokevirtual #78
279: ldc           #40
281: invokevirtual #38
284: bipush        119
286: invokevirtual #78
289: ldc           #37
291: invokevirtual #38
294: invokevirtual #41
297: iload         6
299: bipush        119
301: if_icmpne     308
304: iconst_1
305: goto          309
308: iconst_0
309: invokestatic  #42
312: new           #35
315: dup
316: invokespecial #36
319: ldc           #37
321: invokevirtual #38
324: iload         7
326: invokevirtual #84
329: ldc           #40
331: invokevirtual #38
334: iconst_0
335: invokevirtual #84
338: ldc           #37
340: invokevirtual #38
343: invokevirtual #41
346: iload         7
348: ifne          355
351: iconst_1
352: goto          356
355: iconst_0
356: invokestatic  #42
359: aload         9
361: invokestatic  #34
364: aload         10
366: invokestatic  #34
369: return
Exception table:
from    to  target type
144   158   161   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test052
Start line: 844
End line: 854
Method source code: 
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #223
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #14
26: invokestatic  #9
29: istore_1
30: ldc           #224
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test053
Start line: 857
End line: 867
Method source code: 
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("+00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #225
19: aastore
20: invokevirtual #7
23: pop
24: ldc           #226
26: invokestatic  #57
29: istore_1
30: ldc           #227
32: invokestatic  #11
35: goto          39
38: astore_1
39: return
Exception table:
from    to  target type
24    35    38   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test054
Start line: 870
End line: 934
Method source code: 
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap3);
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear5 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char6 = dateTimeOfYear5.iZoneChar;
        int int7 = dateTimeOfYear5.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder8 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder10 = dateTimeZoneBuilder8.setStandardOffset(0);
        dateTimeOfYear5.addCutover(dateTimeZoneBuilder10, (int) (short) 0);
        boolean boolean13 = org.joda.time.field.FieldUtils.equals((java.lang.Object) strMap3, (java.lang.Object) dateTimeOfYear5);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Chronology chronology15 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology18 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone17);
        org.joda.time.Period period21 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray24 = zonedChronology18.get((org.joda.time.ReadablePeriod) period21, (long) (byte) -1, (long) 1);
        java.lang.String str25 = zonedChronology18.toString();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology18.hourOfDay();
        org.joda.time.Chronology chronology27 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology18);
        org.joda.time.DurationField durationField28 = zonedChronology18.hours();
        org.joda.time.chrono.LenientChronology lenientChronology29 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology18);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology34 = org.joda.time.chrono.ZonedChronology.getInstance(chronology31, dateTimeZone33);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone35 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone33);
        org.joda.time.ReadableInstant readableInstant36 = null;
        int int37 = dateTimeZone33.getOffset(readableInstant36);
        org.joda.time.chrono.ISOChronology iSOChronology38 = org.joda.time.chrono.ISOChronology.getInstance(dateTimeZone33);
        long long41 = dateTimeZone33.adjustOffset((long) (byte) 100, true);
        org.joda.time.Chronology chronology42 = lenientChronology29.withZone(dateTimeZone33);
        org.joda.time.DurationField durationField43 = chronology42.seconds();
        boolean boolean44 = org.joda.time.field.FieldUtils.equals((java.lang.Object) boolean13, (java.lang.Object) durationField43);
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + 'w' + "'", char6 == 'w');
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(zonedChronology18);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str25, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(lenientChronology29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(zonedChronology34);
        org.junit.Assert.assertNotNull(cachedDateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(iSOChronology38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #228
19: aastore
20: invokevirtual #7
23: pop
24: new           #44
27: dup
28: invokespecial #45
31: astore_1
32: aconst_null
33: astore_2
34: iconst_0
35: anewarray     #95
38: astore_3
39: aload_1
40: aload_2
41: aload_3
42: invokevirtual #96
45: astore        4
47: aload         4
49: invokestatic  #172
52: new           #143
55: dup
56: invokespecial #144
59: astore        5
61: aload         5
63: getfield      #136
66: istore        6
68: aload         5
70: getfield      #145
73: istore        7
75: new           #146
78: dup
79: invokespecial #147
82: astore        8
84: aload         8
86: iconst_0
87: invokevirtual #148
90: astore        9
92: aload         5
94: aload         9
96: iconst_0
97: invokevirtual #150
100: aload         4
102: aload         5
104: invokestatic  #174
107: istore        10
109: aconst_null
110: astore        11
112: aload         11
114: invokestatic  #23
117: astore        12
119: iconst_0
120: invokestatic  #24
123: astore        13
125: aload         12
127: aload         13
129: invokestatic  #25
132: astore        14
134: new           #26
137: dup
138: ldc2_w        #108
141: ldc2_w        #110
144: invokespecial #112
147: astore        15
149: aload         14
151: aload         15
153: ldc2_w        #113
156: lconst_1
157: invokevirtual #115
160: astore        16
162: aload         14
164: invokevirtual #116
167: astore        17
169: aload         14
171: invokevirtual #117
174: astore        18
176: aload         14
178: invokestatic  #118
181: astore        19
183: aload         14
185: invokevirtual #119
188: astore        20
190: aload         14
192: invokestatic  #120
195: astore        21
197: aconst_null
198: astore        22
200: aload         22
202: invokestatic  #23
205: astore        23
207: iconst_0
208: invokestatic  #24
211: astore        24
213: aload         23
215: aload         24
217: invokestatic  #25
220: astore        25
222: aload         24
224: invokestatic  #178
227: astore        26
229: aconst_null
230: astore        27
232: aload         24
234: aload         27
236: invokevirtual #122
239: istore        28
241: aload         24
243: invokestatic  #229
246: astore        29
248: aload         24
250: ldc2_w        #27
253: iconst_1
254: invokevirtual #230
257: lstore        30
259: aload         21
261: aload         24
263: invokevirtual #123
266: astore        32
268: aload         32
270: invokevirtual #231
273: astore        33
275: iload         10
277: invokestatic  #232
280: aload         33
282: invokestatic  #174
285: istore        34
287: aload_3
288: invokestatic  #34
291: aload         4
293: invokestatic  #34
296: new           #35
299: dup
300: invokespecial #36
303: ldc           #37
305: invokevirtual #38
308: iload         6
310: invokevirtual #78
313: ldc           #40
315: invokevirtual #38
318: bipush        119
320: invokevirtual #78
323: ldc           #37
325: invokevirtual #38
328: invokevirtual #41
331: iload         6
333: bipush        119
335: if_icmpne     342
338: iconst_1
339: goto          343
342: iconst_0
343: invokestatic  #42
346: new           #35
349: dup
350: invokespecial #36
353: ldc           #37
355: invokevirtual #38
358: iload         7
360: invokevirtual #84
363: ldc           #40
365: invokevirtual #38
368: iconst_0
369: invokevirtual #84
372: ldc           #37
374: invokevirtual #38
377: invokevirtual #41
380: iload         7
382: ifne          389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #42
393: aload         9
395: invokestatic  #34
398: new           #35
401: dup
402: invokespecial #36
405: ldc           #37
407: invokevirtual #38
410: iload         10
412: invokevirtual #39
415: ldc           #40
417: invokevirtual #38
420: iconst_0
421: invokevirtual #39
424: ldc           #37
426: invokevirtual #38
429: invokevirtual #41
432: iload         10
434: ifne          441
437: iconst_1
438: goto          442
441: iconst_0
442: invokestatic  #42
445: aload         12
447: invokestatic  #34
450: aload         13
452: invokestatic  #34
455: aload         14
457: invokestatic  #34
460: aload         16
462: invokestatic  #34
465: aload         16
467: invokestatic  #126
470: ldc           #127
472: invokestatic  #128
475: new           #35
478: dup
479: invokespecial #36
482: ldc           #37
484: invokevirtual #38
487: aload         17
489: invokevirtual #38
492: ldc           #129
494: invokevirtual #38
497: invokevirtual #41
500: aload         17
502: ldc           #130
504: invokestatic  #66
507: aload         18
509: invokestatic  #34
512: aload         19
514: invokestatic  #34
517: aload         20
519: invokestatic  #34
522: aload         21
524: invokestatic  #34
527: aload         23
529: invokestatic  #34
532: aload         24
534: invokestatic  #34
537: aload         25
539: invokestatic  #34
542: aload         26
544: invokestatic  #34
547: new           #35
550: dup
551: invokespecial #36
554: ldc           #37
556: invokevirtual #38
559: iload         28
561: invokevirtual #84
564: ldc           #40
566: invokevirtual #38
569: iconst_0
570: invokevirtual #84
573: ldc           #37
575: invokevirtual #38
578: invokevirtual #41
581: iload         28
583: ifne          590
586: iconst_1
587: goto          591
590: iconst_0
591: invokestatic  #42
594: aload         29
596: invokestatic  #34
599: new           #35
602: dup
603: invokespecial #36
606: ldc           #37
608: invokevirtual #38
611: lload         30
613: invokevirtual #233
616: ldc           #40
618: invokevirtual #38
621: ldc2_w        #27
624: invokevirtual #233
627: ldc           #37
629: invokevirtual #38
632: invokevirtual #41
635: lload         30
637: ldc2_w        #27
640: lcmp
641: ifne          648
644: iconst_1
645: goto          649
648: iconst_0
649: invokestatic  #42
652: aload         32
654: invokestatic  #34
657: aload         33
659: invokestatic  #34
662: new           #35
665: dup
666: invokespecial #36
669: ldc           #37
671: invokevirtual #38
674: iload         34
676: invokevirtual #39
679: ldc           #40
681: invokevirtual #38
684: iconst_0
685: invokevirtual #39
688: ldc           #37
690: invokevirtual #38
693: invokevirtual #41
696: iload         34
698: ifne          705
701: iconst_1
702: goto          706
705: iconst_0
706: invokestatic  #42
709: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test055
Start line: 937
End line: 962
Method source code: 
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        java.io.OutputStream outputStream16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeZoneBuilder5.writeTo("", outputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #234
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: aload_1
29: getfield      #142
32: istore_2
33: new           #143
36: dup
37: invokespecial #144
40: astore_3
41: aload_3
42: getfield      #136
45: istore        4
47: aload_3
48: getfield      #145
51: istore        5
53: new           #146
56: dup
57: invokespecial #147
60: astore        6
62: aload         6
64: bipush        35
66: invokevirtual #148
69: astore        7
71: aload_3
72: aload         6
74: ldc           #92
76: iconst_1
77: bipush        10
79: iconst_m1
80: invokevirtual #149
83: aload_1
84: aload         6
86: bipush        52
88: invokevirtual #150
91: aconst_null
92: astore        8
94: aload         6
96: ldc           #14
98: aload         8
100: invokevirtual #222
103: ldc           #47
105: invokestatic  #11
108: goto          113
111: astore        9
113: aload_1
114: invokestatic  #34
117: new           #35
120: dup
121: invokespecial #36
124: ldc           #37
126: invokevirtual #38
129: iload_2
130: invokevirtual #39
133: ldc           #40
135: invokevirtual #38
138: iconst_0
139: invokevirtual #39
142: ldc           #37
144: invokevirtual #38
147: invokevirtual #41
150: iload_2
151: ifne          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #42
162: new           #35
165: dup
166: invokespecial #36
169: ldc           #37
171: invokevirtual #38
174: iload         4
176: invokevirtual #78
179: ldc           #40
181: invokevirtual #38
184: bipush        119
186: invokevirtual #78
189: ldc           #37
191: invokevirtual #38
194: invokevirtual #41
197: iload         4
199: bipush        119
201: if_icmpne     208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #42
212: new           #35
215: dup
216: invokespecial #36
219: ldc           #37
221: invokevirtual #38
224: iload         5
226: invokevirtual #84
229: ldc           #40
231: invokevirtual #38
234: iconst_0
235: invokevirtual #84
238: ldc           #37
240: invokevirtual #38
243: invokevirtual #41
246: iload         5
248: ifne          255
251: iconst_1
252: goto          256
255: iconst_0
256: invokestatic  #42
259: aload         7
261: invokestatic  #34
264: return
Exception table:
from    to  target type
94   108   111   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test056
Start line: 965
End line: 1070
Method source code: 
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.centuryOfEra();
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology40.yearOfCentury();
        int int42 = dateTimeField41.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial43 = null;
        int int44 = dateTimeField41.getMaximumValue(readablePartial43);
        java.lang.String str45 = dateTimeField41.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField47 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField41, dateTimeFieldType46);
        org.joda.time.DurationField durationField48 = zeroIsMaxDateTimeField47.getDurationField();
        long long51 = zeroIsMaxDateTimeField47.add((long) 'w', (long) ' ');
        boolean boolean53 = zeroIsMaxDateTimeField47.isLeap((long) 1);
        org.joda.time.ReadablePartial readablePartial54 = null;
        int int55 = zeroIsMaxDateTimeField47.getMaximumValue(readablePartial54);
        org.joda.time.ReadablePartial readablePartial56 = null;
        org.joda.time.ReadableInterval readableInterval59 = null;
        org.joda.time.Chronology chronology60 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval59);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology63 = org.joda.time.chrono.ZonedChronology.getInstance(chronology60, dateTimeZone62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (short) 100, chronology60);
        org.joda.time.ReadableInterval readableInterval66 = null;
        org.joda.time.Chronology chronology67 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology70 = org.joda.time.chrono.ZonedChronology.getInstance(chronology67, dateTimeZone69);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (short) 100, chronology67);
        int[] intArray74 = chronology60.get((org.joda.time.ReadablePeriod) period71, (long) 10, (long) 1);
        int[] intArray76 = zeroIsMaxDateTimeField47.add(readablePartial56, 2024, intArray74, 0);
        // The following exception was thrown during execution in test generation
        try {
            zonedChronology19.validate(readablePartial35, intArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 99 + "'", int44 == 99);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str45, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1009843200119L + "'", long51 == 1009843200119L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 100 + "'", int55 == 100);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(zonedChronology63);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(zonedChronology70);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, -9]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, -9]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #235
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #19
27: astore_1
28: aload_1
29: getfield      #142
32: istore_2
33: new           #143
36: dup
37: invokespecial #144
40: astore_3
41: aload_3
42: getfield      #136
45: istore        4
47: aload_3
48: getfield      #145
51: istore        5
53: new           #146
56: dup
57: invokespecial #147
60: astore        6
62: aload         6
64: bipush        35
66: invokevirtual #148
69: astore        7
71: aload_3
72: aload         6
74: ldc           #92
76: iconst_1
77: bipush        10
79: iconst_m1
80: invokevirtual #149
83: aload_1
84: aload         6
86: bipush        52
88: invokevirtual #150
91: aconst_null
92: astore        8
94: aload         8
96: invokestatic  #23
99: astore        9
101: iconst_0
102: invokestatic  #24
105: astore        10
107: aload         9
109: aload         10
111: invokestatic  #25
114: astore        11
116: new           #26
119: dup
120: ldc2_w        #108
123: ldc2_w        #110
126: invokespecial #112
129: astore        12
131: aload         11
133: aload         12
135: ldc2_w        #113
138: lconst_1
139: invokevirtual #115
142: astore        13
144: aload         11
146: invokevirtual #116
149: astore        14
151: aload         11
153: invokevirtual #117
156: astore        15
158: aload         11
160: invokestatic  #118
163: astore        16
165: aload         11
167: invokevirtual #204
170: astore        17
172: aload         11
174: invokevirtual #205
177: astore        18
179: aload         11
181: invokevirtual #206
184: astore        19
186: aload         11
188: invokevirtual #207
191: astore        20
193: aload_1
194: aload         11
196: invokestatic  #174
199: istore        21
201: aload         11
203: invokevirtual #236
206: astore        22
208: aconst_null
209: astore        23
211: aconst_null
212: astore        24
214: aload         24
216: invokestatic  #23
219: astore        25
221: iconst_0
222: invokestatic  #24
225: astore        26
227: aload         25
229: aload         26
231: invokestatic  #25
234: astore        27
236: aload         27
238: invokevirtual #204
241: astore        28
243: aload         28
245: invokevirtual #237
248: istore        29
250: aconst_null
251: astore        30
253: aload         28
255: aload         30
257: invokevirtual #238
260: istore        31
262: aload         28
264: invokevirtual #239
267: astore        32
269: invokestatic  #240
272: astore        33
274: new           #241
277: dup
278: aload         28
280: aload         33
282: invokespecial #242
285: astore        34
287: aload         34
289: invokevirtual #243
292: astore        35
294: aload         34
296: ldc2_w        #244
299: ldc2_w        #246
302: invokevirtual #248
305: lstore        36
307: aload         34
309: lconst_1
310: invokevirtual #249
313: istore        38
315: aconst_null
316: astore        39
318: aload         34
320: aload         39
322: invokevirtual #250
325: istore        40
327: aconst_null
328: astore        41
330: aconst_null
331: astore        42
333: aload         42
335: invokestatic  #23
338: astore        43
340: iconst_0
341: invokestatic  #24
344: astore        44
346: aload         43
348: aload         44
350: invokestatic  #25
353: astore        45
355: new           #26
358: dup
359: ldc2_w        #27
362: aload         43
364: invokespecial #29
367: astore        46
369: aconst_null
370: astore        47
372: aload         47
374: invokestatic  #23
377: astore        48
379: iconst_0
380: invokestatic  #24
383: astore        49
385: aload         48
387: aload         49
389: invokestatic  #25
392: astore        50
394: new           #26
397: dup
398: ldc2_w        #27
401: aload         48
403: invokespecial #29
406: astore        51
408: aload         43
410: aload         51
412: ldc2_w        #110
415: lconst_1
416: invokevirtual #251
419: astore        52
421: aload         34
423: aload         41
425: sipush        2024
428: aload         52
430: iconst_0
431: invokevirtual #252
434: astore        53
436: aload         11
438: aload         23
440: aload         52
442: invokevirtual #253
445: ldc           #47
447: invokestatic  #11
450: goto          455
453: astore        54
455: aload_1
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload_2
472: invokevirtual #39
475: ldc           #40
477: invokevirtual #38
480: iconst_0
481: invokevirtual #39
484: ldc           #37
486: invokevirtual #38
489: invokevirtual #41
492: iload_2
493: ifne          500
496: iconst_1
497: goto          501
500: iconst_0
501: invokestatic  #42
504: new           #35
507: dup
508: invokespecial #36
511: ldc           #37
513: invokevirtual #38
516: iload         4
518: invokevirtual #78
521: ldc           #40
523: invokevirtual #38
526: bipush        119
528: invokevirtual #78
531: ldc           #37
533: invokevirtual #38
536: invokevirtual #41
539: iload         4
541: bipush        119
543: if_icmpne     550
546: iconst_1
547: goto          551
550: iconst_0
551: invokestatic  #42
554: new           #35
557: dup
558: invokespecial #36
561: ldc           #37
563: invokevirtual #38
566: iload         5
568: invokevirtual #84
571: ldc           #40
573: invokevirtual #38
576: iconst_0
577: invokevirtual #84
580: ldc           #37
582: invokevirtual #38
585: invokevirtual #41
588: iload         5
590: ifne          597
593: iconst_1
594: goto          598
597: iconst_0
598: invokestatic  #42
601: aload         7
603: invokestatic  #34
606: aload         9
608: invokestatic  #34
611: aload         10
613: invokestatic  #34
616: aload         11
618: invokestatic  #34
621: aload         13
623: invokestatic  #34
626: aload         13
628: invokestatic  #126
631: ldc           #127
633: invokestatic  #128
636: new           #35
639: dup
640: invokespecial #36
643: ldc           #37
645: invokevirtual #38
648: aload         14
650: invokevirtual #38
653: ldc           #129
655: invokevirtual #38
658: invokevirtual #41
661: aload         14
663: ldc           #130
665: invokestatic  #66
668: aload         15
670: invokestatic  #34
673: aload         16
675: invokestatic  #34
678: aload         17
680: invokestatic  #34
683: aload         18
685: invokestatic  #34
688: aload         19
690: invokestatic  #34
693: aload         20
695: invokestatic  #34
698: new           #35
701: dup
702: invokespecial #36
705: ldc           #37
707: invokevirtual #38
710: iload         21
712: invokevirtual #39
715: ldc           #40
717: invokevirtual #38
720: iconst_0
721: invokevirtual #39
724: ldc           #37
726: invokevirtual #38
729: invokevirtual #41
732: iload         21
734: ifne          741
737: iconst_1
738: goto          742
741: iconst_0
742: invokestatic  #42
745: aload         22
747: invokestatic  #34
750: aload         25
752: invokestatic  #34
755: aload         26
757: invokestatic  #34
760: aload         27
762: invokestatic  #34
765: aload         28
767: invokestatic  #34
770: new           #35
773: dup
774: invokespecial #36
777: ldc           #37
779: invokevirtual #38
782: iload         29
784: invokevirtual #84
787: ldc           #40
789: invokevirtual #38
792: iconst_0
793: invokevirtual #84
796: ldc           #37
798: invokevirtual #38
801: invokevirtual #41
804: iload         29
806: ifne          813
809: iconst_1
810: goto          814
813: iconst_0
814: invokestatic  #42
817: new           #35
820: dup
821: invokespecial #36
824: ldc           #37
826: invokevirtual #38
829: iload         31
831: invokevirtual #84
834: ldc           #40
836: invokevirtual #38
839: bipush        99
841: invokevirtual #84
844: ldc           #37
846: invokevirtual #38
849: invokevirtual #41
852: iload         31
854: bipush        99
856: if_icmpne     863
859: iconst_1
860: goto          864
863: iconst_0
864: invokestatic  #42
867: new           #35
870: dup
871: invokespecial #36
874: ldc           #37
876: invokevirtual #38
879: aload         32
881: invokevirtual #38
884: ldc           #254
886: invokevirtual #38
889: invokevirtual #41
892: aload         32
894: ldc           #255
896: invokestatic  #66
899: aload         33
901: invokestatic  #34
904: aload         35
906: invokestatic  #34
909: new           #35
912: dup
913: invokespecial #36
916: ldc           #37
918: invokevirtual #38
921: lload         36
923: invokevirtual #233
926: ldc           #40
928: invokevirtual #38
931: ldc2_w        #256
934: invokevirtual #233
937: ldc           #37
939: invokevirtual #38
942: invokevirtual #41
945: lload         36
947: ldc2_w        #256
950: lcmp
951: ifne          958
954: iconst_1
955: goto          959
958: iconst_0
959: invokestatic  #42
962: new           #35
965: dup
966: invokespecial #36
969: ldc           #37
971: invokevirtual #38
974: iload         38
976: invokevirtual #39
979: ldc           #40
981: invokevirtual #38
984: iconst_0
985: invokevirtual #39
988: ldc           #37
990: invokevirtual #38
993: invokevirtual #41
996: iload         38
998: ifne          1005
1001: iconst_1
1002: goto          1006
1005: iconst_0
1006: invokestatic  #42
1009: new           #35
1012: dup
1013: invokespecial #36
1016: ldc           #37
1018: invokevirtual #38
1021: iload         40
1023: invokevirtual #84
1026: ldc           #40
1028: invokevirtual #38
1031: bipush        100
1033: invokevirtual #84
1036: ldc           #37
1038: invokevirtual #38
1041: invokevirtual #41
1044: iload         40
1046: bipush        100
1048: if_icmpne     1055
1051: iconst_1
1052: goto          1056
1055: iconst_0
1056: invokestatic  #42
1059: aload         43
1061: invokestatic  #34
1064: aload         44
1066: invokestatic  #34
1069: aload         45
1071: invokestatic  #34
1074: aload         48
1076: invokestatic  #34
1079: aload         49
1081: invokestatic  #34
1084: aload         50
1086: invokestatic  #34
1089: aload         52
1091: invokestatic  #34
1094: aload         52
1096: invokestatic  #126
1099: ldc_w         #258
1102: invokestatic  #128
1105: aload         53
1107: invokestatic  #34
1110: aload         53
1112: invokestatic  #126
1115: ldc_w         #258
1118: invokestatic  #128
1121: return
Exception table:
from    to  target type
436   450   453   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test057
Start line: 1073
End line: 1099
Method source code: 
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        java.io.File file4 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler5 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file6 = null;
        java.io.File[] fileArray7 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = zoneInfoCompiler5.compile(file6, fileArray7);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler0.compile(file4, fileArray7);
        java.io.BufferedReader bufferedReader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zoneInfoCompiler0.parseDataFile(bufferedReader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(fileArray7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #259
20: aastore
21: invokevirtual #7
24: pop
25: new           #44
28: dup
29: invokespecial #45
32: astore_1
33: aconst_null
34: astore_2
35: iconst_0
36: anewarray     #95
39: astore_3
40: aload_1
41: aload_2
42: aload_3
43: invokevirtual #96
46: astore        4
48: aconst_null
49: astore        5
51: new           #44
54: dup
55: invokespecial #45
58: astore        6
60: aconst_null
61: astore        7
63: iconst_0
64: anewarray     #95
67: astore        8
69: aload         6
71: aload         7
73: aload         8
75: invokevirtual #96
78: astore        9
80: aload_1
81: aload         5
83: aload         8
85: invokevirtual #96
88: astore        10
90: aconst_null
91: astore        11
93: aload_1
94: aload         11
96: invokevirtual #46
99: ldc           #47
101: invokestatic  #11
104: goto          109
107: astore        12
109: aload_3
110: invokestatic  #34
113: aload         4
115: invokestatic  #34
118: aload         8
120: invokestatic  #34
123: aload         9
125: invokestatic  #34
128: aload         10
130: invokestatic  #34
133: return
Exception table:
from    to  target type
93   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test058
Start line: 1102
End line: 1112
Method source code: 
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("DurationField[weekyears]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: DurationField[weekyears]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #260
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #261
28: invokestatic  #51
31: istore_1
32: ldc_w         #262
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test059
Start line: 1115
End line: 1125
Method source code: 
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("", 110);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #263
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #14
27: bipush        110
29: invokestatic  #15
32: istore_1
33: ldc           #16
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test060
Start line: 1128
End line: 1155
Method source code: 
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        java.io.DataOutputStream dataOutputStream0 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file2 = null;
        java.io.File[] fileArray3 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3);
        java.io.File file5 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler6 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file7 = null;
        java.io.File[] fileArray8 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler6.compile(file7, fileArray8);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = zoneInfoCompiler1.compile(file5, fileArray8);
        org.joda.time.DateTimeUtils.setDefaultTimeZoneNames(strMap10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(fileArray8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strMap10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #264
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #44
30: dup
31: invokespecial #45
34: astore_2
35: aconst_null
36: astore_3
37: iconst_0
38: anewarray     #95
41: astore        4
43: aload_2
44: aload_3
45: aload         4
47: invokevirtual #96
50: astore        5
52: aconst_null
53: astore        6
55: new           #44
58: dup
59: invokespecial #45
62: astore        7
64: aconst_null
65: astore        8
67: iconst_0
68: anewarray     #95
71: astore        9
73: aload         7
75: aload         8
77: aload         9
79: invokevirtual #96
82: astore        10
84: aload_2
85: aload         6
87: aload         9
89: invokevirtual #96
92: astore        11
94: aload         11
96: invokestatic  #172
99: aload_1
100: aload         11
102: invokestatic  #70
105: ldc           #47
107: invokestatic  #11
110: goto          115
113: astore        12
115: aload         4
117: invokestatic  #34
120: aload         5
122: invokestatic  #34
125: aload         9
127: invokestatic  #34
130: aload         10
132: invokestatic  #34
135: aload         11
137: invokestatic  #34
140: return
Exception table:
from    to  target type
99   110   113   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test061
Start line: 1158
End line: 1168
Method source code: 
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("GregorianChronology[52]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"GregorianChronology[52]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #265
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #266
28: invokestatic  #57
31: istore_1
32: ldc_w         #267
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test062
Start line: 1171
End line: 1201
Method source code: 
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.tz.ZoneInfoCompiler.cStartOfYear = dateTimeOfYear0;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear16 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char17 = dateTimeOfYear16.iZoneChar;
        int int18 = dateTimeOfYear16.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder19 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder21 = dateTimeZoneBuilder19.setStandardOffset(0);
        dateTimeOfYear16.addCutover(dateTimeZoneBuilder21, (int) (short) 0);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder31 = dateTimeZoneBuilder21.addCutover((int) '#', 'w', 13, 6, (-2), true, 81);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder21, (int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'w' + "'", char17 == 'w');
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder21);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder31);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #268
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aload_1
93: putstatic     #269
96: new           #143
99: dup
100: invokespecial #144
103: astore        8
105: aload         8
107: getfield      #136
110: istore        9
112: aload         8
114: getfield      #145
117: istore        10
119: new           #146
122: dup
123: invokespecial #147
126: astore        11
128: aload         11
130: iconst_0
131: invokevirtual #148
134: astore        12
136: aload         8
138: aload         12
140: iconst_0
141: invokevirtual #150
144: aload         12
146: bipush        35
148: bipush        119
150: bipush        13
152: bipush        6
154: bipush        -2
156: iconst_1
157: bipush        81
159: invokevirtual #165
162: astore        13
164: aload_1
165: aload         12
167: iconst_1
168: invokevirtual #150
171: aload_1
172: invokestatic  #34
175: new           #35
178: dup
179: invokespecial #36
182: ldc           #37
184: invokevirtual #38
187: iload_2
188: invokevirtual #39
191: ldc           #40
193: invokevirtual #38
196: iconst_0
197: invokevirtual #39
200: ldc           #37
202: invokevirtual #38
205: invokevirtual #41
208: iload_2
209: ifne          216
212: iconst_1
213: goto          217
216: iconst_0
217: invokestatic  #42
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload         4
234: invokevirtual #78
237: ldc           #40
239: invokevirtual #38
242: bipush        119
244: invokevirtual #78
247: ldc           #37
249: invokevirtual #38
252: invokevirtual #41
255: iload         4
257: bipush        119
259: if_icmpne     266
262: iconst_1
263: goto          267
266: iconst_0
267: invokestatic  #42
270: new           #35
273: dup
274: invokespecial #36
277: ldc           #37
279: invokevirtual #38
282: iload         5
284: invokevirtual #84
287: ldc           #40
289: invokevirtual #38
292: iconst_0
293: invokevirtual #84
296: ldc           #37
298: invokevirtual #38
301: invokevirtual #41
304: iload         5
306: ifne          313
309: iconst_1
310: goto          314
313: iconst_0
314: invokestatic  #42
317: aload         7
319: invokestatic  #34
322: new           #35
325: dup
326: invokespecial #36
329: ldc           #37
331: invokevirtual #38
334: iload         9
336: invokevirtual #78
339: ldc           #40
341: invokevirtual #38
344: bipush        119
346: invokevirtual #78
349: ldc           #37
351: invokevirtual #38
354: invokevirtual #41
357: iload         9
359: bipush        119
361: if_icmpne     368
364: iconst_1
365: goto          369
368: iconst_0
369: invokestatic  #42
372: new           #35
375: dup
376: invokespecial #36
379: ldc           #37
381: invokevirtual #38
384: iload         10
386: invokevirtual #84
389: ldc           #40
391: invokevirtual #38
394: iconst_0
395: invokevirtual #84
398: ldc           #37
400: invokevirtual #38
403: invokevirtual #41
406: iload         10
408: ifne          415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #42
419: aload         12
421: invokestatic  #34
424: aload         13
426: invokestatic  #34
429: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test063
Start line: 1204
End line: 1270
Method source code: 
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear34 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean35 = dateTimeOfYear34.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear36 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char37 = dateTimeOfYear36.iZoneChar;
        int int38 = dateTimeOfYear36.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder39 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder41 = dateTimeZoneBuilder39.setStandardOffset((int) '#');
        dateTimeOfYear36.addRecurring(dateTimeZoneBuilder39, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear34.addCutover(dateTimeZoneBuilder39, (int) '4');
        dateTimeOfYear0.addRecurring(dateTimeZoneBuilder39, "+35:00", (-42), 110, 2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder64 = dateTimeZoneBuilder39.addRecurringSavings("52", (int) (byte) -1, (-24175), 11, '#', 2290, (-2033899), 2, true, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: #");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeOfYear34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + char37 + "' != '" + 'w' + "'", char37 == 'w');
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder41);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #270
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: invokestatic  #19
205: astore        22
207: aload         22
209: getfield      #142
212: istore        23
214: new           #143
217: dup
218: invokespecial #144
221: astore        24
223: aload         24
225: getfield      #136
228: istore        25
230: aload         24
232: getfield      #145
235: istore        26
237: new           #146
240: dup
241: invokespecial #147
244: astore        27
246: aload         27
248: bipush        35
250: invokevirtual #148
253: astore        28
255: aload         24
257: aload         27
259: ldc           #92
261: iconst_1
262: bipush        10
264: iconst_m1
265: invokevirtual #149
268: aload         22
270: aload         27
272: bipush        52
274: invokevirtual #150
277: aload_1
278: aload         27
280: ldc_w         #271
283: bipush        -42
285: bipush        110
287: ldc_w         #272
290: invokevirtual #149
293: aload         27
295: ldc_w         #273
298: iconst_m1
299: sipush        -24175
302: bipush        11
304: bipush        35
306: sipush        2290
309: ldc_w         #274
312: iconst_2
313: iconst_1
314: bipush        -2
316: invokevirtual #153
319: astore        29
321: ldc_w         #275
324: invokestatic  #11
327: goto          332
330: astore        29
332: aload_1
333: invokestatic  #34
336: new           #35
339: dup
340: invokespecial #36
343: ldc           #37
345: invokevirtual #38
348: iload_2
349: invokevirtual #39
352: ldc           #40
354: invokevirtual #38
357: iconst_0
358: invokevirtual #39
361: ldc           #37
363: invokevirtual #38
366: invokevirtual #41
369: iload_2
370: ifne          377
373: iconst_1
374: goto          378
377: iconst_0
378: invokestatic  #42
381: new           #35
384: dup
385: invokespecial #36
388: ldc           #37
390: invokevirtual #38
393: iload         4
395: invokevirtual #78
398: ldc           #40
400: invokevirtual #38
403: bipush        119
405: invokevirtual #78
408: ldc           #37
410: invokevirtual #38
413: invokevirtual #41
416: iload         4
418: bipush        119
420: if_icmpne     427
423: iconst_1
424: goto          428
427: iconst_0
428: invokestatic  #42
431: new           #35
434: dup
435: invokespecial #36
438: ldc           #37
440: invokevirtual #38
443: iload         5
445: invokevirtual #84
448: ldc           #40
450: invokevirtual #38
453: iconst_0
454: invokevirtual #84
457: ldc           #37
459: invokevirtual #38
462: invokevirtual #41
465: iload         5
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #42
478: aload         7
480: invokestatic  #34
483: aload         9
485: invokestatic  #34
488: aload         10
490: invokestatic  #34
493: aload         11
495: invokestatic  #34
498: aload         13
500: invokestatic  #34
503: aload         13
505: invokestatic  #126
508: ldc           #127
510: invokestatic  #128
513: new           #35
516: dup
517: invokespecial #36
520: ldc           #37
522: invokevirtual #38
525: aload         14
527: invokevirtual #38
530: ldc           #129
532: invokevirtual #38
535: invokevirtual #41
538: aload         14
540: ldc           #130
542: invokestatic  #66
545: aload         15
547: invokestatic  #34
550: aload         16
552: invokestatic  #34
555: aload         17
557: invokestatic  #34
560: aload         18
562: invokestatic  #34
565: aload         19
567: invokestatic  #34
570: aload         20
572: invokestatic  #34
575: new           #35
578: dup
579: invokespecial #36
582: ldc           #37
584: invokevirtual #38
587: iload         21
589: invokevirtual #39
592: ldc           #40
594: invokevirtual #38
597: iconst_0
598: invokevirtual #39
601: ldc           #37
603: invokevirtual #38
606: invokevirtual #41
609: iload         21
611: ifne          618
614: iconst_1
615: goto          619
618: iconst_0
619: invokestatic  #42
622: aload         22
624: invokestatic  #34
627: new           #35
630: dup
631: invokespecial #36
634: ldc           #37
636: invokevirtual #38
639: iload         23
641: invokevirtual #39
644: ldc           #40
646: invokevirtual #38
649: iconst_0
650: invokevirtual #39
653: ldc           #37
655: invokevirtual #38
658: invokevirtual #41
661: iload         23
663: ifne          670
666: iconst_1
667: goto          671
670: iconst_0
671: invokestatic  #42
674: new           #35
677: dup
678: invokespecial #36
681: ldc           #37
683: invokevirtual #38
686: iload         25
688: invokevirtual #78
691: ldc           #40
693: invokevirtual #38
696: bipush        119
698: invokevirtual #78
701: ldc           #37
703: invokevirtual #38
706: invokevirtual #41
709: iload         25
711: bipush        119
713: if_icmpne     720
716: iconst_1
717: goto          721
720: iconst_0
721: invokestatic  #42
724: new           #35
727: dup
728: invokespecial #36
731: ldc           #37
733: invokevirtual #38
736: iload         26
738: invokevirtual #84
741: ldc           #40
743: invokevirtual #38
746: iconst_0
747: invokevirtual #84
750: ldc           #37
752: invokevirtual #38
755: invokevirtual #41
758: iload         26
760: ifne          767
763: iconst_1
764: goto          768
767: iconst_0
768: invokestatic  #42
771: aload         28
773: invokestatic  #34
776: return
Exception table:
from    to  target type
293   327   330   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test064
Start line: 1273
End line: 1290
Method source code: 
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        java.io.DataOutputStream dataOutputStream0 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file2 = null;
        java.io.File[] fileArray3 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray3);
        org.junit.Assert.assertNotNull(strMap4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #276
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #44
30: dup
31: invokespecial #45
34: astore_2
35: aconst_null
36: astore_3
37: iconst_0
38: anewarray     #95
41: astore        4
43: aload_2
44: aload_3
45: aload         4
47: invokevirtual #96
50: astore        5
52: aload_1
53: aload         5
55: invokestatic  #70
58: ldc           #47
60: invokestatic  #11
63: goto          68
66: astore        6
68: aload         4
70: invokestatic  #34
73: aload         5
75: invokestatic  #34
78: return
Exception table:
from    to  target type
52    63    66   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test065
Start line: 1293
End line: 1303
Method source code: 
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #277
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #14
27: invokestatic  #57
30: istore_1
31: ldc_w         #278
34: invokestatic  #11
37: goto          41
40: astore_1
41: return
Exception table:
from    to  target type
25    37    40   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test066
Start line: 1306
End line: 1354
Method source code: 
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury();
        java.lang.String str35 = zonedChronology19.toString();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #279
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #204
207: astore        22
209: aload         11
211: invokevirtual #116
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: new           #35
514: dup
515: invokespecial #36
518: ldc           #37
520: invokevirtual #38
523: aload         23
525: invokevirtual #38
528: ldc           #129
530: invokevirtual #38
533: invokevirtual #41
536: aload         23
538: ldc           #130
540: invokestatic  #66
543: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test067
Start line: 1357
End line: 1362
Method source code: 
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("2024-05-15T11:04:17.284Z");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 72000000 + "'", int1 == 72000000);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #280
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #281
28: invokestatic  #51
31: istore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: iload_1
45: invokevirtual #84
48: ldc           #40
50: invokevirtual #38
53: ldc_w         #282
56: invokevirtual #84
59: ldc           #37
61: invokevirtual #38
64: invokevirtual #41
67: iload_1
68: ldc_w         #282
71: if_icmpne     78
74: iconst_1
75: goto          79
78: iconst_0
79: invokestatic  #42
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test068
Start line: 1365
End line: 1370
Method source code: 
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("69", (int) 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 69 + "'", int2 == 69);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #283
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #221
27: bipush        97
29: invokestatic  #15
32: istore_1
33: new           #35
36: dup
37: invokespecial #36
40: ldc           #37
42: invokevirtual #38
45: iload_1
46: invokevirtual #84
49: ldc           #40
51: invokevirtual #38
54: bipush        69
56: invokevirtual #84
59: ldc           #37
61: invokevirtual #38
64: invokevirtual #41
67: iload_1
68: bipush        69
70: if_icmpne     77
73: iconst_1
74: goto          78
77: iconst_0
78: invokestatic  #42
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test069
Start line: 1373
End line: 1421
Method source code: 
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #284
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #204
207: astore        22
209: aload         11
211: invokevirtual #285
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: aload         23
513: invokestatic  #34
516: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test070
Start line: 1424
End line: 1434
Method source code: 
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("DurationField[centuries]", 66);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"durationfield[centuries]\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #286
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #287
28: bipush        66
30: invokestatic  #15
33: istore_1
34: ldc_w         #288
37: invokestatic  #11
40: goto          44
43: astore_1
44: return
Exception table:
from    to  target type
25    40    43   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test071
Start line: 1437
End line: 1447
Method source code: 
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("YearMonthDayTimeNoSeconds");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"YearMonthDayTimeNoSeconds\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #289
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #290
28: invokestatic  #9
31: istore_1
32: ldc_w         #291
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test072
Start line: 1450
End line: 1460
Method source code: 
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("", (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #292
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #14
27: iconst_0
28: invokestatic  #15
31: istore_1
32: ldc           #16
34: invokestatic  #11
37: goto          41
40: astore_1
41: return
Exception table:
from    to  target type
25    37    40   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test073
Start line: 1463
End line: 1486
Method source code: 
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder5.setStandardOffset(3465);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeZoneBuilder27.toDateTimeZone("1967-01-01T00:00:00.000Z", true);
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder25);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #293
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aload         6
94: ldc           #151
96: iconst_3
97: bipush        32
99: bipush        8
101: bipush        97
103: bipush        -71
105: bipush        70
107: ldc           #152
109: iconst_0
110: iconst_0
111: invokevirtual #153
114: astore        8
116: aload         6
118: sipush        3465
121: invokevirtual #148
124: astore        9
126: aload         9
128: ldc_w         #294
131: iconst_1
132: invokevirtual #295
135: astore        10
137: aload_1
138: invokestatic  #34
141: new           #35
144: dup
145: invokespecial #36
148: ldc           #37
150: invokevirtual #38
153: iload_2
154: invokevirtual #39
157: ldc           #40
159: invokevirtual #38
162: iconst_0
163: invokevirtual #39
166: ldc           #37
168: invokevirtual #38
171: invokevirtual #41
174: iload_2
175: ifne          182
178: iconst_1
179: goto          183
182: iconst_0
183: invokestatic  #42
186: new           #35
189: dup
190: invokespecial #36
193: ldc           #37
195: invokevirtual #38
198: iload         4
200: invokevirtual #78
203: ldc           #40
205: invokevirtual #38
208: bipush        119
210: invokevirtual #78
213: ldc           #37
215: invokevirtual #38
218: invokevirtual #41
221: iload         4
223: bipush        119
225: if_icmpne     232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #42
236: new           #35
239: dup
240: invokespecial #36
243: ldc           #37
245: invokevirtual #38
248: iload         5
250: invokevirtual #84
253: ldc           #40
255: invokevirtual #38
258: iconst_0
259: invokevirtual #84
262: ldc           #37
264: invokevirtual #38
267: invokevirtual #41
270: iload         5
272: ifne          279
275: iconst_1
276: goto          280
279: iconst_0
280: invokestatic  #42
283: aload         7
285: invokestatic  #34
288: aload         8
290: invokestatic  #34
293: aload         9
295: invokestatic  #34
298: aload         10
300: invokestatic  #34
303: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test074
Start line: 1489
End line: 1520
Method source code: 
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        java.lang.String str2 = dateTimeOfYear0.toString();
        char char3 = dateTimeOfYear0.iZoneChar;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean5 = dateTimeOfYear4.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear6 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char7 = dateTimeOfYear6.iZoneChar;
        int int8 = dateTimeOfYear6.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder11 = dateTimeZoneBuilder9.setStandardOffset((int) '#');
        dateTimeOfYear6.addRecurring(dateTimeZoneBuilder9, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear4.addCutover(dateTimeZoneBuilder9, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder29 = dateTimeZoneBuilder9.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder31 = dateTimeZoneBuilder9.setStandardOffset(3465);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder9.setStandardOffset(0);
        dateTimeOfYear0.addRecurring(dateTimeZoneBuilder33, "DurationField[years]", 1970, 52, 0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n" + "'", str2, "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertNotNull(dateTimeOfYear4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + char7 + "' != '" + 'w' + "'", char7 == 'w');
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder11);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder29);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder31);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #296
20: aastore
21: invokevirtual #7
24: pop
25: new           #143
28: dup
29: invokespecial #144
32: astore_1
33: aload_1
34: getfield      #136
37: istore_2
38: aload_1
39: invokevirtual #297
42: astore_3
43: aload_1
44: getfield      #136
47: istore        4
49: invokestatic  #19
52: astore        5
54: aload         5
56: getfield      #142
59: istore        6
61: new           #143
64: dup
65: invokespecial #144
68: astore        7
70: aload         7
72: getfield      #136
75: istore        8
77: aload         7
79: getfield      #145
82: istore        9
84: new           #146
87: dup
88: invokespecial #147
91: astore        10
93: aload         10
95: bipush        35
97: invokevirtual #148
100: astore        11
102: aload         7
104: aload         10
106: ldc           #92
108: iconst_1
109: bipush        10
111: iconst_m1
112: invokevirtual #149
115: aload         5
117: aload         10
119: bipush        52
121: invokevirtual #150
124: aload         10
126: ldc           #151
128: iconst_3
129: bipush        32
131: bipush        8
133: bipush        97
135: bipush        -71
137: bipush        70
139: ldc           #152
141: iconst_0
142: iconst_0
143: invokevirtual #153
146: astore        12
148: aload         10
150: sipush        3465
153: invokevirtual #148
156: astore        13
158: aload         10
160: iconst_0
161: invokevirtual #148
164: astore        14
166: aload_1
167: aload         14
169: ldc_w         #298
172: sipush        1970
175: bipush        52
177: iconst_0
178: invokevirtual #149
181: new           #35
184: dup
185: invokespecial #36
188: ldc           #37
190: invokevirtual #38
193: iload_2
194: invokevirtual #78
197: ldc           #40
199: invokevirtual #38
202: bipush        119
204: invokevirtual #78
207: ldc           #37
209: invokevirtual #38
212: invokevirtual #41
215: iload_2
216: bipush        119
218: if_icmpne     225
221: iconst_1
222: goto          226
225: iconst_0
226: invokestatic  #42
229: new           #35
232: dup
233: invokespecial #36
236: ldc           #37
238: invokevirtual #38
241: aload_3
242: invokevirtual #38
245: ldc_w         #299
248: invokevirtual #38
251: invokevirtual #41
254: aload_3
255: ldc           #60
257: invokestatic  #66
260: new           #35
263: dup
264: invokespecial #36
267: ldc           #37
269: invokevirtual #38
272: iload         4
274: invokevirtual #78
277: ldc           #40
279: invokevirtual #38
282: bipush        119
284: invokevirtual #78
287: ldc           #37
289: invokevirtual #38
292: invokevirtual #41
295: iload         4
297: bipush        119
299: if_icmpne     306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #42
310: aload         5
312: invokestatic  #34
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         6
329: invokevirtual #39
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #39
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         6
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: new           #35
365: dup
366: invokespecial #36
369: ldc           #37
371: invokevirtual #38
374: iload         8
376: invokevirtual #78
379: ldc           #40
381: invokevirtual #38
384: bipush        119
386: invokevirtual #78
389: ldc           #37
391: invokevirtual #38
394: invokevirtual #41
397: iload         8
399: bipush        119
401: if_icmpne     408
404: iconst_1
405: goto          409
408: iconst_0
409: invokestatic  #42
412: new           #35
415: dup
416: invokespecial #36
419: ldc           #37
421: invokevirtual #38
424: iload         9
426: invokevirtual #84
429: ldc           #40
431: invokevirtual #38
434: iconst_0
435: invokevirtual #84
438: ldc           #37
440: invokevirtual #38
443: invokevirtual #41
446: iload         9
448: ifne          455
451: iconst_1
452: goto          456
455: iconst_0
456: invokestatic  #42
459: aload         11
461: invokestatic  #34
464: aload         12
466: invokestatic  #34
469: aload         13
471: invokestatic  #34
474: aload         14
476: invokestatic  #34
479: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test075
Start line: 1523
End line: 1528
Method source code: 
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("DayTime");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DayTime" + "'", str1, "DayTime");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #300
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #301
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #302
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #301
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test076
Start line: 1531
End line: 1573
Method source code: 
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) '#');
        long long5 = dateTimeZone2.adjustOffset((long) '4', true);
        org.joda.time.chrono.GregorianChronology gregorianChronology6 = org.joda.time.chrono.GregorianChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField7 = gregorianChronology6.yearOfEra();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.Chronology chronology9 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology12 = org.joda.time.chrono.ZonedChronology.getInstance(chronology9, dateTimeZone11);
        org.joda.time.Period period15 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray18 = zonedChronology12.get((org.joda.time.ReadablePeriod) period15, (long) (byte) -1, (long) 1);
        java.lang.String str19 = zonedChronology12.toString();
        org.joda.time.DurationField durationField20 = zonedChronology12.hours();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology12.yearOfEra();
        org.joda.time.DurationField durationField23 = zonedChronology12.minutes();
        boolean boolean24 = gregorianChronology6.equals((java.lang.Object) durationField23);
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology6.hourOfHalfday();
        org.joda.time.DurationField durationField26 = gregorianChronology6.weekyears();
        org.joda.time.DateTimeZone dateTimeZone27 = gregorianChronology6.getZone();
        boolean boolean28 = org.joda.time.tz.ZoneInfoCompiler.test("Thu", dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
        org.junit.Assert.assertNotNull(gregorianChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(zonedChronology12);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str19, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #303
20: aastore
21: invokevirtual #7
24: pop
25: bipush        35
27: invokestatic  #24
30: astore_1
31: aload_1
32: ldc2_w        #108
35: iconst_1
36: invokevirtual #230
39: lstore_2
40: aload_1
41: invokestatic  #304
44: astore        4
46: aload         4
48: invokevirtual #305
51: astore        5
53: aconst_null
54: astore        6
56: aload         6
58: invokestatic  #23
61: astore        7
63: iconst_0
64: invokestatic  #24
67: astore        8
69: aload         7
71: aload         8
73: invokestatic  #25
76: astore        9
78: new           #26
81: dup
82: ldc2_w        #108
85: ldc2_w        #110
88: invokespecial #112
91: astore        10
93: aload         9
95: aload         10
97: ldc2_w        #113
100: lconst_1
101: invokevirtual #115
104: astore        11
106: aload         9
108: invokevirtual #116
111: astore        12
113: aload         9
115: invokevirtual #119
118: astore        13
120: aload         9
122: invokevirtual #207
125: astore        14
127: aload         9
129: invokevirtual #207
132: astore        15
134: aload         9
136: invokevirtual #306
139: astore        16
141: aload         4
143: aload         16
145: invokevirtual #307
148: istore        17
150: aload         4
152: invokevirtual #308
155: astore        18
157: aload         4
159: invokevirtual #309
162: astore        19
164: aload         4
166: invokevirtual #310
169: astore        20
171: ldc_w         #311
174: aload         20
176: invokestatic  #125
179: istore        21
181: aload_1
182: invokestatic  #34
185: new           #35
188: dup
189: invokespecial #36
192: ldc           #37
194: invokevirtual #38
197: lload_2
198: invokevirtual #233
201: ldc           #40
203: invokevirtual #38
206: ldc2_w        #108
209: invokevirtual #233
212: ldc           #37
214: invokevirtual #38
217: invokevirtual #41
220: lload_2
221: ldc2_w        #108
224: lcmp
225: ifne          232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #42
236: aload         4
238: invokestatic  #34
241: aload         5
243: invokestatic  #34
246: aload         7
248: invokestatic  #34
251: aload         8
253: invokestatic  #34
256: aload         9
258: invokestatic  #34
261: aload         11
263: invokestatic  #34
266: aload         11
268: invokestatic  #126
271: ldc           #127
273: invokestatic  #128
276: new           #35
279: dup
280: invokespecial #36
283: ldc           #37
285: invokevirtual #38
288: aload         12
290: invokevirtual #38
293: ldc           #129
295: invokevirtual #38
298: invokevirtual #41
301: aload         12
303: ldc           #130
305: invokestatic  #66
308: aload         13
310: invokestatic  #34
313: aload         14
315: invokestatic  #34
318: aload         15
320: invokestatic  #34
323: aload         16
325: invokestatic  #34
328: new           #35
331: dup
332: invokespecial #36
335: ldc           #37
337: invokevirtual #38
340: iload         17
342: invokevirtual #39
345: ldc           #40
347: invokevirtual #38
350: iconst_0
351: invokevirtual #39
354: ldc           #37
356: invokevirtual #38
359: invokevirtual #41
362: iload         17
364: ifne          371
367: iconst_1
368: goto          372
371: iconst_0
372: invokestatic  #42
375: aload         18
377: invokestatic  #34
380: aload         19
382: invokestatic  #34
385: aload         20
387: invokestatic  #34
390: new           #35
393: dup
394: invokespecial #36
397: ldc           #37
399: invokevirtual #38
402: iload         21
404: invokevirtual #39
407: ldc           #40
409: invokevirtual #38
412: iconst_1
413: invokevirtual #39
416: ldc           #37
418: invokevirtual #38
421: invokevirtual #41
424: iload         21
426: iconst_1
427: if_icmpne     434
430: iconst_1
431: goto          435
434: iconst_0
435: invokestatic  #42
438: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test077
Start line: 1576
End line: 1587
Method source code: 
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.joda.time.chrono.ISOChronology iSOChronology1 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
        org.joda.time.Chronology chronology2 = iSOChronology1.withUTC();
        org.joda.time.DateTimeZone dateTimeZone3 = iSOChronology1.getZone();
        boolean boolean4 = org.joda.time.tz.ZoneInfoCompiler.test("Standard", dateTimeZone3);
        org.junit.Assert.assertNotNull(iSOChronology1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #312
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #313
28: astore_1
29: aload_1
30: invokevirtual #314
33: astore_2
34: aload_1
35: invokevirtual #315
38: astore_3
39: ldc_w         #316
42: aload_3
43: invokestatic  #125
46: istore        4
48: aload_1
49: invokestatic  #34
52: aload_2
53: invokestatic  #34
56: aload_3
57: invokestatic  #34
60: new           #35
63: dup
64: invokespecial #36
67: ldc           #37
69: invokevirtual #38
72: iload         4
74: invokevirtual #39
77: ldc           #40
79: invokevirtual #38
82: iconst_1
83: invokevirtual #39
86: ldc           #37
88: invokevirtual #38
91: invokevirtual #41
94: iload         4
96: iconst_1
97: if_icmpne     104
100: iconst_1
101: goto          105
104: iconst_0
105: invokestatic  #42
108: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test078
Start line: 1590
End line: 1651
Method source code: 
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.joda.time.chrono.GregorianChronology gregorianChronology1 = org.joda.time.chrono.GregorianChronology.getInstance();
        long long5 = gregorianChronology1.add((long) 10, (long) (-2), 52);
        org.joda.time.Period period7 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.format.PeriodFormatter periodFormatter8 = null;
        java.lang.String str9 = period7.toString(periodFormatter8);
        org.joda.time.Period period11 = period7.minusWeeks((int) (short) -1);
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology17 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone16);
        org.joda.time.Period period18 = new org.joda.time.Period((long) (short) 100, chronology14);
        org.joda.time.Weeks weeks19 = period18.toStandardWeeks();
        int int20 = period18.getSeconds();
        org.joda.time.Period period21 = period11.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period23 = period21.withSeconds((int) (byte) 1);
        int[] intArray25 = gregorianChronology1.get((org.joda.time.ReadablePeriod) period23, (long) 10);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType26);
        boolean boolean28 = gregorianChronology1.equals((java.lang.Object) periodType27);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone33 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100);
        boolean boolean35 = fixedDateTimeZone33.isStandardOffset(3752784000097L);
        int int37 = fixedDateTimeZone33.getOffsetFromLocal(31536000000L);
        java.util.TimeZone timeZone38 = fixedDateTimeZone33.toTimeZone();
        int int40 = fixedDateTimeZone33.getOffset((long) 71);
        org.joda.time.Chronology chronology41 = gregorianChronology1.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone33);
        java.lang.String str42 = fixedDateTimeZone33.toString();
        boolean boolean43 = fixedDateTimeZone33.isFixed();
        long long45 = fixedDateTimeZone33.previousTransition(22556602654770L);
        boolean boolean46 = org.joda.time.tz.ZoneInfoCompiler.test("109344815999901", (org.joda.time.DateTimeZone) fixedDateTimeZone33);
        boolean boolean48 = fixedDateTimeZone33.isStandardOffset((-6418121270366902L));
        org.junit.Assert.assertNotNull(gregorianChronology1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-94L) + "'", long5 == (-94L));
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P1D" + "'", str9, "P1D");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(zonedChronology17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 23 + "'", int37 == 23);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "-1" + "'", str42, "-1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 22556602654770L + "'", long45 == 22556602654770L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #317
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #318
28: astore_1
29: aload_1
30: ldc2_w        #110
33: ldc2_w        #319
36: bipush        52
38: invokevirtual #321
41: lstore_2
42: iconst_1
43: invokestatic  #322
46: astore        4
48: aconst_null
49: astore        5
51: aload         4
53: aload         5
55: invokevirtual #323
58: astore        6
60: aload         4
62: iconst_m1
63: invokevirtual #324
66: astore        7
68: aconst_null
69: astore        8
71: aload         8
73: invokestatic  #23
76: astore        9
78: iconst_0
79: invokestatic  #24
82: astore        10
84: aload         9
86: aload         10
88: invokestatic  #25
91: astore        11
93: new           #26
96: dup
97: ldc2_w        #27
100: aload         9
102: invokespecial #29
105: astore        12
107: aload         12
109: invokevirtual #325
112: astore        13
114: aload         12
116: invokevirtual #326
119: istore        14
121: aload         7
123: aload         12
125: invokevirtual #327
128: astore        15
130: aload         15
132: iconst_1
133: invokevirtual #328
136: astore        16
138: aload_1
139: aload         16
141: ldc2_w        #110
144: invokevirtual #329
147: astore        17
149: invokestatic  #20
152: astore        18
154: aload         18
156: invokestatic  #330
159: astore        19
161: aload_1
162: aload         19
164: invokevirtual #307
167: istore        20
169: new           #331
172: dup
173: ldc_w         #332
176: ldc           #92
178: bipush        23
180: bipush        100
182: invokespecial #333
185: astore        21
187: aload         21
189: ldc2_w        #334
192: invokevirtual #336
195: istore        22
197: aload         21
199: ldc2_w        #337
202: invokevirtual #339
205: istore        23
207: aload         21
209: invokevirtual #340
212: astore        24
214: aload         21
216: ldc2_w        #180
219: invokevirtual #341
222: istore        25
224: aload_1
225: aload         21
227: invokevirtual #342
230: astore        26
232: aload         21
234: invokevirtual #343
237: astore        27
239: aload         21
241: invokevirtual #344
244: istore        28
246: aload         21
248: ldc2_w        #345
251: invokevirtual #347
254: lstore        29
256: ldc_w         #348
259: aload         21
261: invokestatic  #125
264: istore        31
266: aload         21
268: ldc2_w        #349
271: invokevirtual #336
274: istore        32
276: aload_1
277: invokestatic  #34
280: new           #35
283: dup
284: invokespecial #36
287: ldc           #37
289: invokevirtual #38
292: lload_2
293: invokevirtual #233
296: ldc           #40
298: invokevirtual #38
301: ldc2_w        #351
304: invokevirtual #233
307: ldc           #37
309: invokevirtual #38
312: invokevirtual #41
315: lload_2
316: ldc2_w        #351
319: lcmp
320: ifne          327
323: iconst_1
324: goto          328
327: iconst_0
328: invokestatic  #42
331: aload         4
333: invokestatic  #34
336: new           #35
339: dup
340: invokespecial #36
343: ldc           #37
345: invokevirtual #38
348: aload         6
350: invokevirtual #38
353: ldc_w         #353
356: invokevirtual #38
359: invokevirtual #41
362: aload         6
364: ldc           #104
366: invokestatic  #66
369: aload         7
371: invokestatic  #34
374: aload         9
376: invokestatic  #34
379: aload         10
381: invokestatic  #34
384: aload         11
386: invokestatic  #34
389: aload         13
391: invokestatic  #34
394: new           #35
397: dup
398: invokespecial #36
401: ldc           #37
403: invokevirtual #38
406: iload         14
408: invokevirtual #84
411: ldc           #40
413: invokevirtual #38
416: iconst_0
417: invokevirtual #84
420: ldc           #37
422: invokevirtual #38
425: invokevirtual #41
428: iload         14
430: ifne          437
433: iconst_1
434: goto          438
437: iconst_0
438: invokestatic  #42
441: aload         15
443: invokestatic  #34
446: aload         16
448: invokestatic  #34
451: aload         17
453: invokestatic  #34
456: aload         17
458: invokestatic  #126
461: ldc_w         #354
464: invokestatic  #128
467: aload         18
469: invokestatic  #34
472: aload         19
474: invokestatic  #34
477: new           #35
480: dup
481: invokespecial #36
484: ldc           #37
486: invokevirtual #38
489: iload         20
491: invokevirtual #39
494: ldc           #40
496: invokevirtual #38
499: iconst_0
500: invokevirtual #39
503: ldc           #37
505: invokevirtual #38
508: invokevirtual #41
511: iload         20
513: ifne          520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #42
524: new           #35
527: dup
528: invokespecial #36
531: ldc           #37
533: invokevirtual #38
536: iload         22
538: invokevirtual #39
541: ldc           #40
543: invokevirtual #38
546: iconst_0
547: invokevirtual #39
550: ldc           #37
552: invokevirtual #38
555: invokevirtual #41
558: iload         22
560: ifne          567
563: iconst_1
564: goto          568
567: iconst_0
568: invokestatic  #42
571: new           #35
574: dup
575: invokespecial #36
578: ldc           #37
580: invokevirtual #38
583: iload         23
585: invokevirtual #84
588: ldc           #40
590: invokevirtual #38
593: bipush        23
595: invokevirtual #84
598: ldc           #37
600: invokevirtual #38
603: invokevirtual #41
606: iload         23
608: bipush        23
610: if_icmpne     617
613: iconst_1
614: goto          618
617: iconst_0
618: invokestatic  #42
621: aload         24
623: invokestatic  #34
626: aload         24
628: invokevirtual #131
631: ldc_w         #355
634: invokestatic  #128
637: new           #35
640: dup
641: invokespecial #36
644: ldc           #37
646: invokevirtual #38
649: iload         25
651: invokevirtual #84
654: ldc           #40
656: invokevirtual #38
659: bipush        23
661: invokevirtual #84
664: ldc           #37
666: invokevirtual #38
669: invokevirtual #41
672: iload         25
674: bipush        23
676: if_icmpne     683
679: iconst_1
680: goto          684
683: iconst_0
684: invokestatic  #42
687: aload         26
689: invokestatic  #34
692: new           #35
695: dup
696: invokespecial #36
699: ldc           #37
701: invokevirtual #38
704: aload         27
706: invokevirtual #38
709: ldc_w         #356
712: invokevirtual #38
715: invokevirtual #41
718: aload         27
720: ldc_w         #332
723: invokestatic  #66
726: new           #35
729: dup
730: invokespecial #36
733: ldc           #37
735: invokevirtual #38
738: iload         28
740: invokevirtual #39
743: ldc           #40
745: invokevirtual #38
748: iconst_1
749: invokevirtual #39
752: ldc           #37
754: invokevirtual #38
757: invokevirtual #41
760: iload         28
762: iconst_1
763: if_icmpne     770
766: iconst_1
767: goto          771
770: iconst_0
771: invokestatic  #42
774: new           #35
777: dup
778: invokespecial #36
781: ldc           #37
783: invokevirtual #38
786: lload         29
788: invokevirtual #233
791: ldc           #40
793: invokevirtual #38
796: ldc2_w        #345
799: invokevirtual #233
802: ldc           #37
804: invokevirtual #38
807: invokevirtual #41
810: lload         29
812: ldc2_w        #345
815: lcmp
816: ifne          823
819: iconst_1
820: goto          824
823: iconst_0
824: invokestatic  #42
827: new           #35
830: dup
831: invokespecial #36
834: ldc           #37
836: invokevirtual #38
839: iload         31
841: invokevirtual #39
844: ldc           #40
846: invokevirtual #38
849: iconst_1
850: invokevirtual #39
853: ldc           #37
855: invokevirtual #38
858: invokevirtual #41
861: iload         31
863: iconst_1
864: if_icmpne     871
867: iconst_1
868: goto          872
871: iconst_0
872: invokestatic  #42
875: new           #35
878: dup
879: invokespecial #36
882: ldc           #37
884: invokevirtual #38
887: iload         32
889: invokevirtual #39
892: ldc           #40
894: invokevirtual #38
897: iconst_0
898: invokevirtual #39
901: ldc           #37
903: invokevirtual #38
906: invokevirtual #41
909: iload         32
911: ifne          918
914: iconst_1
915: goto          919
918: iconst_0
919: invokestatic  #42
922: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test079
Start line: 1654
End line: 1766
Method source code: 
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        int int5 = cachedDateTimeZone3.getOffset(10L);
        java.lang.String str7 = cachedDateTimeZone3.getNameKey(3155760000010L);
        java.lang.String str9 = cachedDateTimeZone3.getName(2272L);
        boolean boolean10 = org.joda.time.tz.ZoneInfoCompiler.test("77", (org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.Period period13 = readableInterval12.toPeriod();
        java.lang.Object obj14 = null;
        boolean boolean15 = readableInterval12.equals(obj14);
        org.joda.time.Period period16 = readableInterval12.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = readableInterval12.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant18 = null;
        boolean boolean19 = readableInterval12.contains(readableInstant18);
        org.joda.time.ReadableInterval readableInterval20 = null;
        org.joda.time.ReadableInterval readableInterval21 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval20);
        org.joda.time.Period period22 = readableInterval21.toPeriod();
        java.lang.Object obj23 = null;
        boolean boolean24 = readableInterval21.equals(obj23);
        org.joda.time.Period period25 = readableInterval21.toPeriod();
        org.joda.time.DateTime dateTime26 = readableInterval21.getEnd();
        boolean boolean27 = readableInterval12.contains((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.ReadableInterval readableInterval29 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval28);
        org.joda.time.Period period30 = readableInterval29.toPeriod();
        java.lang.Object obj31 = null;
        boolean boolean32 = readableInterval29.equals(obj31);
        org.joda.time.Period period33 = readableInterval29.toPeriod();
        org.joda.time.Duration duration34 = readableInterval29.toDuration();
        org.joda.time.ReadableInterval readableInterval35 = null;
        org.joda.time.ReadableInterval readableInterval36 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval35);
        org.joda.time.Period period37 = readableInterval36.toPeriod();
        java.lang.Object obj38 = null;
        boolean boolean39 = readableInterval36.equals(obj38);
        org.joda.time.Period period40 = readableInterval36.toPeriod();
        org.joda.time.DateTime dateTime41 = readableInterval36.getEnd();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType43 = null;
        boolean boolean44 = periodType42.isSupported(durationFieldType43);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime41, periodType42);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadableInterval readableInterval47 = null;
        org.joda.time.ReadableInterval readableInterval48 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval47);
        org.joda.time.Period period49 = readableInterval48.toPeriod();
        java.lang.Object obj50 = null;
        boolean boolean51 = readableInterval48.equals(obj50);
        org.joda.time.Period period52 = readableInterval48.toPeriod();
        org.joda.time.MutableInterval mutableInterval53 = readableInterval48.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant54 = null;
        boolean boolean55 = readableInterval48.contains(readableInstant54);
        org.joda.time.ReadableInterval readableInterval56 = null;
        org.joda.time.ReadableInterval readableInterval57 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval56);
        org.joda.time.Period period58 = readableInterval57.toPeriod();
        java.lang.Object obj59 = null;
        boolean boolean60 = readableInterval57.equals(obj59);
        org.joda.time.Period period61 = readableInterval57.toPeriod();
        org.joda.time.DateTime dateTime62 = readableInterval57.getEnd();
        boolean boolean63 = readableInterval48.contains((org.joda.time.ReadableInstant) dateTime62);
        long long64 = org.joda.time.DateTimeUtils.getInstantMillis((org.joda.time.ReadableInstant) dateTime62);
        long long65 = dateTime62.getMillis();
        org.joda.time.Duration duration66 = period46.toDurationTo((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean67 = cachedDateTimeZone3.equals((java.lang.Object) period46);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(mutableInterval17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(readableInterval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(readableInterval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(readableInterval36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(readableInterval48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(readableInterval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1715770342796L + "'", long64 == 1715770342796L);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1715770342796L + "'", long65 == 1715770342796L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #357
20: aastore
21: invokevirtual #7
24: pop
25: iconst_0
26: invokestatic  #24
29: astore_1
30: aload_1
31: invokestatic  #178
34: astore_2
35: aload_2
36: ldc2_w        #110
39: invokevirtual #179
42: istore_3
43: aload_2
44: ldc2_w        #358
47: invokevirtual #182
50: astore        4
52: aload_2
53: ldc2_w        #360
56: invokevirtual #362
59: astore        5
61: ldc_w         #363
64: aload_2
65: invokestatic  #125
68: istore        6
70: aconst_null
71: astore        7
73: aload         7
75: invokestatic  #364
78: astore        8
80: aload         8
82: invokeinterface #365,  1
87: astore        9
89: aconst_null
90: astore        10
92: aload         8
94: aload         10
96: invokeinterface #366,  2
101: istore        11
103: aload         8
105: invokeinterface #365,  1
110: astore        12
112: aload         8
114: invokeinterface #367,  1
119: astore        13
121: aconst_null
122: astore        14
124: aload         8
126: aload         14
128: invokeinterface #368,  2
133: istore        15
135: aconst_null
136: astore        16
138: aload         16
140: invokestatic  #364
143: astore        17
145: aload         17
147: invokeinterface #365,  1
152: astore        18
154: aconst_null
155: astore        19
157: aload         17
159: aload         19
161: invokeinterface #366,  2
166: istore        20
168: aload         17
170: invokeinterface #365,  1
175: astore        21
177: aload         17
179: invokeinterface #369,  1
184: astore        22
186: aload         8
188: aload         22
190: invokeinterface #368,  2
195: istore        23
197: aconst_null
198: astore        24
200: aload         24
202: invokestatic  #364
205: astore        25
207: aload         25
209: invokeinterface #365,  1
214: astore        26
216: aconst_null
217: astore        27
219: aload         25
221: aload         27
223: invokeinterface #366,  2
228: istore        28
230: aload         25
232: invokeinterface #365,  1
237: astore        29
239: aload         25
241: invokeinterface #370,  1
246: astore        30
248: aconst_null
249: astore        31
251: aload         31
253: invokestatic  #364
256: astore        32
258: aload         32
260: invokeinterface #365,  1
265: astore        33
267: aconst_null
268: astore        34
270: aload         32
272: aload         34
274: invokeinterface #366,  2
279: istore        35
281: aload         32
283: invokeinterface #365,  1
288: astore        36
290: aload         32
292: invokeinterface #369,  1
297: astore        37
299: invokestatic  #371
302: astore        38
304: aconst_null
305: astore        39
307: aload         38
309: aload         39
311: invokevirtual #372
314: istore        40
316: new           #26
319: dup
320: aload         30
322: aload         37
324: aload         38
326: invokespecial #373
329: astore        41
331: new           #26
334: dup
335: aload         22
337: aload         30
339: invokespecial #374
342: astore        42
344: aconst_null
345: astore        43
347: aload         43
349: invokestatic  #364
352: astore        44
354: aload         44
356: invokeinterface #365,  1
361: astore        45
363: aconst_null
364: astore        46
366: aload         44
368: aload         46
370: invokeinterface #366,  2
375: istore        47
377: aload         44
379: invokeinterface #365,  1
384: astore        48
386: aload         44
388: invokeinterface #367,  1
393: astore        49
395: aconst_null
396: astore        50
398: aload         44
400: aload         50
402: invokeinterface #368,  2
407: istore        51
409: aconst_null
410: astore        52
412: aload         52
414: invokestatic  #364
417: astore        53
419: aload         53
421: invokeinterface #365,  1
426: astore        54
428: aconst_null
429: astore        55
431: aload         53
433: aload         55
435: invokeinterface #366,  2
440: istore        56
442: aload         53
444: invokeinterface #365,  1
449: astore        57
451: aload         53
453: invokeinterface #369,  1
458: astore        58
460: aload         44
462: aload         58
464: invokeinterface #368,  2
469: istore        59
471: aload         58
473: invokestatic  #375
476: lstore        60
478: aload         58
480: invokevirtual #376
483: lstore        62
485: aload         42
487: aload         58
489: invokevirtual #377
492: astore        64
494: aload_2
495: aload         42
497: invokevirtual #378
500: istore        65
502: aload_1
503: invokestatic  #34
506: aload_2
507: invokestatic  #34
510: new           #35
513: dup
514: invokespecial #36
517: ldc           #37
519: invokevirtual #38
522: iload_3
523: invokevirtual #84
526: ldc           #40
528: invokevirtual #38
531: iconst_0
532: invokevirtual #84
535: ldc           #37
537: invokevirtual #38
540: invokevirtual #41
543: iload_3
544: ifne          551
547: iconst_1
548: goto          552
551: iconst_0
552: invokestatic  #42
555: new           #35
558: dup
559: invokespecial #36
562: ldc           #37
564: invokevirtual #38
567: aload         4
569: invokevirtual #38
572: ldc           #189
574: invokevirtual #38
577: invokevirtual #41
580: aload         4
582: ldc           #92
584: invokestatic  #66
587: new           #35
590: dup
591: invokespecial #36
594: ldc           #37
596: invokevirtual #38
599: aload         5
601: invokevirtual #38
604: ldc_w         #379
607: invokevirtual #38
610: invokevirtual #41
613: aload         5
615: ldc           #226
617: invokestatic  #66
620: new           #35
623: dup
624: invokespecial #36
627: ldc           #37
629: invokevirtual #38
632: iload         6
634: invokevirtual #39
637: ldc           #40
639: invokevirtual #38
642: iconst_1
643: invokevirtual #39
646: ldc           #37
648: invokevirtual #38
651: invokevirtual #41
654: iload         6
656: iconst_1
657: if_icmpne     664
660: iconst_1
661: goto          665
664: iconst_0
665: invokestatic  #42
668: aload         8
670: invokestatic  #34
673: aload         9
675: invokestatic  #34
678: new           #35
681: dup
682: invokespecial #36
685: ldc           #37
687: invokevirtual #38
690: iload         11
692: invokevirtual #39
695: ldc           #40
697: invokevirtual #38
700: iconst_0
701: invokevirtual #39
704: ldc           #37
706: invokevirtual #38
709: invokevirtual #41
712: iload         11
714: ifne          721
717: iconst_1
718: goto          722
721: iconst_0
722: invokestatic  #42
725: aload         12
727: invokestatic  #34
730: aload         13
732: invokestatic  #34
735: new           #35
738: dup
739: invokespecial #36
742: ldc           #37
744: invokevirtual #38
747: iload         15
749: invokevirtual #39
752: ldc           #40
754: invokevirtual #38
757: iconst_0
758: invokevirtual #39
761: ldc           #37
763: invokevirtual #38
766: invokevirtual #41
769: iload         15
771: ifne          778
774: iconst_1
775: goto          779
778: iconst_0
779: invokestatic  #42
782: aload         17
784: invokestatic  #34
787: aload         18
789: invokestatic  #34
792: new           #35
795: dup
796: invokespecial #36
799: ldc           #37
801: invokevirtual #38
804: iload         20
806: invokevirtual #39
809: ldc           #40
811: invokevirtual #38
814: iconst_0
815: invokevirtual #39
818: ldc           #37
820: invokevirtual #38
823: invokevirtual #41
826: iload         20
828: ifne          835
831: iconst_1
832: goto          836
835: iconst_0
836: invokestatic  #42
839: aload         21
841: invokestatic  #34
844: aload         22
846: invokestatic  #34
849: new           #35
852: dup
853: invokespecial #36
856: ldc           #37
858: invokevirtual #38
861: iload         23
863: invokevirtual #39
866: ldc           #40
868: invokevirtual #38
871: iconst_0
872: invokevirtual #39
875: ldc           #37
877: invokevirtual #38
880: invokevirtual #41
883: iload         23
885: ifne          892
888: iconst_1
889: goto          893
892: iconst_0
893: invokestatic  #42
896: aload         25
898: invokestatic  #34
901: aload         26
903: invokestatic  #34
906: new           #35
909: dup
910: invokespecial #36
913: ldc           #37
915: invokevirtual #38
918: iload         28
920: invokevirtual #39
923: ldc           #40
925: invokevirtual #38
928: iconst_0
929: invokevirtual #39
932: ldc           #37
934: invokevirtual #38
937: invokevirtual #41
940: iload         28
942: ifne          949
945: iconst_1
946: goto          950
949: iconst_0
950: invokestatic  #42
953: aload         29
955: invokestatic  #34
958: aload         30
960: invokestatic  #34
963: aload         32
965: invokestatic  #34
968: aload         33
970: invokestatic  #34
973: new           #35
976: dup
977: invokespecial #36
980: ldc           #37
982: invokevirtual #38
985: iload         35
987: invokevirtual #39
990: ldc           #40
992: invokevirtual #38
995: iconst_0
996: invokevirtual #39
999: ldc           #37
1001: invokevirtual #38
1004: invokevirtual #41
1007: iload         35
1009: ifne          1016
1012: iconst_1
1013: goto          1017
1016: iconst_0
1017: invokestatic  #42
1020: aload         36
1022: invokestatic  #34
1025: aload         37
1027: invokestatic  #34
1030: aload         38
1032: invokestatic  #34
1035: new           #35
1038: dup
1039: invokespecial #36
1042: ldc           #37
1044: invokevirtual #38
1047: iload         40
1049: invokevirtual #39
1052: ldc           #40
1054: invokevirtual #38
1057: iconst_0
1058: invokevirtual #39
1061: ldc           #37
1063: invokevirtual #38
1066: invokevirtual #41
1069: iload         40
1071: ifne          1078
1074: iconst_1
1075: goto          1079
1078: iconst_0
1079: invokestatic  #42
1082: aload         44
1084: invokestatic  #34
1087: aload         45
1089: invokestatic  #34
1092: new           #35
1095: dup
1096: invokespecial #36
1099: ldc           #37
1101: invokevirtual #38
1104: iload         47
1106: invokevirtual #39
1109: ldc           #40
1111: invokevirtual #38
1114: iconst_0
1115: invokevirtual #39
1118: ldc           #37
1120: invokevirtual #38
1123: invokevirtual #41
1126: iload         47
1128: ifne          1135
1131: iconst_1
1132: goto          1136
1135: iconst_0
1136: invokestatic  #42
1139: aload         48
1141: invokestatic  #34
1144: aload         49
1146: invokestatic  #34
1149: new           #35
1152: dup
1153: invokespecial #36
1156: ldc           #37
1158: invokevirtual #38
1161: iload         51
1163: invokevirtual #39
1166: ldc           #40
1168: invokevirtual #38
1171: iconst_0
1172: invokevirtual #39
1175: ldc           #37
1177: invokevirtual #38
1180: invokevirtual #41
1183: iload         51
1185: ifne          1192
1188: iconst_1
1189: goto          1193
1192: iconst_0
1193: invokestatic  #42
1196: aload         53
1198: invokestatic  #34
1201: aload         54
1203: invokestatic  #34
1206: new           #35
1209: dup
1210: invokespecial #36
1213: ldc           #37
1215: invokevirtual #38
1218: iload         56
1220: invokevirtual #39
1223: ldc           #40
1225: invokevirtual #38
1228: iconst_0
1229: invokevirtual #39
1232: ldc           #37
1234: invokevirtual #38
1237: invokevirtual #41
1240: iload         56
1242: ifne          1249
1245: iconst_1
1246: goto          1250
1249: iconst_0
1250: invokestatic  #42
1253: aload         57
1255: invokestatic  #34
1258: aload         58
1260: invokestatic  #34
1263: new           #35
1266: dup
1267: invokespecial #36
1270: ldc           #37
1272: invokevirtual #38
1275: iload         59
1277: invokevirtual #39
1280: ldc           #40
1282: invokevirtual #38
1285: iconst_0
1286: invokevirtual #39
1289: ldc           #37
1291: invokevirtual #38
1294: invokevirtual #41
1297: iload         59
1299: ifne          1306
1302: iconst_1
1303: goto          1307
1306: iconst_0
1307: invokestatic  #42
1310: aload         64
1312: invokestatic  #34
1315: new           #35
1318: dup
1319: invokespecial #36
1322: ldc           #37
1324: invokevirtual #38
1327: iload         65
1329: invokevirtual #39
1332: ldc           #40
1334: invokevirtual #38
1337: iconst_0
1338: invokevirtual #39
1341: ldc           #37
1343: invokevirtual #38
1346: invokevirtual #41
1349: iload         65
1351: ifne          1358
1354: iconst_1
1355: goto          1359
1358: iconst_0
1359: invokestatic  #42
1362: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test080
Start line: 1769
End line: 1811
Method source code: 
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        int int2 = dateTimeOfYear0.iMillisOfDay;
        int int3 = dateTimeOfYear0.iMonthOfYear;
        int int4 = dateTimeOfYear0.iMonthOfYear;
        int int5 = dateTimeOfYear0.iMillisOfDay;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear6 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean7 = dateTimeOfYear6.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear8 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char9 = dateTimeOfYear8.iZoneChar;
        int int10 = dateTimeOfYear8.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder11 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder13 = dateTimeZoneBuilder11.setStandardOffset((int) '#');
        dateTimeOfYear8.addRecurring(dateTimeZoneBuilder11, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear6.addCutover(dateTimeZoneBuilder11, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder31 = dateTimeZoneBuilder11.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder11.setStandardOffset(3465);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder35 = dateTimeZoneBuilder11.setStandardOffset(0);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder35, (-3464));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder48 = dateTimeZoneBuilder35.addRecurringSavings("DateTimeField[yearOfCentury]", 719527, (-47660), 0, ' ', 0, (-480), (-265276301), true, (-265276301));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode:  ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeOfYear6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + char9 + "' != '" + 'w' + "'", char9 == 'w');
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder13);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder31);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder33);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #380
20: aastore
21: invokevirtual #7
24: pop
25: new           #143
28: dup
29: invokespecial #144
32: astore_1
33: aload_1
34: getfield      #136
37: istore_2
38: aload_1
39: getfield      #145
42: istore_3
43: aload_1
44: getfield      #381
47: istore        4
49: aload_1
50: getfield      #381
53: istore        5
55: aload_1
56: getfield      #145
59: istore        6
61: invokestatic  #19
64: astore        7
66: aload         7
68: getfield      #142
71: istore        8
73: new           #143
76: dup
77: invokespecial #144
80: astore        9
82: aload         9
84: getfield      #136
87: istore        10
89: aload         9
91: getfield      #145
94: istore        11
96: new           #146
99: dup
100: invokespecial #147
103: astore        12
105: aload         12
107: bipush        35
109: invokevirtual #148
112: astore        13
114: aload         9
116: aload         12
118: ldc           #92
120: iconst_1
121: bipush        10
123: iconst_m1
124: invokevirtual #149
127: aload         7
129: aload         12
131: bipush        52
133: invokevirtual #150
136: aload         12
138: ldc           #151
140: iconst_3
141: bipush        32
143: bipush        8
145: bipush        97
147: bipush        -71
149: bipush        70
151: ldc           #152
153: iconst_0
154: iconst_0
155: invokevirtual #153
158: astore        14
160: aload         12
162: sipush        3465
165: invokevirtual #148
168: astore        15
170: aload         12
172: iconst_0
173: invokevirtual #148
176: astore        16
178: aload_1
179: aload         16
181: sipush        -3464
184: invokevirtual #150
187: aload         16
189: ldc           #255
191: ldc_w         #382
194: ldc_w         #383
197: iconst_0
198: bipush        32
200: iconst_0
201: sipush        -480
204: ldc_w         #384
207: iconst_1
208: ldc_w         #384
211: invokevirtual #153
214: astore        17
216: ldc_w         #385
219: invokestatic  #11
222: goto          227
225: astore        17
227: new           #35
230: dup
231: invokespecial #36
234: ldc           #37
236: invokevirtual #38
239: iload_2
240: invokevirtual #78
243: ldc           #40
245: invokevirtual #38
248: bipush        119
250: invokevirtual #78
253: ldc           #37
255: invokevirtual #38
258: invokevirtual #41
261: iload_2
262: bipush        119
264: if_icmpne     271
267: iconst_1
268: goto          272
271: iconst_0
272: invokestatic  #42
275: new           #35
278: dup
279: invokespecial #36
282: ldc           #37
284: invokevirtual #38
287: iload_3
288: invokevirtual #84
291: ldc           #40
293: invokevirtual #38
296: iconst_0
297: invokevirtual #84
300: ldc           #37
302: invokevirtual #38
305: invokevirtual #41
308: iload_3
309: ifne          316
312: iconst_1
313: goto          317
316: iconst_0
317: invokestatic  #42
320: new           #35
323: dup
324: invokespecial #36
327: ldc           #37
329: invokevirtual #38
332: iload         4
334: invokevirtual #84
337: ldc           #40
339: invokevirtual #38
342: iconst_1
343: invokevirtual #84
346: ldc           #37
348: invokevirtual #38
351: invokevirtual #41
354: iload         4
356: iconst_1
357: if_icmpne     364
360: iconst_1
361: goto          365
364: iconst_0
365: invokestatic  #42
368: new           #35
371: dup
372: invokespecial #36
375: ldc           #37
377: invokevirtual #38
380: iload         5
382: invokevirtual #84
385: ldc           #40
387: invokevirtual #38
390: iconst_1
391: invokevirtual #84
394: ldc           #37
396: invokevirtual #38
399: invokevirtual #41
402: iload         5
404: iconst_1
405: if_icmpne     412
408: iconst_1
409: goto          413
412: iconst_0
413: invokestatic  #42
416: new           #35
419: dup
420: invokespecial #36
423: ldc           #37
425: invokevirtual #38
428: iload         6
430: invokevirtual #84
433: ldc           #40
435: invokevirtual #38
438: iconst_0
439: invokevirtual #84
442: ldc           #37
444: invokevirtual #38
447: invokevirtual #41
450: iload         6
452: ifne          459
455: iconst_1
456: goto          460
459: iconst_0
460: invokestatic  #42
463: aload         7
465: invokestatic  #34
468: new           #35
471: dup
472: invokespecial #36
475: ldc           #37
477: invokevirtual #38
480: iload         8
482: invokevirtual #39
485: ldc           #40
487: invokevirtual #38
490: iconst_0
491: invokevirtual #39
494: ldc           #37
496: invokevirtual #38
499: invokevirtual #41
502: iload         8
504: ifne          511
507: iconst_1
508: goto          512
511: iconst_0
512: invokestatic  #42
515: new           #35
518: dup
519: invokespecial #36
522: ldc           #37
524: invokevirtual #38
527: iload         10
529: invokevirtual #78
532: ldc           #40
534: invokevirtual #38
537: bipush        119
539: invokevirtual #78
542: ldc           #37
544: invokevirtual #38
547: invokevirtual #41
550: iload         10
552: bipush        119
554: if_icmpne     561
557: iconst_1
558: goto          562
561: iconst_0
562: invokestatic  #42
565: new           #35
568: dup
569: invokespecial #36
572: ldc           #37
574: invokevirtual #38
577: iload         11
579: invokevirtual #84
582: ldc           #40
584: invokevirtual #38
587: iconst_0
588: invokevirtual #84
591: ldc           #37
593: invokevirtual #38
596: invokevirtual #41
599: iload         11
601: ifne          608
604: iconst_1
605: goto          609
608: iconst_0
609: invokestatic  #42
612: aload         13
614: invokestatic  #34
617: aload         14
619: invokestatic  #34
622: aload         15
624: invokestatic  #34
627: aload         16
629: invokestatic  #34
632: return
Exception table:
from    to  target type
187   222   225   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test081
Start line: 1814
End line: 1819
Method source code: 
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("YearMonthDayTimeNoSeconds");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "YearMonthDayTimeNoSeconds" + "'", str1, "YearMonthDayTimeNoSeconds");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #386
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #290
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #387
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #290
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test082
Start line: 1822
End line: 1847
Method source code: 
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone6 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone4);
        org.joda.time.Period period8 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType9 = null;
        boolean boolean10 = period8.isSupported(durationFieldType9);
        boolean boolean11 = cachedDateTimeZone6.equals((java.lang.Object) boolean10);
        int int13 = cachedDateTimeZone6.getStandardOffset((long) 2024);
        boolean boolean14 = org.joda.time.tz.ZoneInfoCompiler.test("DurationField[centuries]", (org.joda.time.DateTimeZone) cachedDateTimeZone6);
        java.lang.String str16 = cachedDateTimeZone6.getNameKey((long) (-154));
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zonedChronology5);
        org.junit.Assert.assertNotNull(cachedDateTimeZone6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "UTC" + "'", str16, "UTC");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #388
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #23
31: astore_2
32: iconst_0
33: invokestatic  #24
36: astore_3
37: aload_2
38: aload_3
39: invokestatic  #25
42: astore        4
44: aload_3
45: invokestatic  #178
48: astore        5
50: iconst_1
51: invokestatic  #322
54: astore        6
56: aconst_null
57: astore        7
59: aload         6
61: aload         7
63: invokevirtual #389
66: istore        8
68: aload         5
70: iload         8
72: invokestatic  #232
75: invokevirtual #378
78: istore        9
80: aload         5
82: ldc2_w        #390
85: invokevirtual #185
88: istore        10
90: ldc_w         #287
93: aload         5
95: invokestatic  #125
98: istore        11
100: aload         5
102: ldc2_w        #392
105: invokevirtual #182
108: astore        12
110: aload_2
111: invokestatic  #34
114: aload_3
115: invokestatic  #34
118: aload         4
120: invokestatic  #34
123: aload         5
125: invokestatic  #34
128: aload         6
130: invokestatic  #34
133: new           #35
136: dup
137: invokespecial #36
140: ldc           #37
142: invokevirtual #38
145: iload         8
147: invokevirtual #39
150: ldc           #40
152: invokevirtual #38
155: iconst_0
156: invokevirtual #39
159: ldc           #37
161: invokevirtual #38
164: invokevirtual #41
167: iload         8
169: ifne          176
172: iconst_1
173: goto          177
176: iconst_0
177: invokestatic  #42
180: new           #35
183: dup
184: invokespecial #36
187: ldc           #37
189: invokevirtual #38
192: iload         9
194: invokevirtual #39
197: ldc           #40
199: invokevirtual #38
202: iconst_0
203: invokevirtual #39
206: ldc           #37
208: invokevirtual #38
211: invokevirtual #41
214: iload         9
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #42
227: new           #35
230: dup
231: invokespecial #36
234: ldc           #37
236: invokevirtual #38
239: iload         10
241: invokevirtual #84
244: ldc           #40
246: invokevirtual #38
249: iconst_0
250: invokevirtual #84
253: ldc           #37
255: invokevirtual #38
258: invokevirtual #41
261: iload         10
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #42
274: new           #35
277: dup
278: invokespecial #36
281: ldc           #37
283: invokevirtual #38
286: iload         11
288: invokevirtual #39
291: ldc           #40
293: invokevirtual #38
296: iconst_1
297: invokevirtual #39
300: ldc           #37
302: invokevirtual #38
305: invokevirtual #41
308: iload         11
310: iconst_1
311: if_icmpne     318
314: iconst_1
315: goto          319
318: iconst_0
319: invokestatic  #42
322: new           #35
325: dup
326: invokespecial #36
329: ldc           #37
331: invokevirtual #38
334: aload         12
336: invokevirtual #38
339: ldc           #189
341: invokevirtual #38
344: invokevirtual #41
347: aload         12
349: ldc           #92
351: invokestatic  #66
354: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test083
Start line: 1850
End line: 1877
Method source code: 
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean3 = dateTimeOfYear2.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char5 = dateTimeOfYear4.iZoneChar;
        int int6 = dateTimeOfYear4.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = dateTimeZoneBuilder7.setStandardOffset((int) '#');
        dateTimeOfYear4.addRecurring(dateTimeZoneBuilder7, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear2.addCutover(dateTimeZoneBuilder7, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder7.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, 25);
        int int30 = dateTimeOfYear0.iMillisOfDay;
        int int31 = dateTimeOfYear0.iMonthOfYear;
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
        org.junit.Assert.assertNotNull(dateTimeOfYear2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'w' + "'", char5 == 'w');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder9);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #394
20: aastore
21: invokevirtual #7
24: pop
25: new           #143
28: dup
29: invokespecial #144
32: astore_1
33: aload_1
34: getfield      #136
37: istore_2
38: invokestatic  #19
41: astore_3
42: aload_3
43: getfield      #142
46: istore        4
48: new           #143
51: dup
52: invokespecial #144
55: astore        5
57: aload         5
59: getfield      #136
62: istore        6
64: aload         5
66: getfield      #145
69: istore        7
71: new           #146
74: dup
75: invokespecial #147
78: astore        8
80: aload         8
82: bipush        35
84: invokevirtual #148
87: astore        9
89: aload         5
91: aload         8
93: ldc           #92
95: iconst_1
96: bipush        10
98: iconst_m1
99: invokevirtual #149
102: aload_3
103: aload         8
105: bipush        52
107: invokevirtual #150
110: aload         8
112: ldc           #151
114: iconst_3
115: bipush        32
117: bipush        8
119: bipush        97
121: bipush        -71
123: bipush        70
125: ldc           #152
127: iconst_0
128: iconst_0
129: invokevirtual #153
132: astore        10
134: aload_1
135: aload         8
137: bipush        25
139: invokevirtual #150
142: aload_1
143: getfield      #145
146: istore        11
148: aload_1
149: getfield      #381
152: istore        12
154: new           #35
157: dup
158: invokespecial #36
161: ldc           #37
163: invokevirtual #38
166: iload_2
167: invokevirtual #78
170: ldc           #40
172: invokevirtual #38
175: bipush        119
177: invokevirtual #78
180: ldc           #37
182: invokevirtual #38
185: invokevirtual #41
188: iload_2
189: bipush        119
191: if_icmpne     198
194: iconst_1
195: goto          199
198: iconst_0
199: invokestatic  #42
202: aload_3
203: invokestatic  #34
206: new           #35
209: dup
210: invokespecial #36
213: ldc           #37
215: invokevirtual #38
218: iload         4
220: invokevirtual #39
223: ldc           #40
225: invokevirtual #38
228: iconst_0
229: invokevirtual #39
232: ldc           #37
234: invokevirtual #38
237: invokevirtual #41
240: iload         4
242: ifne          249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #42
253: new           #35
256: dup
257: invokespecial #36
260: ldc           #37
262: invokevirtual #38
265: iload         6
267: invokevirtual #78
270: ldc           #40
272: invokevirtual #38
275: bipush        119
277: invokevirtual #78
280: ldc           #37
282: invokevirtual #38
285: invokevirtual #41
288: iload         6
290: bipush        119
292: if_icmpne     299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #42
303: new           #35
306: dup
307: invokespecial #36
310: ldc           #37
312: invokevirtual #38
315: iload         7
317: invokevirtual #84
320: ldc           #40
322: invokevirtual #38
325: iconst_0
326: invokevirtual #84
329: ldc           #37
331: invokevirtual #38
334: invokevirtual #41
337: iload         7
339: ifne          346
342: iconst_1
343: goto          347
346: iconst_0
347: invokestatic  #42
350: aload         9
352: invokestatic  #34
355: aload         10
357: invokestatic  #34
360: new           #35
363: dup
364: invokespecial #36
367: ldc           #37
369: invokevirtual #38
372: iload         11
374: invokevirtual #84
377: ldc           #40
379: invokevirtual #38
382: iconst_0
383: invokevirtual #84
386: ldc           #37
388: invokevirtual #38
391: invokevirtual #41
394: iload         11
396: ifne          403
399: iconst_1
400: goto          404
403: iconst_0
404: invokestatic  #42
407: new           #35
410: dup
411: invokespecial #36
414: ldc           #37
416: invokevirtual #38
419: iload         12
421: invokevirtual #84
424: ldc           #40
426: invokevirtual #38
429: iconst_1
430: invokevirtual #84
433: ldc           #37
435: invokevirtual #38
438: invokevirtual #41
441: iload         12
443: iconst_1
444: if_icmpne     451
447: iconst_1
448: goto          452
451: iconst_0
452: invokestatic  #42
455: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test084
Start line: 1880
End line: 1956
Method source code: 
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Chronology chronology1 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology4 = org.joda.time.chrono.ZonedChronology.getInstance(chronology1, dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = zonedChronology4.secondOfDay();
        java.lang.String str6 = zonedChronology4.toString();
        org.joda.time.DurationField durationField7 = zonedChronology4.halfdays();
        org.joda.time.chrono.LenientChronology lenientChronology8 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology4);
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear9 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean10 = dateTimeOfYear9.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear11 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char12 = dateTimeOfYear11.iZoneChar;
        int int13 = dateTimeOfYear11.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder14 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder16 = dateTimeZoneBuilder14.setStandardOffset((int) '#');
        dateTimeOfYear11.addRecurring(dateTimeZoneBuilder14, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear9.addCutover(dateTimeZoneBuilder14, (int) '4');
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.Chronology chronology25 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone27);
        org.joda.time.Period period31 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray34 = zonedChronology28.get((org.joda.time.ReadablePeriod) period31, (long) (byte) -1, (long) 1);
        java.lang.String str35 = zonedChronology28.toString();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.hourOfDay();
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology28.yearOfCentury();
        org.joda.time.DurationField durationField39 = zonedChronology28.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology28.year();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology28.yearOfEra();
        boolean boolean42 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear9, (java.lang.Object) zonedChronology28);
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear43 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean44 = dateTimeOfYear43.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear45 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char46 = dateTimeOfYear45.iZoneChar;
        int int47 = dateTimeOfYear45.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder48 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder50 = dateTimeZoneBuilder48.setStandardOffset((int) '#');
        dateTimeOfYear45.addRecurring(dateTimeZoneBuilder48, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear43.addCutover(dateTimeZoneBuilder48, (int) '4');
        dateTimeOfYear9.addRecurring(dateTimeZoneBuilder48, "+35:00", (-42), 110, 2922789);
        boolean boolean63 = lenientChronology8.equals((java.lang.Object) dateTimeZoneBuilder48);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(zonedChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str6, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(lenientChronology8);
        org.junit.Assert.assertNotNull(dateTimeOfYear9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + char12 + "' != '" + 'w' + "'", char12 == 'w');
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder16);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(zonedChronology28);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str35, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeOfYear43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + char46 + "' != '" + 'w' + "'", char46 == 'w');
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder50);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #395
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #23
31: astore_2
32: iconst_0
33: invokestatic  #24
36: astore_3
37: aload_2
38: aload_3
39: invokestatic  #25
42: astore        4
44: aload         4
46: invokevirtual #396
49: astore        5
51: aload         4
53: invokevirtual #116
56: astore        6
58: aload         4
60: invokevirtual #397
63: astore        7
65: aload         4
67: invokestatic  #120
70: astore        8
72: invokestatic  #19
75: astore        9
77: aload         9
79: getfield      #142
82: istore        10
84: new           #143
87: dup
88: invokespecial #144
91: astore        11
93: aload         11
95: getfield      #136
98: istore        12
100: aload         11
102: getfield      #145
105: istore        13
107: new           #146
110: dup
111: invokespecial #147
114: astore        14
116: aload         14
118: bipush        35
120: invokevirtual #148
123: astore        15
125: aload         11
127: aload         14
129: ldc           #92
131: iconst_1
132: bipush        10
134: iconst_m1
135: invokevirtual #149
138: aload         9
140: aload         14
142: bipush        52
144: invokevirtual #150
147: aconst_null
148: astore        16
150: aload         16
152: invokestatic  #23
155: astore        17
157: iconst_0
158: invokestatic  #24
161: astore        18
163: aload         17
165: aload         18
167: invokestatic  #25
170: astore        19
172: new           #26
175: dup
176: ldc2_w        #108
179: ldc2_w        #110
182: invokespecial #112
185: astore        20
187: aload         19
189: aload         20
191: ldc2_w        #113
194: lconst_1
195: invokevirtual #115
198: astore        21
200: aload         19
202: invokevirtual #116
205: astore        22
207: aload         19
209: invokevirtual #117
212: astore        23
214: aload         19
216: invokestatic  #118
219: astore        24
221: aload         19
223: invokevirtual #204
226: astore        25
228: aload         19
230: invokevirtual #205
233: astore        26
235: aload         19
237: invokevirtual #206
240: astore        27
242: aload         19
244: invokevirtual #207
247: astore        28
249: aload         9
251: aload         19
253: invokestatic  #174
256: istore        29
258: invokestatic  #19
261: astore        30
263: aload         30
265: getfield      #142
268: istore        31
270: new           #143
273: dup
274: invokespecial #144
277: astore        32
279: aload         32
281: getfield      #136
284: istore        33
286: aload         32
288: getfield      #145
291: istore        34
293: new           #146
296: dup
297: invokespecial #147
300: astore        35
302: aload         35
304: bipush        35
306: invokevirtual #148
309: astore        36
311: aload         32
313: aload         35
315: ldc           #92
317: iconst_1
318: bipush        10
320: iconst_m1
321: invokevirtual #149
324: aload         30
326: aload         35
328: bipush        52
330: invokevirtual #150
333: aload         9
335: aload         35
337: ldc_w         #271
340: bipush        -42
342: bipush        110
344: ldc_w         #272
347: invokevirtual #149
350: aload         8
352: aload         35
354: invokevirtual #398
357: istore        37
359: aload_2
360: invokestatic  #34
363: aload_3
364: invokestatic  #34
367: aload         4
369: invokestatic  #34
372: aload         5
374: invokestatic  #34
377: new           #35
380: dup
381: invokespecial #36
384: ldc           #37
386: invokevirtual #38
389: aload         6
391: invokevirtual #38
394: ldc           #129
396: invokevirtual #38
399: invokevirtual #41
402: aload         6
404: ldc           #130
406: invokestatic  #66
409: aload         7
411: invokestatic  #34
414: aload         8
416: invokestatic  #34
419: aload         9
421: invokestatic  #34
424: new           #35
427: dup
428: invokespecial #36
431: ldc           #37
433: invokevirtual #38
436: iload         10
438: invokevirtual #39
441: ldc           #40
443: invokevirtual #38
446: iconst_0
447: invokevirtual #39
450: ldc           #37
452: invokevirtual #38
455: invokevirtual #41
458: iload         10
460: ifne          467
463: iconst_1
464: goto          468
467: iconst_0
468: invokestatic  #42
471: new           #35
474: dup
475: invokespecial #36
478: ldc           #37
480: invokevirtual #38
483: iload         12
485: invokevirtual #78
488: ldc           #40
490: invokevirtual #38
493: bipush        119
495: invokevirtual #78
498: ldc           #37
500: invokevirtual #38
503: invokevirtual #41
506: iload         12
508: bipush        119
510: if_icmpne     517
513: iconst_1
514: goto          518
517: iconst_0
518: invokestatic  #42
521: new           #35
524: dup
525: invokespecial #36
528: ldc           #37
530: invokevirtual #38
533: iload         13
535: invokevirtual #84
538: ldc           #40
540: invokevirtual #38
543: iconst_0
544: invokevirtual #84
547: ldc           #37
549: invokevirtual #38
552: invokevirtual #41
555: iload         13
557: ifne          564
560: iconst_1
561: goto          565
564: iconst_0
565: invokestatic  #42
568: aload         15
570: invokestatic  #34
573: aload         17
575: invokestatic  #34
578: aload         18
580: invokestatic  #34
583: aload         19
585: invokestatic  #34
588: aload         21
590: invokestatic  #34
593: aload         21
595: invokestatic  #126
598: ldc           #127
600: invokestatic  #128
603: new           #35
606: dup
607: invokespecial #36
610: ldc           #37
612: invokevirtual #38
615: aload         22
617: invokevirtual #38
620: ldc           #129
622: invokevirtual #38
625: invokevirtual #41
628: aload         22
630: ldc           #130
632: invokestatic  #66
635: aload         23
637: invokestatic  #34
640: aload         24
642: invokestatic  #34
645: aload         25
647: invokestatic  #34
650: aload         26
652: invokestatic  #34
655: aload         27
657: invokestatic  #34
660: aload         28
662: invokestatic  #34
665: new           #35
668: dup
669: invokespecial #36
672: ldc           #37
674: invokevirtual #38
677: iload         29
679: invokevirtual #39
682: ldc           #40
684: invokevirtual #38
687: iconst_0
688: invokevirtual #39
691: ldc           #37
693: invokevirtual #38
696: invokevirtual #41
699: iload         29
701: ifne          708
704: iconst_1
705: goto          709
708: iconst_0
709: invokestatic  #42
712: aload         30
714: invokestatic  #34
717: new           #35
720: dup
721: invokespecial #36
724: ldc           #37
726: invokevirtual #38
729: iload         31
731: invokevirtual #39
734: ldc           #40
736: invokevirtual #38
739: iconst_0
740: invokevirtual #39
743: ldc           #37
745: invokevirtual #38
748: invokevirtual #41
751: iload         31
753: ifne          760
756: iconst_1
757: goto          761
760: iconst_0
761: invokestatic  #42
764: new           #35
767: dup
768: invokespecial #36
771: ldc           #37
773: invokevirtual #38
776: iload         33
778: invokevirtual #78
781: ldc           #40
783: invokevirtual #38
786: bipush        119
788: invokevirtual #78
791: ldc           #37
793: invokevirtual #38
796: invokevirtual #41
799: iload         33
801: bipush        119
803: if_icmpne     810
806: iconst_1
807: goto          811
810: iconst_0
811: invokestatic  #42
814: new           #35
817: dup
818: invokespecial #36
821: ldc           #37
823: invokevirtual #38
826: iload         34
828: invokevirtual #84
831: ldc           #40
833: invokevirtual #38
836: iconst_0
837: invokevirtual #84
840: ldc           #37
842: invokevirtual #38
845: invokevirtual #41
848: iload         34
850: ifne          857
853: iconst_1
854: goto          858
857: iconst_0
858: invokestatic  #42
861: aload         36
863: invokestatic  #34
866: new           #35
869: dup
870: invokespecial #36
873: ldc           #37
875: invokevirtual #38
878: iload         37
880: invokevirtual #39
883: ldc           #40
885: invokevirtual #38
888: iconst_0
889: invokevirtual #39
892: ldc           #37
894: invokevirtual #38
897: invokevirtual #41
900: iload         37
902: ifne          909
905: iconst_1
906: goto          910
909: iconst_0
910: invokestatic  #42
913: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test085
Start line: 1959
End line: 2025
Method source code: 
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear34 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean35 = dateTimeOfYear34.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear36 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char37 = dateTimeOfYear36.iZoneChar;
        int int38 = dateTimeOfYear36.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder39 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder41 = dateTimeZoneBuilder39.setStandardOffset((int) '#');
        dateTimeOfYear36.addRecurring(dateTimeZoneBuilder39, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear34.addCutover(dateTimeZoneBuilder39, (int) '4');
        dateTimeOfYear0.addRecurring(dateTimeZoneBuilder39, "+35:00", (-42), 110, 2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder61 = dateTimeZoneBuilder39.addCutover(140, 'a', 11, 0, 106255, true, (-78));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown mode: a");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeOfYear34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + char37 + "' != '" + 'w' + "'", char37 == 'w');
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder41);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #399
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: invokestatic  #19
205: astore        22
207: aload         22
209: getfield      #142
212: istore        23
214: new           #143
217: dup
218: invokespecial #144
221: astore        24
223: aload         24
225: getfield      #136
228: istore        25
230: aload         24
232: getfield      #145
235: istore        26
237: new           #146
240: dup
241: invokespecial #147
244: astore        27
246: aload         27
248: bipush        35
250: invokevirtual #148
253: astore        28
255: aload         24
257: aload         27
259: ldc           #92
261: iconst_1
262: bipush        10
264: iconst_m1
265: invokevirtual #149
268: aload         22
270: aload         27
272: bipush        52
274: invokevirtual #150
277: aload_1
278: aload         27
280: ldc_w         #271
283: bipush        -42
285: bipush        110
287: ldc_w         #272
290: invokevirtual #149
293: aload         27
295: sipush        140
298: bipush        97
300: bipush        11
302: iconst_0
303: ldc_w         #400
306: iconst_1
307: bipush        -78
309: invokevirtual #165
312: astore        29
314: ldc           #166
316: invokestatic  #11
319: goto          324
322: astore        29
324: aload_1
325: invokestatic  #34
328: new           #35
331: dup
332: invokespecial #36
335: ldc           #37
337: invokevirtual #38
340: iload_2
341: invokevirtual #39
344: ldc           #40
346: invokevirtual #38
349: iconst_0
350: invokevirtual #39
353: ldc           #37
355: invokevirtual #38
358: invokevirtual #41
361: iload_2
362: ifne          369
365: iconst_1
366: goto          370
369: iconst_0
370: invokestatic  #42
373: new           #35
376: dup
377: invokespecial #36
380: ldc           #37
382: invokevirtual #38
385: iload         4
387: invokevirtual #78
390: ldc           #40
392: invokevirtual #38
395: bipush        119
397: invokevirtual #78
400: ldc           #37
402: invokevirtual #38
405: invokevirtual #41
408: iload         4
410: bipush        119
412: if_icmpne     419
415: iconst_1
416: goto          420
419: iconst_0
420: invokestatic  #42
423: new           #35
426: dup
427: invokespecial #36
430: ldc           #37
432: invokevirtual #38
435: iload         5
437: invokevirtual #84
440: ldc           #40
442: invokevirtual #38
445: iconst_0
446: invokevirtual #84
449: ldc           #37
451: invokevirtual #38
454: invokevirtual #41
457: iload         5
459: ifne          466
462: iconst_1
463: goto          467
466: iconst_0
467: invokestatic  #42
470: aload         7
472: invokestatic  #34
475: aload         9
477: invokestatic  #34
480: aload         10
482: invokestatic  #34
485: aload         11
487: invokestatic  #34
490: aload         13
492: invokestatic  #34
495: aload         13
497: invokestatic  #126
500: ldc           #127
502: invokestatic  #128
505: new           #35
508: dup
509: invokespecial #36
512: ldc           #37
514: invokevirtual #38
517: aload         14
519: invokevirtual #38
522: ldc           #129
524: invokevirtual #38
527: invokevirtual #41
530: aload         14
532: ldc           #130
534: invokestatic  #66
537: aload         15
539: invokestatic  #34
542: aload         16
544: invokestatic  #34
547: aload         17
549: invokestatic  #34
552: aload         18
554: invokestatic  #34
557: aload         19
559: invokestatic  #34
562: aload         20
564: invokestatic  #34
567: new           #35
570: dup
571: invokespecial #36
574: ldc           #37
576: invokevirtual #38
579: iload         21
581: invokevirtual #39
584: ldc           #40
586: invokevirtual #38
589: iconst_0
590: invokevirtual #39
593: ldc           #37
595: invokevirtual #38
598: invokevirtual #41
601: iload         21
603: ifne          610
606: iconst_1
607: goto          611
610: iconst_0
611: invokestatic  #42
614: aload         22
616: invokestatic  #34
619: new           #35
622: dup
623: invokespecial #36
626: ldc           #37
628: invokevirtual #38
631: iload         23
633: invokevirtual #39
636: ldc           #40
638: invokevirtual #38
641: iconst_0
642: invokevirtual #39
645: ldc           #37
647: invokevirtual #38
650: invokevirtual #41
653: iload         23
655: ifne          662
658: iconst_1
659: goto          663
662: iconst_0
663: invokestatic  #42
666: new           #35
669: dup
670: invokespecial #36
673: ldc           #37
675: invokevirtual #38
678: iload         25
680: invokevirtual #78
683: ldc           #40
685: invokevirtual #38
688: bipush        119
690: invokevirtual #78
693: ldc           #37
695: invokevirtual #38
698: invokevirtual #41
701: iload         25
703: bipush        119
705: if_icmpne     712
708: iconst_1
709: goto          713
712: iconst_0
713: invokestatic  #42
716: new           #35
719: dup
720: invokespecial #36
723: ldc           #37
725: invokevirtual #38
728: iload         26
730: invokevirtual #84
733: ldc           #40
735: invokevirtual #38
738: iconst_0
739: invokevirtual #84
742: ldc           #37
744: invokevirtual #38
747: invokevirtual #41
750: iload         26
752: ifne          759
755: iconst_1
756: goto          760
759: iconst_0
760: invokestatic  #42
763: aload         28
765: invokestatic  #34
768: return
Exception table:
from    to  target type
293   319   322   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test086
Start line: 2028
End line: 2047
Method source code: 
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100);
        boolean boolean7 = fixedDateTimeZone5.isStandardOffset(3752784000097L);
        int int9 = fixedDateTimeZone5.getOffsetFromLocal(31536000000L);
        java.util.TimeZone timeZone10 = fixedDateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeUtils.getZone((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long14 = fixedDateTimeZone5.convertLocalToUTC(14515200000L, false);
        boolean boolean15 = org.joda.time.tz.ZoneInfoCompiler.test("minutes", (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long18 = fixedDateTimeZone5.convertLocalToUTC((-292277025L), true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 14515199977L + "'", long14 == 14515199977L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-292277048L) + "'", long18 == (-292277048L));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #401
20: aastore
21: invokevirtual #7
24: pop
25: new           #331
28: dup
29: ldc_w         #332
32: ldc           #92
34: bipush        23
36: bipush        100
38: invokespecial #333
41: astore_1
42: aload_1
43: ldc2_w        #334
46: invokevirtual #336
49: istore_2
50: aload_1
51: ldc2_w        #337
54: invokevirtual #339
57: istore_3
58: aload_1
59: invokevirtual #340
62: astore        4
64: aload_1
65: invokestatic  #402
68: astore        5
70: aload_1
71: ldc2_w        #403
74: iconst_0
75: invokevirtual #405
78: lstore        6
80: ldc           #88
82: aload_1
83: invokestatic  #125
86: istore        8
88: aload_1
89: ldc2_w        #406
92: iconst_1
93: invokevirtual #405
96: lstore        9
98: new           #35
101: dup
102: invokespecial #36
105: ldc           #37
107: invokevirtual #38
110: iload_2
111: invokevirtual #39
114: ldc           #40
116: invokevirtual #38
119: iconst_0
120: invokevirtual #39
123: ldc           #37
125: invokevirtual #38
128: invokevirtual #41
131: iload_2
132: ifne          139
135: iconst_1
136: goto          140
139: iconst_0
140: invokestatic  #42
143: new           #35
146: dup
147: invokespecial #36
150: ldc           #37
152: invokevirtual #38
155: iload_3
156: invokevirtual #84
159: ldc           #40
161: invokevirtual #38
164: bipush        23
166: invokevirtual #84
169: ldc           #37
171: invokevirtual #38
174: invokevirtual #41
177: iload_3
178: bipush        23
180: if_icmpne     187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #42
191: aload         4
193: invokestatic  #34
196: aload         4
198: invokevirtual #131
201: ldc_w         #355
204: invokestatic  #128
207: aload         5
209: invokestatic  #34
212: new           #35
215: dup
216: invokespecial #36
219: ldc           #37
221: invokevirtual #38
224: lload         6
226: invokevirtual #233
229: ldc           #40
231: invokevirtual #38
234: ldc2_w        #408
237: invokevirtual #233
240: ldc           #37
242: invokevirtual #38
245: invokevirtual #41
248: lload         6
250: ldc2_w        #408
253: lcmp
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         8
279: invokevirtual #39
282: ldc           #40
284: invokevirtual #38
287: iconst_1
288: invokevirtual #39
291: ldc           #37
293: invokevirtual #38
296: invokevirtual #41
299: iload         8
301: iconst_1
302: if_icmpne     309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #42
313: new           #35
316: dup
317: invokespecial #36
320: ldc           #37
322: invokevirtual #38
325: lload         9
327: invokevirtual #233
330: ldc           #40
332: invokevirtual #38
335: ldc2_w        #410
338: invokevirtual #233
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: lload         9
351: ldc2_w        #410
354: lcmp
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #42
366: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test087
Start line: 2050
End line: 2091
Method source code: 
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        int int2 = dateTimeOfYear0.iMillisOfDay;
        int int3 = dateTimeOfYear0.iMonthOfYear;
        int int4 = dateTimeOfYear0.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset(0);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, (int) ' ');
        java.lang.String str10 = dateTimeOfYear0.toString();
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear11 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean12 = dateTimeOfYear11.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear13 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char14 = dateTimeOfYear13.iZoneChar;
        int int15 = dateTimeOfYear13.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder16 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder18 = dateTimeZoneBuilder16.setStandardOffset((int) '#');
        dateTimeOfYear13.addRecurring(dateTimeZoneBuilder16, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear11.addCutover(dateTimeZoneBuilder16, (int) '4');
        dateTimeOfYear0.addRecurring(dateTimeZoneBuilder16, "8", 8, 0, 0);
        java.io.OutputStream outputStream32 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeZoneBuilder16.writeTo("DateTimeField[yearOfCentury]", outputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n" + "'", str10, "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
        org.junit.Assert.assertNotNull(dateTimeOfYear11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + char14 + "' != '" + 'w' + "'", char14 == 'w');
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #412
20: aastore
21: invokevirtual #7
24: pop
25: new           #143
28: dup
29: invokespecial #144
32: astore_1
33: aload_1
34: getfield      #136
37: istore_2
38: aload_1
39: getfield      #145
42: istore_3
43: aload_1
44: getfield      #381
47: istore        4
49: aload_1
50: getfield      #145
53: istore        5
55: new           #146
58: dup
59: invokespecial #147
62: astore        6
64: aload         6
66: iconst_0
67: invokevirtual #148
70: astore        7
72: aload_1
73: aload         7
75: bipush        32
77: invokevirtual #150
80: aload_1
81: invokevirtual #297
84: astore        8
86: invokestatic  #19
89: astore        9
91: aload         9
93: getfield      #142
96: istore        10
98: new           #143
101: dup
102: invokespecial #144
105: astore        11
107: aload         11
109: getfield      #136
112: istore        12
114: aload         11
116: getfield      #145
119: istore        13
121: new           #146
124: dup
125: invokespecial #147
128: astore        14
130: aload         14
132: bipush        35
134: invokevirtual #148
137: astore        15
139: aload         11
141: aload         14
143: ldc           #92
145: iconst_1
146: bipush        10
148: iconst_m1
149: invokevirtual #149
152: aload         9
154: aload         14
156: bipush        52
158: invokevirtual #150
161: aload_1
162: aload         14
164: ldc_w         #413
167: bipush        8
169: iconst_0
170: iconst_0
171: invokevirtual #149
174: aconst_null
175: astore        16
177: aload         14
179: ldc           #255
181: aload         16
183: invokevirtual #222
186: ldc           #47
188: invokestatic  #11
191: goto          196
194: astore        17
196: new           #35
199: dup
200: invokespecial #36
203: ldc           #37
205: invokevirtual #38
208: iload_2
209: invokevirtual #78
212: ldc           #40
214: invokevirtual #38
217: bipush        119
219: invokevirtual #78
222: ldc           #37
224: invokevirtual #38
227: invokevirtual #41
230: iload_2
231: bipush        119
233: if_icmpne     240
236: iconst_1
237: goto          241
240: iconst_0
241: invokestatic  #42
244: new           #35
247: dup
248: invokespecial #36
251: ldc           #37
253: invokevirtual #38
256: iload_3
257: invokevirtual #84
260: ldc           #40
262: invokevirtual #38
265: iconst_0
266: invokevirtual #84
269: ldc           #37
271: invokevirtual #38
274: invokevirtual #41
277: iload_3
278: ifne          285
281: iconst_1
282: goto          286
285: iconst_0
286: invokestatic  #42
289: new           #35
292: dup
293: invokespecial #36
296: ldc           #37
298: invokevirtual #38
301: iload         4
303: invokevirtual #84
306: ldc           #40
308: invokevirtual #38
311: iconst_1
312: invokevirtual #84
315: ldc           #37
317: invokevirtual #38
320: invokevirtual #41
323: iload         4
325: iconst_1
326: if_icmpne     333
329: iconst_1
330: goto          334
333: iconst_0
334: invokestatic  #42
337: new           #35
340: dup
341: invokespecial #36
344: ldc           #37
346: invokevirtual #38
349: iload         5
351: invokevirtual #84
354: ldc           #40
356: invokevirtual #38
359: iconst_0
360: invokevirtual #84
363: ldc           #37
365: invokevirtual #38
368: invokevirtual #41
371: iload         5
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #42
384: aload         7
386: invokestatic  #34
389: new           #35
392: dup
393: invokespecial #36
396: ldc           #37
398: invokevirtual #38
401: aload         8
403: invokevirtual #38
406: ldc_w         #299
409: invokevirtual #38
412: invokevirtual #41
415: aload         8
417: ldc           #60
419: invokestatic  #66
422: aload         9
424: invokestatic  #34
427: new           #35
430: dup
431: invokespecial #36
434: ldc           #37
436: invokevirtual #38
439: iload         10
441: invokevirtual #39
444: ldc           #40
446: invokevirtual #38
449: iconst_0
450: invokevirtual #39
453: ldc           #37
455: invokevirtual #38
458: invokevirtual #41
461: iload         10
463: ifne          470
466: iconst_1
467: goto          471
470: iconst_0
471: invokestatic  #42
474: new           #35
477: dup
478: invokespecial #36
481: ldc           #37
483: invokevirtual #38
486: iload         12
488: invokevirtual #78
491: ldc           #40
493: invokevirtual #38
496: bipush        119
498: invokevirtual #78
501: ldc           #37
503: invokevirtual #38
506: invokevirtual #41
509: iload         12
511: bipush        119
513: if_icmpne     520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #42
524: new           #35
527: dup
528: invokespecial #36
531: ldc           #37
533: invokevirtual #38
536: iload         13
538: invokevirtual #84
541: ldc           #40
543: invokevirtual #38
546: iconst_0
547: invokevirtual #84
550: ldc           #37
552: invokevirtual #38
555: invokevirtual #41
558: iload         13
560: ifne          567
563: iconst_1
564: goto          568
567: iconst_0
568: invokestatic  #42
571: aload         15
573: invokestatic  #34
576: return
Exception table:
from    to  target type
177   191   194   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test088
Start line: 2094
End line: 2104
Method source code: 
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("25");
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"25\": Value 25 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #414
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #415
28: invokestatic  #51
31: istore_1
32: goto          36
35: astore_1
36: return
Exception table:
from    to  target type
25    32    35   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test089
Start line: 2107
End line: 2133
Method source code: 
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray11 = zonedChronology5.get((org.joda.time.ReadablePeriod) period8, (long) (byte) -1, (long) 1);
        java.lang.String str12 = zonedChronology5.toString();
        org.joda.time.Chronology chronology13 = zonedChronology5.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = zonedChronology5.getZone();
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone15 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone14);
        long long17 = cachedDateTimeZone15.previousTransition(4840639870000L);
        boolean boolean18 = org.joda.time.tz.ZoneInfoCompiler.test("", (org.joda.time.DateTimeZone) cachedDateTimeZone15);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zonedChronology5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str12, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(cachedDateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4840639870000L + "'", long17 == 4840639870000L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #416
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #23
31: astore_2
32: iconst_0
33: invokestatic  #24
36: astore_3
37: aload_2
38: aload_3
39: invokestatic  #25
42: astore        4
44: new           #26
47: dup
48: ldc2_w        #108
51: ldc2_w        #110
54: invokespecial #112
57: astore        5
59: aload         4
61: aload         5
63: ldc2_w        #113
66: lconst_1
67: invokevirtual #115
70: astore        6
72: aload         4
74: invokevirtual #116
77: astore        7
79: aload         4
81: invokevirtual #417
84: astore        8
86: aload         4
88: invokevirtual #418
91: astore        9
93: aload         9
95: invokestatic  #178
98: astore        10
100: aload         10
102: ldc2_w        #419
105: invokevirtual #421
108: lstore        11
110: ldc           #14
112: aload         10
114: invokestatic  #125
117: istore        13
119: aload_2
120: invokestatic  #34
123: aload_3
124: invokestatic  #34
127: aload         4
129: invokestatic  #34
132: aload         6
134: invokestatic  #34
137: aload         6
139: invokestatic  #126
142: ldc           #127
144: invokestatic  #128
147: new           #35
150: dup
151: invokespecial #36
154: ldc           #37
156: invokevirtual #38
159: aload         7
161: invokevirtual #38
164: ldc           #129
166: invokevirtual #38
169: invokevirtual #41
172: aload         7
174: ldc           #130
176: invokestatic  #66
179: aload         8
181: invokestatic  #34
184: aload         9
186: invokestatic  #34
189: aload         10
191: invokestatic  #34
194: new           #35
197: dup
198: invokespecial #36
201: ldc           #37
203: invokevirtual #38
206: lload         11
208: invokevirtual #233
211: ldc           #40
213: invokevirtual #38
216: ldc2_w        #419
219: invokevirtual #233
222: ldc           #37
224: invokevirtual #38
227: invokevirtual #41
230: lload         11
232: ldc2_w        #419
235: lcmp
236: ifne          243
239: iconst_1
240: goto          244
243: iconst_0
244: invokestatic  #42
247: new           #35
250: dup
251: invokespecial #36
254: ldc           #37
256: invokevirtual #38
259: iload         13
261: invokevirtual #39
264: ldc           #40
266: invokevirtual #38
269: iconst_1
270: invokevirtual #39
273: ldc           #37
275: invokevirtual #38
278: invokevirtual #41
281: iload         13
283: iconst_1
284: if_icmpne     291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #42
295: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test090
Start line: 2136
End line: 2146
Method source code: 
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("weekOfWeekyear");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekOfWeekyear\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #422
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #423
28: invokestatic  #9
31: istore_1
32: ldc_w         #424
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test091
Start line: 2149
End line: 2154
Method source code: 
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("6");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #425
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #426
28: invokestatic  #57
31: istore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: iload_1
45: invokevirtual #84
48: ldc           #40
50: invokevirtual #38
53: bipush        6
55: invokevirtual #84
58: ldc           #37
60: invokevirtual #38
63: invokevirtual #41
66: iload_1
67: bipush        6
69: if_icmpne     76
72: iconst_1
73: goto          77
76: iconst_0
77: invokestatic  #42
80: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test092
Start line: 2157
End line: 2205
Method source code: 
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField35 = zonedChronology19.days();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #427
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #204
207: astore        22
209: aload         11
211: invokevirtual #428
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: aload         23
513: invokestatic  #34
516: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test093
Start line: 2208
End line: 2213
Method source code: 
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("2024-05-15T11:04:13.339Z/2024-05-15T11:04:13.339Z");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 72000000 + "'", int1 == 72000000);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #429
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #215
27: invokestatic  #51
30: istore_1
31: new           #35
34: dup
35: invokespecial #36
38: ldc           #37
40: invokevirtual #38
43: iload_1
44: invokevirtual #84
47: ldc           #40
49: invokevirtual #38
52: ldc_w         #282
55: invokevirtual #84
58: ldc           #37
60: invokevirtual #38
63: invokevirtual #41
66: iload_1
67: ldc_w         #282
70: if_icmpne     77
73: iconst_1
74: goto          78
77: iconst_0
78: invokestatic  #42
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test094
Start line: 2216
End line: 2221
Method source code: 
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("1967-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1967-01-01T00:00:00.000Z" + "'", str1, "1967-01-01T00:00:00.000Z");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #430
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #294
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #431
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #294
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test095
Start line: 2224
End line: 2234
Method source code: 
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("72");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"72\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #432
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #433
28: invokestatic  #57
31: istore_1
32: ldc_w         #434
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test096
Start line: 2237
End line: 2276
Method source code: 
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        java.io.DataOutputStream dataOutputStream0 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler1 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file2 = null;
        java.io.File[] fileArray3 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = zoneInfoCompiler1.compile(file2, fileArray3);
        java.io.File file5 = null;
        java.io.File[] fileArray6 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = zoneInfoCompiler1.compile(file5, fileArray6);
        java.io.File file8 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler9 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file10 = null;
        java.io.File[] fileArray11 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = zoneInfoCompiler9.compile(file10, fileArray11);
        java.io.File file13 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler14 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file15 = null;
        java.io.File[] fileArray16 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = zoneInfoCompiler14.compile(file15, fileArray16);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap18 = zoneInfoCompiler9.compile(file13, fileArray16);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = zoneInfoCompiler1.compile(file8, fileArray16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, strMap19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(strMap7);
        org.junit.Assert.assertNotNull(fileArray11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertNotNull(fileArray16);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strMap18);
        org.junit.Assert.assertNotNull(strMap19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #435
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #44
30: dup
31: invokespecial #45
34: astore_2
35: aconst_null
36: astore_3
37: iconst_0
38: anewarray     #95
41: astore        4
43: aload_2
44: aload_3
45: aload         4
47: invokevirtual #96
50: astore        5
52: aconst_null
53: astore        6
55: aconst_null
56: astore        7
58: aload_2
59: aload         6
61: aload         7
63: invokevirtual #96
66: astore        8
68: aconst_null
69: astore        9
71: new           #44
74: dup
75: invokespecial #45
78: astore        10
80: aconst_null
81: astore        11
83: iconst_0
84: anewarray     #95
87: astore        12
89: aload         10
91: aload         11
93: aload         12
95: invokevirtual #96
98: astore        13
100: aconst_null
101: astore        14
103: new           #44
106: dup
107: invokespecial #45
110: astore        15
112: aconst_null
113: astore        16
115: iconst_0
116: anewarray     #95
119: astore        17
121: aload         15
123: aload         16
125: aload         17
127: invokevirtual #96
130: astore        18
132: aload         10
134: aload         14
136: aload         17
138: invokevirtual #96
141: astore        19
143: aload_2
144: aload         9
146: aload         17
148: invokevirtual #96
151: astore        20
153: aload_1
154: aload         20
156: invokestatic  #70
159: ldc           #47
161: invokestatic  #11
164: goto          169
167: astore        21
169: aload         4
171: invokestatic  #34
174: aload         5
176: invokestatic  #34
179: aload         8
181: invokestatic  #34
184: aload         12
186: invokestatic  #34
189: aload         13
191: invokestatic  #34
194: aload         17
196: invokestatic  #34
199: aload         18
201: invokestatic  #34
204: aload         19
206: invokestatic  #34
209: aload         20
211: invokestatic  #34
214: return
Exception table:
from    to  target type
153   164   167   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test097
Start line: 2279
End line: 2284
Method source code: 
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("PT0.070S");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PT0.070S" + "'", str1, "PT0.070S");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #436
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #437
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #438
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #437
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test098
Start line: 2287
End line: 2368
Method source code: 
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4);
        org.joda.time.Period period8 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray11 = zonedChronology5.get((org.joda.time.ReadablePeriod) period8, (long) (byte) -1, (long) 1);
        java.lang.String str12 = zonedChronology5.toString();
        org.joda.time.DateTimeField dateTimeField13 = zonedChronology5.hourOfDay();
        org.joda.time.Chronology chronology14 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology5);
        org.joda.time.DurationField durationField15 = zonedChronology5.hours();
        org.joda.time.chrono.LenientChronology lenientChronology16 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology) zonedChronology5);
        org.joda.time.DurationField durationField17 = lenientChronology16.millis();
        org.joda.time.ReadableInterval readableInterval18 = null;
        org.joda.time.Chronology chronology19 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology19.minutes();
        boolean boolean22 = lenientChronology16.equals((java.lang.Object) chronology19);
        org.joda.time.ReadableInterval readableInterval23 = null;
        org.joda.time.Chronology chronology24 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray33 = zonedChronology27.get((org.joda.time.ReadablePeriod) period30, (long) (byte) -1, (long) 1);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology27.monthOfYear();
        boolean boolean36 = lenientChronology16.equals((java.lang.Object) dateTimeField35);
        org.joda.time.Chronology chronology37 = lenientChronology16.withUTC();
        org.joda.time.DateTimeField dateTimeField38 = lenientChronology16.minuteOfHour();
        org.joda.time.ReadableInterval readableInterval39 = null;
        org.joda.time.Chronology chronology40 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology43 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone42);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone44 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone42);
        org.joda.time.Period period46 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        boolean boolean48 = period46.isSupported(durationFieldType47);
        boolean boolean49 = cachedDateTimeZone44.equals((java.lang.Object) boolean48);
        org.joda.time.DateTimeZone dateTimeZone50 = cachedDateTimeZone44.getUncachedZone();
        java.util.Locale locale52 = null;
        java.lang.String str53 = cachedDateTimeZone44.getName(2440588L, locale52);
        org.joda.time.Chronology chronology54 = lenientChronology16.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone44);
        boolean boolean55 = org.joda.time.tz.ZoneInfoCompiler.test("24", (org.joda.time.DateTimeZone) cachedDateTimeZone44);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zonedChronology5);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str12, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(lenientChronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(zonedChronology27);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(zonedChronology43);
        org.junit.Assert.assertNotNull(cachedDateTimeZone44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #439
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #23
31: astore_2
32: iconst_0
33: invokestatic  #24
36: astore_3
37: aload_2
38: aload_3
39: invokestatic  #25
42: astore        4
44: new           #26
47: dup
48: ldc2_w        #108
51: ldc2_w        #110
54: invokespecial #112
57: astore        5
59: aload         4
61: aload         5
63: ldc2_w        #113
66: lconst_1
67: invokevirtual #115
70: astore        6
72: aload         4
74: invokevirtual #116
77: astore        7
79: aload         4
81: invokevirtual #117
84: astore        8
86: aload         4
88: invokestatic  #118
91: astore        9
93: aload         4
95: invokevirtual #119
98: astore        10
100: aload         4
102: invokestatic  #120
105: astore        11
107: aload         11
109: invokevirtual #440
112: astore        12
114: aconst_null
115: astore        13
117: aload         13
119: invokestatic  #23
122: astore        14
124: aload         14
126: invokevirtual #441
129: astore        15
131: aload         14
133: invokevirtual #442
136: astore        16
138: aload         11
140: aload         14
142: invokevirtual #398
145: istore        17
147: aconst_null
148: astore        18
150: aload         18
152: invokestatic  #23
155: astore        19
157: iconst_0
158: invokestatic  #24
161: astore        20
163: aload         19
165: aload         20
167: invokestatic  #25
170: astore        21
172: new           #26
175: dup
176: ldc2_w        #108
179: ldc2_w        #110
182: invokespecial #112
185: astore        22
187: aload         21
189: aload         22
191: ldc2_w        #113
194: lconst_1
195: invokevirtual #115
198: astore        23
200: aload         21
202: invokevirtual #207
205: astore        24
207: aload         21
209: invokevirtual #443
212: astore        25
214: aload         11
216: aload         25
218: invokevirtual #398
221: istore        26
223: aload         11
225: invokevirtual #444
228: astore        27
230: aload         11
232: invokevirtual #445
235: astore        28
237: aconst_null
238: astore        29
240: aload         29
242: invokestatic  #23
245: astore        30
247: iconst_0
248: invokestatic  #24
251: astore        31
253: aload         30
255: aload         31
257: invokestatic  #25
260: astore        32
262: aload         31
264: invokestatic  #178
267: astore        33
269: iconst_1
270: invokestatic  #322
273: astore        34
275: aconst_null
276: astore        35
278: aload         34
280: aload         35
282: invokevirtual #389
285: istore        36
287: aload         33
289: iload         36
291: invokestatic  #232
294: invokevirtual #378
297: istore        37
299: aload         33
301: invokevirtual #446
304: astore        38
306: aconst_null
307: astore        39
309: aload         33
311: ldc2_w        #447
314: aload         39
316: invokevirtual #449
319: astore        40
321: aload         11
323: aload         33
325: invokevirtual #123
328: astore        41
330: ldc           #191
332: aload         33
334: invokestatic  #125
337: istore        42
339: aload_2
340: invokestatic  #34
343: aload_3
344: invokestatic  #34
347: aload         4
349: invokestatic  #34
352: aload         6
354: invokestatic  #34
357: aload         6
359: invokestatic  #126
362: ldc           #127
364: invokestatic  #128
367: new           #35
370: dup
371: invokespecial #36
374: ldc           #37
376: invokevirtual #38
379: aload         7
381: invokevirtual #38
384: ldc           #129
386: invokevirtual #38
389: invokevirtual #41
392: aload         7
394: ldc           #130
396: invokestatic  #66
399: aload         8
401: invokestatic  #34
404: aload         9
406: invokestatic  #34
409: aload         10
411: invokestatic  #34
414: aload         11
416: invokestatic  #34
419: aload         12
421: invokestatic  #34
424: aload         14
426: invokestatic  #34
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: new           #35
442: dup
443: invokespecial #36
446: ldc           #37
448: invokevirtual #38
451: iload         17
453: invokevirtual #39
456: ldc           #40
458: invokevirtual #38
461: iconst_0
462: invokevirtual #39
465: ldc           #37
467: invokevirtual #38
470: invokevirtual #41
473: iload         17
475: ifne          482
478: iconst_1
479: goto          483
482: iconst_0
483: invokestatic  #42
486: aload         19
488: invokestatic  #34
491: aload         20
493: invokestatic  #34
496: aload         21
498: invokestatic  #34
501: aload         23
503: invokestatic  #34
506: aload         23
508: invokestatic  #126
511: ldc           #127
513: invokestatic  #128
516: aload         24
518: invokestatic  #34
521: aload         25
523: invokestatic  #34
526: new           #35
529: dup
530: invokespecial #36
533: ldc           #37
535: invokevirtual #38
538: iload         26
540: invokevirtual #39
543: ldc           #40
545: invokevirtual #38
548: iconst_0
549: invokevirtual #39
552: ldc           #37
554: invokevirtual #38
557: invokevirtual #41
560: iload         26
562: ifne          569
565: iconst_1
566: goto          570
569: iconst_0
570: invokestatic  #42
573: aload         27
575: invokestatic  #34
578: aload         28
580: invokestatic  #34
583: aload         30
585: invokestatic  #34
588: aload         31
590: invokestatic  #34
593: aload         32
595: invokestatic  #34
598: aload         33
600: invokestatic  #34
603: aload         34
605: invokestatic  #34
608: new           #35
611: dup
612: invokespecial #36
615: ldc           #37
617: invokevirtual #38
620: iload         36
622: invokevirtual #39
625: ldc           #40
627: invokevirtual #38
630: iconst_0
631: invokevirtual #39
634: ldc           #37
636: invokevirtual #38
639: invokevirtual #41
642: iload         36
644: ifne          651
647: iconst_1
648: goto          652
651: iconst_0
652: invokestatic  #42
655: new           #35
658: dup
659: invokespecial #36
662: ldc           #37
664: invokevirtual #38
667: iload         37
669: invokevirtual #39
672: ldc           #40
674: invokevirtual #38
677: iconst_0
678: invokevirtual #39
681: ldc           #37
683: invokevirtual #38
686: invokevirtual #41
689: iload         37
691: ifne          698
694: iconst_1
695: goto          699
698: iconst_0
699: invokestatic  #42
702: aload         38
704: invokestatic  #34
707: new           #35
710: dup
711: invokespecial #36
714: ldc           #37
716: invokevirtual #38
719: aload         40
721: invokevirtual #38
724: ldc_w         #379
727: invokevirtual #38
730: invokevirtual #41
733: aload         40
735: ldc           #226
737: invokestatic  #66
740: aload         41
742: invokestatic  #34
745: new           #35
748: dup
749: invokespecial #36
752: ldc           #37
754: invokevirtual #38
757: iload         42
759: invokevirtual #39
762: ldc           #40
764: invokevirtual #38
767: iconst_1
768: invokevirtual #39
771: ldc           #37
773: invokevirtual #38
776: invokevirtual #41
779: iload         42
781: iconst_1
782: if_icmpne     789
785: iconst_1
786: goto          790
789: iconst_0
790: invokestatic  #42
793: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test099
Start line: 2371
End line: 2381
Method source code: 
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("1970-01-01T00:00:00.028+00:00:00.023");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:00:00.028+00:00:00.023\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #450
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #451
28: invokestatic  #57
31: istore_1
32: ldc_w         #452
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test100
Start line: 2384
End line: 2401
Method source code: 
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.joda.time.ReadableInterval readableInterval1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology5 = org.joda.time.chrono.ZonedChronology.getInstance(chronology2, dateTimeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        java.lang.String str7 = dateTimeZone4.getID();
        int int9 = dateTimeZone4.getOffsetFromLocal(0L);
        boolean boolean10 = org.joda.time.tz.ZoneInfoCompiler.test("ISOChronology[52]", dateTimeZone4);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(zonedChronology5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #453
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #23
31: astore_2
32: iconst_0
33: invokestatic  #24
36: astore_3
37: aload_2
38: aload_3
39: invokestatic  #25
42: astore        4
44: aload_3
45: invokestatic  #454
48: aload_3
49: invokevirtual #455
52: astore        5
54: aload_3
55: lconst_0
56: invokevirtual #456
59: istore        6
61: ldc_w         #457
64: aload_3
65: invokestatic  #125
68: istore        7
70: aload_2
71: invokestatic  #34
74: aload_3
75: invokestatic  #34
78: aload         4
80: invokestatic  #34
83: new           #35
86: dup
87: invokespecial #36
90: ldc           #37
92: invokevirtual #38
95: aload         5
97: invokevirtual #38
100: ldc           #189
102: invokevirtual #38
105: invokevirtual #41
108: aload         5
110: ldc           #92
112: invokestatic  #66
115: new           #35
118: dup
119: invokespecial #36
122: ldc           #37
124: invokevirtual #38
127: iload         6
129: invokevirtual #84
132: ldc           #40
134: invokevirtual #38
137: iconst_0
138: invokevirtual #84
141: ldc           #37
143: invokevirtual #38
146: invokevirtual #41
149: iload         6
151: ifne          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #42
162: new           #35
165: dup
166: invokespecial #36
169: ldc           #37
171: invokevirtual #38
174: iload         7
176: invokevirtual #39
179: ldc           #40
181: invokevirtual #38
184: iconst_1
185: invokevirtual #39
188: ldc           #37
190: invokevirtual #38
193: invokevirtual #41
196: iload         7
198: iconst_1
199: if_icmpne     206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #42
210: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test101
Start line: 2404
End line: 2429
Method source code: 
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        java.io.File file4 = null;
        java.io.File[] fileArray5 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = zoneInfoCompiler0.compile(file4, fileArray5);
        java.io.File file7 = null;
        java.io.File[] fileArray8 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler0.compile(file7, fileArray8);
        java.io.BufferedReader bufferedReader10 = null;
        // The following exception was thrown during execution in test generation
        try {
            zoneInfoCompiler0.parseDataFile(bufferedReader10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(strMap9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #458
20: aastore
21: invokevirtual #7
24: pop
25: new           #44
28: dup
29: invokespecial #45
32: astore_1
33: aconst_null
34: astore_2
35: iconst_0
36: anewarray     #95
39: astore_3
40: aload_1
41: aload_2
42: aload_3
43: invokevirtual #96
46: astore        4
48: aconst_null
49: astore        5
51: aconst_null
52: astore        6
54: aload_1
55: aload         5
57: aload         6
59: invokevirtual #96
62: astore        7
64: aconst_null
65: astore        8
67: aconst_null
68: astore        9
70: aload_1
71: aload         8
73: aload         9
75: invokevirtual #96
78: astore        10
80: aconst_null
81: astore        11
83: aload_1
84: aload         11
86: invokevirtual #46
89: ldc           #47
91: invokestatic  #11
94: goto          99
97: astore        12
99: aload_3
100: invokestatic  #34
103: aload         4
105: invokestatic  #34
108: aload         7
110: invokestatic  #34
113: aload         10
115: invokestatic  #34
118: return
Exception table:
from    to  target type
83    94    97   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test102
Start line: 2432
End line: 2437
Method source code: 
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar('w');
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #459
20: aastore
21: invokevirtual #7
24: pop
25: bipush        119
27: invokestatic  #77
30: istore_1
31: new           #35
34: dup
35: invokespecial #36
38: ldc           #37
40: invokevirtual #38
43: iload_1
44: invokevirtual #78
47: ldc           #40
49: invokevirtual #38
52: bipush        119
54: invokevirtual #78
57: ldc           #37
59: invokevirtual #38
62: invokevirtual #41
65: iload_1
66: bipush        119
68: if_icmpne     75
71: iconst_1
72: goto          76
75: iconst_0
76: invokestatic  #42
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test103
Start line: 2440
End line: 2459
Method source code: 
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        int int5 = cachedDateTimeZone3.getOffset(10L);
        java.lang.String str7 = cachedDateTimeZone3.getNameKey(3155760000010L);
        java.lang.String str9 = cachedDateTimeZone3.getName(2272L);
        boolean boolean10 = org.joda.time.tz.ZoneInfoCompiler.test("77", (org.joda.time.DateTimeZone) cachedDateTimeZone3);
        boolean boolean12 = cachedDateTimeZone3.isStandardOffset((-31622399965L));
        java.lang.String str14 = cachedDateTimeZone3.getNameKey(232499088224L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #460
20: aastore
21: invokevirtual #7
24: pop
25: iconst_0
26: invokestatic  #24
29: astore_1
30: aload_1
31: invokestatic  #178
34: astore_2
35: aload_2
36: ldc2_w        #110
39: invokevirtual #179
42: istore_3
43: aload_2
44: ldc2_w        #358
47: invokevirtual #182
50: astore        4
52: aload_2
53: ldc2_w        #360
56: invokevirtual #362
59: astore        5
61: ldc_w         #363
64: aload_2
65: invokestatic  #125
68: istore        6
70: aload_2
71: ldc2_w        #461
74: invokevirtual #463
77: istore        7
79: aload_2
80: ldc2_w        #464
83: invokevirtual #182
86: astore        8
88: aload_1
89: invokestatic  #34
92: aload_2
93: invokestatic  #34
96: new           #35
99: dup
100: invokespecial #36
103: ldc           #37
105: invokevirtual #38
108: iload_3
109: invokevirtual #84
112: ldc           #40
114: invokevirtual #38
117: iconst_0
118: invokevirtual #84
121: ldc           #37
123: invokevirtual #38
126: invokevirtual #41
129: iload_3
130: ifne          137
133: iconst_1
134: goto          138
137: iconst_0
138: invokestatic  #42
141: new           #35
144: dup
145: invokespecial #36
148: ldc           #37
150: invokevirtual #38
153: aload         4
155: invokevirtual #38
158: ldc           #189
160: invokevirtual #38
163: invokevirtual #41
166: aload         4
168: ldc           #92
170: invokestatic  #66
173: new           #35
176: dup
177: invokespecial #36
180: ldc           #37
182: invokevirtual #38
185: aload         5
187: invokevirtual #38
190: ldc_w         #379
193: invokevirtual #38
196: invokevirtual #41
199: aload         5
201: ldc           #226
203: invokestatic  #66
206: new           #35
209: dup
210: invokespecial #36
213: ldc           #37
215: invokevirtual #38
218: iload         6
220: invokevirtual #39
223: ldc           #40
225: invokevirtual #38
228: iconst_1
229: invokevirtual #39
232: ldc           #37
234: invokevirtual #38
237: invokevirtual #41
240: iload         6
242: iconst_1
243: if_icmpne     250
246: iconst_1
247: goto          251
250: iconst_0
251: invokestatic  #42
254: new           #35
257: dup
258: invokespecial #36
261: ldc           #37
263: invokevirtual #38
266: iload         7
268: invokevirtual #39
271: ldc           #40
273: invokevirtual #38
276: iconst_1
277: invokevirtual #39
280: ldc           #37
282: invokevirtual #38
285: invokevirtual #41
288: iload         7
290: iconst_1
291: if_icmpne     298
294: iconst_1
295: goto          299
298: iconst_0
299: invokestatic  #42
302: new           #35
305: dup
306: invokespecial #36
309: ldc           #37
311: invokevirtual #38
314: aload         8
316: invokevirtual #38
319: ldc           #189
321: invokevirtual #38
324: invokevirtual #41
327: aload         8
329: ldc           #92
331: invokestatic  #66
334: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test104
Start line: 2462
End line: 2467
Method source code: 
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("3");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10800000 + "'", int1 == 10800000);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #466
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #467
28: invokestatic  #51
31: istore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: iload_1
45: invokevirtual #84
48: ldc           #40
50: invokevirtual #38
53: ldc_w         #468
56: invokevirtual #84
59: ldc           #37
61: invokevirtual #38
64: invokevirtual #41
67: iload_1
68: ldc_w         #468
71: if_icmpne     78
74: iconst_1
75: goto          79
78: iconst_0
79: invokestatic  #42
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test105
Start line: 2470
End line: 2518
Method source code: 
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology19.getZone();
        org.joda.time.DurationField durationField35 = zonedChronology19.halfdays();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(durationField35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #469
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #418
207: astore        22
209: aload         11
211: invokevirtual #397
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: aload         23
513: invokestatic  #34
516: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test106
Start line: 2521
End line: 2526
Method source code: 
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("UTC");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #470
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #92
27: invokestatic  #64
30: astore_1
31: new           #35
34: dup
35: invokespecial #36
38: ldc           #37
40: invokevirtual #38
43: aload_1
44: invokevirtual #38
47: ldc           #189
49: invokevirtual #38
52: invokevirtual #41
55: aload_1
56: ldc           #92
58: invokestatic  #66
61: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test107
Start line: 2529
End line: 2550
Method source code: 
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder25 = dateTimeZoneBuilder5.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTimeZoneBuilder25.toDateTimeZone("DateTimeField[yearOfCentury]", false);
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #471
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aload         6
94: ldc           #151
96: iconst_3
97: bipush        32
99: bipush        8
101: bipush        97
103: bipush        -71
105: bipush        70
107: ldc           #152
109: iconst_0
110: iconst_0
111: invokevirtual #153
114: astore        8
116: aload         8
118: ldc           #255
120: iconst_0
121: invokevirtual #295
124: astore        9
126: aload_1
127: invokestatic  #34
130: new           #35
133: dup
134: invokespecial #36
137: ldc           #37
139: invokevirtual #38
142: iload_2
143: invokevirtual #39
146: ldc           #40
148: invokevirtual #38
151: iconst_0
152: invokevirtual #39
155: ldc           #37
157: invokevirtual #38
160: invokevirtual #41
163: iload_2
164: ifne          171
167: iconst_1
168: goto          172
171: iconst_0
172: invokestatic  #42
175: new           #35
178: dup
179: invokespecial #36
182: ldc           #37
184: invokevirtual #38
187: iload         4
189: invokevirtual #78
192: ldc           #40
194: invokevirtual #38
197: bipush        119
199: invokevirtual #78
202: ldc           #37
204: invokevirtual #38
207: invokevirtual #41
210: iload         4
212: bipush        119
214: if_icmpne     221
217: iconst_1
218: goto          222
221: iconst_0
222: invokestatic  #42
225: new           #35
228: dup
229: invokespecial #36
232: ldc           #37
234: invokevirtual #38
237: iload         5
239: invokevirtual #84
242: ldc           #40
244: invokevirtual #38
247: iconst_0
248: invokevirtual #84
251: ldc           #37
253: invokevirtual #38
256: invokevirtual #41
259: iload         5
261: ifne          268
264: iconst_1
265: goto          269
268: iconst_0
269: invokestatic  #42
272: aload         7
274: invokestatic  #34
277: aload         8
279: invokestatic  #34
282: aload         9
284: invokestatic  #34
287: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test108
Start line: 2553
End line: 2568
Method source code: 
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100);
        boolean boolean7 = fixedDateTimeZone5.isStandardOffset(3752784000097L);
        int int9 = fixedDateTimeZone5.getOffsetFromLocal(31536000000L);
        java.util.TimeZone timeZone10 = fixedDateTimeZone5.toTimeZone();
        boolean boolean11 = org.joda.time.tz.ZoneInfoCompiler.test("DurationField[centuries]", (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        int int13 = fixedDateTimeZone5.getOffsetFromLocal(31500000000L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 23 + "'", int13 == 23);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #472
20: aastore
21: invokevirtual #7
24: pop
25: new           #331
28: dup
29: ldc_w         #332
32: ldc           #92
34: bipush        23
36: bipush        100
38: invokespecial #333
41: astore_1
42: aload_1
43: ldc2_w        #334
46: invokevirtual #336
49: istore_2
50: aload_1
51: ldc2_w        #337
54: invokevirtual #339
57: istore_3
58: aload_1
59: invokevirtual #340
62: astore        4
64: ldc_w         #287
67: aload_1
68: invokestatic  #125
71: istore        5
73: aload_1
74: ldc2_w        #473
77: invokevirtual #339
80: istore        6
82: new           #35
85: dup
86: invokespecial #36
89: ldc           #37
91: invokevirtual #38
94: iload_2
95: invokevirtual #39
98: ldc           #40
100: invokevirtual #38
103: iconst_0
104: invokevirtual #39
107: ldc           #37
109: invokevirtual #38
112: invokevirtual #41
115: iload_2
116: ifne          123
119: iconst_1
120: goto          124
123: iconst_0
124: invokestatic  #42
127: new           #35
130: dup
131: invokespecial #36
134: ldc           #37
136: invokevirtual #38
139: iload_3
140: invokevirtual #84
143: ldc           #40
145: invokevirtual #38
148: bipush        23
150: invokevirtual #84
153: ldc           #37
155: invokevirtual #38
158: invokevirtual #41
161: iload_3
162: bipush        23
164: if_icmpne     171
167: iconst_1
168: goto          172
171: iconst_0
172: invokestatic  #42
175: aload         4
177: invokestatic  #34
180: aload         4
182: invokevirtual #131
185: ldc_w         #355
188: invokestatic  #128
191: new           #35
194: dup
195: invokespecial #36
198: ldc           #37
200: invokevirtual #38
203: iload         5
205: invokevirtual #39
208: ldc           #40
210: invokevirtual #38
213: iconst_1
214: invokevirtual #39
217: ldc           #37
219: invokevirtual #38
222: invokevirtual #41
225: iload         5
227: iconst_1
228: if_icmpne     235
231: iconst_1
232: goto          236
235: iconst_0
236: invokestatic  #42
239: new           #35
242: dup
243: invokespecial #36
246: ldc           #37
248: invokevirtual #38
251: iload         6
253: invokevirtual #84
256: ldc           #40
258: invokevirtual #38
261: bipush        23
263: invokevirtual #84
266: ldc           #37
268: invokevirtual #38
271: invokevirtual #41
274: iload         6
276: bipush        23
278: if_icmpne     285
281: iconst_1
282: goto          286
285: iconst_0
286: invokestatic  #42
289: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test109
Start line: 2571
End line: 2657
Method source code: 
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone5 = new org.joda.time.tz.FixedDateTimeZone("52", "PT0.002S", 23, (int) (byte) 10);
        org.joda.time.ReadableInterval readableInterval6 = null;
        org.joda.time.ReadableInterval readableInterval7 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval6);
        org.joda.time.Period period8 = readableInterval7.toPeriod();
        java.lang.Object obj9 = null;
        boolean boolean10 = readableInterval7.equals(obj9);
        org.joda.time.Period period11 = readableInterval7.toPeriod();
        org.joda.time.Duration duration12 = readableInterval7.toDuration();
        org.joda.time.ReadableInterval readableInterval13 = null;
        org.joda.time.ReadableInterval readableInterval14 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval13);
        org.joda.time.Period period15 = readableInterval14.toPeriod();
        java.lang.Object obj16 = null;
        boolean boolean17 = readableInterval14.equals(obj16);
        org.joda.time.Period period18 = readableInterval14.toPeriod();
        org.joda.time.DateTime dateTime19 = readableInterval14.getEnd();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType21 = null;
        boolean boolean22 = periodType20.isSupported(durationFieldType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.ReadableInterval readableInterval24 = null;
        org.joda.time.ReadableInterval readableInterval25 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval24);
        org.joda.time.Period period26 = readableInterval25.toPeriod();
        java.lang.Object obj27 = null;
        boolean boolean28 = readableInterval25.equals(obj27);
        org.joda.time.Period period29 = readableInterval25.toPeriod();
        org.joda.time.Duration duration30 = readableInterval25.toDuration();
        org.joda.time.ReadableInterval readableInterval31 = null;
        org.joda.time.ReadableInterval readableInterval32 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval31);
        org.joda.time.Period period33 = readableInterval32.toPeriod();
        java.lang.Object obj34 = null;
        boolean boolean35 = readableInterval32.equals(obj34);
        org.joda.time.Period period36 = readableInterval32.toPeriod();
        org.joda.time.DateTime dateTime37 = readableInterval32.getEnd();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType39 = null;
        boolean boolean40 = periodType38.isSupported(durationFieldType39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime37);
        int int43 = fixedDateTimeZone5.getOffset((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long46 = fixedDateTimeZone5.previousTransition(1640995200000L);
        boolean boolean47 = fixedDateTimeZone5.isFixed();
        int int49 = fixedDateTimeZone5.getOffsetFromLocal(52584L);
        long long51 = fixedDateTimeZone5.previousTransition(232542283537L);
        long long53 = fixedDateTimeZone5.previousTransition((-896565L));
        java.util.TimeZone timeZone54 = fixedDateTimeZone5.toTimeZone();
        boolean boolean55 = org.joda.time.tz.ZoneInfoCompiler.test("PT99M", (org.joda.time.DateTimeZone) fixedDateTimeZone5);
        long long57 = fixedDateTimeZone5.nextTransition(1715770381315L);
        org.junit.Assert.assertNotNull(readableInterval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(readableInterval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(readableInterval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(readableInterval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 23 + "'", int43 == 23);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1640995200000L + "'", long46 == 1640995200000L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 23 + "'", int49 == 23);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 232542283537L + "'", long51 == 232542283537L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-896565L) + "'", long53 == (-896565L));
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1715770381315L + "'", long57 == 1715770381315L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #475
20: aastore
21: invokevirtual #7
24: pop
25: new           #331
28: dup
29: ldc_w         #273
32: ldc_w         #476
35: bipush        23
37: bipush        10
39: invokespecial #333
42: astore_1
43: aconst_null
44: astore_2
45: aload_2
46: invokestatic  #364
49: astore_3
50: aload_3
51: invokeinterface #365,  1
56: astore        4
58: aconst_null
59: astore        5
61: aload_3
62: aload         5
64: invokeinterface #366,  2
69: istore        6
71: aload_3
72: invokeinterface #365,  1
77: astore        7
79: aload_3
80: invokeinterface #370,  1
85: astore        8
87: aconst_null
88: astore        9
90: aload         9
92: invokestatic  #364
95: astore        10
97: aload         10
99: invokeinterface #365,  1
104: astore        11
106: aconst_null
107: astore        12
109: aload         10
111: aload         12
113: invokeinterface #366,  2
118: istore        13
120: aload         10
122: invokeinterface #365,  1
127: astore        14
129: aload         10
131: invokeinterface #369,  1
136: astore        15
138: invokestatic  #371
141: astore        16
143: aconst_null
144: astore        17
146: aload         16
148: aload         17
150: invokevirtual #372
153: istore        18
155: new           #26
158: dup
159: aload         8
161: aload         15
163: aload         16
165: invokespecial #373
168: astore        19
170: aconst_null
171: astore        20
173: aload         20
175: invokestatic  #364
178: astore        21
180: aload         21
182: invokeinterface #365,  1
187: astore        22
189: aconst_null
190: astore        23
192: aload         21
194: aload         23
196: invokeinterface #366,  2
201: istore        24
203: aload         21
205: invokeinterface #365,  1
210: astore        25
212: aload         21
214: invokeinterface #370,  1
219: astore        26
221: aconst_null
222: astore        27
224: aload         27
226: invokestatic  #364
229: astore        28
231: aload         28
233: invokeinterface #365,  1
238: astore        29
240: aconst_null
241: astore        30
243: aload         28
245: aload         30
247: invokeinterface #366,  2
252: istore        31
254: aload         28
256: invokeinterface #365,  1
261: astore        32
263: aload         28
265: invokeinterface #369,  1
270: astore        33
272: invokestatic  #371
275: astore        34
277: aconst_null
278: astore        35
280: aload         34
282: aload         35
284: invokevirtual #372
287: istore        36
289: new           #26
292: dup
293: aload         26
295: aload         33
297: aload         34
299: invokespecial #373
302: astore        37
304: new           #26
307: dup
308: aload         15
310: aload         33
312: invokespecial #477
315: astore        38
317: aload_1
318: aload         33
320: invokevirtual #478
323: istore        39
325: aload_1
326: invokestatic  #304
329: astore        40
331: aload_1
332: ldc2_w        #479
335: invokevirtual #347
338: lstore        41
340: aload_1
341: invokevirtual #344
344: istore        43
346: aload_1
347: ldc2_w        #481
350: invokevirtual #339
353: istore        44
355: aload_1
356: ldc2_w        #483
359: invokevirtual #347
362: lstore        45
364: aload_1
365: ldc2_w        #485
368: invokevirtual #347
371: lstore        47
373: aload_1
374: invokevirtual #340
377: astore        49
379: ldc_w         #487
382: aload_1
383: invokestatic  #125
386: istore        50
388: aload_1
389: ldc2_w        #488
392: invokevirtual #490
395: lstore        51
397: aload_3
398: invokestatic  #34
401: aload         4
403: invokestatic  #34
406: new           #35
409: dup
410: invokespecial #36
413: ldc           #37
415: invokevirtual #38
418: iload         6
420: invokevirtual #39
423: ldc           #40
425: invokevirtual #38
428: iconst_0
429: invokevirtual #39
432: ldc           #37
434: invokevirtual #38
437: invokevirtual #41
440: iload         6
442: ifne          449
445: iconst_1
446: goto          450
449: iconst_0
450: invokestatic  #42
453: aload         7
455: invokestatic  #34
458: aload         8
460: invokestatic  #34
463: aload         10
465: invokestatic  #34
468: aload         11
470: invokestatic  #34
473: new           #35
476: dup
477: invokespecial #36
480: ldc           #37
482: invokevirtual #38
485: iload         13
487: invokevirtual #39
490: ldc           #40
492: invokevirtual #38
495: iconst_0
496: invokevirtual #39
499: ldc           #37
501: invokevirtual #38
504: invokevirtual #41
507: iload         13
509: ifne          516
512: iconst_1
513: goto          517
516: iconst_0
517: invokestatic  #42
520: aload         14
522: invokestatic  #34
525: aload         15
527: invokestatic  #34
530: aload         16
532: invokestatic  #34
535: new           #35
538: dup
539: invokespecial #36
542: ldc           #37
544: invokevirtual #38
547: iload         18
549: invokevirtual #39
552: ldc           #40
554: invokevirtual #38
557: iconst_0
558: invokevirtual #39
561: ldc           #37
563: invokevirtual #38
566: invokevirtual #41
569: iload         18
571: ifne          578
574: iconst_1
575: goto          579
578: iconst_0
579: invokestatic  #42
582: aload         21
584: invokestatic  #34
587: aload         22
589: invokestatic  #34
592: new           #35
595: dup
596: invokespecial #36
599: ldc           #37
601: invokevirtual #38
604: iload         24
606: invokevirtual #39
609: ldc           #40
611: invokevirtual #38
614: iconst_0
615: invokevirtual #39
618: ldc           #37
620: invokevirtual #38
623: invokevirtual #41
626: iload         24
628: ifne          635
631: iconst_1
632: goto          636
635: iconst_0
636: invokestatic  #42
639: aload         25
641: invokestatic  #34
644: aload         26
646: invokestatic  #34
649: aload         28
651: invokestatic  #34
654: aload         29
656: invokestatic  #34
659: new           #35
662: dup
663: invokespecial #36
666: ldc           #37
668: invokevirtual #38
671: iload         31
673: invokevirtual #39
676: ldc           #40
678: invokevirtual #38
681: iconst_0
682: invokevirtual #39
685: ldc           #37
687: invokevirtual #38
690: invokevirtual #41
693: iload         31
695: ifne          702
698: iconst_1
699: goto          703
702: iconst_0
703: invokestatic  #42
706: aload         32
708: invokestatic  #34
711: aload         33
713: invokestatic  #34
716: aload         34
718: invokestatic  #34
721: new           #35
724: dup
725: invokespecial #36
728: ldc           #37
730: invokevirtual #38
733: iload         36
735: invokevirtual #39
738: ldc           #40
740: invokevirtual #38
743: iconst_0
744: invokevirtual #39
747: ldc           #37
749: invokevirtual #38
752: invokevirtual #41
755: iload         36
757: ifne          764
760: iconst_1
761: goto          765
764: iconst_0
765: invokestatic  #42
768: new           #35
771: dup
772: invokespecial #36
775: ldc           #37
777: invokevirtual #38
780: iload         39
782: invokevirtual #84
785: ldc           #40
787: invokevirtual #38
790: bipush        23
792: invokevirtual #84
795: ldc           #37
797: invokevirtual #38
800: invokevirtual #41
803: iload         39
805: bipush        23
807: if_icmpne     814
810: iconst_1
811: goto          815
814: iconst_0
815: invokestatic  #42
818: aload         40
820: invokestatic  #34
823: new           #35
826: dup
827: invokespecial #36
830: ldc           #37
832: invokevirtual #38
835: lload         41
837: invokevirtual #233
840: ldc           #40
842: invokevirtual #38
845: ldc2_w        #479
848: invokevirtual #233
851: ldc           #37
853: invokevirtual #38
856: invokevirtual #41
859: lload         41
861: ldc2_w        #479
864: lcmp
865: ifne          872
868: iconst_1
869: goto          873
872: iconst_0
873: invokestatic  #42
876: new           #35
879: dup
880: invokespecial #36
883: ldc           #37
885: invokevirtual #38
888: iload         43
890: invokevirtual #39
893: ldc           #40
895: invokevirtual #38
898: iconst_1
899: invokevirtual #39
902: ldc           #37
904: invokevirtual #38
907: invokevirtual #41
910: iload         43
912: iconst_1
913: if_icmpne     920
916: iconst_1
917: goto          921
920: iconst_0
921: invokestatic  #42
924: new           #35
927: dup
928: invokespecial #36
931: ldc           #37
933: invokevirtual #38
936: iload         44
938: invokevirtual #84
941: ldc           #40
943: invokevirtual #38
946: bipush        23
948: invokevirtual #84
951: ldc           #37
953: invokevirtual #38
956: invokevirtual #41
959: iload         44
961: bipush        23
963: if_icmpne     970
966: iconst_1
967: goto          971
970: iconst_0
971: invokestatic  #42
974: new           #35
977: dup
978: invokespecial #36
981: ldc           #37
983: invokevirtual #38
986: lload         45
988: invokevirtual #233
991: ldc           #40
993: invokevirtual #38
996: ldc2_w        #483
999: invokevirtual #233
1002: ldc           #37
1004: invokevirtual #38
1007: invokevirtual #41
1010: lload         45
1012: ldc2_w        #483
1015: lcmp
1016: ifne          1023
1019: iconst_1
1020: goto          1024
1023: iconst_0
1024: invokestatic  #42
1027: new           #35
1030: dup
1031: invokespecial #36
1034: ldc           #37
1036: invokevirtual #38
1039: lload         47
1041: invokevirtual #233
1044: ldc           #40
1046: invokevirtual #38
1049: ldc2_w        #485
1052: invokevirtual #233
1055: ldc           #37
1057: invokevirtual #38
1060: invokevirtual #41
1063: lload         47
1065: ldc2_w        #485
1068: lcmp
1069: ifne          1076
1072: iconst_1
1073: goto          1077
1076: iconst_0
1077: invokestatic  #42
1080: aload         49
1082: invokestatic  #34
1085: aload         49
1087: invokevirtual #131
1090: ldc_w         #355
1093: invokestatic  #128
1096: new           #35
1099: dup
1100: invokespecial #36
1103: ldc           #37
1105: invokevirtual #38
1108: iload         50
1110: invokevirtual #39
1113: ldc           #40
1115: invokevirtual #38
1118: iconst_1
1119: invokevirtual #39
1122: ldc           #37
1124: invokevirtual #38
1127: invokevirtual #41
1130: iload         50
1132: iconst_1
1133: if_icmpne     1140
1136: iconst_1
1137: goto          1141
1140: iconst_0
1141: invokestatic  #42
1144: new           #35
1147: dup
1148: invokespecial #36
1151: ldc           #37
1153: invokevirtual #38
1156: lload         51
1158: invokevirtual #233
1161: ldc           #40
1163: invokevirtual #38
1166: ldc2_w        #488
1169: invokevirtual #233
1172: ldc           #37
1174: invokevirtual #38
1177: invokevirtual #41
1180: lload         51
1182: ldc2_w        #488
1185: lcmp
1186: ifne          1193
1189: iconst_1
1190: goto          1194
1193: iconst_0
1194: invokestatic  #42
1197: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test110
Start line: 2660
End line: 2665
Method source code: 
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("UnsupportedDurationField[days]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UnsupportedDurationField[days]" + "'", str1, "UnsupportedDurationField[days]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #491
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #151
27: invokestatic  #64
30: astore_1
31: new           #35
34: dup
35: invokespecial #36
38: ldc           #37
40: invokevirtual #38
43: aload_1
44: invokevirtual #38
47: ldc_w         #492
50: invokevirtual #38
53: invokevirtual #41
56: aload_1
57: ldc           #151
59: invokestatic  #66
62: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test111
Start line: 2668
End line: 2677
Method source code: 
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        int int1 = dateTimeOfYear0.iDayOfMonth;
        int int2 = dateTimeOfYear0.iDayOfWeek;
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #493
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #494
33: istore_2
34: aload_1
35: getfield      #196
38: istore_3
39: aload_1
40: invokestatic  #34
43: new           #35
46: dup
47: invokespecial #36
50: ldc           #37
52: invokevirtual #38
55: iload_2
56: invokevirtual #84
59: ldc           #40
61: invokevirtual #38
64: iconst_1
65: invokevirtual #84
68: ldc           #37
70: invokevirtual #38
73: invokevirtual #41
76: iload_2
77: iconst_1
78: if_icmpne     85
81: iconst_1
82: goto          86
85: iconst_0
86: invokestatic  #42
89: new           #35
92: dup
93: invokespecial #36
96: ldc           #37
98: invokevirtual #38
101: iload_3
102: invokevirtual #84
105: ldc           #40
107: invokevirtual #38
110: iconst_0
111: invokevirtual #84
114: ldc           #37
116: invokevirtual #38
119: invokevirtual #41
122: iload_3
123: ifne          130
126: iconst_1
127: goto          131
130: iconst_0
131: invokestatic  #42
134: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test112
Start line: 2680
End line: 2728
Method source code: 
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology19.getZone();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #495
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #418
207: astore        22
209: aload         11
211: invokevirtual #496
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: aload         23
513: invokestatic  #34
516: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test113
Start line: 2731
End line: 2736
Method source code: 
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        char char1 = org.joda.time.tz.ZoneInfoCompiler.parseZoneChar(' ');
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #497
20: aastore
21: invokevirtual #7
24: pop
25: bipush        32
27: invokestatic  #77
30: istore_1
31: new           #35
34: dup
35: invokespecial #36
38: ldc           #37
40: invokevirtual #38
43: iload_1
44: invokevirtual #78
47: ldc           #40
49: invokevirtual #38
52: bipush        119
54: invokevirtual #78
57: ldc           #37
59: invokevirtual #38
62: invokevirtual #41
65: iload_1
66: bipush        119
68: if_icmpne     75
71: iconst_1
72: goto          76
75: iconst_0
76: invokestatic  #42
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test114
Start line: 2739
End line: 2744
Method source code: 
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("1977-05-15T11:05:14.959+00:00:00.023");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "1977-05-15T11:05:14.959+00:00:00.023" + "'", str1, "1977-05-15T11:05:14.959+00:00:00.023");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #498
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #499
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #500
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #499
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test115
Start line: 2747
End line: 2782
Method source code: 
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        int int2 = dateTimeOfYear0.iMillisOfDay;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear3 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        int int4 = dateTimeOfYear3.iMonthOfYear;
        java.lang.String str5 = dateTimeOfYear3.toString();
        boolean boolean6 = dateTimeOfYear3.iAdvanceDayOfWeek;
        int int7 = dateTimeOfYear3.iDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear8 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean9 = dateTimeOfYear8.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear10 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char11 = dateTimeOfYear10.iZoneChar;
        int int12 = dateTimeOfYear10.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder13 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder15 = dateTimeZoneBuilder13.setStandardOffset((int) '#');
        dateTimeOfYear10.addRecurring(dateTimeZoneBuilder13, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear8.addCutover(dateTimeZoneBuilder13, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder33 = dateTimeZoneBuilder13.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        dateTimeOfYear3.addRecurring(dateTimeZoneBuilder13, "35", (-2440586), 18, 0);
        dateTimeOfYear0.addRecurring(dateTimeZoneBuilder13, "", 0, 348650, 19);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n" + "'", str5, "MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeOfYear8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + char11 + "' != '" + 'w' + "'", char11 == 'w');
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder15);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #501
20: aastore
21: invokevirtual #7
24: pop
25: new           #143
28: dup
29: invokespecial #144
32: astore_1
33: aload_1
34: getfield      #136
37: istore_2
38: aload_1
39: getfield      #145
42: istore_3
43: new           #143
46: dup
47: invokespecial #144
50: astore        4
52: aload         4
54: getfield      #381
57: istore        5
59: aload         4
61: invokevirtual #297
64: astore        6
66: aload         4
68: getfield      #142
71: istore        7
73: aload         4
75: getfield      #196
78: istore        8
80: invokestatic  #19
83: astore        9
85: aload         9
87: getfield      #142
90: istore        10
92: new           #143
95: dup
96: invokespecial #144
99: astore        11
101: aload         11
103: getfield      #136
106: istore        12
108: aload         11
110: getfield      #145
113: istore        13
115: new           #146
118: dup
119: invokespecial #147
122: astore        14
124: aload         14
126: bipush        35
128: invokevirtual #148
131: astore        15
133: aload         11
135: aload         14
137: ldc           #92
139: iconst_1
140: bipush        10
142: iconst_m1
143: invokevirtual #149
146: aload         9
148: aload         14
150: bipush        52
152: invokevirtual #150
155: aload         14
157: ldc           #151
159: iconst_3
160: bipush        32
162: bipush        8
164: bipush        97
166: bipush        -71
168: bipush        70
170: ldc           #152
172: iconst_0
173: iconst_0
174: invokevirtual #153
177: astore        16
179: aload         4
181: aload         14
183: ldc_w         #502
186: ldc_w         #503
189: bipush        18
191: iconst_0
192: invokevirtual #149
195: aload_1
196: aload         14
198: ldc           #14
200: iconst_0
201: ldc_w         #504
204: bipush        19
206: invokevirtual #149
209: new           #35
212: dup
213: invokespecial #36
216: ldc           #37
218: invokevirtual #38
221: iload_2
222: invokevirtual #78
225: ldc           #40
227: invokevirtual #38
230: bipush        119
232: invokevirtual #78
235: ldc           #37
237: invokevirtual #38
240: invokevirtual #41
243: iload_2
244: bipush        119
246: if_icmpne     253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #42
257: new           #35
260: dup
261: invokespecial #36
264: ldc           #37
266: invokevirtual #38
269: iload_3
270: invokevirtual #84
273: ldc           #40
275: invokevirtual #38
278: iconst_0
279: invokevirtual #84
282: ldc           #37
284: invokevirtual #38
287: invokevirtual #41
290: iload_3
291: ifne          298
294: iconst_1
295: goto          299
298: iconst_0
299: invokestatic  #42
302: new           #35
305: dup
306: invokespecial #36
309: ldc           #37
311: invokevirtual #38
314: iload         5
316: invokevirtual #84
319: ldc           #40
321: invokevirtual #38
324: iconst_1
325: invokevirtual #84
328: ldc           #37
330: invokevirtual #38
333: invokevirtual #41
336: iload         5
338: iconst_1
339: if_icmpne     346
342: iconst_1
343: goto          347
346: iconst_0
347: invokestatic  #42
350: new           #35
353: dup
354: invokespecial #36
357: ldc           #37
359: invokevirtual #38
362: aload         6
364: invokevirtual #38
367: ldc_w         #299
370: invokevirtual #38
373: invokevirtual #41
376: aload         6
378: ldc           #60
380: invokestatic  #66
383: new           #35
386: dup
387: invokespecial #36
390: ldc           #37
392: invokevirtual #38
395: iload         7
397: invokevirtual #39
400: ldc           #40
402: invokevirtual #38
405: iconst_0
406: invokevirtual #39
409: ldc           #37
411: invokevirtual #38
414: invokevirtual #41
417: iload         7
419: ifne          426
422: iconst_1
423: goto          427
426: iconst_0
427: invokestatic  #42
430: new           #35
433: dup
434: invokespecial #36
437: ldc           #37
439: invokevirtual #38
442: iload         8
444: invokevirtual #84
447: ldc           #40
449: invokevirtual #38
452: iconst_0
453: invokevirtual #84
456: ldc           #37
458: invokevirtual #38
461: invokevirtual #41
464: iload         8
466: ifne          473
469: iconst_1
470: goto          474
473: iconst_0
474: invokestatic  #42
477: aload         9
479: invokestatic  #34
482: new           #35
485: dup
486: invokespecial #36
489: ldc           #37
491: invokevirtual #38
494: iload         10
496: invokevirtual #39
499: ldc           #40
501: invokevirtual #38
504: iconst_0
505: invokevirtual #39
508: ldc           #37
510: invokevirtual #38
513: invokevirtual #41
516: iload         10
518: ifne          525
521: iconst_1
522: goto          526
525: iconst_0
526: invokestatic  #42
529: new           #35
532: dup
533: invokespecial #36
536: ldc           #37
538: invokevirtual #38
541: iload         12
543: invokevirtual #78
546: ldc           #40
548: invokevirtual #38
551: bipush        119
553: invokevirtual #78
556: ldc           #37
558: invokevirtual #38
561: invokevirtual #41
564: iload         12
566: bipush        119
568: if_icmpne     575
571: iconst_1
572: goto          576
575: iconst_0
576: invokestatic  #42
579: new           #35
582: dup
583: invokespecial #36
586: ldc           #37
588: invokevirtual #38
591: iload         13
593: invokevirtual #84
596: ldc           #40
598: invokevirtual #38
601: iconst_0
602: invokevirtual #84
605: ldc           #37
607: invokevirtual #38
610: invokevirtual #41
613: iload         13
615: ifne          622
618: iconst_1
619: goto          623
622: iconst_0
623: invokestatic  #42
626: aload         15
628: invokestatic  #34
631: aload         16
633: invokestatic  #34
636: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test116
Start line: 2785
End line: 2807
Method source code: 
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.tz.ZoneInfoCompiler.cStartOfYear = dateTimeOfYear0;
        int int16 = dateTimeOfYear0.iDayOfMonth;
        char char17 = dateTimeOfYear0.iZoneChar;
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + char17 + "' != '" + 'w' + "'", char17 == 'w');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #505
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aload_1
93: putstatic     #269
96: aload_1
97: getfield      #494
100: istore        8
102: aload_1
103: getfield      #136
106: istore        9
108: aload_1
109: invokestatic  #34
112: new           #35
115: dup
116: invokespecial #36
119: ldc           #37
121: invokevirtual #38
124: iload_2
125: invokevirtual #39
128: ldc           #40
130: invokevirtual #38
133: iconst_0
134: invokevirtual #39
137: ldc           #37
139: invokevirtual #38
142: invokevirtual #41
145: iload_2
146: ifne          153
149: iconst_1
150: goto          154
153: iconst_0
154: invokestatic  #42
157: new           #35
160: dup
161: invokespecial #36
164: ldc           #37
166: invokevirtual #38
169: iload         4
171: invokevirtual #78
174: ldc           #40
176: invokevirtual #38
179: bipush        119
181: invokevirtual #78
184: ldc           #37
186: invokevirtual #38
189: invokevirtual #41
192: iload         4
194: bipush        119
196: if_icmpne     203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #42
207: new           #35
210: dup
211: invokespecial #36
214: ldc           #37
216: invokevirtual #38
219: iload         5
221: invokevirtual #84
224: ldc           #40
226: invokevirtual #38
229: iconst_0
230: invokevirtual #84
233: ldc           #37
235: invokevirtual #38
238: invokevirtual #41
241: iload         5
243: ifne          250
246: iconst_1
247: goto          251
250: iconst_0
251: invokestatic  #42
254: aload         7
256: invokestatic  #34
259: new           #35
262: dup
263: invokespecial #36
266: ldc           #37
268: invokevirtual #38
271: iload         8
273: invokevirtual #84
276: ldc           #40
278: invokevirtual #38
281: iconst_1
282: invokevirtual #84
285: ldc           #37
287: invokevirtual #38
290: invokevirtual #41
293: iload         8
295: iconst_1
296: if_icmpne     303
299: iconst_1
300: goto          304
303: iconst_0
304: invokestatic  #42
307: new           #35
310: dup
311: invokespecial #36
314: ldc           #37
316: invokevirtual #38
319: iload         9
321: invokevirtual #78
324: ldc           #40
326: invokevirtual #38
329: bipush        119
331: invokevirtual #78
334: ldc           #37
336: invokevirtual #38
339: invokevirtual #41
342: iload         9
344: bipush        119
346: if_icmpne     353
349: iconst_1
350: goto          354
353: iconst_0
354: invokestatic  #42
357: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test117
Start line: 2810
End line: 2820
Method source code: 
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseMonth("-292275054");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-292275054\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #506
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #101
27: invokestatic  #57
30: istore_1
31: ldc_w         #507
34: invokestatic  #11
37: goto          41
40: astore_1
41: return
Exception table:
from    to  target type
25    37    40   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test118
Start line: 2823
End line: 2833
Method source code: 
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.tz.ZoneInfoCompiler.parseYear("org.joda.time.IllegalFieldValueException: Value 315532800000 for yearOfCentury is not supported: millis", 70);
            org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException; message: For input string: \"org.joda.time.illegalfieldvalueexception: value 315532800000 for yearofcentury is not supported: millis\"");
        } catch (java.lang.NumberFormatException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #508
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #509
28: bipush        70
30: invokestatic  #15
33: istore_1
34: ldc_w         #510
37: invokestatic  #11
40: goto          44
43: astore_1
44: return
Exception table:
from    to  target type
25    40    43   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test119
Start line: 2836
End line: 2841
Method source code: 
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("97");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "97" + "'", str1, "97");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #511
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #176
27: invokestatic  #64
30: astore_1
31: new           #35
34: dup
35: invokespecial #36
38: ldc           #37
40: invokevirtual #38
43: aload_1
44: invokevirtual #38
47: ldc_w         #512
50: invokevirtual #38
53: invokevirtual #41
56: aload_1
57: ldc           #176
59: invokestatic  #66
62: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test120
Start line: 2844
End line: 2854
Method source code: 
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("71");
// flaky:             org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"71\": Value 71 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #513
20: aastore
21: invokevirtual #7
24: pop
25: ldc           #63
27: invokestatic  #51
30: istore_1
31: goto          35
34: astore_1
35: return
Exception table:
from    to  target type
25    31    34   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test121
Start line: 2857
End line: 2905
Method source code: 
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology19.getZone();
        java.lang.String str35 = dateTimeZone34.toString();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #514
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #418
207: astore        22
209: aload         22
211: invokevirtual #515
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: new           #35
514: dup
515: invokespecial #36
518: ldc           #37
520: invokevirtual #38
523: aload         23
525: invokevirtual #38
528: ldc           #189
530: invokevirtual #38
533: invokevirtual #41
536: aload         23
538: ldc           #92
540: invokestatic  #66
543: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test122
Start line: 2908
End line: 2999
Method source code: 
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.joda.time.ReadableInterval readableInterval2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology6 = org.joda.time.chrono.ZonedChronology.getInstance(chronology3, dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = zonedChronology6.yearOfCentury();
        int int8 = dateTimeField7.getMinimumValue();
        org.joda.time.ReadablePartial readablePartial9 = null;
        int int10 = dateTimeField7.getMaximumValue(readablePartial9);
        java.lang.String str11 = dateTimeField7.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField13 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField7, dateTimeFieldType12);
        org.joda.time.DurationField durationField14 = zeroIsMaxDateTimeField13.getLeapDurationField();
        org.joda.time.DurationField durationField15 = zeroIsMaxDateTimeField13.getDurationField();
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstance();
        long long20 = gregorianChronology16.add((long) 10, (long) (-2), 52);
        org.joda.time.Period period22 = org.joda.time.Period.days((int) (short) 1);
        org.joda.time.format.PeriodFormatter periodFormatter23 = null;
        java.lang.String str24 = period22.toString(periodFormatter23);
        org.joda.time.Period period26 = period22.minusWeeks((int) (short) -1);
        org.joda.time.ReadableInterval readableInterval28 = null;
        org.joda.time.Chronology chronology29 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval28);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone31);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) 100, chronology29);
        org.joda.time.Weeks weeks34 = period33.toStandardWeeks();
        int int35 = period33.getSeconds();
        org.joda.time.Period period36 = period26.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period38 = period36.withSeconds((int) (byte) 1);
        int[] intArray40 = gregorianChronology16.get((org.joda.time.ReadablePeriod) period38, (long) 10);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType42 = org.joda.time.DateTimeUtils.getPeriodType(periodType41);
        boolean boolean43 = gregorianChronology16.equals((java.lang.Object) periodType42);
        org.joda.time.tz.FixedDateTimeZone fixedDateTimeZone48 = new org.joda.time.tz.FixedDateTimeZone("-1", "UTC", 23, 100);
        boolean boolean50 = fixedDateTimeZone48.isStandardOffset(3752784000097L);
        int int52 = fixedDateTimeZone48.getOffsetFromLocal(31536000000L);
        java.util.TimeZone timeZone53 = fixedDateTimeZone48.toTimeZone();
        int int55 = fixedDateTimeZone48.getOffset((long) 71);
        org.joda.time.Chronology chronology56 = gregorianChronology16.withZone((org.joda.time.DateTimeZone) fixedDateTimeZone48);
        java.lang.String str57 = fixedDateTimeZone48.toString();
        boolean boolean58 = org.joda.time.field.FieldUtils.equals((java.lang.Object) zeroIsMaxDateTimeField13, (java.lang.Object) fixedDateTimeZone48);
        java.util.TimeZone timeZone59 = fixedDateTimeZone48.toTimeZone();
        org.joda.time.chrono.ISOChronology iSOChronology60 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) fixedDateTimeZone48);
        boolean boolean61 = org.joda.time.tz.ZoneInfoCompiler.test("org.joda.time.IllegalFieldValueException: Value \"secondOfDay\" for millisOfSecond is not supported", (org.joda.time.DateTimeZone) fixedDateTimeZone48);
        boolean boolean62 = org.joda.time.tz.ZoneInfoCompiler.test("", (org.joda.time.DateTimeZone) fixedDateTimeZone48);
        long long64 = fixedDateTimeZone48.nextTransition(108100038L);
        java.lang.String str66 = fixedDateTimeZone48.getNameKey((long) (-23479));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(zonedChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[yearOfCentury]" + "'", str11, "DateTimeField[yearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-94L) + "'", long20 == (-94L));
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "P1D" + "'", str24, "P1D");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(zonedChronology32);
        org.junit.Assert.assertNotNull(weeks34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 23 + "'", int55 == 23);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "-1" + "'", str57, "-1");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(iSOChronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 108100038L + "'", long64 == 108100038L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "UTC" + "'", str66, "UTC");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #516
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #23
31: astore_2
32: iconst_0
33: invokestatic  #24
36: astore_3
37: aload_2
38: aload_3
39: invokestatic  #25
42: astore        4
44: aload         4
46: invokevirtual #204
49: astore        5
51: aload         5
53: invokevirtual #237
56: istore        6
58: aconst_null
59: astore        7
61: aload         5
63: aload         7
65: invokevirtual #238
68: istore        8
70: aload         5
72: invokevirtual #239
75: astore        9
77: invokestatic  #240
80: astore        10
82: new           #241
85: dup
86: aload         5
88: aload         10
90: invokespecial #242
93: astore        11
95: aload         11
97: invokevirtual #517
100: astore        12
102: aload         11
104: invokevirtual #243
107: astore        13
109: invokestatic  #318
112: astore        14
114: aload         14
116: ldc2_w        #110
119: ldc2_w        #319
122: bipush        52
124: invokevirtual #321
127: lstore        15
129: iconst_1
130: invokestatic  #322
133: astore        17
135: aconst_null
136: astore        18
138: aload         17
140: aload         18
142: invokevirtual #323
145: astore        19
147: aload         17
149: iconst_m1
150: invokevirtual #324
153: astore        20
155: aconst_null
156: astore        21
158: aload         21
160: invokestatic  #23
163: astore        22
165: iconst_0
166: invokestatic  #24
169: astore        23
171: aload         22
173: aload         23
175: invokestatic  #25
178: astore        24
180: new           #26
183: dup
184: ldc2_w        #27
187: aload         22
189: invokespecial #29
192: astore        25
194: aload         25
196: invokevirtual #325
199: astore        26
201: aload         25
203: invokevirtual #326
206: istore        27
208: aload         20
210: aload         25
212: invokevirtual #327
215: astore        28
217: aload         28
219: iconst_1
220: invokevirtual #328
223: astore        29
225: aload         14
227: aload         29
229: ldc2_w        #110
232: invokevirtual #329
235: astore        30
237: invokestatic  #20
240: astore        31
242: aload         31
244: invokestatic  #330
247: astore        32
249: aload         14
251: aload         32
253: invokevirtual #307
256: istore        33
258: new           #331
261: dup
262: ldc_w         #332
265: ldc           #92
267: bipush        23
269: bipush        100
271: invokespecial #333
274: astore        34
276: aload         34
278: ldc2_w        #334
281: invokevirtual #336
284: istore        35
286: aload         34
288: ldc2_w        #337
291: invokevirtual #339
294: istore        36
296: aload         34
298: invokevirtual #340
301: astore        37
303: aload         34
305: ldc2_w        #180
308: invokevirtual #341
311: istore        38
313: aload         14
315: aload         34
317: invokevirtual #342
320: astore        39
322: aload         34
324: invokevirtual #343
327: astore        40
329: aload         11
331: aload         34
333: invokestatic  #174
336: istore        41
338: aload         34
340: invokevirtual #340
343: astore        42
345: aload         34
347: invokestatic  #229
350: astore        43
352: ldc_w         #518
355: aload         34
357: invokestatic  #125
360: istore        44
362: ldc           #14
364: aload         34
366: invokestatic  #125
369: istore        45
371: aload         34
373: ldc2_w        #519
376: invokevirtual #490
379: lstore        46
381: aload         34
383: ldc2_w        #521
386: invokevirtual #523
389: astore        48
391: aload_2
392: invokestatic  #34
395: aload_3
396: invokestatic  #34
399: aload         4
401: invokestatic  #34
404: aload         5
406: invokestatic  #34
409: new           #35
412: dup
413: invokespecial #36
416: ldc           #37
418: invokevirtual #38
421: iload         6
423: invokevirtual #84
426: ldc           #40
428: invokevirtual #38
431: iconst_0
432: invokevirtual #84
435: ldc           #37
437: invokevirtual #38
440: invokevirtual #41
443: iload         6
445: ifne          452
448: iconst_1
449: goto          453
452: iconst_0
453: invokestatic  #42
456: new           #35
459: dup
460: invokespecial #36
463: ldc           #37
465: invokevirtual #38
468: iload         8
470: invokevirtual #84
473: ldc           #40
475: invokevirtual #38
478: bipush        99
480: invokevirtual #84
483: ldc           #37
485: invokevirtual #38
488: invokevirtual #41
491: iload         8
493: bipush        99
495: if_icmpne     502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: new           #35
509: dup
510: invokespecial #36
513: ldc           #37
515: invokevirtual #38
518: aload         9
520: invokevirtual #38
523: ldc           #254
525: invokevirtual #38
528: invokevirtual #41
531: aload         9
533: ldc           #255
535: invokestatic  #66
538: aload         10
540: invokestatic  #34
543: aload         12
545: invokestatic  #524
548: aload         13
550: invokestatic  #34
553: aload         14
555: invokestatic  #34
558: new           #35
561: dup
562: invokespecial #36
565: ldc           #37
567: invokevirtual #38
570: lload         15
572: invokevirtual #233
575: ldc           #40
577: invokevirtual #38
580: ldc2_w        #351
583: invokevirtual #233
586: ldc           #37
588: invokevirtual #38
591: invokevirtual #41
594: lload         15
596: ldc2_w        #351
599: lcmp
600: ifne          607
603: iconst_1
604: goto          608
607: iconst_0
608: invokestatic  #42
611: aload         17
613: invokestatic  #34
616: new           #35
619: dup
620: invokespecial #36
623: ldc           #37
625: invokevirtual #38
628: aload         19
630: invokevirtual #38
633: ldc_w         #353
636: invokevirtual #38
639: invokevirtual #41
642: aload         19
644: ldc           #104
646: invokestatic  #66
649: aload         20
651: invokestatic  #34
654: aload         22
656: invokestatic  #34
659: aload         23
661: invokestatic  #34
664: aload         24
666: invokestatic  #34
669: aload         26
671: invokestatic  #34
674: new           #35
677: dup
678: invokespecial #36
681: ldc           #37
683: invokevirtual #38
686: iload         27
688: invokevirtual #84
691: ldc           #40
693: invokevirtual #38
696: iconst_0
697: invokevirtual #84
700: ldc           #37
702: invokevirtual #38
705: invokevirtual #41
708: iload         27
710: ifne          717
713: iconst_1
714: goto          718
717: iconst_0
718: invokestatic  #42
721: aload         28
723: invokestatic  #34
726: aload         29
728: invokestatic  #34
731: aload         30
733: invokestatic  #34
736: aload         30
738: invokestatic  #126
741: ldc_w         #354
744: invokestatic  #128
747: aload         31
749: invokestatic  #34
752: aload         32
754: invokestatic  #34
757: new           #35
760: dup
761: invokespecial #36
764: ldc           #37
766: invokevirtual #38
769: iload         33
771: invokevirtual #39
774: ldc           #40
776: invokevirtual #38
779: iconst_0
780: invokevirtual #39
783: ldc           #37
785: invokevirtual #38
788: invokevirtual #41
791: iload         33
793: ifne          800
796: iconst_1
797: goto          801
800: iconst_0
801: invokestatic  #42
804: new           #35
807: dup
808: invokespecial #36
811: ldc           #37
813: invokevirtual #38
816: iload         35
818: invokevirtual #39
821: ldc           #40
823: invokevirtual #38
826: iconst_0
827: invokevirtual #39
830: ldc           #37
832: invokevirtual #38
835: invokevirtual #41
838: iload         35
840: ifne          847
843: iconst_1
844: goto          848
847: iconst_0
848: invokestatic  #42
851: new           #35
854: dup
855: invokespecial #36
858: ldc           #37
860: invokevirtual #38
863: iload         36
865: invokevirtual #84
868: ldc           #40
870: invokevirtual #38
873: bipush        23
875: invokevirtual #84
878: ldc           #37
880: invokevirtual #38
883: invokevirtual #41
886: iload         36
888: bipush        23
890: if_icmpne     897
893: iconst_1
894: goto          898
897: iconst_0
898: invokestatic  #42
901: aload         37
903: invokestatic  #34
906: aload         37
908: invokevirtual #131
911: ldc_w         #355
914: invokestatic  #128
917: new           #35
920: dup
921: invokespecial #36
924: ldc           #37
926: invokevirtual #38
929: iload         38
931: invokevirtual #84
934: ldc           #40
936: invokevirtual #38
939: bipush        23
941: invokevirtual #84
944: ldc           #37
946: invokevirtual #38
949: invokevirtual #41
952: iload         38
954: bipush        23
956: if_icmpne     963
959: iconst_1
960: goto          964
963: iconst_0
964: invokestatic  #42
967: aload         39
969: invokestatic  #34
972: new           #35
975: dup
976: invokespecial #36
979: ldc           #37
981: invokevirtual #38
984: aload         40
986: invokevirtual #38
989: ldc_w         #356
992: invokevirtual #38
995: invokevirtual #41
998: aload         40
1000: ldc_w         #332
1003: invokestatic  #66
1006: new           #35
1009: dup
1010: invokespecial #36
1013: ldc           #37
1015: invokevirtual #38
1018: iload         41
1020: invokevirtual #39
1023: ldc           #40
1025: invokevirtual #38
1028: iconst_0
1029: invokevirtual #39
1032: ldc           #37
1034: invokevirtual #38
1037: invokevirtual #41
1040: iload         41
1042: ifne          1049
1045: iconst_1
1046: goto          1050
1049: iconst_0
1050: invokestatic  #42
1053: aload         42
1055: invokestatic  #34
1058: aload         42
1060: invokevirtual #131
1063: ldc_w         #355
1066: invokestatic  #128
1069: aload         43
1071: invokestatic  #34
1074: new           #35
1077: dup
1078: invokespecial #36
1081: ldc           #37
1083: invokevirtual #38
1086: iload         44
1088: invokevirtual #39
1091: ldc           #40
1093: invokevirtual #38
1096: iconst_1
1097: invokevirtual #39
1100: ldc           #37
1102: invokevirtual #38
1105: invokevirtual #41
1108: iload         44
1110: iconst_1
1111: if_icmpne     1118
1114: iconst_1
1115: goto          1119
1118: iconst_0
1119: invokestatic  #42
1122: new           #35
1125: dup
1126: invokespecial #36
1129: ldc           #37
1131: invokevirtual #38
1134: iload         45
1136: invokevirtual #39
1139: ldc           #40
1141: invokevirtual #38
1144: iconst_1
1145: invokevirtual #39
1148: ldc           #37
1150: invokevirtual #38
1153: invokevirtual #41
1156: iload         45
1158: iconst_1
1159: if_icmpne     1166
1162: iconst_1
1163: goto          1167
1166: iconst_0
1167: invokestatic  #42
1170: new           #35
1173: dup
1174: invokespecial #36
1177: ldc           #37
1179: invokevirtual #38
1182: lload         46
1184: invokevirtual #233
1187: ldc           #40
1189: invokevirtual #38
1192: ldc2_w        #519
1195: invokevirtual #233
1198: ldc           #37
1200: invokevirtual #38
1203: invokevirtual #41
1206: lload         46
1208: ldc2_w        #519
1211: lcmp
1212: ifne          1219
1215: iconst_1
1216: goto          1220
1219: iconst_0
1220: invokestatic  #42
1223: new           #35
1226: dup
1227: invokespecial #36
1230: ldc           #37
1232: invokevirtual #38
1235: aload         48
1237: invokevirtual #38
1240: ldc           #189
1242: invokevirtual #38
1245: invokevirtual #41
1248: aload         48
1250: ldc           #92
1252: invokestatic  #66
1255: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test123
Start line: 3002
End line: 3050
Method source code: 
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField35 = zonedChronology19.centuries();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #525
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #204
207: astore        22
209: aload         11
211: invokevirtual #526
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: aload         23
513: invokestatic  #34
516: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test124
Start line: 3053
End line: 3058
Method source code: 
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("31");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "31" + "'", str1, "31");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #527
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #528
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #529
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #528
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test125
Start line: 3061
End line: 3071
Method source code: 
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek("1969");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #530
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #531
28: invokestatic  #9
31: istore_1
32: ldc_w         #532
35: invokestatic  #11
38: goto          42
41: astore_1
42: return
Exception table:
from    to  target type
25    38    41   Class org/joda/time/IllegalFieldValueException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test126
Start line: 3074
End line: 3079
Method source code: 
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("2028-06-25T13:04:27.709Z");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 72000000 + "'", int1 == 72000000);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #533
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #534
28: invokestatic  #51
31: istore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: iload_1
45: invokevirtual #84
48: ldc           #40
50: invokevirtual #38
53: ldc_w         #282
56: invokevirtual #84
59: ldc           #37
61: invokevirtual #38
64: invokevirtual #41
67: iload_1
68: ldc_w         #282
71: if_icmpne     78
74: iconst_1
75: goto          79
78: iconst_0
79: invokestatic  #42
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test127
Start line: 3082
End line: 3159
Method source code: 
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        long long6 = cachedDateTimeZone3.convertLocalToUTC((long) ' ', false);
        org.joda.time.ReadableInterval readableInterval7 = null;
        org.joda.time.ReadableInterval readableInterval8 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval7);
        org.joda.time.Period period9 = readableInterval8.toPeriod();
        java.lang.Object obj10 = null;
        boolean boolean11 = readableInterval8.equals(obj10);
        org.joda.time.Period period12 = readableInterval8.toPeriod();
        org.joda.time.Duration duration13 = readableInterval8.toDuration();
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.ReadableInterval readableInterval15 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval14);
        org.joda.time.Period period16 = readableInterval15.toPeriod();
        java.lang.Object obj17 = null;
        boolean boolean18 = readableInterval15.equals(obj17);
        org.joda.time.Period period19 = readableInterval15.toPeriod();
        org.joda.time.DateTime dateTime20 = readableInterval15.getEnd();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = periodType21.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.ReadableInterval readableInterval25 = null;
        org.joda.time.ReadableInterval readableInterval26 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval25);
        org.joda.time.Period period27 = readableInterval26.toPeriod();
        java.lang.Object obj28 = null;
        boolean boolean29 = readableInterval26.equals(obj28);
        org.joda.time.Period period30 = readableInterval26.toPeriod();
        org.joda.time.Duration duration31 = readableInterval26.toDuration();
        org.joda.time.ReadableInterval readableInterval32 = null;
        org.joda.time.ReadableInterval readableInterval33 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval32);
        org.joda.time.Period period34 = readableInterval33.toPeriod();
        java.lang.Object obj35 = null;
        boolean boolean36 = readableInterval33.equals(obj35);
        org.joda.time.Period period37 = readableInterval33.toPeriod();
        org.joda.time.DateTime dateTime38 = readableInterval33.getEnd();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.DurationFieldType durationFieldType40 = null;
        boolean boolean41 = periodType39.isSupported(durationFieldType40);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime38, periodType39);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime38);
        int int44 = cachedDateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime45 = null;
        boolean boolean46 = cachedDateTimeZone3.isLocalDateTimeGap(localDateTime45);
        boolean boolean47 = org.joda.time.tz.ZoneInfoCompiler.test("centuries", (org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertNotNull(readableInterval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(readableInterval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(readableInterval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(readableInterval33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #535
20: aastore
21: invokevirtual #7
24: pop
25: iconst_0
26: invokestatic  #24
29: astore_1
30: aload_1
31: invokestatic  #178
34: astore_2
35: aload_2
36: ldc2_w        #246
39: iconst_0
40: invokevirtual #536
43: lstore_3
44: aconst_null
45: astore        5
47: aload         5
49: invokestatic  #364
52: astore        6
54: aload         6
56: invokeinterface #365,  1
61: astore        7
63: aconst_null
64: astore        8
66: aload         6
68: aload         8
70: invokeinterface #366,  2
75: istore        9
77: aload         6
79: invokeinterface #365,  1
84: astore        10
86: aload         6
88: invokeinterface #370,  1
93: astore        11
95: aconst_null
96: astore        12
98: aload         12
100: invokestatic  #364
103: astore        13
105: aload         13
107: invokeinterface #365,  1
112: astore        14
114: aconst_null
115: astore        15
117: aload         13
119: aload         15
121: invokeinterface #366,  2
126: istore        16
128: aload         13
130: invokeinterface #365,  1
135: astore        17
137: aload         13
139: invokeinterface #369,  1
144: astore        18
146: invokestatic  #371
149: astore        19
151: aconst_null
152: astore        20
154: aload         19
156: aload         20
158: invokevirtual #372
161: istore        21
163: new           #26
166: dup
167: aload         11
169: aload         18
171: aload         19
173: invokespecial #373
176: astore        22
178: aconst_null
179: astore        23
181: aload         23
183: invokestatic  #364
186: astore        24
188: aload         24
190: invokeinterface #365,  1
195: astore        25
197: aconst_null
198: astore        26
200: aload         24
202: aload         26
204: invokeinterface #366,  2
209: istore        27
211: aload         24
213: invokeinterface #365,  1
218: astore        28
220: aload         24
222: invokeinterface #370,  1
227: astore        29
229: aconst_null
230: astore        30
232: aload         30
234: invokestatic  #364
237: astore        31
239: aload         31
241: invokeinterface #365,  1
246: astore        32
248: aconst_null
249: astore        33
251: aload         31
253: aload         33
255: invokeinterface #366,  2
260: istore        34
262: aload         31
264: invokeinterface #365,  1
269: astore        35
271: aload         31
273: invokeinterface #369,  1
278: astore        36
280: invokestatic  #371
283: astore        37
285: aconst_null
286: astore        38
288: aload         37
290: aload         38
292: invokevirtual #372
295: istore        39
297: new           #26
300: dup
301: aload         29
303: aload         36
305: aload         37
307: invokespecial #373
310: astore        40
312: new           #26
315: dup
316: aload         18
318: aload         36
320: invokespecial #477
323: astore        41
325: aload_2
326: aload         36
328: invokevirtual #537
331: istore        42
333: aconst_null
334: astore        43
336: aload_2
337: aload         43
339: invokevirtual #538
342: istore        44
344: ldc           #169
346: aload_2
347: invokestatic  #125
350: istore        45
352: aload_1
353: invokestatic  #34
356: aload_2
357: invokestatic  #34
360: new           #35
363: dup
364: invokespecial #36
367: ldc           #37
369: invokevirtual #38
372: lload_3
373: invokevirtual #233
376: ldc           #40
378: invokevirtual #38
381: ldc2_w        #246
384: invokevirtual #233
387: ldc           #37
389: invokevirtual #38
392: invokevirtual #41
395: lload_3
396: ldc2_w        #246
399: lcmp
400: ifne          407
403: iconst_1
404: goto          408
407: iconst_0
408: invokestatic  #42
411: aload         6
413: invokestatic  #34
416: aload         7
418: invokestatic  #34
421: new           #35
424: dup
425: invokespecial #36
428: ldc           #37
430: invokevirtual #38
433: iload         9
435: invokevirtual #39
438: ldc           #40
440: invokevirtual #38
443: iconst_0
444: invokevirtual #39
447: ldc           #37
449: invokevirtual #38
452: invokevirtual #41
455: iload         9
457: ifne          464
460: iconst_1
461: goto          465
464: iconst_0
465: invokestatic  #42
468: aload         10
470: invokestatic  #34
473: aload         11
475: invokestatic  #34
478: aload         13
480: invokestatic  #34
483: aload         14
485: invokestatic  #34
488: new           #35
491: dup
492: invokespecial #36
495: ldc           #37
497: invokevirtual #38
500: iload         16
502: invokevirtual #39
505: ldc           #40
507: invokevirtual #38
510: iconst_0
511: invokevirtual #39
514: ldc           #37
516: invokevirtual #38
519: invokevirtual #41
522: iload         16
524: ifne          531
527: iconst_1
528: goto          532
531: iconst_0
532: invokestatic  #42
535: aload         17
537: invokestatic  #34
540: aload         18
542: invokestatic  #34
545: aload         19
547: invokestatic  #34
550: new           #35
553: dup
554: invokespecial #36
557: ldc           #37
559: invokevirtual #38
562: iload         21
564: invokevirtual #39
567: ldc           #40
569: invokevirtual #38
572: iconst_0
573: invokevirtual #39
576: ldc           #37
578: invokevirtual #38
581: invokevirtual #41
584: iload         21
586: ifne          593
589: iconst_1
590: goto          594
593: iconst_0
594: invokestatic  #42
597: aload         24
599: invokestatic  #34
602: aload         25
604: invokestatic  #34
607: new           #35
610: dup
611: invokespecial #36
614: ldc           #37
616: invokevirtual #38
619: iload         27
621: invokevirtual #39
624: ldc           #40
626: invokevirtual #38
629: iconst_0
630: invokevirtual #39
633: ldc           #37
635: invokevirtual #38
638: invokevirtual #41
641: iload         27
643: ifne          650
646: iconst_1
647: goto          651
650: iconst_0
651: invokestatic  #42
654: aload         28
656: invokestatic  #34
659: aload         29
661: invokestatic  #34
664: aload         31
666: invokestatic  #34
669: aload         32
671: invokestatic  #34
674: new           #35
677: dup
678: invokespecial #36
681: ldc           #37
683: invokevirtual #38
686: iload         34
688: invokevirtual #39
691: ldc           #40
693: invokevirtual #38
696: iconst_0
697: invokevirtual #39
700: ldc           #37
702: invokevirtual #38
705: invokevirtual #41
708: iload         34
710: ifne          717
713: iconst_1
714: goto          718
717: iconst_0
718: invokestatic  #42
721: aload         35
723: invokestatic  #34
726: aload         36
728: invokestatic  #34
731: aload         37
733: invokestatic  #34
736: new           #35
739: dup
740: invokespecial #36
743: ldc           #37
745: invokevirtual #38
748: iload         39
750: invokevirtual #39
753: ldc           #40
755: invokevirtual #38
758: iconst_0
759: invokevirtual #39
762: ldc           #37
764: invokevirtual #38
767: invokevirtual #41
770: iload         39
772: ifne          779
775: iconst_1
776: goto          780
779: iconst_0
780: invokestatic  #42
783: new           #35
786: dup
787: invokespecial #36
790: ldc           #37
792: invokevirtual #38
795: iload         42
797: invokevirtual #84
800: ldc           #40
802: invokevirtual #38
805: iconst_0
806: invokevirtual #84
809: ldc           #37
811: invokevirtual #38
814: invokevirtual #41
817: iload         42
819: ifne          826
822: iconst_1
823: goto          827
826: iconst_0
827: invokestatic  #42
830: new           #35
833: dup
834: invokespecial #36
837: ldc           #37
839: invokevirtual #38
842: iload         44
844: invokevirtual #39
847: ldc           #40
849: invokevirtual #38
852: iconst_0
853: invokevirtual #39
856: ldc           #37
858: invokevirtual #38
861: invokevirtual #41
864: iload         44
866: ifne          873
869: iconst_1
870: goto          874
873: iconst_0
874: invokestatic  #42
877: new           #35
880: dup
881: invokespecial #36
884: ldc           #37
886: invokevirtual #38
889: iload         45
891: invokevirtual #39
894: ldc           #40
896: invokevirtual #38
899: iconst_1
900: invokevirtual #39
903: ldc           #37
905: invokevirtual #38
908: invokevirtual #41
911: iload         45
913: iconst_1
914: if_icmpne     921
917: iconst_1
918: goto          922
921: iconst_0
922: invokestatic  #42
925: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test128
Start line: 3162
End line: 3199
Method source code: 
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char1 = dateTimeOfYear0.iZoneChar;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean3 = dateTimeOfYear2.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear4 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char5 = dateTimeOfYear4.iZoneChar;
        int int6 = dateTimeOfYear4.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder9 = dateTimeZoneBuilder7.setStandardOffset((int) '#');
        dateTimeOfYear4.addRecurring(dateTimeZoneBuilder7, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear2.addCutover(dateTimeZoneBuilder7, (int) '4');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder27 = dateTimeZoneBuilder7.addRecurringSavings("UnsupportedDurationField[days]", 3, (int) ' ', 8, 'a', (-71), 70, 604847, false, 0);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder7, 25);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder30 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder32 = dateTimeZoneBuilder30.setStandardOffset((int) '#');
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder43 = dateTimeZoneBuilder32.addRecurringSavings("DurationField[years]", (int) 'a', 3520, (int) (byte) 1, '#', (int) (short) 10, 3, 604847, false, 4);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeZoneBuilder43.toDateTimeZone("weekOfWeekyear", false);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder57 = dateTimeZoneBuilder43.addRecurringSavings("ZonedChronology[ISOChronology[UTC], UTC]", (int) (short) 0, 9, 0, 'w', (int) '#', 28596184, 2836, true, 2272);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder60 = dateTimeZoneBuilder57.setFixedSavings("", 0);
        dateTimeOfYear0.addRecurring(dateTimeZoneBuilder60, "org.joda.time.IllegalFieldValueException: weekOfWeekyear: Value \"DurationField[millis]\" for UTC is not supported", 4140, 66, (-10));
        boolean boolean66 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + 'w' + "'", char1 == 'w');
        org.junit.Assert.assertNotNull(dateTimeOfYear2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + 'w' + "'", char5 == 'w');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder9);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder27);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder32);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder57);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #539
20: aastore
21: invokevirtual #7
24: pop
25: new           #143
28: dup
29: invokespecial #144
32: astore_1
33: aload_1
34: getfield      #136
37: istore_2
38: invokestatic  #19
41: astore_3
42: aload_3
43: getfield      #142
46: istore        4
48: new           #143
51: dup
52: invokespecial #144
55: astore        5
57: aload         5
59: getfield      #136
62: istore        6
64: aload         5
66: getfield      #145
69: istore        7
71: new           #146
74: dup
75: invokespecial #147
78: astore        8
80: aload         8
82: bipush        35
84: invokevirtual #148
87: astore        9
89: aload         5
91: aload         8
93: ldc           #92
95: iconst_1
96: bipush        10
98: iconst_m1
99: invokevirtual #149
102: aload_3
103: aload         8
105: bipush        52
107: invokevirtual #150
110: aload         8
112: ldc           #151
114: iconst_3
115: bipush        32
117: bipush        8
119: bipush        97
121: bipush        -71
123: bipush        70
125: ldc           #152
127: iconst_0
128: iconst_0
129: invokevirtual #153
132: astore        10
134: aload_1
135: aload         8
137: bipush        25
139: invokevirtual #150
142: new           #146
145: dup
146: invokespecial #147
149: astore        11
151: aload         11
153: bipush        35
155: invokevirtual #148
158: astore        12
160: aload         12
162: ldc_w         #298
165: bipush        97
167: sipush        3520
170: iconst_1
171: bipush        35
173: bipush        10
175: iconst_3
176: ldc           #152
178: iconst_0
179: iconst_4
180: invokevirtual #153
183: astore        13
185: aload         13
187: ldc_w         #423
190: iconst_0
191: invokevirtual #295
194: astore        14
196: aload         13
198: ldc           #130
200: iconst_0
201: bipush        9
203: iconst_0
204: bipush        119
206: bipush        35
208: ldc_w         #540
211: sipush        2836
214: iconst_1
215: sipush        2272
218: invokevirtual #153
221: astore        15
223: aload         15
225: ldc           #14
227: iconst_0
228: invokevirtual #541
231: astore        16
233: aload_1
234: aload         16
236: ldc_w         #542
239: sipush        4140
242: bipush        66
244: bipush        -10
246: invokevirtual #149
249: aload_1
250: getfield      #142
253: istore        17
255: new           #35
258: dup
259: invokespecial #36
262: ldc           #37
264: invokevirtual #38
267: iload_2
268: invokevirtual #78
271: ldc           #40
273: invokevirtual #38
276: bipush        119
278: invokevirtual #78
281: ldc           #37
283: invokevirtual #38
286: invokevirtual #41
289: iload_2
290: bipush        119
292: if_icmpne     299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #42
303: aload_3
304: invokestatic  #34
307: new           #35
310: dup
311: invokespecial #36
314: ldc           #37
316: invokevirtual #38
319: iload         4
321: invokevirtual #39
324: ldc           #40
326: invokevirtual #38
329: iconst_0
330: invokevirtual #39
333: ldc           #37
335: invokevirtual #38
338: invokevirtual #41
341: iload         4
343: ifne          350
346: iconst_1
347: goto          351
350: iconst_0
351: invokestatic  #42
354: new           #35
357: dup
358: invokespecial #36
361: ldc           #37
363: invokevirtual #38
366: iload         6
368: invokevirtual #78
371: ldc           #40
373: invokevirtual #38
376: bipush        119
378: invokevirtual #78
381: ldc           #37
383: invokevirtual #38
386: invokevirtual #41
389: iload         6
391: bipush        119
393: if_icmpne     400
396: iconst_1
397: goto          401
400: iconst_0
401: invokestatic  #42
404: new           #35
407: dup
408: invokespecial #36
411: ldc           #37
413: invokevirtual #38
416: iload         7
418: invokevirtual #84
421: ldc           #40
423: invokevirtual #38
426: iconst_0
427: invokevirtual #84
430: ldc           #37
432: invokevirtual #38
435: invokevirtual #41
438: iload         7
440: ifne          447
443: iconst_1
444: goto          448
447: iconst_0
448: invokestatic  #42
451: aload         9
453: invokestatic  #34
456: aload         10
458: invokestatic  #34
461: aload         12
463: invokestatic  #34
466: aload         13
468: invokestatic  #34
471: aload         14
473: invokestatic  #34
476: aload         15
478: invokestatic  #34
481: aload         16
483: invokestatic  #34
486: new           #35
489: dup
490: invokespecial #36
493: ldc           #37
495: invokevirtual #38
498: iload         17
500: invokevirtual #39
503: ldc           #40
505: invokevirtual #38
508: iconst_0
509: invokevirtual #39
512: ldc           #37
514: invokevirtual #38
517: invokevirtual #41
520: iload         17
522: ifne          529
525: iconst_1
526: goto          530
529: iconst_0
530: invokestatic  #42
533: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test129
Start line: 3202
End line: 3223
Method source code: 
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        java.io.File file4 = null;
        java.io.File[] fileArray5 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = zoneInfoCompiler0.compile(file4, fileArray5);
        java.io.BufferedReader bufferedReader7 = null;
        // The following exception was thrown during execution in test generation
        try {
            zoneInfoCompiler0.parseDataFile(bufferedReader7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #543
20: aastore
21: invokevirtual #7
24: pop
25: new           #44
28: dup
29: invokespecial #45
32: astore_1
33: aconst_null
34: astore_2
35: iconst_0
36: anewarray     #95
39: astore_3
40: aload_1
41: aload_2
42: aload_3
43: invokevirtual #96
46: astore        4
48: aconst_null
49: astore        5
51: aconst_null
52: astore        6
54: aload_1
55: aload         5
57: aload         6
59: invokevirtual #96
62: astore        7
64: aconst_null
65: astore        8
67: aload_1
68: aload         8
70: invokevirtual #46
73: ldc           #47
75: invokestatic  #11
78: goto          83
81: astore        9
83: aload_3
84: invokestatic  #34
87: aload         4
89: invokestatic  #34
92: aload         7
94: invokestatic  #34
97: return
Exception table:
from    to  target type
67    78    81   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test130
Start line: 3226
End line: 3231
Method source code: 
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("4");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "4" + "'", str1, "4");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #544
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #545
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #546
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #545
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test131
Start line: 3234
End line: 3239
Method source code: 
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        java.lang.String str1 = org.joda.time.tz.ZoneInfoCompiler.parseOptional("May");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "May" + "'", str1, "May");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #547
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #548
28: invokestatic  #64
31: astore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: aload_1
45: invokevirtual #38
48: ldc_w         #549
51: invokevirtual #38
54: invokevirtual #41
57: aload_1
58: ldc_w         #548
61: invokestatic  #66
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test132
Start line: 3242
End line: 3290
Method source code: 
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #550
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #208
207: astore        22
209: aload         11
211: invokevirtual #207
214: astore        23
216: aload_1
217: invokestatic  #34
220: new           #35
223: dup
224: invokespecial #36
227: ldc           #37
229: invokevirtual #38
232: iload_2
233: invokevirtual #39
236: ldc           #40
238: invokevirtual #38
241: iconst_0
242: invokevirtual #39
245: ldc           #37
247: invokevirtual #38
250: invokevirtual #41
253: iload_2
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #42
265: new           #35
268: dup
269: invokespecial #36
272: ldc           #37
274: invokevirtual #38
277: iload         4
279: invokevirtual #78
282: ldc           #40
284: invokevirtual #38
287: bipush        119
289: invokevirtual #78
292: ldc           #37
294: invokevirtual #38
297: invokevirtual #41
300: iload         4
302: bipush        119
304: if_icmpne     311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #42
315: new           #35
318: dup
319: invokespecial #36
322: ldc           #37
324: invokevirtual #38
327: iload         5
329: invokevirtual #84
332: ldc           #40
334: invokevirtual #38
337: iconst_0
338: invokevirtual #84
341: ldc           #37
343: invokevirtual #38
346: invokevirtual #41
349: iload         5
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #42
362: aload         7
364: invokestatic  #34
367: aload         9
369: invokestatic  #34
372: aload         10
374: invokestatic  #34
377: aload         11
379: invokestatic  #34
382: aload         13
384: invokestatic  #34
387: aload         13
389: invokestatic  #126
392: ldc           #127
394: invokestatic  #128
397: new           #35
400: dup
401: invokespecial #36
404: ldc           #37
406: invokevirtual #38
409: aload         14
411: invokevirtual #38
414: ldc           #129
416: invokevirtual #38
419: invokevirtual #41
422: aload         14
424: ldc           #130
426: invokestatic  #66
429: aload         15
431: invokestatic  #34
434: aload         16
436: invokestatic  #34
439: aload         17
441: invokestatic  #34
444: aload         18
446: invokestatic  #34
449: aload         19
451: invokestatic  #34
454: aload         20
456: invokestatic  #34
459: new           #35
462: dup
463: invokespecial #36
466: ldc           #37
468: invokevirtual #38
471: iload         21
473: invokevirtual #39
476: ldc           #40
478: invokevirtual #38
481: iconst_0
482: invokevirtual #39
485: ldc           #37
487: invokevirtual #38
490: invokevirtual #41
493: iload         21
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #42
506: aload         22
508: invokestatic  #34
511: aload         23
513: invokestatic  #34
516: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test133
Start line: 3293
End line: 3337
Method source code: 
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        java.io.File file4 = null;
        java.io.File[] fileArray5 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap6 = zoneInfoCompiler0.compile(file4, fileArray5);
        java.io.File file7 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler8 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file9 = null;
        java.io.File[] fileArray10 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap11 = zoneInfoCompiler8.compile(file9, fileArray10);
        java.io.File file12 = null;
        java.io.File[] fileArray13 = null;
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = zoneInfoCompiler8.compile(file12, fileArray13);
        java.io.File file15 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler16 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file17 = null;
        java.io.File[] fileArray18 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = zoneInfoCompiler16.compile(file17, fileArray18);
        java.io.File file20 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler21 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file22 = null;
        java.io.File[] fileArray23 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = zoneInfoCompiler21.compile(file22, fileArray23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = zoneInfoCompiler16.compile(file20, fileArray23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = zoneInfoCompiler8.compile(file15, fileArray23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = zoneInfoCompiler0.compile(file7, fileArray23);
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(fileArray10);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(fileArray18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(fileArray23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #551
20: aastore
21: invokevirtual #7
24: pop
25: new           #44
28: dup
29: invokespecial #45
32: astore_1
33: aconst_null
34: astore_2
35: iconst_0
36: anewarray     #95
39: astore_3
40: aload_1
41: aload_2
42: aload_3
43: invokevirtual #96
46: astore        4
48: aconst_null
49: astore        5
51: aconst_null
52: astore        6
54: aload_1
55: aload         5
57: aload         6
59: invokevirtual #96
62: astore        7
64: aconst_null
65: astore        8
67: new           #44
70: dup
71: invokespecial #45
74: astore        9
76: aconst_null
77: astore        10
79: iconst_0
80: anewarray     #95
83: astore        11
85: aload         9
87: aload         10
89: aload         11
91: invokevirtual #96
94: astore        12
96: aconst_null
97: astore        13
99: aconst_null
100: astore        14
102: aload         9
104: aload         13
106: aload         14
108: invokevirtual #96
111: astore        15
113: aconst_null
114: astore        16
116: new           #44
119: dup
120: invokespecial #45
123: astore        17
125: aconst_null
126: astore        18
128: iconst_0
129: anewarray     #95
132: astore        19
134: aload         17
136: aload         18
138: aload         19
140: invokevirtual #96
143: astore        20
145: aconst_null
146: astore        21
148: new           #44
151: dup
152: invokespecial #45
155: astore        22
157: aconst_null
158: astore        23
160: iconst_0
161: anewarray     #95
164: astore        24
166: aload         22
168: aload         23
170: aload         24
172: invokevirtual #96
175: astore        25
177: aload         17
179: aload         21
181: aload         24
183: invokevirtual #96
186: astore        26
188: aload         9
190: aload         16
192: aload         24
194: invokevirtual #96
197: astore        27
199: aload_1
200: aload         8
202: aload         24
204: invokevirtual #96
207: astore        28
209: aload_3
210: invokestatic  #34
213: aload         4
215: invokestatic  #34
218: aload         7
220: invokestatic  #34
223: aload         11
225: invokestatic  #34
228: aload         12
230: invokestatic  #34
233: aload         15
235: invokestatic  #34
238: aload         19
240: invokestatic  #34
243: aload         20
245: invokestatic  #34
248: aload         24
250: invokestatic  #34
253: aload         25
255: invokestatic  #34
258: aload         26
260: invokestatic  #34
263: aload         27
265: invokestatic  #34
268: aload         28
270: invokestatic  #34
273: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test134
Start line: 3340
End line: 3396
Method source code: 
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder34 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder36 = dateTimeZoneBuilder34.setStandardOffset((int) '#');
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeZoneBuilder34.toDateTimeZone("UTC", false);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder50 = dateTimeZoneBuilder34.addRecurringSavings("PT0.002S", (int) (byte) 0, 480, 0, 'a', (int) ' ', 0, (int) (short) 0, false, 292277024);
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder53 = dateTimeZoneBuilder34.setFixedSavings("+00:00:00.007", 71);
        dateTimeOfYear0.addRecurring(dateTimeZoneBuilder53, "66", 0, 7, 28596184);
        boolean boolean59 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder50);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder53);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #552
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: new           #146
205: dup
206: invokespecial #147
209: astore        22
211: aload         22
213: bipush        35
215: invokevirtual #148
218: astore        23
220: aload         22
222: ldc           #92
224: iconst_0
225: invokevirtual #295
228: astore        24
230: aload         22
232: ldc_w         #476
235: iconst_0
236: sipush        480
239: iconst_0
240: bipush        97
242: bipush        32
244: iconst_0
245: iconst_0
246: iconst_0
247: ldc_w         #553
250: invokevirtual #153
253: astore        25
255: aload         22
257: ldc_w         #554
260: bipush        71
262: invokevirtual #541
265: astore        26
267: aload_1
268: aload         26
270: ldc_w         #555
273: iconst_0
274: bipush        7
276: ldc_w         #540
279: invokevirtual #149
282: aload_1
283: getfield      #142
286: istore        27
288: aload_1
289: invokestatic  #34
292: new           #35
295: dup
296: invokespecial #36
299: ldc           #37
301: invokevirtual #38
304: iload_2
305: invokevirtual #39
308: ldc           #40
310: invokevirtual #38
313: iconst_0
314: invokevirtual #39
317: ldc           #37
319: invokevirtual #38
322: invokevirtual #41
325: iload_2
326: ifne          333
329: iconst_1
330: goto          334
333: iconst_0
334: invokestatic  #42
337: new           #35
340: dup
341: invokespecial #36
344: ldc           #37
346: invokevirtual #38
349: iload         4
351: invokevirtual #78
354: ldc           #40
356: invokevirtual #38
359: bipush        119
361: invokevirtual #78
364: ldc           #37
366: invokevirtual #38
369: invokevirtual #41
372: iload         4
374: bipush        119
376: if_icmpne     383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #42
387: new           #35
390: dup
391: invokespecial #36
394: ldc           #37
396: invokevirtual #38
399: iload         5
401: invokevirtual #84
404: ldc           #40
406: invokevirtual #38
409: iconst_0
410: invokevirtual #84
413: ldc           #37
415: invokevirtual #38
418: invokevirtual #41
421: iload         5
423: ifne          430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #42
434: aload         7
436: invokestatic  #34
439: aload         9
441: invokestatic  #34
444: aload         10
446: invokestatic  #34
449: aload         11
451: invokestatic  #34
454: aload         13
456: invokestatic  #34
459: aload         13
461: invokestatic  #126
464: ldc           #127
466: invokestatic  #128
469: new           #35
472: dup
473: invokespecial #36
476: ldc           #37
478: invokevirtual #38
481: aload         14
483: invokevirtual #38
486: ldc           #129
488: invokevirtual #38
491: invokevirtual #41
494: aload         14
496: ldc           #130
498: invokestatic  #66
501: aload         15
503: invokestatic  #34
506: aload         16
508: invokestatic  #34
511: aload         17
513: invokestatic  #34
516: aload         18
518: invokestatic  #34
521: aload         19
523: invokestatic  #34
526: aload         20
528: invokestatic  #34
531: new           #35
534: dup
535: invokespecial #36
538: ldc           #37
540: invokevirtual #38
543: iload         21
545: invokevirtual #39
548: ldc           #40
550: invokevirtual #38
553: iconst_0
554: invokevirtual #39
557: ldc           #37
559: invokevirtual #38
562: invokevirtual #41
565: iload         21
567: ifne          574
570: iconst_1
571: goto          575
574: iconst_0
575: invokestatic  #42
578: aload         23
580: invokestatic  #34
583: aload         24
585: invokestatic  #34
588: aload         25
590: invokestatic  #34
593: aload         26
595: invokestatic  #34
598: new           #35
601: dup
602: invokespecial #36
605: ldc           #37
607: invokevirtual #38
610: iload         27
612: invokevirtual #39
615: ldc           #40
617: invokevirtual #38
620: iconst_0
621: invokevirtual #39
624: ldc           #37
626: invokevirtual #38
629: invokevirtual #41
632: iload         27
634: ifne          641
637: iconst_1
638: goto          642
641: iconst_0
642: invokestatic  #42
645: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test135
Start line: 3399
End line: 3444
Method source code: 
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler0 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file1 = null;
        java.io.File[] fileArray2 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap3 = zoneInfoCompiler0.compile(file1, fileArray2);
        java.io.File file4 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler5 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file6 = null;
        java.io.File[] fileArray7 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = zoneInfoCompiler5.compile(file6, fileArray7);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = zoneInfoCompiler0.compile(file4, fileArray7);
        java.io.File file10 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler11 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file12 = null;
        java.io.File[] fileArray13 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = zoneInfoCompiler11.compile(file12, fileArray13);
        java.io.File file15 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler16 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file17 = null;
        java.io.File[] fileArray18 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = zoneInfoCompiler16.compile(file17, fileArray18);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap20 = zoneInfoCompiler11.compile(file15, fileArray18);
        java.io.File file21 = null;
        org.joda.time.tz.ZoneInfoCompiler zoneInfoCompiler22 = new org.joda.time.tz.ZoneInfoCompiler();
        java.io.File file23 = null;
        java.io.File[] fileArray24 = new java.io.File[] {};
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = zoneInfoCompiler22.compile(file23, fileArray24);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap26 = zoneInfoCompiler11.compile(file21, fileArray24);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = zoneInfoCompiler0.compile(file10, fileArray24);
        org.junit.Assert.assertNotNull(fileArray2);
        org.junit.Assert.assertNotNull(strMap3);
        org.junit.Assert.assertNotNull(fileArray7);
        org.junit.Assert.assertNotNull(strMap8);
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(fileArray13);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertNotNull(fileArray18);
        org.junit.Assert.assertNotNull(strMap19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertNotNull(fileArray24);
        org.junit.Assert.assertNotNull(strMap25);
        org.junit.Assert.assertNotNull(strMap26);
        org.junit.Assert.assertNotNull(strMap27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #556
20: aastore
21: invokevirtual #7
24: pop
25: new           #44
28: dup
29: invokespecial #45
32: astore_1
33: aconst_null
34: astore_2
35: iconst_0
36: anewarray     #95
39: astore_3
40: aload_1
41: aload_2
42: aload_3
43: invokevirtual #96
46: astore        4
48: aconst_null
49: astore        5
51: new           #44
54: dup
55: invokespecial #45
58: astore        6
60: aconst_null
61: astore        7
63: iconst_0
64: anewarray     #95
67: astore        8
69: aload         6
71: aload         7
73: aload         8
75: invokevirtual #96
78: astore        9
80: aload_1
81: aload         5
83: aload         8
85: invokevirtual #96
88: astore        10
90: aconst_null
91: astore        11
93: new           #44
96: dup
97: invokespecial #45
100: astore        12
102: aconst_null
103: astore        13
105: iconst_0
106: anewarray     #95
109: astore        14
111: aload         12
113: aload         13
115: aload         14
117: invokevirtual #96
120: astore        15
122: aconst_null
123: astore        16
125: new           #44
128: dup
129: invokespecial #45
132: astore        17
134: aconst_null
135: astore        18
137: iconst_0
138: anewarray     #95
141: astore        19
143: aload         17
145: aload         18
147: aload         19
149: invokevirtual #96
152: astore        20
154: aload         12
156: aload         16
158: aload         19
160: invokevirtual #96
163: astore        21
165: aconst_null
166: astore        22
168: new           #44
171: dup
172: invokespecial #45
175: astore        23
177: aconst_null
178: astore        24
180: iconst_0
181: anewarray     #95
184: astore        25
186: aload         23
188: aload         24
190: aload         25
192: invokevirtual #96
195: astore        26
197: aload         12
199: aload         22
201: aload         25
203: invokevirtual #96
206: astore        27
208: aload_1
209: aload         11
211: aload         25
213: invokevirtual #96
216: astore        28
218: aload_3
219: invokestatic  #34
222: aload         4
224: invokestatic  #34
227: aload         8
229: invokestatic  #34
232: aload         9
234: invokestatic  #34
237: aload         10
239: invokestatic  #34
242: aload         14
244: invokestatic  #34
247: aload         15
249: invokestatic  #34
252: aload         19
254: invokestatic  #34
257: aload         20
259: invokestatic  #34
262: aload         21
264: invokestatic  #34
267: aload         25
269: invokestatic  #34
272: aload         26
274: invokestatic  #34
277: aload         27
279: invokestatic  #34
282: aload         28
284: invokestatic  #34
287: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test136
Start line: 3447
End line: 3452
Method source code: 
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        int int1 = org.joda.time.tz.ZoneInfoCompiler.parseTime("-2033899");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-72000000) + "'", int1 == (-72000000));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #557
20: aastore
21: invokevirtual #7
24: pop
25: ldc_w         #558
28: invokestatic  #51
31: istore_1
32: new           #35
35: dup
36: invokespecial #36
39: ldc           #37
41: invokevirtual #38
44: iload_1
45: invokevirtual #84
48: ldc           #40
50: invokevirtual #38
53: ldc_w         #559
56: invokevirtual #84
59: ldc           #37
61: invokevirtual #38
64: invokevirtual #41
67: iload_1
68: ldc_w         #559
71: if_icmpne     78
74: iconst_1
75: goto          79
78: iconst_0
79: invokestatic  #42
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/RegressionTest0.class
Class name: RegressionTest0
Method name: test137
Start line: 3455
End line: 3538
Method source code: 
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear0 = org.joda.time.tz.ZoneInfoCompiler.getStartOfYear();
        boolean boolean1 = dateTimeOfYear0.iAdvanceDayOfWeek;
        org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear dateTimeOfYear2 = new org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear();
        char char3 = dateTimeOfYear2.iZoneChar;
        int int4 = dateTimeOfYear2.iMillisOfDay;
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder5 = new org.joda.time.tz.DateTimeZoneBuilder();
        org.joda.time.tz.DateTimeZoneBuilder dateTimeZoneBuilder7 = dateTimeZoneBuilder5.setStandardOffset((int) '#');
        dateTimeOfYear2.addRecurring(dateTimeZoneBuilder5, "UTC", (int) (byte) 1, (int) (short) 10, (int) (short) -1);
        dateTimeOfYear0.addCutover(dateTimeZoneBuilder5, (int) '4');
        org.joda.time.ReadableInterval readableInterval15 = null;
        org.joda.time.Chronology chronology16 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray25 = zonedChronology19.get((org.joda.time.ReadablePeriod) period22, (long) (byte) -1, (long) 1);
        java.lang.String str26 = zonedChronology19.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology19.hourOfDay();
        org.joda.time.Chronology chronology28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology19.yearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology19.year();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology19.yearOfEra();
        boolean boolean33 = org.joda.time.field.FieldUtils.equals((java.lang.Object) dateTimeOfYear0, (java.lang.Object) zonedChronology19);
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology19.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology19.year();
        org.joda.time.ReadableInterval readableInterval36 = null;
        org.joda.time.Chronology chronology37 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInterval36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone39);
        org.joda.time.Period period43 = new org.joda.time.Period((long) '4', 10L);
        int[] intArray46 = zonedChronology40.get((org.joda.time.ReadablePeriod) period43, (long) (byte) -1, (long) 1);
        java.lang.String str47 = zonedChronology40.toString();
        org.joda.time.DurationField durationField48 = zonedChronology40.hours();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology40.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology40.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField56 = new org.joda.time.field.OffsetDateTimeField(dateTimeField51, dateTimeFieldType52, (int) (short) 1, (int) (short) 10, (int) '4');
        int int58 = offsetDateTimeField56.get((-99L));
        long long60 = offsetDateTimeField56.roundFloor((-98L));
        boolean boolean62 = offsetDateTimeField56.isLeap((long) '#');
        int int64 = offsetDateTimeField56.get((long) (-71));
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = offsetDateTimeField56.getType();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField67 = new org.joda.time.field.OffsetDateTimeField(dateTimeField35, dateTimeFieldType65, 1);
        org.junit.Assert.assertNotNull(dateTimeOfYear0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + 'w' + "'", char3 == 'w');
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZoneBuilder7);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(zonedChronology19);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str26, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(zonedChronology40);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 2]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ZonedChronology[ISOChronology[UTC], UTC]" + "'", str47, "ZonedChronology[ISOChronology[UTC], UTC]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 70 + "'", int58 == 70);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-31536000000L) + "'", long60 == (-31536000000L));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 70 + "'", int64 == 70);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #560
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #19
28: astore_1
29: aload_1
30: getfield      #142
33: istore_2
34: new           #143
37: dup
38: invokespecial #144
41: astore_3
42: aload_3
43: getfield      #136
46: istore        4
48: aload_3
49: getfield      #145
52: istore        5
54: new           #146
57: dup
58: invokespecial #147
61: astore        6
63: aload         6
65: bipush        35
67: invokevirtual #148
70: astore        7
72: aload_3
73: aload         6
75: ldc           #92
77: iconst_1
78: bipush        10
80: iconst_m1
81: invokevirtual #149
84: aload_1
85: aload         6
87: bipush        52
89: invokevirtual #150
92: aconst_null
93: astore        8
95: aload         8
97: invokestatic  #23
100: astore        9
102: iconst_0
103: invokestatic  #24
106: astore        10
108: aload         9
110: aload         10
112: invokestatic  #25
115: astore        11
117: new           #26
120: dup
121: ldc2_w        #108
124: ldc2_w        #110
127: invokespecial #112
130: astore        12
132: aload         11
134: aload         12
136: ldc2_w        #113
139: lconst_1
140: invokevirtual #115
143: astore        13
145: aload         11
147: invokevirtual #116
150: astore        14
152: aload         11
154: invokevirtual #117
157: astore        15
159: aload         11
161: invokestatic  #118
164: astore        16
166: aload         11
168: invokevirtual #204
171: astore        17
173: aload         11
175: invokevirtual #205
178: astore        18
180: aload         11
182: invokevirtual #206
185: astore        19
187: aload         11
189: invokevirtual #207
192: astore        20
194: aload_1
195: aload         11
197: invokestatic  #174
200: istore        21
202: aload         11
204: invokevirtual #204
207: astore        22
209: aload         11
211: invokevirtual #206
214: astore        23
216: aconst_null
217: astore        24
219: aload         24
221: invokestatic  #23
224: astore        25
226: iconst_0
227: invokestatic  #24
230: astore        26
232: aload         25
234: aload         26
236: invokestatic  #25
239: astore        27
241: new           #26
244: dup
245: ldc2_w        #108
248: ldc2_w        #110
251: invokespecial #112
254: astore        28
256: aload         27
258: aload         28
260: ldc2_w        #113
263: lconst_1
264: invokevirtual #115
267: astore        29
269: aload         27
271: invokevirtual #116
274: astore        30
276: aload         27
278: invokevirtual #119
281: astore        31
283: aload         27
285: invokevirtual #207
288: astore        32
290: aload         27
292: invokevirtual #207
295: astore        33
297: aload         27
299: invokevirtual #561
302: astore        34
304: invokestatic  #562
307: astore        35
309: new           #563
312: dup
313: aload         34
315: aload         35
317: iconst_1
318: bipush        10
320: bipush        52
322: invokespecial #564
325: astore        36
327: aload         36
329: ldc2_w        #565
332: invokevirtual #567
335: istore        37
337: aload         36
339: ldc2_w        #568
342: invokevirtual #570
345: lstore        38
347: aload         36
349: ldc2_w        #571
352: invokevirtual #573
355: istore        40
357: aload         36
359: ldc2_w        #574
362: invokevirtual #567
365: istore        41
367: aload         36
369: invokevirtual #576
372: astore        42
374: new           #563
377: dup
378: aload         23
380: aload         42
382: iconst_1
383: invokespecial #577
386: astore        43
388: aload_1
389: invokestatic  #34
392: new           #35
395: dup
396: invokespecial #36
399: ldc           #37
401: invokevirtual #38
404: iload_2
405: invokevirtual #39
408: ldc           #40
410: invokevirtual #38
413: iconst_0
414: invokevirtual #39
417: ldc           #37
419: invokevirtual #38
422: invokevirtual #41
425: iload_2
426: ifne          433
429: iconst_1
430: goto          434
433: iconst_0
434: invokestatic  #42
437: new           #35
440: dup
441: invokespecial #36
444: ldc           #37
446: invokevirtual #38
449: iload         4
451: invokevirtual #78
454: ldc           #40
456: invokevirtual #38
459: bipush        119
461: invokevirtual #78
464: ldc           #37
466: invokevirtual #38
469: invokevirtual #41
472: iload         4
474: bipush        119
476: if_icmpne     483
479: iconst_1
480: goto          484
483: iconst_0
484: invokestatic  #42
487: new           #35
490: dup
491: invokespecial #36
494: ldc           #37
496: invokevirtual #38
499: iload         5
501: invokevirtual #84
504: ldc           #40
506: invokevirtual #38
509: iconst_0
510: invokevirtual #84
513: ldc           #37
515: invokevirtual #38
518: invokevirtual #41
521: iload         5
523: ifne          530
526: iconst_1
527: goto          531
530: iconst_0
531: invokestatic  #42
534: aload         7
536: invokestatic  #34
539: aload         9
541: invokestatic  #34
544: aload         10
546: invokestatic  #34
549: aload         11
551: invokestatic  #34
554: aload         13
556: invokestatic  #34
559: aload         13
561: invokestatic  #126
564: ldc           #127
566: invokestatic  #128
569: new           #35
572: dup
573: invokespecial #36
576: ldc           #37
578: invokevirtual #38
581: aload         14
583: invokevirtual #38
586: ldc           #129
588: invokevirtual #38
591: invokevirtual #41
594: aload         14
596: ldc           #130
598: invokestatic  #66
601: aload         15
603: invokestatic  #34
606: aload         16
608: invokestatic  #34
611: aload         17
613: invokestatic  #34
616: aload         18
618: invokestatic  #34
621: aload         19
623: invokestatic  #34
626: aload         20
628: invokestatic  #34
631: new           #35
634: dup
635: invokespecial #36
638: ldc           #37
640: invokevirtual #38
643: iload         21
645: invokevirtual #39
648: ldc           #40
650: invokevirtual #38
653: iconst_0
654: invokevirtual #39
657: ldc           #37
659: invokevirtual #38
662: invokevirtual #41
665: iload         21
667: ifne          674
670: iconst_1
671: goto          675
674: iconst_0
675: invokestatic  #42
678: aload         22
680: invokestatic  #34
683: aload         23
685: invokestatic  #34
688: aload         25
690: invokestatic  #34
693: aload         26
695: invokestatic  #34
698: aload         27
700: invokestatic  #34
703: aload         29
705: invokestatic  #34
708: aload         29
710: invokestatic  #126
713: ldc           #127
715: invokestatic  #128
718: new           #35
721: dup
722: invokespecial #36
725: ldc           #37
727: invokevirtual #38
730: aload         30
732: invokevirtual #38
735: ldc           #129
737: invokevirtual #38
740: invokevirtual #41
743: aload         30
745: ldc           #130
747: invokestatic  #66
750: aload         31
752: invokestatic  #34
755: aload         32
757: invokestatic  #34
760: aload         33
762: invokestatic  #34
765: aload         34
767: invokestatic  #34
770: aload         35
772: invokestatic  #34
775: new           #35
778: dup
779: invokespecial #36
782: ldc           #37
784: invokevirtual #38
787: iload         37
789: invokevirtual #84
792: ldc           #40
794: invokevirtual #38
797: bipush        70
799: invokevirtual #84
802: ldc           #37
804: invokevirtual #38
807: invokevirtual #41
810: iload         37
812: bipush        70
814: if_icmpne     821
817: iconst_1
818: goto          822
821: iconst_0
822: invokestatic  #42
825: new           #35
828: dup
829: invokespecial #36
832: ldc           #37
834: invokevirtual #38
837: lload         38
839: invokevirtual #233
842: ldc           #40
844: invokevirtual #38
847: ldc2_w        #578
850: invokevirtual #233
853: ldc           #37
855: invokevirtual #38
858: invokevirtual #41
861: lload         38
863: ldc2_w        #578
866: lcmp
867: ifne          874
870: iconst_1
871: goto          875
874: iconst_0
875: invokestatic  #42
878: new           #35
881: dup
882: invokespecial #36
885: ldc           #37
887: invokevirtual #38
890: iload         40
892: invokevirtual #39
895: ldc           #40
897: invokevirtual #38
900: iconst_0
901: invokevirtual #39
904: ldc           #37
906: invokevirtual #38
909: invokevirtual #41
912: iload         40
914: ifne          921
917: iconst_1
918: goto          922
921: iconst_0
922: invokestatic  #42
925: new           #35
928: dup
929: invokespecial #36
932: ldc           #37
934: invokevirtual #38
937: iload         41
939: invokevirtual #84
942: ldc           #40
944: invokevirtual #38
947: bipush        70
949: invokevirtual #84
952: ldc           #37
954: invokevirtual #38
957: invokevirtual #41
960: iload         41
962: bipush        70
964: if_icmpne     971
967: iconst_1
968: goto          972
971: iconst_0
972: invokestatic  #42
975: aload         42
977: invokestatic  #34
980: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test00
Start line: 31
End line: 35
Method source code: 
  public void test00()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      zoneInfoCompiler_DateTimeOfYear0.addCutover(dateTimeZoneBuilder0, 0);
  }
Method byte code: 
0: invokestatic  #2
3: astore_1
4: new           #3
7: dup
8: invokespecial #4
11: astore_2
12: aload_1
13: aload_2
14: iconst_0
15: invokevirtual #5
18: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test01
Start line: 38
End line: 93
Method source code: 
  public void test01()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      zoneInfoCompiler_DateTimeOfYear0.addRecurring(dateTimeZoneBuilder0, ",HH'{zYIe$F9R", (-780), (-780), 1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      String string0 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-?";
      ZoneInfoCompiler.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = ZoneInfoCompiler.verbose();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("r.TyhS");
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"r.TyhS\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseDayOfWeek("s}a~-v968Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"s}a~-v968Q\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
Method byte code: 
0: new           #6
3: dup
4: invokespecial #7
7: astore_1
8: new           #3
11: dup
12: invokespecial #4
15: astore_2
16: aload_1
17: aload_2
18: ldc           #8
20: sipush        -780
23: sipush        -780
26: iconst_1
27: invokevirtual #9
30: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test02
Start line: 45
End line: 49
Method source code: 
  public void test02()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      String string0 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string0);
  }
Method byte code: 
0: new           #6
3: dup
4: invokespecial #7
7: astore_1
8: aload_1
9: invokevirtual #10
12: astore_2
13: ldc           #11
15: aload_2
16: invokestatic  #12
19: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test03
Start line: 52
End line: 57
Method source code: 
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-?";
      ZoneInfoCompiler.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }
Method byte code: 
0: iconst_4
1: anewarray     #13
4: astore_1
5: aload_1
6: iconst_0
7: ldc           #14
9: aastore
10: aload_1
11: invokestatic  #15
14: ldc2_w        #16
17: aload_1
18: arraylength
19: i2l
20: invokestatic  #18
23: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test04
Start line: 60
End line: 63
Method source code: 
  public void test04()  throws Throwable  {
      boolean boolean0 = ZoneInfoCompiler.verbose();
      assertFalse(boolean0);
  }
Method byte code: 
0: invokestatic  #19
3: istore_1
4: iload_1
5: invokestatic  #20
8: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test05
Start line: 66
End line: 79
Method source code: 
  public void test05()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("r.TyhS");
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"r.TyhS\" for monthOfYear is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }
Method byte code: 
0: new           #21
3: dup
4: ldc           #22
6: invokespecial #23
9: astore_1
10: aconst_null
11: astore_2
12: new           #6
15: dup
16: aload_1
17: invokespecial #24
20: astore_2
21: ldc           #25
23: invokestatic  #26
26: goto          36
29: astore_3
30: ldc           #28
32: aload_3
33: invokestatic  #29
36: return
Exception table:
from    to  target type
12    26    29   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test06
Start line: 82
End line: 90
Method source code: 
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseDayOfWeek("s}a~-v968Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"s}a~-v968Q\" for dayOfWeek is not supported
Method byte code: 
0: ldc           #30
2: invokestatic  #31
5: pop
6: ldc           #25
8: invokestatic  #26
11: goto          21
14: astore_1
15: ldc           #28
17: aload_1
18: invokestatic  #29
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test07
Start line: 97
End line: 101
Method source code: 
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ZoneInfoCompiler.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
Method byte code: 
0: iconst_0
1: anewarray     #13
4: astore_1
5: aload_1
6: invokestatic  #15
9: lconst_0
10: aload_1
11: arraylength
12: i2l
13: invokestatic  #18
16: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test08
Start line: 104
End line: 112
Method source code: 
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-dst";
      stringArray0[1] = "YU[j!Mo8\"D/>L^iG;";
      stringArray0[2] = "-dst";
      stringArray0[3] = "-dst";
      ZoneInfoCompiler.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }
Method byte code: 
0: iconst_4
1: anewarray     #13
4: astore_1
5: aload_1
6: iconst_0
7: ldc           #32
9: aastore
10: aload_1
11: iconst_1
12: ldc           #33
14: aastore
15: aload_1
16: iconst_2
17: ldc           #32
19: aastore
20: aload_1
21: iconst_3
22: ldc           #32
24: aastore
25: aload_1
26: invokestatic  #15
29: ldc2_w        #16
32: aload_1
33: arraylength
34: i2l
35: invokestatic  #18
38: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test09
Start line: 115
End line: 129
Method source code: 
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-verbose";
      stringArray0[1] = "UnsupportedDurationField[";
      try { 
        ZoneInfoCompiler.main(stringArray0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
Method byte code: 
0: iconst_2
1: anewarray     #13
4: astore_1
5: aload_1
6: iconst_0
7: ldc           #34
9: aastore
10: aload_1
11: iconst_1
12: ldc           #35
14: aastore
15: aload_1
16: invokestatic  #15
19: ldc           #36
21: invokestatic  #26
24: goto          34
27: astore_2
28: ldc           #38
30: aload_2
31: invokestatic  #29
34: return
Exception table:
from    to  target type
15    24    27   Class java/io/FileNotFoundException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test10
Start line: 132
End line: 146
Method source code: 
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-src";
      stringArray0[1] = "<";
      try { 
        ZoneInfoCompiler.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }
Method byte code: 
0: iconst_3
1: anewarray     #13
4: astore_1
5: aload_1
6: iconst_0
7: ldc           #39
9: aastore
10: aload_1
11: iconst_1
12: ldc           #40
14: aastore
15: aload_1
16: invokestatic  #15
19: ldc           #41
21: invokestatic  #26
24: goto          34
27: astore_2
28: ldc           #43
30: aload_2
31: invokestatic  #29
34: return
Exception table:
from    to  target type
15    24    27   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test11
Start line: 149
End line: 153
Method source code: 
  public void test11()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
      assertSame(zoneInfoCompiler_DateTimeOfYear1, zoneInfoCompiler_DateTimeOfYear0);
  }
Method byte code: 
0: invokestatic  #2
3: astore_1
4: invokestatic  #2
7: astore_2
8: aload_2
9: aload_1
10: invokestatic  #44
13: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test12
Start line: 156
End line: 160
Method source code: 
  public void test12()  throws Throwable  {
      ZoneInfoCompiler.parseTime("24:00");
      int int0 = ZoneInfoCompiler.parseTime("24:00");
      assertEquals(86400000, int0);
  }
Method byte code: 
0: ldc           #45
2: invokestatic  #46
5: pop
6: ldc           #45
8: invokestatic  #46
11: istore_1
12: ldc2_w        #47
15: iload_1
16: i2l
17: invokestatic  #18
20: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test13
Start line: 163
End line: 172
Method source code: 
  public void test13()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      hashMap0.put("]55ZA?d*", dateTimeZone0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
      assertEquals(33, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0002\u0000\b]55ZA?d*\u0000\r+00:00:00.001\u0000\u0001\u0000\u0000\u0000\u0001", byteArrayOutputStream0.toString());
  }
Method byte code: 
0: new           #49
3: dup
4: invokespecial #50
7: astore_1
8: iconst_1
9: invokestatic  #51
12: astore_2
13: aload_1
14: ldc           #52
16: aload_2
17: invokevirtual #53
20: pop
21: new           #54
24: dup
25: invokespecial #55
28: astore_3
29: new           #56
32: dup
33: aload_3
34: invokespecial #57
37: astore        4
39: aload         4
41: aload_1
42: invokestatic  #58
45: ldc2_w        #59
48: aload_3
49: invokevirtual #61
52: i2l
53: invokestatic  #18
56: ldc           #62
58: aload_3
59: invokevirtual #63
62: invokestatic  #12
65: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test14
Start line: 175
End line: 0
Method source code: 
  public void test14()  throws Throwable  {
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      hashMap0.put("Field is not supported", dateTimeZone0);
      hashMap0.put("qGwTU@<ne,]!zy}}=", dateTimeZone0);
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.writeZoneInfoMap((DataOutputStream) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
Method byte code: 
0: new           #49
3: dup
4: invokespecial #50
7: astore_1
8: invokestatic  #64
11: astore_2
12: aload_1
13: ldc           #65
15: aload_2
16: invokevirtual #53
19: pop
20: aload_1
21: ldc           #66
23: aload_2
24: invokevirtual #53
27: pop
28: aconst_null
29: checkcast     #56
32: aload_1
33: invokestatic  #58
36: ldc           #41
38: invokestatic  #26
41: goto          51
44: astore_3
45: ldc           #67
47: aload_3
48: invokestatic  #29
51: return
Exception table:
from    to  target type
28    41    44   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test15
Start line: 194
End line: 197
Method source code: 
  public void test15()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("minimum", 1);
      assertEquals(Integer.MIN_VALUE, int0);
  }
Method byte code: 
0: ldc           #68
2: iconst_1
3: invokestatic  #69
6: istore_1
7: ldc2_w        #71
10: iload_1
11: i2l
12: invokestatic  #18
15: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test16
Start line: 200
End line: 212
Method source code: 
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseYear("#U", (-65015560));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
Method byte code: 
0: ldc           #73
2: ldc           #74
4: invokestatic  #69
7: pop
8: ldc           #75
10: invokestatic  #26
13: goto          23
16: astore_1
17: ldc           #77
19: aload_1
20: invokestatic  #29
23: return
Exception table:
from    to  target type
0    13    16   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test17
Start line: 215
End line: 218
Method source code: 
  public void test17()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("min", (-1));
      assertEquals(Integer.MIN_VALUE, int0);
  }
Method byte code: 
0: ldc           #78
2: iconst_m1
3: invokestatic  #69
6: istore_1
7: ldc2_w        #71
10: iload_1
11: i2l
12: invokestatic  #18
15: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test18
Start line: 221
End line: 224
Method source code: 
  public void test18()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("maximum", 3142);
      assertEquals(Integer.MAX_VALUE, int0);
  }
Method byte code: 
0: ldc           #79
2: sipush        3142
5: invokestatic  #69
8: istore_1
9: ldc2_w        #80
12: iload_1
13: i2l
14: invokestatic  #18
17: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test19
Start line: 227
End line: 230
Method source code: 
  public void test19()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseYear("only", (-100390397));
      assertEquals((-100390397), int0);
  }
Method byte code: 
0: ldc           #82
2: ldc           #83
4: invokestatic  #69
7: istore_1
8: ldc2_w        #84
11: iload_1
12: i2l
13: invokestatic  #18
16: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test20
Start line: 233
End line: 236
Method source code: 
  public void test20()  throws Throwable  {
      String string0 = ZoneInfoCompiler.parseOptional("-src");
      assertEquals("-src", string0);
  }
Method byte code: 
0: ldc           #39
2: invokestatic  #86
5: astore_1
6: ldc           #39
8: aload_1
9: invokestatic  #12
12: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test21
Start line: 239
End line: 242
Method source code: 
  public void test21()  throws Throwable  {
      String string0 = ZoneInfoCompiler.parseOptional("-");
      assertNull(string0);
  }
Method byte code: 
0: ldc           #87
2: invokestatic  #86
5: astore_1
6: aload_1
7: invokestatic  #88
10: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test22
Start line: 245
End line: 257
Method source code: 
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        ZoneInfoCompiler.parseTime("-src");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -src
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
Method byte code: 
0: ldc           #39
2: invokestatic  #46
5: pop
6: ldc           #25
8: invokestatic  #26
11: goto          21
14: astore_1
15: ldc           #67
17: aload_1
18: invokestatic  #29
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test23
Start line: 260
End line: 263
Method source code: 
  public void test23()  throws Throwable  {
      int int0 = ZoneInfoCompiler.parseTime("-9XfffuN;wE&8(OZ`5h");
      assertEquals((-32400000), int0);
  }
Method byte code: 
0: ldc           #89
2: invokestatic  #46
5: istore_1
6: ldc2_w        #90
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test24
Start line: 266
End line: 269
Method source code: 
  public void test24()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('G');
      assertEquals('u', char0);
  }
Method byte code: 
0: bipush        71
2: invokestatic  #92
5: istore_1
6: ldc2_w        #93
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test25
Start line: 272
End line: 275
Method source code: 
  public void test25()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('z');
      assertEquals('u', char0);
  }
Method byte code: 
0: bipush        122
2: invokestatic  #92
5: istore_1
6: ldc2_w        #93
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test26
Start line: 278
End line: 281
Method source code: 
  public void test26()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('S');
      assertEquals('s', char0);
  }
Method byte code: 
0: bipush        83
2: invokestatic  #92
5: istore_1
6: ldc2_w        #95
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test27
Start line: 284
End line: 287
Method source code: 
  public void test27()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('U');
      assertEquals('u', char0);
  }
Method byte code: 
0: bipush        85
2: invokestatic  #92
5: istore_1
6: ldc2_w        #93
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test28
Start line: 290
End line: 293
Method source code: 
  public void test28()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('W');
      assertEquals('w', char0);
  }
Method byte code: 
0: bipush        87
2: invokestatic  #92
5: istore_1
6: ldc2_w        #97
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test29
Start line: 296
End line: 299
Method source code: 
  public void test29()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('Z');
      assertEquals('u', char0);
  }
Method byte code: 
0: bipush        90
2: invokestatic  #92
5: istore_1
6: ldc2_w        #93
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test30
Start line: 302
End line: 305
Method source code: 
  public void test30()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('g');
      assertEquals('u', char0);
  }
Method byte code: 
0: bipush        103
2: invokestatic  #92
5: istore_1
6: ldc2_w        #93
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test31
Start line: 308
End line: 311
Method source code: 
  public void test31()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('s');
      assertEquals('s', char0);
  }
Method byte code: 
0: bipush        115
2: invokestatic  #92
5: istore_1
6: ldc2_w        #95
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test32
Start line: 314
End line: 317
Method source code: 
  public void test32()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('u');
      assertEquals('u', char0);
  }
Method byte code: 
0: bipush        117
2: invokestatic  #92
5: istore_1
6: ldc2_w        #93
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test33
Start line: 320
End line: 323
Method source code: 
  public void test33()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('w');
      assertEquals('w', char0);
  }
Method byte code: 
0: bipush        119
2: invokestatic  #92
5: istore_1
6: ldc2_w        #97
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test34
Start line: 326
End line: 329
Method source code: 
  public void test34()  throws Throwable  {
      char char0 = ZoneInfoCompiler.parseZoneChar('\"');
      assertEquals('w', char0);
  }
Method byte code: 
0: bipush        34
2: invokestatic  #92
5: istore_1
6: ldc2_w        #97
9: iload_1
10: i2l
11: invokestatic  #18
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test35
Start line: 332
End line: 337
Method source code: 
  public void test35()  throws Throwable  {
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      DateTimeZone dateTimeZone0 = dateTimeZoneBuilder0.toDateTimeZone("WhKYe@", false);
      boolean boolean0 = ZoneInfoCompiler.test("WhKYe@", dateTimeZone0);
      assertTrue(boolean0);
  }
Method byte code: 
0: new           #3
3: dup
4: invokespecial #4
7: astore_1
8: aload_1
9: ldc           #99
11: iconst_0
12: invokevirtual #100
15: astore_2
16: ldc           #99
18: aload_2
19: invokestatic  #101
22: istore_3
23: iload_3
24: invokestatic  #102
27: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test36
Start line: 340
End line: 344
Method source code: 
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      boolean boolean0 = ZoneInfoCompiler.test("#U", fixedDateTimeZone0);
      assertTrue(boolean0);
  }
Method byte code: 
0: getstatic     #103
3: checkcast     #104
6: astore_1
7: ldc           #73
9: aload_1
10: invokestatic  #101
13: istore_2
14: iload_2
15: invokestatic  #102
18: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test37
Start line: 347
End line: 0
Method source code: 
  public void test37()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      MockFile mockFile0 = new MockFile("}O2!Of!6", "}O2!Of!6");
      File[] fileArray0 = new File[0];
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile(mockFile0, fileArray0);
      Map<String, DateTimeZone> map1 = zoneInfoCompiler0.compile(mockFile0, fileArray0);
      assertTrue(map1.equals((Object)map0));
  }
Method byte code: 
0: new           #105
3: dup
4: invokespecial #106
7: astore_1
8: new           #107
11: dup
12: ldc           #108
14: ldc           #108
16: invokespecial #109
19: astore_2
20: iconst_0
21: anewarray     #110
24: astore_3
25: aload_1
26: aload_2
27: aload_3
28: invokevirtual #111
31: astore        4
33: aload_1
34: aload_2
35: aload_3
36: invokevirtual #111
39: astore        5
41: aload         5
43: aload         4
45: invokeinterface #112,  2
50: invokestatic  #102
53: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test38
Start line: 357
End line: 361
Method source code: 
  public void test38()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) null, (File[]) null);
      assertTrue(map0.isEmpty());
  }
Method byte code: 
0: new           #105
3: dup
4: invokespecial #106
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #110
13: aconst_null
14: checkcast     #113
17: invokevirtual #111
20: astore_2
21: aload_2
22: invokeinterface #114,  1
27: invokestatic  #102
30: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test40
Start line: 382
End line: 395
Method source code: 
  public void test40()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      File file0 = MockFile.createTempFile("<u`Z#Mb", "<u`Z#Mb");
      try { 
        zoneInfoCompiler0.compile(file0, (File[]) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Destination is not a directory: /tmp/<u`Z#Mb0<u`Z#Mb
         //
         verifyException("org.joda.time.tz.ZoneInfoCompiler", e);
      }
  }
Method byte code: 
0: new           #105
3: dup
4: invokespecial #106
7: astore_1
8: ldc           #115
10: ldc           #115
12: invokestatic  #116
15: astore_2
16: aload_1
17: aload_2
18: aconst_null
19: checkcast     #113
22: invokevirtual #111
25: pop
26: ldc           #117
28: invokestatic  #26
31: goto          41
34: astore_3
35: ldc           #67
37: aload_3
38: invokestatic  #29
41: return
Exception table:
from    to  target type
16    31    34   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test41
Start line: 398
End line: 403
Method source code: 
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\nAdvanceDayOfWeek: ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
  }
Method byte code: 
0: new           #119
3: dup
4: ldc           #120
6: invokespecial #121
9: astore_1
10: new           #122
13: dup
14: aload_1
15: invokespecial #123
18: astore_2
19: new           #105
22: dup
23: invokespecial #106
26: astore_3
27: aload_3
28: aload_2
29: invokevirtual #124
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test42
Start line: 406
End line: 411
Method source code: 
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#:#y$A*");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
  }
Method byte code: 
0: new           #119
3: dup
4: ldc           #125
6: invokespecial #121
9: astore_1
10: new           #122
13: dup
14: aload_1
15: invokespecial #123
18: astore_2
19: new           #105
22: dup
23: invokespecial #106
26: astore_3
27: aload_3
28: aload_2
29: invokevirtual #124
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test43
Start line: 414
End line: 419
Method source code: 
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<u`Z#Mb");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
  }
Method byte code: 
0: new           #119
3: dup
4: ldc           #115
6: invokespecial #121
9: astore_1
10: new           #122
13: dup
14: aload_1
15: invokespecial #123
18: astore_2
19: new           #105
22: dup
23: invokespecial #106
26: astore_3
27: aload_3
28: aload_2
29: invokevirtual #124
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test44
Start line: 422
End line: 423
Method source code: 
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" VN}V<`vG7");
Method byte code: 
0: new           #119
3: dup
4: ldc           #126
6: invokespecial #121
9: astore_1
10: new           #122
13: dup
14: aload_1
15: invokespecial #123
18: astore_2
19: new           #105
22: dup
23: invokespecial #106
26: astore_3
27: aload_3
28: aload_2
29: invokevirtual #124
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/ZoneInfoCompiler_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/ZoneInfoCompiler_ESTest.class
Class name: ZoneInfoCompiler_ESTest
Method name: test45
Start line: 430
End line: 433
Method source code: 
  public void test45()  throws Throwable  {
      StringTokenizer stringTokenizer0 = new StringTokenizer("N", "N");
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
  }
Method byte code: 
0: new           #21
3: dup
4: ldc           #127
6: ldc           #127
8: invokespecial #128
11: astore_1
12: new           #6
15: dup
16: aload_1
17: invokespecial #24
20: astore_2
21: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: testDateTimeZoneBuilder
Start line: 87
End line: 99
Method source code: 
    public void testDateTimeZoneBuilder() throws Exception {
        // test multithreading, issue #18
        getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true);
        final DateTimeZone[] zone = new DateTimeZone[1];
        Thread t = new Thread(new Runnable() {
            public void run() {
                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true);
            }
        });
        t.start();
        t.join();
        assertNotNull(zone[0]);
    }
Method byte code: 
0: aload_0
1: invokespecial #1
4: ldc           #12
6: iconst_1
7: invokevirtual #13
10: pop
11: iconst_1
12: anewarray     #14
15: astore_1
16: new           #15
19: dup
20: new           #16
23: dup
24: aload_0
25: aload_1
26: invokespecial #17
29: invokespecial #18
32: astore_2
33: aload_2
34: invokevirtual #19
37: aload_2
38: invokevirtual #20
41: aload_1
42: iconst_0
43: aaload
44: invokestatic  #21
47: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: testCompile
Start line: 110
End line: 118
Method source code: 
    public void testCompile() throws Exception {
        Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);
        DateTimeZone tz = provider.getZone("America/Los_Angeles");

        assertEquals("America/Los_Angeles", tz.getID());
        assertEquals(false, tz.isFixed());
        TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);
        TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);
    }
Method byte code: 
0: aload_0
1: ldc           #33
3: invokespecial #34
6: astore_1
7: aload_1
8: ldc           #35
10: invokeinterface #36,  2
15: astore_2
16: ldc           #35
18: aload_2
19: invokevirtual #37
22: invokestatic  #38
25: iconst_0
26: aload_2
27: invokevirtual #39
30: invokestatic  #40
33: aload_2
34: getstatic     #41
37: invokestatic  #42
40: aload_2
41: getstatic     #41
44: invokestatic  #43
47: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: test_2400_fromDay
Start line: 175
End line: 183
Method source code: 
    public void test_2400_fromDay() {
        StringTokenizer st = new StringTokenizer("Apr Sun>=1  24:00");
        DateTimeOfYear test = new DateTimeOfYear(st);
        assertEquals(4, test.iMonthOfYear);  // Apr
        assertEquals(2, test.iDayOfMonth);   // 2nd
        assertEquals(1, test.iDayOfWeek);    // Mon
        assertEquals(0, test.iMillisOfDay);  // 00:00
        assertEquals(true, test.iAdvanceDayOfWeek);
    }
Method byte code: 
0: new           #84
3: dup
4: ldc           #85
6: invokespecial #86
9: astore_1
10: new           #87
13: dup
14: aload_1
15: invokespecial #88
18: astore_2
19: iconst_4
20: aload_2
21: getfield      #89
24: invokestatic  #90
27: iconst_2
28: aload_2
29: getfield      #91
32: invokestatic  #90
35: iconst_1
36: aload_2
37: getfield      #92
40: invokestatic  #90
43: iconst_0
44: aload_2
45: getfield      #93
48: invokestatic  #90
51: iconst_1
52: aload_2
53: getfield      #94
56: invokestatic  #40
59: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: test_2400_last
Start line: 185
End line: 193
Method source code: 
    public void test_2400_last() {
        StringTokenizer st = new StringTokenizer("Mar lastSun 24:00");
        DateTimeOfYear test = new DateTimeOfYear(st);
        assertEquals(4, test.iMonthOfYear);  // Apr
        assertEquals(1, test.iDayOfMonth);   // 1st
        assertEquals(1, test.iDayOfWeek);    // Mon
        assertEquals(0, test.iMillisOfDay);  // 00:00
        assertEquals(false, test.iAdvanceDayOfWeek);
    }
Method byte code: 
0: new           #84
3: dup
4: ldc           #95
6: invokespecial #86
9: astore_1
10: new           #87
13: dup
14: aload_1
15: invokespecial #88
18: astore_2
19: iconst_4
20: aload_2
21: getfield      #89
24: invokestatic  #90
27: iconst_1
28: aload_2
29: getfield      #91
32: invokestatic  #90
35: iconst_1
36: aload_2
37: getfield      #92
40: invokestatic  #90
43: iconst_0
44: aload_2
45: getfield      #93
48: invokestatic  #90
51: iconst_0
52: aload_2
53: getfield      #94
56: invokestatic  #40
59: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: test_Amman_2003
Start line: 195
End line: 200
Method source code: 
    public void test_Amman_2003() {
        DateTimeZone zone = DateTimeZone.forID("Asia/Amman");
        DateTime dt = new DateTime(2003, 3, 1, 0, 0, zone);
        long next = zone.nextTransition(dt.getMillis());
        assertEquals(next, new DateTime(2003, 3, 28, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());
    }
Method byte code: 
0: ldc           #96
2: invokestatic  #97
5: astore_1
6: new           #98
9: dup
10: sipush        2003
13: iconst_3
14: iconst_1
15: iconst_0
16: iconst_0
17: aload_1
18: invokespecial #99
21: astore_2
22: aload_1
23: aload_2
24: invokevirtual #100
27: invokevirtual #101
30: lstore_3
31: lload_3
32: new           #98
35: dup
36: sipush        2003
39: iconst_3
40: bipush        28
42: iconst_0
43: iconst_0
44: iconst_2
45: invokestatic  #102
48: invokespecial #99
51: invokevirtual #100
54: invokestatic  #103
57: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: test_Amman_2004
Start line: 202
End line: 207
Method source code: 
    public void test_Amman_2004() {
        DateTimeZone zone = DateTimeZone.forID("Asia/Amman");
        DateTime dt = new DateTime(2004, 3, 1, 0, 0, zone);
        long next = zone.nextTransition(dt.getMillis());
        assertEquals(next, new DateTime(2004, 3, 26, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());
    }
Method byte code: 
0: ldc           #96
2: invokestatic  #97
5: astore_1
6: new           #98
9: dup
10: sipush        2004
13: iconst_3
14: iconst_1
15: iconst_0
16: iconst_0
17: aload_1
18: invokespecial #99
21: astore_2
22: aload_1
23: aload_2
24: invokevirtual #100
27: invokevirtual #101
30: lstore_3
31: lload_3
32: new           #98
35: dup
36: sipush        2004
39: iconst_3
40: bipush        26
42: iconst_0
43: iconst_0
44: iconst_2
45: invokestatic  #102
48: invokespecial #99
51: invokevirtual #100
54: invokestatic  #103
57: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: test_Amman_2005
Start line: 209
End line: 214
Method source code: 
    public void test_Amman_2005() {
        DateTimeZone zone = DateTimeZone.forID("Asia/Amman");
        DateTime dt = new DateTime(2005, 3, 1, 0, 0, zone);
        long next = zone.nextTransition(dt.getMillis());
        assertEquals(next, new DateTime(2005, 4, 1, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());
    }
Method byte code: 
0: ldc           #96
2: invokestatic  #97
5: astore_1
6: new           #98
9: dup
10: sipush        2005
13: iconst_3
14: iconst_1
15: iconst_0
16: iconst_0
17: aload_1
18: invokespecial #99
21: astore_2
22: aload_1
23: aload_2
24: invokevirtual #100
27: invokevirtual #101
30: lstore_3
31: lload_3
32: new           #98
35: dup
36: sipush        2005
39: iconst_4
40: iconst_1
41: iconst_0
42: iconst_0
43: iconst_2
44: invokestatic  #102
47: invokespecial #99
50: invokevirtual #100
53: invokestatic  #103
56: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/src/test/java/org/joda/time/tz/TestCompiler.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/11/target/test-classes/org/joda/time/tz/TestCompiler.class
Class name: TestCompiler
Method name: test_Amman_2006
Start line: 216
End line: 221
Method source code: 
    public void test_Amman_2006() {
        DateTimeZone zone = DateTimeZone.forID("Asia/Amman");
        DateTime dt = new DateTime(2006, 3, 1, 0, 0, zone);
        long next = zone.nextTransition(dt.getMillis());
        assertEquals(next, new DateTime(2006, 3, 31, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());
    }
Method byte code: 
0: ldc           #96
2: invokestatic  #97
5: astore_1
6: new           #98
9: dup
10: sipush        2006
13: iconst_3
14: iconst_1
15: iconst_0
16: iconst_0
17: aload_1
18: invokespecial #99
21: astore_2
22: aload_1
23: aload_2
24: invokevirtual #100
27: invokevirtual #101
30: lstore_3
31: lload_3
32: new           #98
35: dup
36: sipush        2006
39: iconst_3
40: bipush        31
42: iconst_0
43: iconst_0
44: iconst_2
45: invokestatic  #102
48: invokespecial #99
51: invokevirtual #100
54: invokestatic  #103
57: return
