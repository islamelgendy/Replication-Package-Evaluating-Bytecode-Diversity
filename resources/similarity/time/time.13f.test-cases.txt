Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test001
Start line: 12
End line: 19
Method source code: 
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.plusDays((-1));
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #6
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #8
27: astore_1
28: aload_1
29: iconst_m1
30: invokevirtual #9
33: astore_2
34: aload_1
35: invokestatic  #10
38: aload_2
39: invokestatic  #10
42: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test002
Start line: 22
End line: 27
Method source code: 
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        org.junit.Assert.assertNotNull(periodFormatter0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #11
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #12
27: astore_1
28: aload_1
29: invokestatic  #10
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test003
Start line: 30
End line: 43
Method source code: 
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendSeparator("secondOfDay", "America/Los_Angeles");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #13
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: ldc           #18
42: ldc           #19
44: invokevirtual #20
47: astore_3
48: ldc           #21
50: invokestatic  #22
53: goto          57
56: astore_3
57: aload_2
58: invokestatic  #10
61: return
Exception table:
from    to  target type
39    53    56   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test004
Start line: 46
End line: 65
Method source code: 
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("months");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSuffix("months", "Standard");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #24
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #26
48: astore        4
50: aload         4
52: ldc           #27
54: invokevirtual #28
57: astore        5
59: aload         5
61: ldc           #27
63: ldc           #29
65: invokevirtual #30
68: astore        6
70: ldc           #31
72: invokestatic  #22
75: goto          80
78: astore        6
80: aload_2
81: invokestatic  #10
84: aload_3
85: invokestatic  #10
88: aload         4
90: invokestatic  #10
93: aload         5
95: invokestatic  #10
98: return
Exception table:
from    to  target type
59    75    78   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test005
Start line: 68
End line: 85
Method source code: 
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendSeparator("PeriodType[YearDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #32
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_2
40: invokevirtual #33
43: astore_3
44: aload_3
45: ldc           #34
47: ldc           #35
49: invokevirtual #20
52: astore        4
54: aload         4
56: ldc           #36
58: invokevirtual #37
61: astore        5
63: ldc           #21
65: invokestatic  #22
68: goto          73
71: astore        5
73: aload_2
74: invokestatic  #10
77: aload_3
78: invokestatic  #10
81: aload         4
83: invokestatic  #10
86: return
Exception table:
from    to  target type
54    68    71   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test006
Start line: 88
End line: 107
Method source code: 
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendPrefix("-101", "PeriodType[YearDay]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendLiteral("PT-8H-0.100S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #38
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #39
48: astore        4
50: aload         4
52: ldc           #40
54: ldc           #36
56: invokevirtual #41
59: astore        5
61: aload         5
63: ldc           #42
65: invokevirtual #28
68: astore        6
70: ldc           #43
72: invokestatic  #22
75: goto          80
78: astore        6
80: aload_2
81: invokestatic  #10
84: aload_3
85: invokestatic  #10
88: aload         4
90: invokestatic  #10
93: aload         5
95: invokestatic  #10
98: return
Exception table:
from    to  target type
61    75    78   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test007
Start line: 110
End line: 138
Method source code: 
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        java.io.Writer writer4 = null;
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        int int8 = period7.getWeeks();
        org.joda.time.Period period10 = period7.minusHours((int) '4');
        org.joda.time.Minutes minutes11 = period10.toStandardMinutes();
        org.joda.time.Period period13 = period10.minusMonths(0);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            periodPrinter3.printTo(writer4, (org.joda.time.ReadablePeriod) period13, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(period13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #44
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_2
40: invokevirtual #45
43: astore_3
44: aconst_null
45: astore        4
47: aconst_null
48: astore        5
50: aconst_null
51: astore        6
53: new           #46
56: dup
57: aload         5
59: aload         6
61: invokespecial #47
64: astore        7
66: aload         7
68: invokevirtual #48
71: istore        8
73: aload         7
75: bipush        52
77: invokevirtual #49
80: astore        9
82: aload         9
84: invokevirtual #50
87: astore        10
89: aload         9
91: iconst_0
92: invokevirtual #51
95: astore        11
97: aconst_null
98: astore        12
100: aload_3
101: aload         4
103: aload         11
105: aload         12
107: invokeinterface #52,  4
112: ldc           #53
114: invokestatic  #22
117: goto          122
120: astore        13
122: aload_2
123: invokestatic  #10
126: aload_3
127: invokestatic  #10
130: new           #55
133: dup
134: invokespecial #56
137: ldc           #57
139: invokevirtual #58
142: iload         8
144: invokevirtual #59
147: ldc           #60
149: invokevirtual #58
152: iconst_0
153: invokevirtual #59
156: ldc           #57
158: invokevirtual #58
161: invokevirtual #61
164: iload         8
166: ifne          173
169: iconst_1
170: goto          174
173: iconst_0
174: invokestatic  #62
177: aload         9
179: invokestatic  #10
182: aload         10
184: invokestatic  #10
187: aload         11
189: invokestatic  #10
192: return
Exception table:
from    to  target type
100   117   120   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test008
Start line: 141
End line: 146
Method source code: 
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateWithWeeks();
        org.junit.Assert.assertNotNull(periodFormatter0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #63
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #64
27: astore_1
28: aload_1
29: invokestatic  #10
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test009
Start line: 149
End line: 163
Method source code: 
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("+00:00:00.010");
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatterBuilder0.toPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodPrinter7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #65
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #39
48: astore        4
50: aload_1
51: ldc           #66
53: invokevirtual #67
56: astore        5
58: aload_1
59: invokevirtual #45
62: astore        6
64: aload_2
65: invokestatic  #10
68: aload_3
69: invokestatic  #10
72: aload         4
74: invokestatic  #10
77: aload         5
79: invokestatic  #10
82: aload         6
84: invokestatic  #10
87: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test010
Start line: 166
End line: 171
Method source code: 
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtended();
        org.junit.Assert.assertNotNull(periodFormatter0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #68
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #69
27: astore_1
28: aload_1
29: invokestatic  #10
32: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test011
Start line: 174
End line: 190
Method source code: 
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendSuffix("35", "");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #70
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_3
45: invokevirtual #71
48: astore        4
50: aload         4
52: invokevirtual #72
55: astore        5
57: aload         4
59: ldc           #73
61: ldc           #74
63: invokevirtual #30
66: astore        6
68: aload         6
70: invokevirtual #72
73: astore        7
75: aload_2
76: invokestatic  #10
79: aload_3
80: invokestatic  #10
83: aload         4
85: invokestatic  #10
88: aload         5
90: invokestatic  #10
93: aload         6
95: invokestatic  #10
98: aload         7
100: invokestatic  #10
103: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test012
Start line: 193
End line: 244
Method source code: 
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        java.io.Writer writer19 = null;
        org.joda.time.format.PeriodFormatter periodFormatter20 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale21 = null;
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter20.withLocale(locale21);
        boolean boolean23 = periodFormatter20.isParser();
        java.util.Locale locale24 = null;
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatter20.withLocale(locale24);
        org.joda.time.format.PeriodPrinter periodPrinter26 = periodFormatter25.getPrinter();
        org.joda.time.Period period28 = new org.joda.time.Period(1L);
        java.util.Locale locale29 = null;
        int int30 = periodPrinter26.calculatePrintedLength((org.joda.time.ReadablePeriod) period28, locale29);
        java.util.Locale locale31 = null;
        // The following exception was thrown during execution in test generation
        try {
            literal6.printTo(writer19, (org.joda.time.ReadablePeriod) period28, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(periodPrinter26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 24 + "'", int30 == 24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #75
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #76
48: astore        4
50: aload_1
51: invokevirtual #77
54: astore        5
56: getstatic     #78
59: astore        6
61: aconst_null
62: astore        7
64: new           #46
67: dup
68: ldc2_w        #79
71: ldc2_w        #81
74: aload         7
76: invokespecial #83
79: astore        8
81: aload         8
83: invokevirtual #84
86: astore        9
88: aload         8
90: bipush        100
92: invokevirtual #85
95: astore        10
97: aconst_null
98: astore        11
100: aload         6
102: aload         10
104: sipush        999
107: aload         11
109: invokevirtual #86
112: istore        12
114: aconst_null
115: astore        13
117: aload_1
118: aload         6
120: aload         13
122: invokevirtual #87
125: astore        14
127: aconst_null
128: astore        15
130: invokestatic  #12
133: astore        16
135: aconst_null
136: astore        17
138: aload         16
140: aload         17
142: invokevirtual #88
145: astore        18
147: aload         16
149: invokevirtual #89
152: istore        19
154: aconst_null
155: astore        20
157: aload         16
159: aload         20
161: invokevirtual #88
164: astore        21
166: aload         21
168: invokevirtual #90
171: astore        22
173: new           #46
176: dup
177: lconst_1
178: invokespecial #91
181: astore        23
183: aconst_null
184: astore        24
186: aload         22
188: aload         23
190: aload         24
192: invokeinterface #92,  3
197: istore        25
199: aconst_null
200: astore        26
202: aload         6
204: aload         15
206: aload         23
208: aload         26
210: invokevirtual #93
213: ldc           #53
215: invokestatic  #22
218: goto          223
221: astore        27
223: aload_2
224: invokestatic  #10
227: aload_3
228: invokestatic  #10
231: aload         4
233: invokestatic  #10
236: aload         5
238: invokestatic  #10
241: aload         6
243: invokestatic  #10
246: new           #55
249: dup
250: invokespecial #56
253: ldc           #57
255: invokevirtual #58
258: aload         9
260: invokevirtual #58
263: ldc           #94
265: invokevirtual #58
268: invokevirtual #61
271: aload         9
273: ldc           #95
275: invokestatic  #96
278: aload         10
280: invokestatic  #10
283: new           #55
286: dup
287: invokespecial #56
290: ldc           #57
292: invokevirtual #58
295: iload         12
297: invokevirtual #59
300: ldc           #60
302: invokevirtual #58
305: iconst_0
306: invokevirtual #59
309: ldc           #57
311: invokevirtual #58
314: invokevirtual #61
317: iload         12
319: ifne          326
322: iconst_1
323: goto          327
326: iconst_0
327: invokestatic  #62
330: aload         14
332: invokestatic  #10
335: aload         16
337: invokestatic  #10
340: aload         18
342: invokestatic  #10
345: new           #55
348: dup
349: invokespecial #56
352: ldc           #57
354: invokevirtual #58
357: iload         19
359: invokevirtual #97
362: ldc           #60
364: invokevirtual #58
367: iconst_1
368: invokevirtual #97
371: ldc           #57
373: invokevirtual #58
376: invokevirtual #61
379: iload         19
381: iconst_1
382: if_icmpne     389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #62
393: aload         21
395: invokestatic  #10
398: aload         22
400: invokestatic  #10
403: new           #55
406: dup
407: invokespecial #56
410: ldc           #57
412: invokevirtual #58
415: iload         25
417: invokevirtual #59
420: ldc           #60
422: invokevirtual #58
425: bipush        24
427: invokevirtual #59
430: ldc           #57
432: invokevirtual #58
435: invokevirtual #61
438: iload         25
440: bipush        24
442: if_icmpne     449
445: iconst_1
446: goto          450
449: iconst_0
450: invokestatic  #62
453: return
Exception table:
from    to  target type
202   218   221   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test013
Start line: 247
End line: 355
Method source code: 
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        java.lang.String[] strArray36 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter37 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter37.withLocale(locale38);
        boolean boolean40 = periodFormatter37.isParser();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter37.withLocale(locale41);
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter42.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal44 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology47);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period51 = period48.minusDays((int) (byte) 100);
        java.util.Locale locale53 = null;
        int int54 = literal44.countFieldsToPrint((org.joda.time.ReadablePeriod) period51, 999, locale53);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator57 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray36, periodPrinter43, (org.joda.time.format.PeriodParser) literal44, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder58 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = periodFormatterBuilder58.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter61 = periodFormatterBuilder60.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = periodFormatterBuilder60.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter64 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter64.withLocale(locale65);
        boolean boolean67 = periodFormatter66.isParser();
        java.util.Locale locale68 = null;
        org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter66.withLocale(locale68);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone75 = gregorianChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.yearOfCentury();
        org.joda.time.Period period77 = new org.joda.time.Period((long) '4', 100L, periodType72, (org.joda.time.Chronology) gregorianChronology73);
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter66.withParseType(periodType72);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder60.append(periodFormatter78);
        org.joda.time.format.PeriodParser periodParser80 = periodFormatter78.getParser();
        org.joda.time.format.PeriodFormatterBuilder.Separator separator81 = separator28.finish((org.joda.time.format.PeriodPrinter) literal44, periodParser80);
        java.io.Writer writer82 = null;
        org.joda.time.Period period84 = new org.joda.time.Period((long) ' ');
        int[] intArray85 = period84.getValues();
        org.joda.time.Period period87 = period84.plusMillis((int) (byte) 1);
        int int88 = period87.getDays();
        java.util.Locale locale89 = null;
        // The following exception was thrown during execution in test generation
        try {
            separator81.printTo(writer82, (org.joda.time.ReadablePeriod) period87, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodPrinter43);
        org.junit.Assert.assertNotNull(literal44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT-0.090S" + "'", str49, "PT-0.090S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder60);
        org.junit.Assert.assertNotNull(periodPrinter61);
        org.junit.Assert.assertNotNull(periodFormatterBuilder63);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodParser80);
        org.junit.Assert.assertNotNull(separator81);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #98
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #99
28: dup
29: iconst_0
30: ldc           #100
32: aastore
33: dup
34: iconst_1
35: ldc           #101
37: aastore
38: dup
39: iconst_2
40: ldc           #102
42: aastore
43: dup
44: iconst_3
45: ldc           #103
47: aastore
48: dup
49: iconst_4
50: ldc           #104
52: aastore
53: astore_1
54: invokestatic  #12
57: astore_2
58: aconst_null
59: astore_3
60: aload_2
61: aload_3
62: invokevirtual #88
65: astore        4
67: aload_2
68: invokevirtual #89
71: istore        5
73: aconst_null
74: astore        6
76: aload_2
77: aload         6
79: invokevirtual #88
82: astore        7
84: aload         7
86: invokevirtual #90
89: astore        8
91: getstatic     #78
94: astore        9
96: aconst_null
97: astore        10
99: new           #46
102: dup
103: ldc2_w        #79
106: ldc2_w        #81
109: aload         10
111: invokespecial #83
114: astore        11
116: aload         11
118: invokevirtual #84
121: astore        12
123: aload         11
125: bipush        100
127: invokevirtual #85
130: astore        13
132: aconst_null
133: astore        14
135: aload         9
137: aload         13
139: sipush        999
142: aload         14
144: invokevirtual #86
147: istore        15
149: new           #105
152: dup
153: ldc           #106
155: ldc           #104
157: aload_1
158: aload         8
160: aload         9
162: iconst_0
163: iconst_0
164: invokespecial #107
167: astore        16
169: iconst_5
170: anewarray     #99
173: dup
174: iconst_0
175: ldc           #100
177: aastore
178: dup
179: iconst_1
180: ldc           #101
182: aastore
183: dup
184: iconst_2
185: ldc           #102
187: aastore
188: dup
189: iconst_3
190: ldc           #103
192: aastore
193: dup
194: iconst_4
195: ldc           #104
197: aastore
198: astore        17
200: invokestatic  #12
203: astore        18
205: aconst_null
206: astore        19
208: aload         18
210: aload         19
212: invokevirtual #88
215: astore        20
217: aload         18
219: invokevirtual #89
222: istore        21
224: aconst_null
225: astore        22
227: aload         18
229: aload         22
231: invokevirtual #88
234: astore        23
236: aload         23
238: invokevirtual #90
241: astore        24
243: getstatic     #78
246: astore        25
248: aconst_null
249: astore        26
251: new           #46
254: dup
255: ldc2_w        #79
258: ldc2_w        #81
261: aload         26
263: invokespecial #83
266: astore        27
268: aload         27
270: invokevirtual #84
273: astore        28
275: aload         27
277: bipush        100
279: invokevirtual #85
282: astore        29
284: aconst_null
285: astore        30
287: aload         25
289: aload         29
291: sipush        999
294: aload         30
296: invokevirtual #86
299: istore        31
301: new           #105
304: dup
305: ldc           #106
307: ldc           #104
309: aload         17
311: aload         24
313: aload         25
315: iconst_0
316: iconst_0
317: invokespecial #107
320: astore        32
322: new           #14
325: dup
326: invokespecial #15
329: astore        33
331: aload         33
333: ldc           #16
335: invokevirtual #17
338: astore        34
340: aload         34
342: invokevirtual #45
345: astore        35
347: aload         34
349: iconst_0
350: invokevirtual #108
353: astore        36
355: invokestatic  #12
358: astore        37
360: aconst_null
361: astore        38
363: aload         37
365: aload         38
367: invokevirtual #88
370: astore        39
372: aload         39
374: invokevirtual #89
377: istore        40
379: aconst_null
380: astore        41
382: aload         39
384: aload         41
386: invokevirtual #88
389: astore        42
391: invokestatic  #109
394: astore        43
396: invokestatic  #110
399: astore        44
401: aload         44
403: invokevirtual #111
406: astore        45
408: aload         44
410: invokevirtual #112
413: astore        46
415: aload         44
417: invokevirtual #113
420: astore        47
422: new           #46
425: dup
426: ldc2_w        #114
429: ldc2_w        #79
432: aload         43
434: aload         44
436: invokespecial #116
439: astore        48
441: aload         39
443: aload         43
445: invokevirtual #117
448: astore        49
450: aload         34
452: aload         49
454: invokevirtual #118
457: astore        50
459: aload         49
461: invokevirtual #119
464: astore        51
466: aload         16
468: aload         25
470: aload         51
472: invokevirtual #120
475: astore        52
477: aconst_null
478: astore        53
480: new           #46
483: dup
484: ldc2_w        #121
487: invokespecial #91
490: astore        54
492: aload         54
494: invokevirtual #123
497: astore        55
499: aload         54
501: iconst_1
502: invokevirtual #124
505: astore        56
507: aload         56
509: invokevirtual #125
512: istore        57
514: aconst_null
515: astore        58
517: aload         52
519: aload         53
521: aload         56
523: aload         58
525: invokevirtual #126
528: ldc           #53
530: invokestatic  #22
533: goto          538
536: astore        59
538: aload_1
539: invokestatic  #10
542: aload_2
543: invokestatic  #10
546: aload         4
548: invokestatic  #10
551: new           #55
554: dup
555: invokespecial #56
558: ldc           #57
560: invokevirtual #58
563: iload         5
565: invokevirtual #97
568: ldc           #60
570: invokevirtual #58
573: iconst_1
574: invokevirtual #97
577: ldc           #57
579: invokevirtual #58
582: invokevirtual #61
585: iload         5
587: iconst_1
588: if_icmpne     595
591: iconst_1
592: goto          596
595: iconst_0
596: invokestatic  #62
599: aload         7
601: invokestatic  #10
604: aload         8
606: invokestatic  #10
609: aload         9
611: invokestatic  #10
614: new           #55
617: dup
618: invokespecial #56
621: ldc           #57
623: invokevirtual #58
626: aload         12
628: invokevirtual #58
631: ldc           #94
633: invokevirtual #58
636: invokevirtual #61
639: aload         12
641: ldc           #95
643: invokestatic  #96
646: aload         13
648: invokestatic  #10
651: new           #55
654: dup
655: invokespecial #56
658: ldc           #57
660: invokevirtual #58
663: iload         15
665: invokevirtual #59
668: ldc           #60
670: invokevirtual #58
673: iconst_0
674: invokevirtual #59
677: ldc           #57
679: invokevirtual #58
682: invokevirtual #61
685: iload         15
687: ifne          694
690: iconst_1
691: goto          695
694: iconst_0
695: invokestatic  #62
698: aload         17
700: invokestatic  #10
703: aload         18
705: invokestatic  #10
708: aload         20
710: invokestatic  #10
713: new           #55
716: dup
717: invokespecial #56
720: ldc           #57
722: invokevirtual #58
725: iload         21
727: invokevirtual #97
730: ldc           #60
732: invokevirtual #58
735: iconst_1
736: invokevirtual #97
739: ldc           #57
741: invokevirtual #58
744: invokevirtual #61
747: iload         21
749: iconst_1
750: if_icmpne     757
753: iconst_1
754: goto          758
757: iconst_0
758: invokestatic  #62
761: aload         23
763: invokestatic  #10
766: aload         24
768: invokestatic  #10
771: aload         25
773: invokestatic  #10
776: new           #55
779: dup
780: invokespecial #56
783: ldc           #57
785: invokevirtual #58
788: aload         28
790: invokevirtual #58
793: ldc           #94
795: invokevirtual #58
798: invokevirtual #61
801: aload         28
803: ldc           #95
805: invokestatic  #96
808: aload         29
810: invokestatic  #10
813: new           #55
816: dup
817: invokespecial #56
820: ldc           #57
822: invokevirtual #58
825: iload         31
827: invokevirtual #59
830: ldc           #60
832: invokevirtual #58
835: iconst_0
836: invokevirtual #59
839: ldc           #57
841: invokevirtual #58
844: invokevirtual #61
847: iload         31
849: ifne          856
852: iconst_1
853: goto          857
856: iconst_0
857: invokestatic  #62
860: aload         34
862: invokestatic  #10
865: aload         35
867: invokestatic  #10
870: aload         36
872: invokestatic  #10
875: aload         37
877: invokestatic  #10
880: aload         39
882: invokestatic  #10
885: new           #55
888: dup
889: invokespecial #56
892: ldc           #57
894: invokevirtual #58
897: iload         40
899: invokevirtual #97
902: ldc           #60
904: invokevirtual #58
907: iconst_1
908: invokevirtual #97
911: ldc           #57
913: invokevirtual #58
916: invokevirtual #61
919: iload         40
921: iconst_1
922: if_icmpne     929
925: iconst_1
926: goto          930
929: iconst_0
930: invokestatic  #62
933: aload         42
935: invokestatic  #10
938: aload         43
940: invokestatic  #10
943: aload         44
945: invokestatic  #10
948: aload         45
950: invokestatic  #10
953: aload         46
955: invokestatic  #10
958: aload         47
960: invokestatic  #10
963: aload         49
965: invokestatic  #10
968: aload         50
970: invokestatic  #10
973: aload         51
975: invokestatic  #10
978: aload         52
980: invokestatic  #10
983: aload         55
985: invokestatic  #10
988: aload         55
990: invokestatic  #127
993: ldc           #128
995: invokestatic  #129
998: aload         56
1000: invokestatic  #10
1003: new           #55
1006: dup
1007: invokespecial #56
1010: ldc           #57
1012: invokevirtual #58
1015: iload         57
1017: invokevirtual #59
1020: ldc           #60
1022: invokevirtual #58
1025: iconst_0
1026: invokevirtual #59
1029: ldc           #57
1031: invokevirtual #58
1034: invokevirtual #61
1037: iload         57
1039: ifne          1046
1042: iconst_1
1043: goto          1047
1046: iconst_0
1047: invokestatic  #62
1050: return
Exception table:
from    to  target type
517   533   536   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test014
Start line: 358
End line: 377
Method source code: 
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("+00:00:00.010");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("1970");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #130
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #39
48: astore        4
50: aload_1
51: ldc           #66
53: invokevirtual #67
56: astore        5
58: aload_1
59: ldc           #131
61: invokevirtual #132
64: astore        6
66: ldc           #31
68: invokestatic  #22
71: goto          76
74: astore        6
76: aload_2
77: invokestatic  #10
80: aload_3
81: invokestatic  #10
84: aload         4
86: invokestatic  #10
89: aload         5
91: invokestatic  #10
94: return
Exception table:
from    to  target type
58    71    74   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test015
Start line: 380
End line: 396
Method source code: 
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        java.lang.String[] strArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder1.appendSeparator("weekyear", "Seconds", strArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #133
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: invokevirtual #134
36: astore_2
37: aload_2
38: ldc           #42
40: invokevirtual #67
43: astore_3
44: aconst_null
45: astore        4
47: aload_2
48: ldc           #135
50: ldc           #136
52: aload         4
54: invokevirtual #137
57: astore        5
59: ldc           #21
61: invokestatic  #22
64: goto          69
67: astore        5
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: return
Exception table:
from    to  target type
47    64    67   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test016
Start line: 399
End line: 413
Method source code: 
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.printZeroAlways();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #138
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_3
45: invokevirtual #71
48: astore        4
50: aload         4
52: invokevirtual #76
55: astore        5
57: aload         4
59: invokevirtual #139
62: astore        6
64: aload_2
65: invokestatic  #10
68: aload_3
69: invokestatic  #10
72: aload         4
74: invokestatic  #10
77: aload         5
79: invokestatic  #10
82: aload         6
84: invokestatic  #10
87: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test017
Start line: 416
End line: 441
Method source code: 
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodParser periodParser10 = periodFormatterBuilder0.toParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder0.appendSuffix("P0000-W00-00T00:00:-00.090", "1970-01-01T00:00:00.001+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodParser10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #140
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #76
48: astore        4
50: aload_1
51: invokevirtual #77
54: astore        5
56: aload_1
57: ldc           #16
59: invokevirtual #17
62: astore        6
64: aload_1
65: ldc           #141
67: invokevirtual #28
70: astore        7
72: aload_1
73: invokevirtual #142
76: astore        8
78: aload_1
79: ldc           #143
81: ldc           #144
83: invokevirtual #30
86: astore        9
88: ldc           #31
90: invokestatic  #22
93: goto          98
96: astore        9
98: aload_2
99: invokestatic  #10
102: aload_3
103: invokestatic  #10
106: aload         4
108: invokestatic  #10
111: aload         5
113: invokestatic  #10
116: aload         6
118: invokestatic  #10
121: aload         7
123: invokestatic  #10
126: aload         8
128: invokestatic  #10
131: return
Exception table:
from    to  target type
78    93    96   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test018
Start line: 444
End line: 457
Method source code: 
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("70");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #145
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_2
40: ldc           #146
42: invokevirtual #67
45: astore_3
46: ldc           #21
48: invokestatic  #22
51: goto          55
54: astore_3
55: aload_2
56: invokestatic  #10
59: return
Exception table:
from    to  target type
39    51    54   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test019
Start line: 460
End line: 495
Method source code: 
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter12.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.append(periodFormatter15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder9.appendSeparator("1970", "+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #147
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #76
48: astore        4
50: aload_1
51: invokevirtual #77
54: astore        5
56: aload_1
57: ldc           #16
59: invokevirtual #17
62: astore        6
64: aload_1
65: ldc           #141
67: invokevirtual #28
70: astore        7
72: invokestatic  #12
75: astore        8
77: aconst_null
78: astore        9
80: aload         8
82: aload         9
84: invokevirtual #88
87: astore        10
89: aload         10
91: invokevirtual #89
94: istore        11
96: aconst_null
97: astore        12
99: aload         10
101: aload         12
103: invokevirtual #88
106: astore        13
108: aload         7
110: aload         13
112: invokevirtual #118
115: astore        14
117: aload         7
119: ldc           #131
121: ldc           #66
123: invokevirtual #20
126: astore        15
128: ldc           #21
130: invokestatic  #22
133: goto          138
136: astore        15
138: aload_2
139: invokestatic  #10
142: aload_3
143: invokestatic  #10
146: aload         4
148: invokestatic  #10
151: aload         5
153: invokestatic  #10
156: aload         6
158: invokestatic  #10
161: aload         7
163: invokestatic  #10
166: aload         8
168: invokestatic  #10
171: aload         10
173: invokestatic  #10
176: new           #55
179: dup
180: invokespecial #56
183: ldc           #57
185: invokevirtual #58
188: iload         11
190: invokevirtual #97
193: ldc           #60
195: invokevirtual #58
198: iconst_1
199: invokevirtual #97
202: ldc           #57
204: invokevirtual #58
207: invokevirtual #61
210: iload         11
212: iconst_1
213: if_icmpne     220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #62
224: aload         13
226: invokestatic  #10
229: aload         14
231: invokestatic  #10
234: return
Exception table:
from    to  target type
117   133   136   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test020
Start line: 498
End line: 506
Method source code: 
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #148
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #149
43: astore_3
44: aload_2
45: invokestatic  #10
48: aload_3
49: invokestatic  #10
52: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test021
Start line: 509
End line: 537
Method source code: 
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder0.minimumPrintedDigits((-11));
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #150
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #76
48: astore        4
50: aload_1
51: invokevirtual #77
54: astore        5
56: getstatic     #78
59: astore        6
61: aconst_null
62: astore        7
64: new           #46
67: dup
68: ldc2_w        #79
71: ldc2_w        #81
74: aload         7
76: invokespecial #83
79: astore        8
81: aload         8
83: invokevirtual #84
86: astore        9
88: aload         8
90: bipush        100
92: invokevirtual #85
95: astore        10
97: aconst_null
98: astore        11
100: aload         6
102: aload         10
104: sipush        999
107: aload         11
109: invokevirtual #86
112: istore        12
114: aconst_null
115: astore        13
117: aload_1
118: aload         6
120: aload         13
122: invokevirtual #87
125: astore        14
127: aload_1
128: bipush        -11
130: invokevirtual #151
133: astore        15
135: aload_2
136: invokestatic  #10
139: aload_3
140: invokestatic  #10
143: aload         4
145: invokestatic  #10
148: aload         5
150: invokestatic  #10
153: aload         6
155: invokestatic  #10
158: new           #55
161: dup
162: invokespecial #56
165: ldc           #57
167: invokevirtual #58
170: aload         9
172: invokevirtual #58
175: ldc           #94
177: invokevirtual #58
180: invokevirtual #61
183: aload         9
185: ldc           #95
187: invokestatic  #96
190: aload         10
192: invokestatic  #10
195: new           #55
198: dup
199: invokespecial #56
202: ldc           #57
204: invokevirtual #58
207: iload         12
209: invokevirtual #59
212: ldc           #60
214: invokevirtual #58
217: iconst_0
218: invokevirtual #59
221: ldc           #57
223: invokevirtual #58
226: invokevirtual #61
229: iload         12
231: ifne          238
234: iconst_1
235: goto          239
238: iconst_0
239: invokestatic  #62
242: aload         14
244: invokestatic  #10
247: aload         15
249: invokestatic  #10
252: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test022
Start line: 540
End line: 556
Method source code: 
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroAlways();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #152
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #26
48: astore        4
50: aload_1
51: invokevirtual #76
54: astore        5
56: aload_1
57: invokevirtual #25
60: astore        6
62: aload         6
64: invokevirtual #139
67: astore        7
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: aload         4
79: invokestatic  #10
82: aload         5
84: invokestatic  #10
87: aload         6
89: invokestatic  #10
92: aload         7
94: invokestatic  #10
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test023
Start line: 559
End line: 603
Method source code: 
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodParser periodParser22 = periodFormatter20.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period24 = periodFormatter20.parsePeriod("GregorianChronology[UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"GregorianChronology[UTC]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodParser22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #153
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_2
40: invokevirtual #45
43: astore_3
44: aload_2
45: iconst_0
46: invokevirtual #108
49: astore        4
51: invokestatic  #12
54: astore        5
56: aconst_null
57: astore        6
59: aload         5
61: aload         6
63: invokevirtual #88
66: astore        7
68: aload         7
70: invokevirtual #89
73: istore        8
75: aconst_null
76: astore        9
78: aload         7
80: aload         9
82: invokevirtual #88
85: astore        10
87: invokestatic  #109
90: astore        11
92: invokestatic  #110
95: astore        12
97: aload         12
99: invokevirtual #111
102: astore        13
104: aload         12
106: invokevirtual #112
109: astore        14
111: aload         12
113: invokevirtual #113
116: astore        15
118: new           #46
121: dup
122: ldc2_w        #114
125: ldc2_w        #79
128: aload         11
130: aload         12
132: invokespecial #116
135: astore        16
137: aload         7
139: aload         11
141: invokevirtual #117
144: astore        17
146: aload_2
147: aload         17
149: invokevirtual #118
152: astore        18
154: aload         17
156: invokevirtual #119
159: astore        19
161: aload         17
163: ldc           #154
165: invokevirtual #155
168: astore        20
170: ldc           #156
172: invokestatic  #22
175: goto          180
178: astore        20
180: aload_2
181: invokestatic  #10
184: aload_3
185: invokestatic  #10
188: aload         4
190: invokestatic  #10
193: aload         5
195: invokestatic  #10
198: aload         7
200: invokestatic  #10
203: new           #55
206: dup
207: invokespecial #56
210: ldc           #57
212: invokevirtual #58
215: iload         8
217: invokevirtual #97
220: ldc           #60
222: invokevirtual #58
225: iconst_1
226: invokevirtual #97
229: ldc           #57
231: invokevirtual #58
234: invokevirtual #61
237: iload         8
239: iconst_1
240: if_icmpne     247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #62
251: aload         10
253: invokestatic  #10
256: aload         11
258: invokestatic  #10
261: aload         12
263: invokestatic  #10
266: aload         13
268: invokestatic  #10
271: aload         14
273: invokestatic  #10
276: aload         15
278: invokestatic  #10
281: aload         17
283: invokestatic  #10
286: aload         18
288: invokestatic  #10
291: aload         19
293: invokestatic  #10
296: return
Exception table:
from    to  target type
161   175   178   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test024
Start line: 606
End line: 614
Method source code: 
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendLiteral("2024-05-15T11:17:19.237+00:00:00.010");
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #158
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: invokevirtual #134
36: astore_2
37: aload_2
38: ldc           #159
40: invokevirtual #28
43: astore_3
44: aload_2
45: invokestatic  #10
48: aload_3
49: invokestatic  #10
52: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test025
Start line: 617
End line: 631
Method source code: 
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatterBuilder4.toFormatter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #160
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #39
48: astore        4
50: aload         4
52: invokevirtual #72
55: astore        5
57: aload         4
59: invokevirtual #161
62: astore        6
64: aload_2
65: invokestatic  #10
68: aload_3
69: invokestatic  #10
72: aload         4
74: invokestatic  #10
77: aload         5
79: invokestatic  #10
82: aload         6
84: invokestatic  #10
87: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test026
Start line: 634
End line: 652
Method source code: 
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.printZeroNever();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #162
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #76
48: astore        4
50: aload_1
51: invokevirtual #77
54: astore        5
56: aload_1
57: ldc           #16
59: invokevirtual #17
62: astore        6
64: aload_1
65: ldc           #141
67: invokevirtual #28
70: astore        7
72: aload         7
74: invokevirtual #76
77: astore        8
79: aload_2
80: invokestatic  #10
83: aload_3
84: invokestatic  #10
87: aload         4
89: invokestatic  #10
92: aload         5
94: invokestatic  #10
97: aload         6
99: invokestatic  #10
102: aload         7
104: invokestatic  #10
107: aload         8
109: invokestatic  #10
112: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test027
Start line: 655
End line: 742
Method source code: 
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.Period period49 = org.joda.time.Period.years(5);
        java.util.Locale locale51 = null;
        int int52 = separator28.countFieldsToPrint((org.joda.time.ReadablePeriod) period49, (-24), locale51);
        org.joda.time.Period period54 = org.joda.time.Period.millis(1);
        int int55 = period54.getMonths();
        int int56 = period54.size();
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType60 = org.joda.time.DateTimeUtils.getPeriodType(periodType59);
        org.joda.time.Period period61 = new org.joda.time.Period(100L, (long) (short) -1, periodType59);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.weeks();
        boolean boolean63 = periodType59.isSupported(durationFieldType62);
        org.joda.time.Period period64 = period54.withPeriodType(periodType59);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int66 = separator28.calculatePrintedLength((org.joda.time.ReadablePeriod) period64, locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #163
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #99
28: dup
29: iconst_0
30: ldc           #100
32: aastore
33: dup
34: iconst_1
35: ldc           #101
37: aastore
38: dup
39: iconst_2
40: ldc           #102
42: aastore
43: dup
44: iconst_3
45: ldc           #103
47: aastore
48: dup
49: iconst_4
50: ldc           #104
52: aastore
53: astore_1
54: invokestatic  #12
57: astore_2
58: aconst_null
59: astore_3
60: aload_2
61: aload_3
62: invokevirtual #88
65: astore        4
67: aload_2
68: invokevirtual #89
71: istore        5
73: aconst_null
74: astore        6
76: aload_2
77: aload         6
79: invokevirtual #88
82: astore        7
84: aload         7
86: invokevirtual #90
89: astore        8
91: getstatic     #78
94: astore        9
96: aconst_null
97: astore        10
99: new           #46
102: dup
103: ldc2_w        #79
106: ldc2_w        #81
109: aload         10
111: invokespecial #83
114: astore        11
116: aload         11
118: invokevirtual #84
121: astore        12
123: aload         11
125: bipush        100
127: invokevirtual #85
130: astore        13
132: aconst_null
133: astore        14
135: aload         9
137: aload         13
139: sipush        999
142: aload         14
144: invokevirtual #86
147: istore        15
149: new           #105
152: dup
153: ldc           #106
155: ldc           #104
157: aload_1
158: aload         8
160: aload         9
162: iconst_0
163: iconst_0
164: invokespecial #107
167: astore        16
169: new           #14
172: dup
173: invokespecial #15
176: astore        17
178: aload         17
180: ldc           #16
182: invokevirtual #17
185: astore        18
187: aload         17
189: invokevirtual #25
192: astore        19
194: aload         17
196: invokevirtual #76
199: astore        20
201: aload         17
203: invokevirtual #77
206: astore        21
208: aload         17
210: ldc           #16
212: invokevirtual #17
215: astore        22
217: aload         17
219: ldc           #141
221: invokevirtual #28
224: astore        23
226: invokestatic  #12
229: astore        24
231: aconst_null
232: astore        25
234: aload         24
236: aload         25
238: invokevirtual #88
241: astore        26
243: aload         26
245: invokevirtual #89
248: istore        27
250: aconst_null
251: astore        28
253: aload         26
255: aload         28
257: invokevirtual #88
260: astore        29
262: aload         23
264: aload         29
266: invokevirtual #118
269: astore        30
271: aload         30
273: invokevirtual #142
276: astore        31
278: new           #164
281: dup
282: aload         16
284: aload         31
286: invokespecial #165
289: astore        32
291: iconst_5
292: invokestatic  #166
295: astore        33
297: aconst_null
298: astore        34
300: aload         16
302: aload         33
304: bipush        -24
306: aload         34
308: invokevirtual #167
311: istore        35
313: iconst_1
314: invokestatic  #168
317: astore        36
319: aload         36
321: invokevirtual #169
324: istore        37
326: aload         36
328: invokevirtual #170
331: istore        38
333: invokestatic  #171
336: astore        39
338: aload         39
340: invokestatic  #172
343: astore        40
345: new           #46
348: dup
349: ldc2_w        #79
352: ldc2_w        #173
355: aload         39
357: invokespecial #175
360: astore        41
362: invokestatic  #176
365: astore        42
367: aload         39
369: aload         42
371: invokevirtual #177
374: istore        43
376: aload         36
378: aload         39
380: invokevirtual #178
383: astore        44
385: aconst_null
386: astore        45
388: aload         16
390: aload         44
392: aload         45
394: invokevirtual #179
397: istore        46
399: ldc           #53
401: invokestatic  #22
404: goto          409
407: astore        46
409: aload_1
410: invokestatic  #10
413: aload_2
414: invokestatic  #10
417: aload         4
419: invokestatic  #10
422: new           #55
425: dup
426: invokespecial #56
429: ldc           #57
431: invokevirtual #58
434: iload         5
436: invokevirtual #97
439: ldc           #60
441: invokevirtual #58
444: iconst_1
445: invokevirtual #97
448: ldc           #57
450: invokevirtual #58
453: invokevirtual #61
456: iload         5
458: iconst_1
459: if_icmpne     466
462: iconst_1
463: goto          467
466: iconst_0
467: invokestatic  #62
470: aload         7
472: invokestatic  #10
475: aload         8
477: invokestatic  #10
480: aload         9
482: invokestatic  #10
485: new           #55
488: dup
489: invokespecial #56
492: ldc           #57
494: invokevirtual #58
497: aload         12
499: invokevirtual #58
502: ldc           #94
504: invokevirtual #58
507: invokevirtual #61
510: aload         12
512: ldc           #95
514: invokestatic  #96
517: aload         13
519: invokestatic  #10
522: new           #55
525: dup
526: invokespecial #56
529: ldc           #57
531: invokevirtual #58
534: iload         15
536: invokevirtual #59
539: ldc           #60
541: invokevirtual #58
544: iconst_0
545: invokevirtual #59
548: ldc           #57
550: invokevirtual #58
553: invokevirtual #61
556: iload         15
558: ifne          565
561: iconst_1
562: goto          566
565: iconst_0
566: invokestatic  #62
569: aload         18
571: invokestatic  #10
574: aload         19
576: invokestatic  #10
579: aload         20
581: invokestatic  #10
584: aload         21
586: invokestatic  #10
589: aload         22
591: invokestatic  #10
594: aload         23
596: invokestatic  #10
599: aload         24
601: invokestatic  #10
604: aload         26
606: invokestatic  #10
609: new           #55
612: dup
613: invokespecial #56
616: ldc           #57
618: invokevirtual #58
621: iload         27
623: invokevirtual #97
626: ldc           #60
628: invokevirtual #58
631: iconst_1
632: invokevirtual #97
635: ldc           #57
637: invokevirtual #58
640: invokevirtual #61
643: iload         27
645: iconst_1
646: if_icmpne     653
649: iconst_1
650: goto          654
653: iconst_0
654: invokestatic  #62
657: aload         29
659: invokestatic  #10
662: aload         30
664: invokestatic  #10
667: aload         31
669: invokestatic  #10
672: aload         33
674: invokestatic  #10
677: new           #55
680: dup
681: invokespecial #56
684: ldc           #57
686: invokevirtual #58
689: iload         35
691: invokevirtual #59
694: ldc           #60
696: invokevirtual #58
699: iconst_0
700: invokevirtual #59
703: ldc           #57
705: invokevirtual #58
708: invokevirtual #61
711: iload         35
713: ifne          720
716: iconst_1
717: goto          721
720: iconst_0
721: invokestatic  #62
724: aload         36
726: invokestatic  #10
729: new           #55
732: dup
733: invokespecial #56
736: ldc           #57
738: invokevirtual #58
741: iload         37
743: invokevirtual #59
746: ldc           #60
748: invokevirtual #58
751: iconst_0
752: invokevirtual #59
755: ldc           #57
757: invokevirtual #58
760: invokevirtual #61
763: iload         37
765: ifne          772
768: iconst_1
769: goto          773
772: iconst_0
773: invokestatic  #62
776: new           #55
779: dup
780: invokespecial #56
783: ldc           #57
785: invokevirtual #58
788: iload         38
790: invokevirtual #59
793: ldc           #60
795: invokevirtual #58
798: bipush        8
800: invokevirtual #59
803: ldc           #57
805: invokevirtual #58
808: invokevirtual #61
811: iload         38
813: bipush        8
815: if_icmpne     822
818: iconst_1
819: goto          823
822: iconst_0
823: invokestatic  #62
826: aload         39
828: invokestatic  #10
831: aload         40
833: invokestatic  #10
836: aload         42
838: invokestatic  #10
841: new           #55
844: dup
845: invokespecial #56
848: ldc           #57
850: invokevirtual #58
853: iload         43
855: invokevirtual #97
858: ldc           #60
860: invokevirtual #58
863: iconst_0
864: invokevirtual #97
867: ldc           #57
869: invokevirtual #58
872: invokevirtual #61
875: iload         43
877: ifne          884
880: iconst_1
881: goto          885
884: iconst_0
885: invokestatic  #62
888: aload         44
890: invokestatic  #10
893: return
Exception table:
from    to  target type
388   404   407   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test028
Start line: 745
End line: 810
Method source code: 
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = periodFormatter47.print(readablePeriod48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #180
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #99
28: dup
29: iconst_0
30: ldc           #100
32: aastore
33: dup
34: iconst_1
35: ldc           #101
37: aastore
38: dup
39: iconst_2
40: ldc           #102
42: aastore
43: dup
44: iconst_3
45: ldc           #103
47: aastore
48: dup
49: iconst_4
50: ldc           #104
52: aastore
53: astore_1
54: invokestatic  #12
57: astore_2
58: aconst_null
59: astore_3
60: aload_2
61: aload_3
62: invokevirtual #88
65: astore        4
67: aload_2
68: invokevirtual #89
71: istore        5
73: aconst_null
74: astore        6
76: aload_2
77: aload         6
79: invokevirtual #88
82: astore        7
84: aload         7
86: invokevirtual #90
89: astore        8
91: getstatic     #78
94: astore        9
96: aconst_null
97: astore        10
99: new           #46
102: dup
103: ldc2_w        #79
106: ldc2_w        #81
109: aload         10
111: invokespecial #83
114: astore        11
116: aload         11
118: invokevirtual #84
121: astore        12
123: aload         11
125: bipush        100
127: invokevirtual #85
130: astore        13
132: aconst_null
133: astore        14
135: aload         9
137: aload         13
139: sipush        999
142: aload         14
144: invokevirtual #86
147: istore        15
149: new           #105
152: dup
153: ldc           #106
155: ldc           #104
157: aload_1
158: aload         8
160: aload         9
162: iconst_0
163: iconst_0
164: invokespecial #107
167: astore        16
169: new           #14
172: dup
173: invokespecial #15
176: astore        17
178: aload         17
180: ldc           #16
182: invokevirtual #17
185: astore        18
187: aload         17
189: invokevirtual #25
192: astore        19
194: aload         17
196: invokevirtual #76
199: astore        20
201: aload         17
203: invokevirtual #77
206: astore        21
208: aload         17
210: ldc           #16
212: invokevirtual #17
215: astore        22
217: aload         17
219: ldc           #141
221: invokevirtual #28
224: astore        23
226: invokestatic  #12
229: astore        24
231: aconst_null
232: astore        25
234: aload         24
236: aload         25
238: invokevirtual #88
241: astore        26
243: aload         26
245: invokevirtual #89
248: istore        27
250: aconst_null
251: astore        28
253: aload         26
255: aload         28
257: invokevirtual #88
260: astore        29
262: aload         23
264: aload         29
266: invokevirtual #118
269: astore        30
271: aload         30
273: invokevirtual #142
276: astore        31
278: new           #164
281: dup
282: aload         16
284: aload         31
286: invokespecial #165
289: astore        32
291: aconst_null
292: astore        33
294: aload         32
296: aload         33
298: invokevirtual #181
301: astore        34
303: ldc           #182
305: invokestatic  #22
308: goto          313
311: astore        34
313: aload_1
314: invokestatic  #10
317: aload_2
318: invokestatic  #10
321: aload         4
323: invokestatic  #10
326: new           #55
329: dup
330: invokespecial #56
333: ldc           #57
335: invokevirtual #58
338: iload         5
340: invokevirtual #97
343: ldc           #60
345: invokevirtual #58
348: iconst_1
349: invokevirtual #97
352: ldc           #57
354: invokevirtual #58
357: invokevirtual #61
360: iload         5
362: iconst_1
363: if_icmpne     370
366: iconst_1
367: goto          371
370: iconst_0
371: invokestatic  #62
374: aload         7
376: invokestatic  #10
379: aload         8
381: invokestatic  #10
384: aload         9
386: invokestatic  #10
389: new           #55
392: dup
393: invokespecial #56
396: ldc           #57
398: invokevirtual #58
401: aload         12
403: invokevirtual #58
406: ldc           #94
408: invokevirtual #58
411: invokevirtual #61
414: aload         12
416: ldc           #95
418: invokestatic  #96
421: aload         13
423: invokestatic  #10
426: new           #55
429: dup
430: invokespecial #56
433: ldc           #57
435: invokevirtual #58
438: iload         15
440: invokevirtual #59
443: ldc           #60
445: invokevirtual #58
448: iconst_0
449: invokevirtual #59
452: ldc           #57
454: invokevirtual #58
457: invokevirtual #61
460: iload         15
462: ifne          469
465: iconst_1
466: goto          470
469: iconst_0
470: invokestatic  #62
473: aload         18
475: invokestatic  #10
478: aload         19
480: invokestatic  #10
483: aload         20
485: invokestatic  #10
488: aload         21
490: invokestatic  #10
493: aload         22
495: invokestatic  #10
498: aload         23
500: invokestatic  #10
503: aload         24
505: invokestatic  #10
508: aload         26
510: invokestatic  #10
513: new           #55
516: dup
517: invokespecial #56
520: ldc           #57
522: invokevirtual #58
525: iload         27
527: invokevirtual #97
530: ldc           #60
532: invokevirtual #58
535: iconst_1
536: invokevirtual #97
539: ldc           #57
541: invokevirtual #58
544: invokevirtual #61
547: iload         27
549: iconst_1
550: if_icmpne     557
553: iconst_1
554: goto          558
557: iconst_0
558: invokestatic  #62
561: aload         29
563: invokestatic  #10
566: aload         30
568: invokestatic  #10
571: aload         31
573: invokestatic  #10
576: return
Exception table:
from    to  target type
294   308   311   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test029
Start line: 813
End line: 831
Method source code: 
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendPrefix("+10:00", "hi!");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #183
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #26
48: astore        4
50: aload_1
51: invokevirtual #76
54: astore        5
56: aload         5
58: ldc           #184
60: invokevirtual #28
63: astore        6
65: aload         6
67: invokevirtual #185
70: astore        7
72: aload         7
74: ldc           #186
76: ldc           #187
78: invokevirtual #41
81: astore        8
83: aload_2
84: invokestatic  #10
87: aload_3
88: invokestatic  #10
91: aload         4
93: invokestatic  #10
96: aload         5
98: invokestatic  #10
101: aload         6
103: invokestatic  #10
106: aload         7
108: invokestatic  #10
111: aload         8
113: invokestatic  #10
116: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test030
Start line: 834
End line: 907
Method source code: 
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.Period period49 = org.joda.time.Period.years(5);
        java.util.Locale locale51 = null;
        int int52 = separator28.countFieldsToPrint((org.joda.time.ReadablePeriod) period49, (-24), locale51);
        java.lang.StringBuffer stringBuffer53 = null;
        org.joda.time.Period period55 = org.joda.time.Period.months((-90));
        java.util.Locale locale56 = null;
        // The following exception was thrown during execution in test generation
        try {
            separator28.printTo(stringBuffer53, (org.joda.time.ReadablePeriod) period55, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period55);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #188
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #99
28: dup
29: iconst_0
30: ldc           #100
32: aastore
33: dup
34: iconst_1
35: ldc           #101
37: aastore
38: dup
39: iconst_2
40: ldc           #102
42: aastore
43: dup
44: iconst_3
45: ldc           #103
47: aastore
48: dup
49: iconst_4
50: ldc           #104
52: aastore
53: astore_1
54: invokestatic  #12
57: astore_2
58: aconst_null
59: astore_3
60: aload_2
61: aload_3
62: invokevirtual #88
65: astore        4
67: aload_2
68: invokevirtual #89
71: istore        5
73: aconst_null
74: astore        6
76: aload_2
77: aload         6
79: invokevirtual #88
82: astore        7
84: aload         7
86: invokevirtual #90
89: astore        8
91: getstatic     #78
94: astore        9
96: aconst_null
97: astore        10
99: new           #46
102: dup
103: ldc2_w        #79
106: ldc2_w        #81
109: aload         10
111: invokespecial #83
114: astore        11
116: aload         11
118: invokevirtual #84
121: astore        12
123: aload         11
125: bipush        100
127: invokevirtual #85
130: astore        13
132: aconst_null
133: astore        14
135: aload         9
137: aload         13
139: sipush        999
142: aload         14
144: invokevirtual #86
147: istore        15
149: new           #105
152: dup
153: ldc           #106
155: ldc           #104
157: aload_1
158: aload         8
160: aload         9
162: iconst_0
163: iconst_0
164: invokespecial #107
167: astore        16
169: new           #14
172: dup
173: invokespecial #15
176: astore        17
178: aload         17
180: ldc           #16
182: invokevirtual #17
185: astore        18
187: aload         17
189: invokevirtual #25
192: astore        19
194: aload         17
196: invokevirtual #76
199: astore        20
201: aload         17
203: invokevirtual #77
206: astore        21
208: aload         17
210: ldc           #16
212: invokevirtual #17
215: astore        22
217: aload         17
219: ldc           #141
221: invokevirtual #28
224: astore        23
226: invokestatic  #12
229: astore        24
231: aconst_null
232: astore        25
234: aload         24
236: aload         25
238: invokevirtual #88
241: astore        26
243: aload         26
245: invokevirtual #89
248: istore        27
250: aconst_null
251: astore        28
253: aload         26
255: aload         28
257: invokevirtual #88
260: astore        29
262: aload         23
264: aload         29
266: invokevirtual #118
269: astore        30
271: aload         30
273: invokevirtual #142
276: astore        31
278: new           #164
281: dup
282: aload         16
284: aload         31
286: invokespecial #165
289: astore        32
291: iconst_5
292: invokestatic  #166
295: astore        33
297: aconst_null
298: astore        34
300: aload         16
302: aload         33
304: bipush        -24
306: aload         34
308: invokevirtual #167
311: istore        35
313: aconst_null
314: astore        36
316: bipush        -90
318: invokestatic  #189
321: astore        37
323: aconst_null
324: astore        38
326: aload         16
328: aload         36
330: aload         37
332: aload         38
334: invokevirtual #190
337: ldc           #53
339: invokestatic  #22
342: goto          347
345: astore        39
347: aload_1
348: invokestatic  #10
351: aload_2
352: invokestatic  #10
355: aload         4
357: invokestatic  #10
360: new           #55
363: dup
364: invokespecial #56
367: ldc           #57
369: invokevirtual #58
372: iload         5
374: invokevirtual #97
377: ldc           #60
379: invokevirtual #58
382: iconst_1
383: invokevirtual #97
386: ldc           #57
388: invokevirtual #58
391: invokevirtual #61
394: iload         5
396: iconst_1
397: if_icmpne     404
400: iconst_1
401: goto          405
404: iconst_0
405: invokestatic  #62
408: aload         7
410: invokestatic  #10
413: aload         8
415: invokestatic  #10
418: aload         9
420: invokestatic  #10
423: new           #55
426: dup
427: invokespecial #56
430: ldc           #57
432: invokevirtual #58
435: aload         12
437: invokevirtual #58
440: ldc           #94
442: invokevirtual #58
445: invokevirtual #61
448: aload         12
450: ldc           #95
452: invokestatic  #96
455: aload         13
457: invokestatic  #10
460: new           #55
463: dup
464: invokespecial #56
467: ldc           #57
469: invokevirtual #58
472: iload         15
474: invokevirtual #59
477: ldc           #60
479: invokevirtual #58
482: iconst_0
483: invokevirtual #59
486: ldc           #57
488: invokevirtual #58
491: invokevirtual #61
494: iload         15
496: ifne          503
499: iconst_1
500: goto          504
503: iconst_0
504: invokestatic  #62
507: aload         18
509: invokestatic  #10
512: aload         19
514: invokestatic  #10
517: aload         20
519: invokestatic  #10
522: aload         21
524: invokestatic  #10
527: aload         22
529: invokestatic  #10
532: aload         23
534: invokestatic  #10
537: aload         24
539: invokestatic  #10
542: aload         26
544: invokestatic  #10
547: new           #55
550: dup
551: invokespecial #56
554: ldc           #57
556: invokevirtual #58
559: iload         27
561: invokevirtual #97
564: ldc           #60
566: invokevirtual #58
569: iconst_1
570: invokevirtual #97
573: ldc           #57
575: invokevirtual #58
578: invokevirtual #61
581: iload         27
583: iconst_1
584: if_icmpne     591
587: iconst_1
588: goto          592
591: iconst_0
592: invokestatic  #62
595: aload         29
597: invokestatic  #10
600: aload         30
602: invokestatic  #10
605: aload         31
607: invokestatic  #10
610: aload         33
612: invokestatic  #10
615: new           #55
618: dup
619: invokespecial #56
622: ldc           #57
624: invokevirtual #58
627: iload         35
629: invokevirtual #59
632: ldc           #60
634: invokevirtual #58
637: iconst_0
638: invokevirtual #59
641: ldc           #57
643: invokevirtual #58
646: invokevirtual #61
649: iload         35
651: ifne          658
654: iconst_1
655: goto          659
658: iconst_0
659: invokestatic  #62
662: aload         37
664: invokestatic  #10
667: return
Exception table:
from    to  target type
326   342   345   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test031
Start line: 910
End line: 931
Method source code: 
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSeparator("2024-05-15T11:17:19.237+00:00:00.010", "PeriodType[Standard]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #191
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #26
48: astore        4
50: aload         4
52: invokevirtual #33
55: astore        5
57: aload         4
59: ldc           #29
61: ldc           #192
63: invokevirtual #41
66: astore        6
68: aload         6
70: ldc           #159
72: ldc           #193
74: invokevirtual #20
77: astore        7
79: ldc           #43
81: invokestatic  #22
84: goto          89
87: astore        7
89: aload_2
90: invokestatic  #10
93: aload_3
94: invokestatic  #10
97: aload         4
99: invokestatic  #10
102: aload         5
104: invokestatic  #10
107: aload         6
109: invokestatic  #10
112: return
Exception table:
from    to  target type
68    84    87   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test032
Start line: 934
End line: 961
Method source code: 
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatterBuilder9.toPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder9.appendSeparator("-53", "DurationField[eras]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodPrinter12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #194
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #76
48: astore        4
50: aload_1
51: invokevirtual #77
54: astore        5
56: aload_1
57: ldc           #16
59: invokevirtual #17
62: astore        6
64: aload_1
65: ldc           #141
67: invokevirtual #28
70: astore        7
72: aload         7
74: ldc           #195
76: invokevirtual #196
79: astore        8
81: aload         7
83: invokevirtual #45
86: astore        9
88: aload         7
90: ldc           #197
92: ldc           #100
94: invokevirtual #20
97: astore        10
99: ldc           #43
101: invokestatic  #22
104: goto          109
107: astore        10
109: aload_2
110: invokestatic  #10
113: aload_3
114: invokestatic  #10
117: aload         4
119: invokestatic  #10
122: aload         5
124: invokestatic  #10
127: aload         6
129: invokestatic  #10
132: aload         7
134: invokestatic  #10
137: aload         8
139: invokestatic  #10
142: aload         9
144: invokestatic  #10
147: return
Exception table:
from    to  target type
88   104   107   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test033
Start line: 964
End line: 974
Method source code: 
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("1970");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #198
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_2
40: invokevirtual #33
43: astore_3
44: aload_2
45: ldc           #131
47: invokevirtual #17
50: astore        4
52: aload_2
53: invokestatic  #10
56: aload_3
57: invokestatic  #10
60: aload         4
62: invokestatic  #10
65: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test034
Start line: 977
End line: 1072
Method source code: 
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.Period period49 = org.joda.time.Period.millis(1);
        int int50 = period49.getMonths();
        int int51 = period49.size();
        org.joda.time.Period period53 = period49.withDays((int) (byte) 100);
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        org.joda.time.Period period56 = period54.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType57 = null;
        int int58 = period54.get(durationFieldType57);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period61 = period54.withField(durationFieldType59, 8);
        java.lang.String str62 = durationFieldType59.getName();
        org.joda.time.Period period64 = period49.withField(durationFieldType59, 1);
        org.joda.time.Period period66 = period49.minusDays(10);
        org.joda.time.MutablePeriod mutablePeriod67 = period66.toMutablePeriod();
        org.joda.time.Period period68 = mutablePeriod67.toPeriod();
        mutablePeriod67.setWeeks((-7));
        java.util.Locale locale73 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int74 = separator28.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod67, "GregorianChronology[UTC]", 8, locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8 + "'", int51 == 8);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "seconds" + "'", str62, "seconds");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(period68);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #199
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #99
28: dup
29: iconst_0
30: ldc           #100
32: aastore
33: dup
34: iconst_1
35: ldc           #101
37: aastore
38: dup
39: iconst_2
40: ldc           #102
42: aastore
43: dup
44: iconst_3
45: ldc           #103
47: aastore
48: dup
49: iconst_4
50: ldc           #104
52: aastore
53: astore_1
54: invokestatic  #12
57: astore_2
58: aconst_null
59: astore_3
60: aload_2
61: aload_3
62: invokevirtual #88
65: astore        4
67: aload_2
68: invokevirtual #89
71: istore        5
73: aconst_null
74: astore        6
76: aload_2
77: aload         6
79: invokevirtual #88
82: astore        7
84: aload         7
86: invokevirtual #90
89: astore        8
91: getstatic     #78
94: astore        9
96: aconst_null
97: astore        10
99: new           #46
102: dup
103: ldc2_w        #79
106: ldc2_w        #81
109: aload         10
111: invokespecial #83
114: astore        11
116: aload         11
118: invokevirtual #84
121: astore        12
123: aload         11
125: bipush        100
127: invokevirtual #85
130: astore        13
132: aconst_null
133: astore        14
135: aload         9
137: aload         13
139: sipush        999
142: aload         14
144: invokevirtual #86
147: istore        15
149: new           #105
152: dup
153: ldc           #106
155: ldc           #104
157: aload_1
158: aload         8
160: aload         9
162: iconst_0
163: iconst_0
164: invokespecial #107
167: astore        16
169: new           #14
172: dup
173: invokespecial #15
176: astore        17
178: aload         17
180: ldc           #16
182: invokevirtual #17
185: astore        18
187: aload         17
189: invokevirtual #25
192: astore        19
194: aload         17
196: invokevirtual #76
199: astore        20
201: aload         17
203: invokevirtual #77
206: astore        21
208: aload         17
210: ldc           #16
212: invokevirtual #17
215: astore        22
217: aload         17
219: ldc           #141
221: invokevirtual #28
224: astore        23
226: invokestatic  #12
229: astore        24
231: aconst_null
232: astore        25
234: aload         24
236: aload         25
238: invokevirtual #88
241: astore        26
243: aload         26
245: invokevirtual #89
248: istore        27
250: aconst_null
251: astore        28
253: aload         26
255: aload         28
257: invokevirtual #88
260: astore        29
262: aload         23
264: aload         29
266: invokevirtual #118
269: astore        30
271: aload         30
273: invokevirtual #142
276: astore        31
278: new           #164
281: dup
282: aload         16
284: aload         31
286: invokespecial #165
289: astore        32
291: iconst_1
292: invokestatic  #168
295: astore        33
297: aload         33
299: invokevirtual #169
302: istore        34
304: aload         33
306: invokevirtual #170
309: istore        35
311: aload         33
313: bipush        100
315: invokevirtual #200
318: astore        36
320: getstatic     #8
323: astore        37
325: aload         37
327: iconst_m1
328: invokevirtual #9
331: astore        38
333: aconst_null
334: astore        39
336: aload         37
338: aload         39
340: invokevirtual #201
343: istore        40
345: invokestatic  #202
348: astore        41
350: aload         37
352: aload         41
354: bipush        8
356: invokevirtual #203
359: astore        42
361: aload         41
363: invokevirtual #204
366: astore        43
368: aload         33
370: aload         41
372: iconst_1
373: invokevirtual #203
376: astore        44
378: aload         33
380: bipush        10
382: invokevirtual #85
385: astore        45
387: aload         45
389: invokevirtual #205
392: astore        46
394: aload         46
396: invokevirtual #206
399: astore        47
401: aload         46
403: bipush        -7
405: invokevirtual #207
408: aconst_null
409: astore        48
411: aload         16
413: aload         46
415: ldc           #154
417: bipush        8
419: aload         48
421: invokevirtual #208
424: istore        49
426: ldc           #53
428: invokestatic  #22
431: goto          436
434: astore        49
436: aload_1
437: invokestatic  #10
440: aload_2
441: invokestatic  #10
444: aload         4
446: invokestatic  #10
449: new           #55
452: dup
453: invokespecial #56
456: ldc           #57
458: invokevirtual #58
461: iload         5
463: invokevirtual #97
466: ldc           #60
468: invokevirtual #58
471: iconst_1
472: invokevirtual #97
475: ldc           #57
477: invokevirtual #58
480: invokevirtual #61
483: iload         5
485: iconst_1
486: if_icmpne     493
489: iconst_1
490: goto          494
493: iconst_0
494: invokestatic  #62
497: aload         7
499: invokestatic  #10
502: aload         8
504: invokestatic  #10
507: aload         9
509: invokestatic  #10
512: new           #55
515: dup
516: invokespecial #56
519: ldc           #57
521: invokevirtual #58
524: aload         12
526: invokevirtual #58
529: ldc           #94
531: invokevirtual #58
534: invokevirtual #61
537: aload         12
539: ldc           #95
541: invokestatic  #96
544: aload         13
546: invokestatic  #10
549: new           #55
552: dup
553: invokespecial #56
556: ldc           #57
558: invokevirtual #58
561: iload         15
563: invokevirtual #59
566: ldc           #60
568: invokevirtual #58
571: iconst_0
572: invokevirtual #59
575: ldc           #57
577: invokevirtual #58
580: invokevirtual #61
583: iload         15
585: ifne          592
588: iconst_1
589: goto          593
592: iconst_0
593: invokestatic  #62
596: aload         18
598: invokestatic  #10
601: aload         19
603: invokestatic  #10
606: aload         20
608: invokestatic  #10
611: aload         21
613: invokestatic  #10
616: aload         22
618: invokestatic  #10
621: aload         23
623: invokestatic  #10
626: aload         24
628: invokestatic  #10
631: aload         26
633: invokestatic  #10
636: new           #55
639: dup
640: invokespecial #56
643: ldc           #57
645: invokevirtual #58
648: iload         27
650: invokevirtual #97
653: ldc           #60
655: invokevirtual #58
658: iconst_1
659: invokevirtual #97
662: ldc           #57
664: invokevirtual #58
667: invokevirtual #61
670: iload         27
672: iconst_1
673: if_icmpne     680
676: iconst_1
677: goto          681
680: iconst_0
681: invokestatic  #62
684: aload         29
686: invokestatic  #10
689: aload         30
691: invokestatic  #10
694: aload         31
696: invokestatic  #10
699: aload         33
701: invokestatic  #10
704: new           #55
707: dup
708: invokespecial #56
711: ldc           #57
713: invokevirtual #58
716: iload         34
718: invokevirtual #59
721: ldc           #60
723: invokevirtual #58
726: iconst_0
727: invokevirtual #59
730: ldc           #57
732: invokevirtual #58
735: invokevirtual #61
738: iload         34
740: ifne          747
743: iconst_1
744: goto          748
747: iconst_0
748: invokestatic  #62
751: new           #55
754: dup
755: invokespecial #56
758: ldc           #57
760: invokevirtual #58
763: iload         35
765: invokevirtual #59
768: ldc           #60
770: invokevirtual #58
773: bipush        8
775: invokevirtual #59
778: ldc           #57
780: invokevirtual #58
783: invokevirtual #61
786: iload         35
788: bipush        8
790: if_icmpne     797
793: iconst_1
794: goto          798
797: iconst_0
798: invokestatic  #62
801: aload         36
803: invokestatic  #10
806: aload         37
808: invokestatic  #10
811: aload         38
813: invokestatic  #10
816: new           #55
819: dup
820: invokespecial #56
823: ldc           #57
825: invokevirtual #58
828: iload         40
830: invokevirtual #59
833: ldc           #60
835: invokevirtual #58
838: iconst_0
839: invokevirtual #59
842: ldc           #57
844: invokevirtual #58
847: invokevirtual #61
850: iload         40
852: ifne          859
855: iconst_1
856: goto          860
859: iconst_0
860: invokestatic  #62
863: aload         41
865: invokestatic  #10
868: aload         42
870: invokestatic  #10
873: new           #55
876: dup
877: invokespecial #56
880: ldc           #57
882: invokevirtual #58
885: aload         43
887: invokevirtual #58
890: ldc           #209
892: invokevirtual #58
895: invokevirtual #61
898: aload         43
900: ldc           #210
902: invokestatic  #96
905: aload         44
907: invokestatic  #10
910: aload         45
912: invokestatic  #10
915: aload         46
917: invokestatic  #10
920: aload         47
922: invokestatic  #10
925: return
Exception table:
from    to  target type
411   431   434   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test035
Start line: 1075
End line: 1106
Method source code: 
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter12.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.append(periodFormatter15);
        periodFormatterBuilder9.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder9.maximumParsedDigits(100);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #211
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #76
48: astore        4
50: aload_1
51: invokevirtual #77
54: astore        5
56: aload_1
57: ldc           #16
59: invokevirtual #17
62: astore        6
64: aload_1
65: ldc           #141
67: invokevirtual #28
70: astore        7
72: invokestatic  #12
75: astore        8
77: aconst_null
78: astore        9
80: aload         8
82: aload         9
84: invokevirtual #88
87: astore        10
89: aload         10
91: invokevirtual #89
94: istore        11
96: aconst_null
97: astore        12
99: aload         10
101: aload         12
103: invokevirtual #88
106: astore        13
108: aload         7
110: aload         13
112: invokevirtual #118
115: astore        14
117: aload         7
119: invokevirtual #212
122: aload         7
124: bipush        100
126: invokevirtual #213
129: astore        15
131: aload_2
132: invokestatic  #10
135: aload_3
136: invokestatic  #10
139: aload         4
141: invokestatic  #10
144: aload         5
146: invokestatic  #10
149: aload         6
151: invokestatic  #10
154: aload         7
156: invokestatic  #10
159: aload         8
161: invokestatic  #10
164: aload         10
166: invokestatic  #10
169: new           #55
172: dup
173: invokespecial #56
176: ldc           #57
178: invokevirtual #58
181: iload         11
183: invokevirtual #97
186: ldc           #60
188: invokevirtual #58
191: iconst_1
192: invokevirtual #97
195: ldc           #57
197: invokevirtual #58
200: invokevirtual #61
203: iload         11
205: iconst_1
206: if_icmpne     213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #62
217: aload         13
219: invokestatic  #10
222: aload         14
224: invokestatic  #10
227: aload         15
229: invokestatic  #10
232: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test036
Start line: 1109
End line: 1124
Method source code: 
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.rejectSignedValues(false);
        periodFormatterBuilder7.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #214
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #26
48: astore        4
50: aload_1
51: invokevirtual #76
54: astore        5
56: aload_1
57: iconst_0
58: invokevirtual #108
61: astore        6
63: aload         6
65: invokevirtual #212
68: aload_2
69: invokestatic  #10
72: aload_3
73: invokestatic  #10
76: aload         4
78: invokestatic  #10
81: aload         5
83: invokestatic  #10
86: aload         6
88: invokestatic  #10
91: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test037
Start line: 1127
End line: 1205
Method source code: 
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatterBuilder4.toParser();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal7 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        java.util.Locale locale12 = null;
        int int13 = literal7.countFieldsToPrint((org.joda.time.ReadablePeriod) period10, (-101), locale12);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        int int15 = period14.getHours();
        org.joda.time.Period period17 = period14.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod18 = period17.toMutablePeriod();
        mutablePeriod18.setWeeks((-28800000));
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology23);
        int int25 = period24.getMonths();
        java.lang.String str26 = period24.toString();
        org.joda.time.Period period28 = period24.plusHours(0);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) period24);
        java.util.Locale locale32 = null;
        int int33 = literal7.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod18, "yearOfEra", 292278993, locale32);
        org.joda.time.chrono.GregorianChronology gregorianChronology34 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology34.dayOfWeek();
        org.joda.time.DurationField durationField36 = gregorianChronology34.seconds();
        org.joda.time.DurationField durationField37 = gregorianChronology34.months();
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        int int39 = period38.getHours();
        org.joda.time.Period period41 = period38.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType46 = org.joda.time.DateTimeUtils.getPeriodType(periodType45);
        org.joda.time.Period period47 = new org.joda.time.Period(100L, (long) (short) -1, periodType45);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.weeks();
        boolean boolean49 = periodType45.isSupported(durationFieldType48);
        mutablePeriod42.add(durationFieldType48, (int) (byte) 100);
        long long54 = gregorianChronology34.add((org.joda.time.ReadablePeriod) mutablePeriod42, (long) 100, (-101));
        java.util.Locale locale57 = null;
        int int58 = literal7.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod42, "Time", 100, locale57);
        mutablePeriod42.addWeeks((-14));
        java.util.Locale locale63 = null;
        int int64 = periodParser6.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod42, "2024-05-15T11:17:25.652+00:00:00.010", 292278993, locale63);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodParser6);
        org.junit.Assert.assertNotNull(literal7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT-0.090S" + "'", str26, "PT-0.090S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-292278994) + "'", int33 == (-292278994));
        org.junit.Assert.assertNotNull(gregorianChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-6108479999900L) + "'", long54 == (-6108479999900L));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-101) + "'", int58 == (-101));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-292278994) + "'", int64 == (-292278994));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #215
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #26
48: astore        4
50: aload         4
52: invokevirtual #139
55: astore        5
57: aload         4
59: invokevirtual #142
62: astore        6
64: getstatic     #78
67: astore        7
69: aconst_null
70: astore        8
72: aconst_null
73: astore        9
75: new           #46
78: dup
79: aload         8
81: aload         9
83: invokespecial #47
86: astore        10
88: aconst_null
89: astore        11
91: aload         7
93: aload         10
95: bipush        -101
97: aload         11
99: invokevirtual #86
102: istore        12
104: getstatic     #8
107: astore        13
109: aload         13
111: invokevirtual #216
114: istore        14
116: aload         13
118: iconst_0
119: invokevirtual #200
122: astore        15
124: aload         15
126: invokevirtual #205
129: astore        16
131: aload         16
133: ldc           #217
135: invokevirtual #207
138: aconst_null
139: astore        17
141: new           #46
144: dup
145: ldc2_w        #79
148: ldc2_w        #81
151: aload         17
153: invokespecial #83
156: astore        18
158: aload         18
160: invokevirtual #169
163: istore        19
165: aload         18
167: invokevirtual #84
170: astore        20
172: aload         18
174: iconst_0
175: invokevirtual #218
178: astore        21
180: aload         16
182: aload         18
184: invokevirtual #219
187: aconst_null
188: astore        22
190: aload         7
192: aload         16
194: ldc           #106
196: ldc           #220
198: aload         22
200: invokevirtual #221
203: istore        23
205: invokestatic  #222
208: astore        24
210: aload         24
212: invokevirtual #223
215: astore        25
217: aload         24
219: invokevirtual #224
222: astore        26
224: aload         24
226: invokevirtual #225
229: astore        27
231: getstatic     #8
234: astore        28
236: aload         28
238: invokevirtual #216
241: istore        29
243: aload         28
245: iconst_0
246: invokevirtual #200
249: astore        30
251: aload         30
253: invokevirtual #205
256: astore        31
258: invokestatic  #171
261: astore        32
263: aload         32
265: invokestatic  #172
268: astore        33
270: new           #46
273: dup
274: ldc2_w        #79
277: ldc2_w        #173
280: aload         32
282: invokespecial #175
285: astore        34
287: invokestatic  #176
290: astore        35
292: aload         32
294: aload         35
296: invokevirtual #177
299: istore        36
301: aload         31
303: aload         35
305: bipush        100
307: invokevirtual #226
310: aload         24
312: aload         31
314: ldc2_w        #79
317: bipush        -101
319: invokevirtual #227
322: lstore        37
324: aconst_null
325: astore        39
327: aload         7
329: aload         31
331: ldc           #228
333: bipush        100
335: aload         39
337: invokevirtual #221
340: istore        40
342: aload         31
344: bipush        -14
346: invokevirtual #229
349: aconst_null
350: astore        41
352: aload         6
354: aload         31
356: ldc           #230
358: ldc           #220
360: aload         41
362: invokeinterface #231,  5
367: istore        42
369: aload_2
370: invokestatic  #10
373: aload_3
374: invokestatic  #10
377: aload         4
379: invokestatic  #10
382: aload         5
384: invokestatic  #10
387: aload         6
389: invokestatic  #10
392: aload         7
394: invokestatic  #10
397: new           #55
400: dup
401: invokespecial #56
404: ldc           #57
406: invokevirtual #58
409: iload         12
411: invokevirtual #59
414: ldc           #60
416: invokevirtual #58
419: iconst_0
420: invokevirtual #59
423: ldc           #57
425: invokevirtual #58
428: invokevirtual #61
431: iload         12
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #62
444: aload         13
446: invokestatic  #10
449: new           #55
452: dup
453: invokespecial #56
456: ldc           #57
458: invokevirtual #58
461: iload         14
463: invokevirtual #59
466: ldc           #60
468: invokevirtual #58
471: iconst_0
472: invokevirtual #59
475: ldc           #57
477: invokevirtual #58
480: invokevirtual #61
483: iload         14
485: ifne          492
488: iconst_1
489: goto          493
492: iconst_0
493: invokestatic  #62
496: aload         15
498: invokestatic  #10
501: aload         16
503: invokestatic  #10
506: new           #55
509: dup
510: invokespecial #56
513: ldc           #57
515: invokevirtual #58
518: iload         19
520: invokevirtual #59
523: ldc           #60
525: invokevirtual #58
528: iconst_0
529: invokevirtual #59
532: ldc           #57
534: invokevirtual #58
537: invokevirtual #61
540: iload         19
542: ifne          549
545: iconst_1
546: goto          550
549: iconst_0
550: invokestatic  #62
553: new           #55
556: dup
557: invokespecial #56
560: ldc           #57
562: invokevirtual #58
565: aload         20
567: invokevirtual #58
570: ldc           #94
572: invokevirtual #58
575: invokevirtual #61
578: aload         20
580: ldc           #95
582: invokestatic  #96
585: aload         21
587: invokestatic  #10
590: new           #55
593: dup
594: invokespecial #56
597: ldc           #57
599: invokevirtual #58
602: iload         23
604: invokevirtual #59
607: ldc           #60
609: invokevirtual #58
612: ldc           #232
614: invokevirtual #59
617: ldc           #57
619: invokevirtual #58
622: invokevirtual #61
625: iload         23
627: ldc           #232
629: if_icmpne     636
632: iconst_1
633: goto          637
636: iconst_0
637: invokestatic  #62
640: aload         24
642: invokestatic  #10
645: aload         25
647: invokestatic  #10
650: aload         26
652: invokestatic  #10
655: aload         27
657: invokestatic  #10
660: aload         28
662: invokestatic  #10
665: new           #55
668: dup
669: invokespecial #56
672: ldc           #57
674: invokevirtual #58
677: iload         29
679: invokevirtual #59
682: ldc           #60
684: invokevirtual #58
687: iconst_0
688: invokevirtual #59
691: ldc           #57
693: invokevirtual #58
696: invokevirtual #61
699: iload         29
701: ifne          708
704: iconst_1
705: goto          709
708: iconst_0
709: invokestatic  #62
712: aload         30
714: invokestatic  #10
717: aload         31
719: invokestatic  #10
722: aload         32
724: invokestatic  #10
727: aload         33
729: invokestatic  #10
732: aload         35
734: invokestatic  #10
737: new           #55
740: dup
741: invokespecial #56
744: ldc           #57
746: invokevirtual #58
749: iload         36
751: invokevirtual #97
754: ldc           #60
756: invokevirtual #58
759: iconst_0
760: invokevirtual #97
763: ldc           #57
765: invokevirtual #58
768: invokevirtual #61
771: iload         36
773: ifne          780
776: iconst_1
777: goto          781
780: iconst_0
781: invokestatic  #62
784: new           #55
787: dup
788: invokespecial #56
791: ldc           #57
793: invokevirtual #58
796: iload         40
798: invokevirtual #59
801: ldc           #60
803: invokevirtual #58
806: bipush        -101
808: invokevirtual #59
811: ldc           #57
813: invokevirtual #58
816: invokevirtual #61
819: iload         40
821: bipush        -101
823: if_icmpne     830
826: iconst_1
827: goto          831
830: iconst_0
831: invokestatic  #62
834: new           #55
837: dup
838: invokespecial #56
841: ldc           #57
843: invokevirtual #58
846: iload         42
848: invokevirtual #59
851: ldc           #60
853: invokevirtual #58
856: ldc           #232
858: invokevirtual #59
861: ldc           #57
863: invokevirtual #58
866: invokevirtual #61
869: iload         42
871: ldc           #232
873: if_icmpne     880
876: iconst_1
877: goto          881
880: iconst_0
881: invokestatic  #62
884: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test038
Start line: 1208
End line: 1329
Method source code: 
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.joda.time.format.PeriodFormatter periodFormatter0 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = periodFormatter0.withLocale(locale1);
        boolean boolean3 = periodFormatter0.isParser();
        java.util.Locale locale4 = null;
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter0.withLocale(locale4);
        boolean boolean6 = periodFormatter5.isPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal7 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology10);
        java.lang.String str12 = period11.toString();
        org.joda.time.Period period14 = period11.minusDays((int) (byte) 100);
        java.util.Locale locale16 = null;
        int int17 = literal7.countFieldsToPrint((org.joda.time.ReadablePeriod) period14, 999, locale16);
        org.joda.time.format.PeriodFormatter periodFormatter18 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale19 = null;
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter18.withLocale(locale19);
        boolean boolean21 = periodFormatter20.isParser();
        org.joda.time.format.PeriodParser periodParser22 = periodFormatter20.getParser();
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        int int24 = period23.getHours();
        org.joda.time.Period period26 = period23.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType31 = org.joda.time.DateTimeUtils.getPeriodType(periodType30);
        org.joda.time.Period period32 = new org.joda.time.Period(100L, (long) (short) -1, periodType30);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        boolean boolean34 = periodType30.isSupported(durationFieldType33);
        mutablePeriod27.add(durationFieldType33, (int) (byte) 100);
        java.lang.String str37 = mutablePeriod27.toString();
        java.util.Locale locale40 = null;
        int int41 = periodParser22.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod27, "weekyear", (int) '#', locale40);
        mutablePeriod27.setYears((int) (short) 100);
        java.util.Locale locale45 = null;
        int int46 = literal7.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod27, 0, locale45);
        int int49 = periodFormatter5.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod27, "", 3655);
        org.joda.time.format.PeriodPrinter periodPrinter50 = periodFormatter5.getPrinter();
        java.lang.String[] strArray58 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter59 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale60 = null;
        org.joda.time.format.PeriodFormatter periodFormatter61 = periodFormatter59.withLocale(locale60);
        boolean boolean62 = periodFormatter59.isParser();
        java.util.Locale locale63 = null;
        org.joda.time.format.PeriodFormatter periodFormatter64 = periodFormatter59.withLocale(locale63);
        org.joda.time.format.PeriodPrinter periodPrinter65 = periodFormatter64.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal66 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology69);
        java.lang.String str71 = period70.toString();
        org.joda.time.Period period73 = period70.minusDays((int) (byte) 100);
        java.util.Locale locale75 = null;
        int int76 = literal66.countFieldsToPrint((org.joda.time.ReadablePeriod) period73, 999, locale75);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator79 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray58, periodPrinter65, (org.joda.time.format.PeriodParser) literal66, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder80 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder82 = periodFormatterBuilder80.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder83 = periodFormatterBuilder80.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder84 = periodFormatterBuilder80.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder85 = periodFormatterBuilder80.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder87 = periodFormatterBuilder80.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder89 = periodFormatterBuilder80.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter90 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale91 = null;
        org.joda.time.format.PeriodFormatter periodFormatter92 = periodFormatter90.withLocale(locale91);
        boolean boolean93 = periodFormatter92.isParser();
        java.util.Locale locale94 = null;
        org.joda.time.format.PeriodFormatter periodFormatter95 = periodFormatter92.withLocale(locale94);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder96 = periodFormatterBuilder89.append(periodFormatter95);
        org.joda.time.format.PeriodParser periodParser97 = periodFormatterBuilder96.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter98 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator79, periodParser97);
        org.joda.time.format.PeriodFormatter periodFormatter99 = new org.joda.time.format.PeriodFormatter(periodPrinter50, periodParser97);
        org.junit.Assert.assertNotNull(periodFormatter0);
        org.junit.Assert.assertNotNull(periodFormatter2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(literal7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(periodParser22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "P100W" + "'", str37, "P100W");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-36) + "'", int41 == (-36));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3656) + "'", int49 == (-3656));
        org.junit.Assert.assertNotNull(periodPrinter50);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(periodFormatter59);
        org.junit.Assert.assertNotNull(periodFormatter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNotNull(periodPrinter65);
        org.junit.Assert.assertNotNull(literal66);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT-0.090S" + "'", str71, "PT-0.090S");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder82);
        org.junit.Assert.assertNotNull(periodFormatterBuilder83);
        org.junit.Assert.assertNotNull(periodFormatterBuilder84);
        org.junit.Assert.assertNotNull(periodFormatterBuilder85);
        org.junit.Assert.assertNotNull(periodFormatterBuilder87);
        org.junit.Assert.assertNotNull(periodFormatterBuilder89);
        org.junit.Assert.assertNotNull(periodFormatter90);
        org.junit.Assert.assertNotNull(periodFormatter92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(periodFormatter95);
        org.junit.Assert.assertNotNull(periodFormatterBuilder96);
        org.junit.Assert.assertNotNull(periodParser97);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #233
19: aastore
20: invokevirtual #7
23: pop
24: invokestatic  #12
27: astore_1
28: aconst_null
29: astore_2
30: aload_1
31: aload_2
32: invokevirtual #88
35: astore_3
36: aload_1
37: invokevirtual #89
40: istore        4
42: aconst_null
43: astore        5
45: aload_1
46: aload         5
48: invokevirtual #88
51: astore        6
53: aload         6
55: invokevirtual #234
58: istore        7
60: getstatic     #78
63: astore        8
65: aconst_null
66: astore        9
68: new           #46
71: dup
72: ldc2_w        #79
75: ldc2_w        #81
78: aload         9
80: invokespecial #83
83: astore        10
85: aload         10
87: invokevirtual #84
90: astore        11
92: aload         10
94: bipush        100
96: invokevirtual #85
99: astore        12
101: aconst_null
102: astore        13
104: aload         8
106: aload         12
108: sipush        999
111: aload         13
113: invokevirtual #86
116: istore        14
118: invokestatic  #12
121: astore        15
123: aconst_null
124: astore        16
126: aload         15
128: aload         16
130: invokevirtual #88
133: astore        17
135: aload         17
137: invokevirtual #89
140: istore        18
142: aload         17
144: invokevirtual #119
147: astore        19
149: getstatic     #8
152: astore        20
154: aload         20
156: invokevirtual #216
159: istore        21
161: aload         20
163: iconst_0
164: invokevirtual #200
167: astore        22
169: aload         22
171: invokevirtual #205
174: astore        23
176: invokestatic  #171
179: astore        24
181: aload         24
183: invokestatic  #172
186: astore        25
188: new           #46
191: dup
192: ldc2_w        #79
195: ldc2_w        #173
198: aload         24
200: invokespecial #175
203: astore        26
205: invokestatic  #176
208: astore        27
210: aload         24
212: aload         27
214: invokevirtual #177
217: istore        28
219: aload         23
221: aload         27
223: bipush        100
225: invokevirtual #226
228: aload         23
230: invokevirtual #235
233: astore        29
235: aconst_null
236: astore        30
238: aload         19
240: aload         23
242: ldc           #135
244: bipush        35
246: aload         30
248: invokeinterface #231,  5
253: istore        31
255: aload         23
257: bipush        100
259: invokevirtual #236
262: aconst_null
263: astore        32
265: aload         8
267: aload         23
269: iconst_0
270: aload         32
272: invokevirtual #86
275: istore        33
277: aload         6
279: aload         23
281: ldc           #74
283: sipush        3655
286: invokevirtual #237
289: istore        34
291: aload         6
293: invokevirtual #90
296: astore        35
298: iconst_5
299: anewarray     #99
302: dup
303: iconst_0
304: ldc           #100
306: aastore
307: dup
308: iconst_1
309: ldc           #101
311: aastore
312: dup
313: iconst_2
314: ldc           #102
316: aastore
317: dup
318: iconst_3
319: ldc           #103
321: aastore
322: dup
323: iconst_4
324: ldc           #104
326: aastore
327: astore        36
329: invokestatic  #12
332: astore        37
334: aconst_null
335: astore        38
337: aload         37
339: aload         38
341: invokevirtual #88
344: astore        39
346: aload         37
348: invokevirtual #89
351: istore        40
353: aconst_null
354: astore        41
356: aload         37
358: aload         41
360: invokevirtual #88
363: astore        42
365: aload         42
367: invokevirtual #90
370: astore        43
372: getstatic     #78
375: astore        44
377: aconst_null
378: astore        45
380: new           #46
383: dup
384: ldc2_w        #79
387: ldc2_w        #81
390: aload         45
392: invokespecial #83
395: astore        46
397: aload         46
399: invokevirtual #84
402: astore        47
404: aload         46
406: bipush        100
408: invokevirtual #85
411: astore        48
413: aconst_null
414: astore        49
416: aload         44
418: aload         48
420: sipush        999
423: aload         49
425: invokevirtual #86
428: istore        50
430: new           #105
433: dup
434: ldc           #106
436: ldc           #104
438: aload         36
440: aload         43
442: aload         44
444: iconst_0
445: iconst_0
446: invokespecial #107
449: astore        51
451: new           #14
454: dup
455: invokespecial #15
458: astore        52
460: aload         52
462: ldc           #16
464: invokevirtual #17
467: astore        53
469: aload         52
471: invokevirtual #25
474: astore        54
476: aload         52
478: invokevirtual #76
481: astore        55
483: aload         52
485: invokevirtual #77
488: astore        56
490: aload         52
492: ldc           #16
494: invokevirtual #17
497: astore        57
499: aload         52
501: ldc           #141
503: invokevirtual #28
506: astore        58
508: invokestatic  #12
511: astore        59
513: aconst_null
514: astore        60
516: aload         59
518: aload         60
520: invokevirtual #88
523: astore        61
525: aload         61
527: invokevirtual #89
530: istore        62
532: aconst_null
533: astore        63
535: aload         61
537: aload         63
539: invokevirtual #88
542: astore        64
544: aload         58
546: aload         64
548: invokevirtual #118
551: astore        65
553: aload         65
555: invokevirtual #142
558: astore        66
560: new           #164
563: dup
564: aload         51
566: aload         66
568: invokespecial #165
571: astore        67
573: new           #164
576: dup
577: aload         35
579: aload         66
581: invokespecial #165
584: astore        68
586: aload_1
587: invokestatic  #10
590: aload_3
591: invokestatic  #10
594: new           #55
597: dup
598: invokespecial #56
601: ldc           #57
603: invokevirtual #58
606: iload         4
608: invokevirtual #97
611: ldc           #60
613: invokevirtual #58
616: iconst_1
617: invokevirtual #97
620: ldc           #57
622: invokevirtual #58
625: invokevirtual #61
628: iload         4
630: iconst_1
631: if_icmpne     638
634: iconst_1
635: goto          639
638: iconst_0
639: invokestatic  #62
642: aload         6
644: invokestatic  #10
647: new           #55
650: dup
651: invokespecial #56
654: ldc           #57
656: invokevirtual #58
659: iload         7
661: invokevirtual #97
664: ldc           #60
666: invokevirtual #58
669: iconst_1
670: invokevirtual #97
673: ldc           #57
675: invokevirtual #58
678: invokevirtual #61
681: iload         7
683: iconst_1
684: if_icmpne     691
687: iconst_1
688: goto          692
691: iconst_0
692: invokestatic  #62
695: aload         8
697: invokestatic  #10
700: new           #55
703: dup
704: invokespecial #56
707: ldc           #57
709: invokevirtual #58
712: aload         11
714: invokevirtual #58
717: ldc           #94
719: invokevirtual #58
722: invokevirtual #61
725: aload         11
727: ldc           #95
729: invokestatic  #96
732: aload         12
734: invokestatic  #10
737: new           #55
740: dup
741: invokespecial #56
744: ldc           #57
746: invokevirtual #58
749: iload         14
751: invokevirtual #59
754: ldc           #60
756: invokevirtual #58
759: iconst_0
760: invokevirtual #59
763: ldc           #57
765: invokevirtual #58
768: invokevirtual #61
771: iload         14
773: ifne          780
776: iconst_1
777: goto          781
780: iconst_0
781: invokestatic  #62
784: aload         15
786: invokestatic  #10
789: aload         17
791: invokestatic  #10
794: new           #55
797: dup
798: invokespecial #56
801: ldc           #57
803: invokevirtual #58
806: iload         18
808: invokevirtual #97
811: ldc           #60
813: invokevirtual #58
816: iconst_1
817: invokevirtual #97
820: ldc           #57
822: invokevirtual #58
825: invokevirtual #61
828: iload         18
830: iconst_1
831: if_icmpne     838
834: iconst_1
835: goto          839
838: iconst_0
839: invokestatic  #62
842: aload         19
844: invokestatic  #10
847: aload         20
849: invokestatic  #10
852: new           #55
855: dup
856: invokespecial #56
859: ldc           #57
861: invokevirtual #58
864: iload         21
866: invokevirtual #59
869: ldc           #60
871: invokevirtual #58
874: iconst_0
875: invokevirtual #59
878: ldc           #57
880: invokevirtual #58
883: invokevirtual #61
886: iload         21
888: ifne          895
891: iconst_1
892: goto          896
895: iconst_0
896: invokestatic  #62
899: aload         22
901: invokestatic  #10
904: aload         23
906: invokestatic  #10
909: aload         24
911: invokestatic  #10
914: aload         25
916: invokestatic  #10
919: aload         27
921: invokestatic  #10
924: new           #55
927: dup
928: invokespecial #56
931: ldc           #57
933: invokevirtual #58
936: iload         28
938: invokevirtual #97
941: ldc           #60
943: invokevirtual #58
946: iconst_0
947: invokevirtual #97
950: ldc           #57
952: invokevirtual #58
955: invokevirtual #61
958: iload         28
960: ifne          967
963: iconst_1
964: goto          968
967: iconst_0
968: invokestatic  #62
971: new           #55
974: dup
975: invokespecial #56
978: ldc           #57
980: invokevirtual #58
983: aload         29
985: invokevirtual #58
988: ldc           #238
990: invokevirtual #58
993: invokevirtual #61
996: aload         29
998: ldc           #239
1000: invokestatic  #96
1003: new           #55
1006: dup
1007: invokespecial #56
1010: ldc           #57
1012: invokevirtual #58
1015: iload         31
1017: invokevirtual #59
1020: ldc           #60
1022: invokevirtual #58
1025: bipush        -36
1027: invokevirtual #59
1030: ldc           #57
1032: invokevirtual #58
1035: invokevirtual #61
1038: iload         31
1040: bipush        -36
1042: if_icmpne     1049
1045: iconst_1
1046: goto          1050
1049: iconst_0
1050: invokestatic  #62
1053: new           #55
1056: dup
1057: invokespecial #56
1060: ldc           #57
1062: invokevirtual #58
1065: iload         33
1067: invokevirtual #59
1070: ldc           #60
1072: invokevirtual #58
1075: iconst_0
1076: invokevirtual #59
1079: ldc           #57
1081: invokevirtual #58
1084: invokevirtual #61
1087: iload         33
1089: ifne          1096
1092: iconst_1
1093: goto          1097
1096: iconst_0
1097: invokestatic  #62
1100: new           #55
1103: dup
1104: invokespecial #56
1107: ldc           #57
1109: invokevirtual #58
1112: iload         34
1114: invokevirtual #59
1117: ldc           #60
1119: invokevirtual #58
1122: sipush        -3656
1125: invokevirtual #59
1128: ldc           #57
1130: invokevirtual #58
1133: invokevirtual #61
1136: iload         34
1138: sipush        -3656
1141: if_icmpne     1148
1144: iconst_1
1145: goto          1149
1148: iconst_0
1149: invokestatic  #62
1152: aload         35
1154: invokestatic  #10
1157: aload         36
1159: invokestatic  #10
1162: aload         37
1164: invokestatic  #10
1167: aload         39
1169: invokestatic  #10
1172: new           #55
1175: dup
1176: invokespecial #56
1179: ldc           #57
1181: invokevirtual #58
1184: iload         40
1186: invokevirtual #97
1189: ldc           #60
1191: invokevirtual #58
1194: iconst_1
1195: invokevirtual #97
1198: ldc           #57
1200: invokevirtual #58
1203: invokevirtual #61
1206: iload         40
1208: iconst_1
1209: if_icmpne     1216
1212: iconst_1
1213: goto          1217
1216: iconst_0
1217: invokestatic  #62
1220: aload         42
1222: invokestatic  #10
1225: aload         43
1227: invokestatic  #10
1230: aload         44
1232: invokestatic  #10
1235: new           #55
1238: dup
1239: invokespecial #56
1242: ldc           #57
1244: invokevirtual #58
1247: aload         47
1249: invokevirtual #58
1252: ldc           #94
1254: invokevirtual #58
1257: invokevirtual #61
1260: aload         47
1262: ldc           #95
1264: invokestatic  #96
1267: aload         48
1269: invokestatic  #10
1272: new           #55
1275: dup
1276: invokespecial #56
1279: ldc           #57
1281: invokevirtual #58
1284: iload         50
1286: invokevirtual #59
1289: ldc           #60
1291: invokevirtual #58
1294: iconst_0
1295: invokevirtual #59
1298: ldc           #57
1300: invokevirtual #58
1303: invokevirtual #61
1306: iload         50
1308: ifne          1315
1311: iconst_1
1312: goto          1316
1315: iconst_0
1316: invokestatic  #62
1319: aload         53
1321: invokestatic  #10
1324: aload         54
1326: invokestatic  #10
1329: aload         55
1331: invokestatic  #10
1334: aload         56
1336: invokestatic  #10
1339: aload         57
1341: invokestatic  #10
1344: aload         58
1346: invokestatic  #10
1349: aload         59
1351: invokestatic  #10
1354: aload         61
1356: invokestatic  #10
1359: new           #55
1362: dup
1363: invokespecial #56
1366: ldc           #57
1368: invokevirtual #58
1371: iload         62
1373: invokevirtual #97
1376: ldc           #60
1378: invokevirtual #58
1381: iconst_1
1382: invokevirtual #97
1385: ldc           #57
1387: invokevirtual #58
1390: invokevirtual #61
1393: iload         62
1395: iconst_1
1396: if_icmpne     1403
1399: iconst_1
1400: goto          1404
1403: iconst_0
1404: invokestatic  #62
1407: aload         64
1409: invokestatic  #10
1412: aload         65
1414: invokestatic  #10
1417: aload         66
1419: invokestatic  #10
1422: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test039
Start line: 1332
End line: 1346
Method source code: 
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSuffix("P0000-W00-00T00:00:-00.032");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #240
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_2
40: invokevirtual #45
43: astore_3
44: aload_2
45: iconst_0
46: invokevirtual #108
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #241
62: invokevirtual #132
65: astore        6
67: aload_2
68: invokestatic  #10
71: aload_3
72: invokestatic  #10
75: aload         4
77: invokestatic  #10
80: aload         5
82: invokestatic  #10
85: aload         6
87: invokestatic  #10
90: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test040
Start line: 1349
End line: 1368
Method source code: 
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendPrefix("Time");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendSeparator("13");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #242
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_2
40: invokevirtual #33
43: astore_3
44: aload_3
45: ldc           #34
47: ldc           #35
49: invokevirtual #20
52: astore        4
54: aload         4
56: ldc           #228
58: invokevirtual #196
61: astore        5
63: aload         4
65: ldc           #243
67: invokevirtual #37
70: astore        6
72: ldc           #43
74: invokestatic  #22
77: goto          82
80: astore        6
82: aload_2
83: invokestatic  #10
86: aload_3
87: invokestatic  #10
90: aload         4
92: invokestatic  #10
95: aload         5
97: invokestatic  #10
100: return
Exception table:
from    to  target type
63    77    80   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test041
Start line: 1371
End line: 1385
Method source code: 
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeparatorIfFieldsBefore("837");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #244
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_3
45: invokevirtual #245
48: astore        4
50: aload         4
52: invokevirtual #76
55: astore        5
57: aload         4
59: ldc           #246
61: invokevirtual #67
64: astore        6
66: aload_2
67: invokestatic  #10
70: aload_3
71: invokestatic  #10
74: aload         4
76: invokestatic  #10
79: aload         5
81: invokestatic  #10
84: aload         6
86: invokestatic  #10
89: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test042
Start line: 1388
End line: 1400
Method source code: 
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyFirst();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #247
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: invokevirtual #134
36: astore_2
37: aload_2
38: ldc           #42
40: invokevirtual #67
43: astore_3
44: aload_3
45: invokevirtual #139
48: astore        4
50: aload         4
52: invokevirtual #248
55: astore        5
57: aload_2
58: invokestatic  #10
61: aload_3
62: invokestatic  #10
65: aload         4
67: invokestatic  #10
70: aload         5
72: invokestatic  #10
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test043
Start line: 1403
End line: 1517
Method source code: 
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("months");
        java.lang.String[] strArray11 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal12 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology15);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period19 = period16.minusDays((int) (byte) 100);
        java.util.Locale locale21 = null;
        int int22 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period19, 999, locale21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period23.get(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period30 = period23.withField(durationFieldType28, 8);
        org.joda.time.Period period32 = period30.plusMonths((int) (short) 1);
        java.util.Locale locale34 = null;
        int int35 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period30, (-292275054), locale34);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal36 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology39);
        java.lang.String str41 = period40.toString();
        org.joda.time.Period period43 = period40.minusDays((int) (byte) 100);
        java.util.Locale locale45 = null;
        int int46 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period43, 999, locale45);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType50 = null;
        int int51 = period47.get(durationFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period54 = period47.withField(durationFieldType52, 8);
        org.joda.time.Period period56 = period54.plusMonths((int) (short) 1);
        java.util.Locale locale58 = null;
        int int59 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period54, (-292275054), locale58);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator62 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray11, (org.joda.time.format.PeriodPrinter) literal12, (org.joda.time.format.PeriodParser) literal36, true, true);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder65 = periodFormatterBuilder63.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter66 = periodFormatterBuilder65.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder68 = periodFormatterBuilder65.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter69 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter69.withLocale(locale70);
        boolean boolean72 = periodFormatter71.isParser();
        java.util.Locale locale73 = null;
        org.joda.time.format.PeriodFormatter periodFormatter74 = periodFormatter71.withLocale(locale73);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology78 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = gregorianChronology78.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone80 = gregorianChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gregorianChronology78.yearOfCentury();
        org.joda.time.Period period82 = new org.joda.time.Period((long) '4', 100L, periodType77, (org.joda.time.Chronology) gregorianChronology78);
        org.joda.time.format.PeriodFormatter periodFormatter83 = periodFormatter71.withParseType(periodType77);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder84 = periodFormatterBuilder65.append(periodFormatter83);
        org.joda.time.format.PeriodParser periodParser85 = periodFormatter83.getParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder86 = periodFormatterBuilder6.append((org.joda.time.format.PeriodPrinter) separator62, periodParser85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        java.util.Locale locale89 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int90 = separator62.countFieldsToPrint(readablePeriod87, 7968, locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(literal12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-0.090S" + "'", str17, "PT-0.090S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(literal36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT-0.090S" + "'", str41, "PT-0.090S");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder65);
        org.junit.Assert.assertNotNull(periodPrinter66);
        org.junit.Assert.assertNotNull(periodFormatterBuilder68);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(periodFormatter74);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(gregorianChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(periodFormatter83);
        org.junit.Assert.assertNotNull(periodFormatterBuilder84);
        org.junit.Assert.assertNotNull(periodParser85);
        org.junit.Assert.assertNotNull(periodFormatterBuilder86);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #249
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: ldc           #16
35: invokevirtual #17
38: astore_2
39: aload_1
40: invokevirtual #25
43: astore_3
44: aload_1
45: invokevirtual #26
48: astore        4
50: aload         4
52: ldc           #27
54: invokevirtual #28
57: astore        5
59: iconst_2
60: anewarray     #99
63: dup
64: iconst_0
65: ldc           #141
67: aastore
68: dup
69: iconst_1
70: ldc           #250
72: aastore
73: astore        6
75: getstatic     #78
78: astore        7
80: aconst_null
81: astore        8
83: new           #46
86: dup
87: ldc2_w        #79
90: ldc2_w        #81
93: aload         8
95: invokespecial #83
98: astore        9
100: aload         9
102: invokevirtual #84
105: astore        10
107: aload         9
109: bipush        100
111: invokevirtual #85
114: astore        11
116: aconst_null
117: astore        12
119: aload         7
121: aload         11
123: sipush        999
126: aload         12
128: invokevirtual #86
131: istore        13
133: getstatic     #8
136: astore        14
138: aload         14
140: iconst_m1
141: invokevirtual #9
144: astore        15
146: aconst_null
147: astore        16
149: aload         14
151: aload         16
153: invokevirtual #201
156: istore        17
158: invokestatic  #202
161: astore        18
163: aload         14
165: aload         18
167: bipush        8
169: invokevirtual #203
172: astore        19
174: aload         19
176: iconst_1
177: invokevirtual #251
180: astore        20
182: aconst_null
183: astore        21
185: aload         7
187: aload         19
189: ldc           #252
191: aload         21
193: invokevirtual #86
196: istore        22
198: getstatic     #78
201: astore        23
203: aconst_null
204: astore        24
206: new           #46
209: dup
210: ldc2_w        #79
213: ldc2_w        #81
216: aload         24
218: invokespecial #83
221: astore        25
223: aload         25
225: invokevirtual #84
228: astore        26
230: aload         25
232: bipush        100
234: invokevirtual #85
237: astore        27
239: aconst_null
240: astore        28
242: aload         23
244: aload         27
246: sipush        999
249: aload         28
251: invokevirtual #86
254: istore        29
256: getstatic     #8
259: astore        30
261: aload         30
263: iconst_m1
264: invokevirtual #9
267: astore        31
269: aconst_null
270: astore        32
272: aload         30
274: aload         32
276: invokevirtual #201
279: istore        33
281: invokestatic  #202
284: astore        34
286: aload         30
288: aload         34
290: bipush        8
292: invokevirtual #203
295: astore        35
297: aload         35
299: iconst_1
300: invokevirtual #251
303: astore        36
305: aconst_null
306: astore        37
308: aload         23
310: aload         35
312: ldc           #252
314: aload         37
316: invokevirtual #86
319: istore        38
321: new           #105
324: dup
325: ldc           #131
327: ldc           #253
329: aload         6
331: aload         7
333: aload         23
335: iconst_1
336: iconst_1
337: invokespecial #107
340: astore        39
342: new           #14
345: dup
346: invokespecial #15
349: astore        40
351: aload         40
353: ldc           #16
355: invokevirtual #17
358: astore        41
360: aload         41
362: invokevirtual #45
365: astore        42
367: aload         41
369: iconst_0
370: invokevirtual #108
373: astore        43
375: invokestatic  #12
378: astore        44
380: aconst_null
381: astore        45
383: aload         44
385: aload         45
387: invokevirtual #88
390: astore        46
392: aload         46
394: invokevirtual #89
397: istore        47
399: aconst_null
400: astore        48
402: aload         46
404: aload         48
406: invokevirtual #88
409: astore        49
411: invokestatic  #109
414: astore        50
416: invokestatic  #110
419: astore        51
421: aload         51
423: invokevirtual #111
426: astore        52
428: aload         51
430: invokevirtual #112
433: astore        53
435: aload         51
437: invokevirtual #113
440: astore        54
442: new           #46
445: dup
446: ldc2_w        #114
449: ldc2_w        #79
452: aload         50
454: aload         51
456: invokespecial #116
459: astore        55
461: aload         46
463: aload         50
465: invokevirtual #117
468: astore        56
470: aload         41
472: aload         56
474: invokevirtual #118
477: astore        57
479: aload         56
481: invokevirtual #119
484: astore        58
486: aload         5
488: aload         39
490: aload         58
492: invokevirtual #87
495: astore        59
497: aconst_null
498: astore        60
500: aconst_null
501: astore        61
503: aload         39
505: aload         60
507: sipush        7968
510: aload         61
512: invokevirtual #167
515: istore        62
517: ldc           #53
519: invokestatic  #22
522: goto          527
525: astore        62
527: aload_2
528: invokestatic  #10
531: aload_3
532: invokestatic  #10
535: aload         4
537: invokestatic  #10
540: aload         5
542: invokestatic  #10
545: aload         6
547: invokestatic  #10
550: aload         7
552: invokestatic  #10
555: new           #55
558: dup
559: invokespecial #56
562: ldc           #57
564: invokevirtual #58
567: aload         10
569: invokevirtual #58
572: ldc           #94
574: invokevirtual #58
577: invokevirtual #61
580: aload         10
582: ldc           #95
584: invokestatic  #96
587: aload         11
589: invokestatic  #10
592: new           #55
595: dup
596: invokespecial #56
599: ldc           #57
601: invokevirtual #58
604: iload         13
606: invokevirtual #59
609: ldc           #60
611: invokevirtual #58
614: iconst_0
615: invokevirtual #59
618: ldc           #57
620: invokevirtual #58
623: invokevirtual #61
626: iload         13
628: ifne          635
631: iconst_1
632: goto          636
635: iconst_0
636: invokestatic  #62
639: aload         14
641: invokestatic  #10
644: aload         15
646: invokestatic  #10
649: new           #55
652: dup
653: invokespecial #56
656: ldc           #57
658: invokevirtual #58
661: iload         17
663: invokevirtual #59
666: ldc           #60
668: invokevirtual #58
671: iconst_0
672: invokevirtual #59
675: ldc           #57
677: invokevirtual #58
680: invokevirtual #61
683: iload         17
685: ifne          692
688: iconst_1
689: goto          693
692: iconst_0
693: invokestatic  #62
696: aload         18
698: invokestatic  #10
701: aload         19
703: invokestatic  #10
706: aload         20
708: invokestatic  #10
711: new           #55
714: dup
715: invokespecial #56
718: ldc           #57
720: invokevirtual #58
723: iload         22
725: invokevirtual #59
728: ldc           #60
730: invokevirtual #58
733: iconst_0
734: invokevirtual #59
737: ldc           #57
739: invokevirtual #58
742: invokevirtual #61
745: iload         22
747: ifne          754
750: iconst_1
751: goto          755
754: iconst_0
755: invokestatic  #62
758: aload         23
760: invokestatic  #10
763: new           #55
766: dup
767: invokespecial #56
770: ldc           #57
772: invokevirtual #58
775: aload         26
777: invokevirtual #58
780: ldc           #94
782: invokevirtual #58
785: invokevirtual #61
788: aload         26
790: ldc           #95
792: invokestatic  #96
795: aload         27
797: invokestatic  #10
800: new           #55
803: dup
804: invokespecial #56
807: ldc           #57
809: invokevirtual #58
812: iload         29
814: invokevirtual #59
817: ldc           #60
819: invokevirtual #58
822: iconst_0
823: invokevirtual #59
826: ldc           #57
828: invokevirtual #58
831: invokevirtual #61
834: iload         29
836: ifne          843
839: iconst_1
840: goto          844
843: iconst_0
844: invokestatic  #62
847: aload         30
849: invokestatic  #10
852: aload         31
854: invokestatic  #10
857: new           #55
860: dup
861: invokespecial #56
864: ldc           #57
866: invokevirtual #58
869: iload         33
871: invokevirtual #59
874: ldc           #60
876: invokevirtual #58
879: iconst_0
880: invokevirtual #59
883: ldc           #57
885: invokevirtual #58
888: invokevirtual #61
891: iload         33
893: ifne          900
896: iconst_1
897: goto          901
900: iconst_0
901: invokestatic  #62
904: aload         34
906: invokestatic  #10
909: aload         35
911: invokestatic  #10
914: aload         36
916: invokestatic  #10
919: new           #55
922: dup
923: invokespecial #56
926: ldc           #57
928: invokevirtual #58
931: iload         38
933: invokevirtual #59
936: ldc           #60
938: invokevirtual #58
941: iconst_0
942: invokevirtual #59
945: ldc           #57
947: invokevirtual #58
950: invokevirtual #61
953: iload         38
955: ifne          962
958: iconst_1
959: goto          963
962: iconst_0
963: invokestatic  #62
966: aload         41
968: invokestatic  #10
971: aload         42
973: invokestatic  #10
976: aload         43
978: invokestatic  #10
981: aload         44
983: invokestatic  #10
986: aload         46
988: invokestatic  #10
991: new           #55
994: dup
995: invokespecial #56
998: ldc           #57
1000: invokevirtual #58
1003: iload         47
1005: invokevirtual #97
1008: ldc           #60
1010: invokevirtual #58
1013: iconst_1
1014: invokevirtual #97
1017: ldc           #57
1019: invokevirtual #58
1022: invokevirtual #61
1025: iload         47
1027: iconst_1
1028: if_icmpne     1035
1031: iconst_1
1032: goto          1036
1035: iconst_0
1036: invokestatic  #62
1039: aload         49
1041: invokestatic  #10
1044: aload         50
1046: invokestatic  #10
1049: aload         51
1051: invokestatic  #10
1054: aload         52
1056: invokestatic  #10
1059: aload         53
1061: invokestatic  #10
1064: aload         54
1066: invokestatic  #10
1069: aload         56
1071: invokestatic  #10
1074: aload         57
1076: invokestatic  #10
1079: aload         58
1081: invokestatic  #10
1084: aload         59
1086: invokestatic  #10
1089: return
Exception table:
from    to  target type
503   522   525   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test044
Start line: 1520
End line: 1537
Method source code: 
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.maximumParsedDigits(99);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSeparatorIfFieldsBefore("+07:32");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #254
19: aastore
20: invokevirtual #7
23: pop
24: new           #14
27: dup
28: invokespecial #15
31: astore_1
32: aload_1
33: invokevirtual #134
36: astore_2
37: aload_2
38: ldc           #42
40: invokevirtual #67
43: astore_3
44: aload_2
45: bipush        99
47: invokevirtual #213
50: astore        4
52: aload         4
54: ldc           #255
56: invokevirtual #67
59: astore        5
61: ldc           #21
63: invokestatic  #22
66: goto          71
69: astore        5
71: aload_2
72: invokestatic  #10
75: aload_3
76: invokestatic  #10
79: aload         4
81: invokestatic  #10
84: return
Exception table:
from    to  target type
52    66    69   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test045
Start line: 1540
End line: 1652
Method source code: 
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("months");
        java.lang.String[] strArray11 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal12 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology15);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period19 = period16.minusDays((int) (byte) 100);
        java.util.Locale locale21 = null;
        int int22 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period19, 999, locale21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period23.get(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period30 = period23.withField(durationFieldType28, 8);
        org.joda.time.Period period32 = period30.plusMonths((int) (short) 1);
        java.util.Locale locale34 = null;
        int int35 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period30, (-292275054), locale34);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal36 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology39);
        java.lang.String str41 = period40.toString();
        org.joda.time.Period period43 = period40.minusDays((int) (byte) 100);
        java.util.Locale locale45 = null;
        int int46 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period43, 999, locale45);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType50 = null;
        int int51 = period47.get(durationFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period54 = period47.withField(durationFieldType52, 8);
        org.joda.time.Period period56 = period54.plusMonths((int) (short) 1);
        java.util.Locale locale58 = null;
        int int59 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period54, (-292275054), locale58);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator62 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray11, (org.joda.time.format.PeriodPrinter) literal12, (org.joda.time.format.PeriodParser) literal36, true, true);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder65 = periodFormatterBuilder63.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter66 = periodFormatterBuilder65.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder68 = periodFormatterBuilder65.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter69 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter69.withLocale(locale70);
        boolean boolean72 = periodFormatter71.isParser();
        java.util.Locale locale73 = null;
        org.joda.time.format.PeriodFormatter periodFormatter74 = periodFormatter71.withLocale(locale73);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology78 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = gregorianChronology78.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone80 = gregorianChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gregorianChronology78.yearOfCentury();
        org.joda.time.Period period82 = new org.joda.time.Period((long) '4', 100L, periodType77, (org.joda.time.Chronology) gregorianChronology78);
        org.joda.time.format.PeriodFormatter periodFormatter83 = periodFormatter71.withParseType(periodType77);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder84 = periodFormatterBuilder65.append(periodFormatter83);
        org.joda.time.format.PeriodParser periodParser85 = periodFormatter83.getParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder86 = periodFormatterBuilder6.append((org.joda.time.format.PeriodPrinter) separator62, periodParser85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder89 = periodFormatterBuilder86.appendSeparator("months", "+00:00:00.008");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(literal12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-0.090S" + "'", str17, "PT-0.090S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(literal36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT-0.090S" + "'", str41, "PT-0.090S");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder65);
        org.junit.Assert.assertNotNull(periodPrinter66);
        org.junit.Assert.assertNotNull(periodFormatterBuilder68);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(periodFormatter74);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(gregorianChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(periodFormatter83);
        org.junit.Assert.assertNotNull(periodFormatterBuilder84);
        org.junit.Assert.assertNotNull(periodParser85);
        org.junit.Assert.assertNotNull(periodFormatterBuilder86);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #256
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: ldc           #27
55: invokevirtual #28
58: astore        5
60: iconst_2
61: anewarray     #99
64: dup
65: iconst_0
66: ldc           #141
68: aastore
69: dup
70: iconst_1
71: ldc           #250
73: aastore
74: astore        6
76: getstatic     #78
79: astore        7
81: aconst_null
82: astore        8
84: new           #46
87: dup
88: ldc2_w        #79
91: ldc2_w        #81
94: aload         8
96: invokespecial #83
99: astore        9
101: aload         9
103: invokevirtual #84
106: astore        10
108: aload         9
110: bipush        100
112: invokevirtual #85
115: astore        11
117: aconst_null
118: astore        12
120: aload         7
122: aload         11
124: sipush        999
127: aload         12
129: invokevirtual #86
132: istore        13
134: getstatic     #8
137: astore        14
139: aload         14
141: iconst_m1
142: invokevirtual #9
145: astore        15
147: aconst_null
148: astore        16
150: aload         14
152: aload         16
154: invokevirtual #201
157: istore        17
159: invokestatic  #202
162: astore        18
164: aload         14
166: aload         18
168: bipush        8
170: invokevirtual #203
173: astore        19
175: aload         19
177: iconst_1
178: invokevirtual #251
181: astore        20
183: aconst_null
184: astore        21
186: aload         7
188: aload         19
190: ldc           #252
192: aload         21
194: invokevirtual #86
197: istore        22
199: getstatic     #78
202: astore        23
204: aconst_null
205: astore        24
207: new           #46
210: dup
211: ldc2_w        #79
214: ldc2_w        #81
217: aload         24
219: invokespecial #83
222: astore        25
224: aload         25
226: invokevirtual #84
229: astore        26
231: aload         25
233: bipush        100
235: invokevirtual #85
238: astore        27
240: aconst_null
241: astore        28
243: aload         23
245: aload         27
247: sipush        999
250: aload         28
252: invokevirtual #86
255: istore        29
257: getstatic     #8
260: astore        30
262: aload         30
264: iconst_m1
265: invokevirtual #9
268: astore        31
270: aconst_null
271: astore        32
273: aload         30
275: aload         32
277: invokevirtual #201
280: istore        33
282: invokestatic  #202
285: astore        34
287: aload         30
289: aload         34
291: bipush        8
293: invokevirtual #203
296: astore        35
298: aload         35
300: iconst_1
301: invokevirtual #251
304: astore        36
306: aconst_null
307: astore        37
309: aload         23
311: aload         35
313: ldc           #252
315: aload         37
317: invokevirtual #86
320: istore        38
322: new           #105
325: dup
326: ldc           #131
328: ldc           #253
330: aload         6
332: aload         7
334: aload         23
336: iconst_1
337: iconst_1
338: invokespecial #107
341: astore        39
343: new           #14
346: dup
347: invokespecial #15
350: astore        40
352: aload         40
354: ldc           #16
356: invokevirtual #17
359: astore        41
361: aload         41
363: invokevirtual #45
366: astore        42
368: aload         41
370: iconst_0
371: invokevirtual #108
374: astore        43
376: invokestatic  #12
379: astore        44
381: aconst_null
382: astore        45
384: aload         44
386: aload         45
388: invokevirtual #88
391: astore        46
393: aload         46
395: invokevirtual #89
398: istore        47
400: aconst_null
401: astore        48
403: aload         46
405: aload         48
407: invokevirtual #88
410: astore        49
412: invokestatic  #109
415: astore        50
417: invokestatic  #110
420: astore        51
422: aload         51
424: invokevirtual #111
427: astore        52
429: aload         51
431: invokevirtual #112
434: astore        53
436: aload         51
438: invokevirtual #113
441: astore        54
443: new           #46
446: dup
447: ldc2_w        #114
450: ldc2_w        #79
453: aload         50
455: aload         51
457: invokespecial #116
460: astore        55
462: aload         46
464: aload         50
466: invokevirtual #117
469: astore        56
471: aload         41
473: aload         56
475: invokevirtual #118
478: astore        57
480: aload         56
482: invokevirtual #119
485: astore        58
487: aload         5
489: aload         39
491: aload         58
493: invokevirtual #87
496: astore        59
498: aload         59
500: ldc           #27
502: ldc_w         #257
505: invokevirtual #20
508: astore        60
510: ldc           #21
512: invokestatic  #22
515: goto          520
518: astore        60
520: aload_2
521: invokestatic  #10
524: aload_3
525: invokestatic  #10
528: aload         4
530: invokestatic  #10
533: aload         5
535: invokestatic  #10
538: aload         6
540: invokestatic  #10
543: aload         7
545: invokestatic  #10
548: new           #55
551: dup
552: invokespecial #56
555: ldc           #57
557: invokevirtual #58
560: aload         10
562: invokevirtual #58
565: ldc           #94
567: invokevirtual #58
570: invokevirtual #61
573: aload         10
575: ldc           #95
577: invokestatic  #96
580: aload         11
582: invokestatic  #10
585: new           #55
588: dup
589: invokespecial #56
592: ldc           #57
594: invokevirtual #58
597: iload         13
599: invokevirtual #59
602: ldc           #60
604: invokevirtual #58
607: iconst_0
608: invokevirtual #59
611: ldc           #57
613: invokevirtual #58
616: invokevirtual #61
619: iload         13
621: ifne          628
624: iconst_1
625: goto          629
628: iconst_0
629: invokestatic  #62
632: aload         14
634: invokestatic  #10
637: aload         15
639: invokestatic  #10
642: new           #55
645: dup
646: invokespecial #56
649: ldc           #57
651: invokevirtual #58
654: iload         17
656: invokevirtual #59
659: ldc           #60
661: invokevirtual #58
664: iconst_0
665: invokevirtual #59
668: ldc           #57
670: invokevirtual #58
673: invokevirtual #61
676: iload         17
678: ifne          685
681: iconst_1
682: goto          686
685: iconst_0
686: invokestatic  #62
689: aload         18
691: invokestatic  #10
694: aload         19
696: invokestatic  #10
699: aload         20
701: invokestatic  #10
704: new           #55
707: dup
708: invokespecial #56
711: ldc           #57
713: invokevirtual #58
716: iload         22
718: invokevirtual #59
721: ldc           #60
723: invokevirtual #58
726: iconst_0
727: invokevirtual #59
730: ldc           #57
732: invokevirtual #58
735: invokevirtual #61
738: iload         22
740: ifne          747
743: iconst_1
744: goto          748
747: iconst_0
748: invokestatic  #62
751: aload         23
753: invokestatic  #10
756: new           #55
759: dup
760: invokespecial #56
763: ldc           #57
765: invokevirtual #58
768: aload         26
770: invokevirtual #58
773: ldc           #94
775: invokevirtual #58
778: invokevirtual #61
781: aload         26
783: ldc           #95
785: invokestatic  #96
788: aload         27
790: invokestatic  #10
793: new           #55
796: dup
797: invokespecial #56
800: ldc           #57
802: invokevirtual #58
805: iload         29
807: invokevirtual #59
810: ldc           #60
812: invokevirtual #58
815: iconst_0
816: invokevirtual #59
819: ldc           #57
821: invokevirtual #58
824: invokevirtual #61
827: iload         29
829: ifne          836
832: iconst_1
833: goto          837
836: iconst_0
837: invokestatic  #62
840: aload         30
842: invokestatic  #10
845: aload         31
847: invokestatic  #10
850: new           #55
853: dup
854: invokespecial #56
857: ldc           #57
859: invokevirtual #58
862: iload         33
864: invokevirtual #59
867: ldc           #60
869: invokevirtual #58
872: iconst_0
873: invokevirtual #59
876: ldc           #57
878: invokevirtual #58
881: invokevirtual #61
884: iload         33
886: ifne          893
889: iconst_1
890: goto          894
893: iconst_0
894: invokestatic  #62
897: aload         34
899: invokestatic  #10
902: aload         35
904: invokestatic  #10
907: aload         36
909: invokestatic  #10
912: new           #55
915: dup
916: invokespecial #56
919: ldc           #57
921: invokevirtual #58
924: iload         38
926: invokevirtual #59
929: ldc           #60
931: invokevirtual #58
934: iconst_0
935: invokevirtual #59
938: ldc           #57
940: invokevirtual #58
943: invokevirtual #61
946: iload         38
948: ifne          955
951: iconst_1
952: goto          956
955: iconst_0
956: invokestatic  #62
959: aload         41
961: invokestatic  #10
964: aload         42
966: invokestatic  #10
969: aload         43
971: invokestatic  #10
974: aload         44
976: invokestatic  #10
979: aload         46
981: invokestatic  #10
984: new           #55
987: dup
988: invokespecial #56
991: ldc           #57
993: invokevirtual #58
996: iload         47
998: invokevirtual #97
1001: ldc           #60
1003: invokevirtual #58
1006: iconst_1
1007: invokevirtual #97
1010: ldc           #57
1012: invokevirtual #58
1015: invokevirtual #61
1018: iload         47
1020: iconst_1
1021: if_icmpne     1028
1024: iconst_1
1025: goto          1029
1028: iconst_0
1029: invokestatic  #62
1032: aload         49
1034: invokestatic  #10
1037: aload         50
1039: invokestatic  #10
1042: aload         51
1044: invokestatic  #10
1047: aload         52
1049: invokestatic  #10
1052: aload         53
1054: invokestatic  #10
1057: aload         54
1059: invokestatic  #10
1062: aload         56
1064: invokestatic  #10
1067: aload         57
1069: invokestatic  #10
1072: aload         58
1074: invokestatic  #10
1077: aload         59
1079: invokestatic  #10
1082: return
Exception table:
from    to  target type
498   515   518   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test046
Start line: 1655
End line: 1675
Method source code: 
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendHours();
        java.lang.Class<?> wildcardClass9 = periodFormatterBuilder7.getClass();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #258
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         7
74: invokevirtual #245
77: astore        8
79: aload         7
81: invokevirtual #259
84: astore        9
86: aload_2
87: invokestatic  #10
90: aload_3
91: invokestatic  #10
94: aload         4
96: invokestatic  #10
99: aload         5
101: invokestatic  #10
104: aload         6
106: invokestatic  #10
109: aload         7
111: invokestatic  #10
114: aload         8
116: invokestatic  #10
119: aload         9
121: invokestatic  #10
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test047
Start line: 1678
End line: 1766
Method source code: 
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        org.joda.time.ReadableInterval readableInterval49 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval48);
        org.joda.time.MutableInterval mutableInterval50 = readableInterval49.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval51 = null;
        org.joda.time.ReadableInterval readableInterval52 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval51);
        org.joda.time.MutableInterval mutableInterval53 = readableInterval52.toMutableInterval();
        boolean boolean54 = mutableInterval50.contains((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        org.joda.time.IllegalFieldValueException illegalFieldValueException57 = new org.joda.time.IllegalFieldValueException(dateTimeFieldType55, "PST");
        boolean boolean58 = mutableInterval53.equals((java.lang.Object) "PST");
        org.joda.time.DateTime dateTime59 = mutableInterval53.getStart();
        org.joda.time.MutableInterval mutableInterval60 = mutableInterval53.toMutableInterval();
        org.joda.time.Period period61 = mutableInterval53.toPeriod();
        java.util.Locale locale62 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int63 = separator28.calculatePrintedLength((org.joda.time.ReadablePeriod) period61, locale62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
        org.junit.Assert.assertNotNull(readableInterval49);
        org.junit.Assert.assertNotNull(mutableInterval50);
        org.junit.Assert.assertNotNull(readableInterval52);
        org.junit.Assert.assertNotNull(mutableInterval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableInterval60);
        org.junit.Assert.assertNotNull(period61);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #260
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: new           #14
173: dup
174: invokespecial #15
177: astore        17
179: aload         17
181: ldc           #16
183: invokevirtual #17
186: astore        18
188: aload         17
190: invokevirtual #25
193: astore        19
195: aload         17
197: invokevirtual #76
200: astore        20
202: aload         17
204: invokevirtual #77
207: astore        21
209: aload         17
211: ldc           #16
213: invokevirtual #17
216: astore        22
218: aload         17
220: ldc           #141
222: invokevirtual #28
225: astore        23
227: invokestatic  #12
230: astore        24
232: aconst_null
233: astore        25
235: aload         24
237: aload         25
239: invokevirtual #88
242: astore        26
244: aload         26
246: invokevirtual #89
249: istore        27
251: aconst_null
252: astore        28
254: aload         26
256: aload         28
258: invokevirtual #88
261: astore        29
263: aload         23
265: aload         29
267: invokevirtual #118
270: astore        30
272: aload         30
274: invokevirtual #142
277: astore        31
279: new           #164
282: dup
283: aload         16
285: aload         31
287: invokespecial #165
290: astore        32
292: aconst_null
293: astore        33
295: aload         33
297: invokestatic  #261
300: astore        34
302: aload         34
304: invokeinterface #262,  1
309: astore        35
311: aconst_null
312: astore        36
314: aload         36
316: invokestatic  #261
319: astore        37
321: aload         37
323: invokeinterface #262,  1
328: astore        38
330: aload         35
332: aload         38
334: invokevirtual #263
337: istore        39
339: invokestatic  #264
342: astore        40
344: new           #265
347: dup
348: aload         40
350: ldc_w         #266
353: invokespecial #267
356: astore        41
358: aload         38
360: ldc_w         #266
363: invokevirtual #268
366: istore        42
368: aload         38
370: invokevirtual #269
373: astore        43
375: aload         38
377: invokevirtual #270
380: astore        44
382: aload         38
384: invokevirtual #271
387: astore        45
389: aconst_null
390: astore        46
392: aload         16
394: aload         45
396: aload         46
398: invokevirtual #179
401: istore        47
403: ldc           #53
405: invokestatic  #22
408: goto          413
411: astore        47
413: aload_1
414: invokestatic  #10
417: aload_2
418: invokestatic  #10
421: aload         4
423: invokestatic  #10
426: new           #55
429: dup
430: invokespecial #56
433: ldc           #57
435: invokevirtual #58
438: iload         5
440: invokevirtual #97
443: ldc           #60
445: invokevirtual #58
448: iconst_1
449: invokevirtual #97
452: ldc           #57
454: invokevirtual #58
457: invokevirtual #61
460: iload         5
462: iconst_1
463: if_icmpne     470
466: iconst_1
467: goto          471
470: iconst_0
471: invokestatic  #62
474: aload         7
476: invokestatic  #10
479: aload         8
481: invokestatic  #10
484: aload         9
486: invokestatic  #10
489: new           #55
492: dup
493: invokespecial #56
496: ldc           #57
498: invokevirtual #58
501: aload         12
503: invokevirtual #58
506: ldc           #94
508: invokevirtual #58
511: invokevirtual #61
514: aload         12
516: ldc           #95
518: invokestatic  #96
521: aload         13
523: invokestatic  #10
526: new           #55
529: dup
530: invokespecial #56
533: ldc           #57
535: invokevirtual #58
538: iload         15
540: invokevirtual #59
543: ldc           #60
545: invokevirtual #58
548: iconst_0
549: invokevirtual #59
552: ldc           #57
554: invokevirtual #58
557: invokevirtual #61
560: iload         15
562: ifne          569
565: iconst_1
566: goto          570
569: iconst_0
570: invokestatic  #62
573: aload         18
575: invokestatic  #10
578: aload         19
580: invokestatic  #10
583: aload         20
585: invokestatic  #10
588: aload         21
590: invokestatic  #10
593: aload         22
595: invokestatic  #10
598: aload         23
600: invokestatic  #10
603: aload         24
605: invokestatic  #10
608: aload         26
610: invokestatic  #10
613: new           #55
616: dup
617: invokespecial #56
620: ldc           #57
622: invokevirtual #58
625: iload         27
627: invokevirtual #97
630: ldc           #60
632: invokevirtual #58
635: iconst_1
636: invokevirtual #97
639: ldc           #57
641: invokevirtual #58
644: invokevirtual #61
647: iload         27
649: iconst_1
650: if_icmpne     657
653: iconst_1
654: goto          658
657: iconst_0
658: invokestatic  #62
661: aload         29
663: invokestatic  #10
666: aload         30
668: invokestatic  #10
671: aload         31
673: invokestatic  #10
676: aload         34
678: invokestatic  #10
681: aload         35
683: invokestatic  #10
686: aload         37
688: invokestatic  #10
691: aload         38
693: invokestatic  #10
696: new           #55
699: dup
700: invokespecial #56
703: ldc           #57
705: invokevirtual #58
708: iload         39
710: invokevirtual #97
713: ldc           #60
715: invokevirtual #58
718: iconst_0
719: invokevirtual #97
722: ldc           #57
724: invokevirtual #58
727: invokevirtual #61
730: iload         39
732: ifne          739
735: iconst_1
736: goto          740
739: iconst_0
740: invokestatic  #62
743: aload         40
745: invokestatic  #10
748: new           #55
751: dup
752: invokespecial #56
755: ldc           #57
757: invokevirtual #58
760: iload         42
762: invokevirtual #97
765: ldc           #60
767: invokevirtual #58
770: iconst_0
771: invokevirtual #97
774: ldc           #57
776: invokevirtual #58
779: invokevirtual #61
782: iload         42
784: ifne          791
787: iconst_1
788: goto          792
791: iconst_0
792: invokestatic  #62
795: aload         43
797: invokestatic  #10
800: aload         44
802: invokestatic  #10
805: aload         45
807: invokestatic  #10
810: return
Exception table:
from    to  target type
392   408   411   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test048
Start line: 1769
End line: 1785
Method source code: 
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSuffix("P0000-W00-36T00:00:292275.053", "+00:00:00.024");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #272
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: ldc_w         #273
70: ldc_w         #274
73: invokevirtual #30
76: astore        7
78: aload_2
79: invokestatic  #10
82: aload_3
83: invokestatic  #10
86: aload         4
88: invokestatic  #10
91: aload         5
93: invokestatic  #10
96: aload         6
98: invokestatic  #10
101: aload         7
103: invokestatic  #10
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test049
Start line: 1788
End line: 1854
Method source code: 
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatterBuilder22.toFormatter();
        java.io.Writer writer24 = null;
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        int int26 = period25.getHours();
        org.joda.time.Period period28 = period25.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        mutablePeriod29.setWeeks((-28800000));
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology34);
        int int36 = period35.getMonths();
        java.lang.String str37 = period35.toString();
        org.joda.time.Period period39 = period35.plusHours(0);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) period35);
        mutablePeriod29.add((-292275054), 1338, 10, (int) (byte) 100, 315532800, 13, (-98), 3);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter23.printTo(writer24, (org.joda.time.ReadablePeriod) mutablePeriod29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT-0.090S" + "'", str37, "PT-0.090S");
        org.junit.Assert.assertNotNull(period39);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #275
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload_2
156: invokevirtual #245
159: astore        19
161: aload         19
163: invokevirtual #161
166: astore        20
168: aconst_null
169: astore        21
171: getstatic     #8
174: astore        22
176: aload         22
178: invokevirtual #216
181: istore        23
183: aload         22
185: iconst_0
186: invokevirtual #200
189: astore        24
191: aload         24
193: invokevirtual #205
196: astore        25
198: aload         25
200: ldc           #217
202: invokevirtual #207
205: aconst_null
206: astore        26
208: new           #46
211: dup
212: ldc2_w        #79
215: ldc2_w        #81
218: aload         26
220: invokespecial #83
223: astore        27
225: aload         27
227: invokevirtual #169
230: istore        28
232: aload         27
234: invokevirtual #84
237: astore        29
239: aload         27
241: iconst_0
242: invokevirtual #218
245: astore        30
247: aload         25
249: aload         27
251: invokevirtual #219
254: aload         25
256: ldc           #252
258: sipush        1338
261: bipush        10
263: bipush        100
265: ldc_w         #276
268: bipush        13
270: bipush        -98
272: iconst_3
273: invokevirtual #277
276: aload         20
278: aload         21
280: aload         25
282: invokevirtual #278
285: ldc           #53
287: invokestatic  #22
290: goto          295
293: astore        31
295: aload_2
296: invokestatic  #10
299: aload_3
300: invokestatic  #10
303: aload         4
305: invokestatic  #10
308: aload         5
310: invokestatic  #10
313: aload         7
315: invokestatic  #10
318: new           #55
321: dup
322: invokespecial #56
325: ldc           #57
327: invokevirtual #58
330: iload         8
332: invokevirtual #97
335: ldc           #60
337: invokevirtual #58
340: iconst_1
341: invokevirtual #97
344: ldc           #57
346: invokevirtual #58
349: invokevirtual #61
352: iload         8
354: iconst_1
355: if_icmpne     362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #62
366: aload         10
368: invokestatic  #10
371: aload         11
373: invokestatic  #10
376: aload         12
378: invokestatic  #10
381: aload         13
383: invokestatic  #10
386: aload         14
388: invokestatic  #10
391: aload         15
393: invokestatic  #10
396: aload         17
398: invokestatic  #10
401: aload         18
403: invokestatic  #10
406: aload         19
408: invokestatic  #10
411: aload         20
413: invokestatic  #10
416: aload         22
418: invokestatic  #10
421: new           #55
424: dup
425: invokespecial #56
428: ldc           #57
430: invokevirtual #58
433: iload         23
435: invokevirtual #59
438: ldc           #60
440: invokevirtual #58
443: iconst_0
444: invokevirtual #59
447: ldc           #57
449: invokevirtual #58
452: invokevirtual #61
455: iload         23
457: ifne          464
460: iconst_1
461: goto          465
464: iconst_0
465: invokestatic  #62
468: aload         24
470: invokestatic  #10
473: aload         25
475: invokestatic  #10
478: new           #55
481: dup
482: invokespecial #56
485: ldc           #57
487: invokevirtual #58
490: iload         28
492: invokevirtual #59
495: ldc           #60
497: invokevirtual #58
500: iconst_0
501: invokevirtual #59
504: ldc           #57
506: invokevirtual #58
509: invokevirtual #61
512: iload         28
514: ifne          521
517: iconst_1
518: goto          522
521: iconst_0
522: invokestatic  #62
525: new           #55
528: dup
529: invokespecial #56
532: ldc           #57
534: invokevirtual #58
537: aload         29
539: invokevirtual #58
542: ldc           #94
544: invokevirtual #58
547: invokevirtual #61
550: aload         29
552: ldc           #95
554: invokestatic  #96
557: aload         30
559: invokestatic  #10
562: return
Exception table:
from    to  target type
276   290   293   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test050
Start line: 1857
End line: 1872
Method source code: 
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparator("DurationField[halfdays]");
        periodFormatterBuilder0.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #279
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: ldc_w         #280
61: invokevirtual #37
64: astore        6
66: aload_1
67: invokevirtual #212
70: aload_2
71: invokestatic  #10
74: aload_3
75: invokestatic  #10
78: aload         4
80: invokestatic  #10
83: aload         5
85: invokestatic  #10
88: aload         6
90: invokestatic  #10
93: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test051
Start line: 1875
End line: 1938
Method source code: 
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        int int44 = period10.getYears();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #281
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: aload         6
274: invokevirtual #285
277: istore        32
279: aload_1
280: invokestatic  #10
283: new           #55
286: dup
287: invokespecial #56
290: ldc           #57
292: invokevirtual #58
295: iload_2
296: invokevirtual #59
299: ldc           #60
301: invokevirtual #58
304: iconst_0
305: invokevirtual #59
308: ldc           #57
310: invokevirtual #58
313: invokevirtual #61
316: iload_2
317: ifne          324
320: iconst_1
321: goto          325
324: iconst_0
325: invokestatic  #62
328: aload_3
329: invokestatic  #10
332: aload         4
334: invokestatic  #10
337: new           #55
340: dup
341: invokespecial #56
344: ldc           #57
346: invokevirtual #58
349: iload         7
351: invokevirtual #59
354: ldc           #60
356: invokevirtual #58
359: iconst_0
360: invokevirtual #59
363: ldc           #57
365: invokevirtual #58
368: invokevirtual #61
371: iload         7
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #62
384: new           #55
387: dup
388: invokespecial #56
391: ldc           #57
393: invokevirtual #58
396: aload         8
398: invokevirtual #58
401: ldc           #94
403: invokevirtual #58
406: invokevirtual #61
409: aload         8
411: ldc           #95
413: invokestatic  #96
416: aload         9
418: invokestatic  #10
421: aload         10
423: invokestatic  #10
426: aload         11
428: invokestatic  #10
431: aload         13
433: invokestatic  #10
436: aload         14
438: invokestatic  #10
441: aload         15
443: invokestatic  #10
446: aload         16
448: invokestatic  #10
451: aload         18
453: invokestatic  #10
456: new           #55
459: dup
460: invokespecial #56
463: ldc           #57
465: invokevirtual #58
468: iload         19
470: invokevirtual #97
473: ldc           #60
475: invokevirtual #58
478: iconst_1
479: invokevirtual #97
482: ldc           #57
484: invokevirtual #58
487: invokevirtual #61
490: iload         19
492: iconst_1
493: if_icmpne     500
496: iconst_1
497: goto          501
500: iconst_0
501: invokestatic  #62
504: aload         21
506: invokestatic  #10
509: aload         22
511: invokestatic  #10
514: aload         23
516: invokestatic  #10
519: aload         24
521: invokestatic  #10
524: aload         25
526: invokestatic  #10
529: aload         26
531: invokestatic  #10
534: aload         28
536: invokestatic  #10
539: aload         29
541: invokestatic  #10
544: aload         30
546: invokestatic  #10
549: new           #55
552: dup
553: invokespecial #56
556: ldc           #57
558: invokevirtual #58
561: aload         31
563: invokevirtual #58
566: ldc_w         #286
569: invokevirtual #58
572: invokevirtual #61
575: aload         31
577: ldc           #143
579: invokestatic  #96
582: new           #55
585: dup
586: invokespecial #56
589: ldc           #57
591: invokevirtual #58
594: iload         32
596: invokevirtual #59
599: ldc           #60
601: invokevirtual #58
604: iconst_0
605: invokevirtual #59
608: ldc           #57
610: invokevirtual #58
613: invokevirtual #61
616: iload         32
618: ifne          625
621: iconst_1
622: goto          626
625: iconst_0
626: invokestatic  #62
629: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test052
Start line: 1941
End line: 1966
Method source code: 
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendPrefix("2777", "DateTimeField[secondOfDay]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder10.appendSeparator("PT-0.090S", "+10:52");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #287
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         6
74: ldc_w         #288
77: ldc_w         #289
80: invokevirtual #41
83: astore        8
85: aload         8
87: ldc           #95
89: ldc_w         #290
92: invokevirtual #20
95: astore        9
97: ldc           #43
99: invokestatic  #22
102: goto          107
105: astore        9
107: aload_2
108: invokestatic  #10
111: aload_3
112: invokestatic  #10
115: aload         4
117: invokestatic  #10
120: aload         5
122: invokestatic  #10
125: aload         6
127: invokestatic  #10
130: aload         7
132: invokestatic  #10
135: aload         8
137: invokestatic  #10
140: return
Exception table:
from    to  target type
85   102   105   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test053
Start line: 1969
End line: 2006
Method source code: 
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder23 = periodFormatterBuilder21.minimumPrintedDigits(5258880);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder23);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #291
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload         18
157: ldc_w         #292
160: invokevirtual #151
163: astore        19
165: aload_2
166: invokestatic  #10
169: aload_3
170: invokestatic  #10
173: aload         4
175: invokestatic  #10
178: aload         5
180: invokestatic  #10
183: aload         7
185: invokestatic  #10
188: new           #55
191: dup
192: invokespecial #56
195: ldc           #57
197: invokevirtual #58
200: iload         8
202: invokevirtual #97
205: ldc           #60
207: invokevirtual #58
210: iconst_1
211: invokevirtual #97
214: ldc           #57
216: invokevirtual #58
219: invokevirtual #61
222: iload         8
224: iconst_1
225: if_icmpne     232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #62
236: aload         10
238: invokestatic  #10
241: aload         11
243: invokestatic  #10
246: aload         12
248: invokestatic  #10
251: aload         13
253: invokestatic  #10
256: aload         14
258: invokestatic  #10
261: aload         15
263: invokestatic  #10
266: aload         17
268: invokestatic  #10
271: aload         18
273: invokestatic  #10
276: aload         19
278: invokestatic  #10
281: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test054
Start line: 2009
End line: 2030
Method source code: 
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendLiteral("8");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder4.appendSuffix("eras", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #293
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         4
60: ldc_w         #294
63: invokevirtual #28
66: astore        6
68: aload         4
70: ldc_w         #295
73: ldc           #74
75: invokevirtual #30
78: astore        7
80: ldc           #31
82: invokestatic  #22
85: goto          90
88: astore        7
90: aload_2
91: invokestatic  #10
94: aload_3
95: invokestatic  #10
98: aload         4
100: invokestatic  #10
103: aload         5
105: invokestatic  #10
108: aload         6
110: invokestatic  #10
113: return
Exception table:
from    to  target type
68    85    88   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test055
Start line: 2033
End line: 2139
Method source code: 
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.joda.time.format.PeriodFormatterBuilder.Literal literal0 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology3);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period7 = period4.minusDays((int) (byte) 100);
        java.util.Locale locale9 = null;
        int int10 = literal0.countFieldsToPrint((org.joda.time.ReadablePeriod) period7, 999, locale9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period11.get(durationFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period18 = period11.withField(durationFieldType16, 8);
        org.joda.time.Period period20 = period18.plusMonths((int) (short) 1);
        java.util.Locale locale22 = null;
        int int23 = literal0.countFieldsToPrint((org.joda.time.ReadablePeriod) period18, (-292275054), locale22);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder24 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = periodFormatterBuilder24.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder24.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = periodFormatterBuilder24.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder24.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder24.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder24.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter34 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale35 = null;
        org.joda.time.format.PeriodFormatter periodFormatter36 = periodFormatter34.withLocale(locale35);
        boolean boolean37 = periodFormatter36.isParser();
        java.util.Locale locale38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter36.withLocale(locale38);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder40 = periodFormatterBuilder33.append(periodFormatter39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatterBuilder40.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter42 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal0, periodParser41);
        java.lang.StringBuffer stringBuffer43 = null;
        org.joda.time.chrono.GregorianChronology gregorianChronology44 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.DurationField durationField45 = gregorianChronology44.seconds();
        org.joda.time.Chronology chronology46 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology) gregorianChronology44);
        org.joda.time.DateTimeField dateTimeField47 = gregorianChronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology44.millisOfSecond();
        org.joda.time.Period period49 = org.joda.time.Period.ZERO;
        int int50 = period49.getHours();
        org.joda.time.Period period52 = period49.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod53 = period52.toMutablePeriod();
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType57 = org.joda.time.DateTimeUtils.getPeriodType(periodType56);
        org.joda.time.Period period58 = new org.joda.time.Period(100L, (long) (short) -1, periodType56);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.weeks();
        boolean boolean60 = periodType56.isSupported(durationFieldType59);
        mutablePeriod53.add(durationFieldType59, (int) (byte) 100);
        java.lang.String str63 = mutablePeriod53.toString();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.years();
        mutablePeriod53.set(durationFieldType64, (int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.halfdays();
        mutablePeriod53.set(durationFieldType67, (int) (short) 0);
        int[] intArray72 = gregorianChronology44.get((org.joda.time.ReadablePeriod) mutablePeriod53, 13L, (long) 23);
        java.util.Locale locale73 = null;
        // The following exception was thrown during execution in test generation
        try {
            literal0.printTo(stringBuffer43, (org.joda.time.ReadablePeriod) mutablePeriod53, locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(literal0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT-0.090S" + "'", str5, "PT-0.090S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder28);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNotNull(periodFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatterBuilder40);
        org.junit.Assert.assertNotNull(periodParser41);
        org.junit.Assert.assertNotNull(gregorianChronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "P100W" + "'", str63, "P100W");
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 10]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #296
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #78
28: astore_1
29: aconst_null
30: astore_2
31: new           #46
34: dup
35: ldc2_w        #79
38: ldc2_w        #81
41: aload_2
42: invokespecial #83
45: astore_3
46: aload_3
47: invokevirtual #84
50: astore        4
52: aload_3
53: bipush        100
55: invokevirtual #85
58: astore        5
60: aconst_null
61: astore        6
63: aload_1
64: aload         5
66: sipush        999
69: aload         6
71: invokevirtual #86
74: istore        7
76: getstatic     #8
79: astore        8
81: aload         8
83: iconst_m1
84: invokevirtual #9
87: astore        9
89: aconst_null
90: astore        10
92: aload         8
94: aload         10
96: invokevirtual #201
99: istore        11
101: invokestatic  #202
104: astore        12
106: aload         8
108: aload         12
110: bipush        8
112: invokevirtual #203
115: astore        13
117: aload         13
119: iconst_1
120: invokevirtual #251
123: astore        14
125: aconst_null
126: astore        15
128: aload_1
129: aload         13
131: ldc           #252
133: aload         15
135: invokevirtual #86
138: istore        16
140: new           #14
143: dup
144: invokespecial #15
147: astore        17
149: aload         17
151: ldc           #16
153: invokevirtual #17
156: astore        18
158: aload         17
160: invokevirtual #25
163: astore        19
165: aload         17
167: invokevirtual #76
170: astore        20
172: aload         17
174: invokevirtual #77
177: astore        21
179: aload         17
181: ldc           #16
183: invokevirtual #17
186: astore        22
188: aload         17
190: ldc           #141
192: invokevirtual #28
195: astore        23
197: invokestatic  #12
200: astore        24
202: aconst_null
203: astore        25
205: aload         24
207: aload         25
209: invokevirtual #88
212: astore        26
214: aload         26
216: invokevirtual #89
219: istore        27
221: aconst_null
222: astore        28
224: aload         26
226: aload         28
228: invokevirtual #88
231: astore        29
233: aload         23
235: aload         29
237: invokevirtual #118
240: astore        30
242: aload         30
244: invokevirtual #142
247: astore        31
249: new           #164
252: dup
253: aload_1
254: aload         31
256: invokespecial #165
259: astore        32
261: aconst_null
262: astore        33
264: invokestatic  #222
267: astore        34
269: aload         34
271: invokevirtual #224
274: astore        35
276: aload         34
278: invokestatic  #297
281: astore        36
283: aload         34
285: invokevirtual #298
288: astore        37
290: aload         34
292: invokevirtual #299
295: astore        38
297: getstatic     #8
300: astore        39
302: aload         39
304: invokevirtual #216
307: istore        40
309: aload         39
311: iconst_0
312: invokevirtual #200
315: astore        41
317: aload         41
319: invokevirtual #205
322: astore        42
324: invokestatic  #171
327: astore        43
329: aload         43
331: invokestatic  #172
334: astore        44
336: new           #46
339: dup
340: ldc2_w        #79
343: ldc2_w        #173
346: aload         43
348: invokespecial #175
351: astore        45
353: invokestatic  #176
356: astore        46
358: aload         43
360: aload         46
362: invokevirtual #177
365: istore        47
367: aload         42
369: aload         46
371: bipush        100
373: invokevirtual #226
376: aload         42
378: invokevirtual #235
381: astore        48
383: invokestatic  #300
386: astore        49
388: aload         42
390: aload         49
392: iconst_m1
393: invokevirtual #301
396: invokestatic  #302
399: astore        50
401: aload         42
403: aload         50
405: iconst_0
406: invokevirtual #301
409: aload         34
411: aload         42
413: ldc2_w        #303
416: ldc2_w        #305
419: invokevirtual #307
422: astore        51
424: aconst_null
425: astore        52
427: aload_1
428: aload         33
430: aload         42
432: aload         52
434: invokevirtual #308
437: ldc           #53
439: invokestatic  #22
442: goto          447
445: astore        53
447: aload_1
448: invokestatic  #10
451: new           #55
454: dup
455: invokespecial #56
458: ldc           #57
460: invokevirtual #58
463: aload         4
465: invokevirtual #58
468: ldc           #94
470: invokevirtual #58
473: invokevirtual #61
476: aload         4
478: ldc           #95
480: invokestatic  #96
483: aload         5
485: invokestatic  #10
488: new           #55
491: dup
492: invokespecial #56
495: ldc           #57
497: invokevirtual #58
500: iload         7
502: invokevirtual #59
505: ldc           #60
507: invokevirtual #58
510: iconst_0
511: invokevirtual #59
514: ldc           #57
516: invokevirtual #58
519: invokevirtual #61
522: iload         7
524: ifne          531
527: iconst_1
528: goto          532
531: iconst_0
532: invokestatic  #62
535: aload         8
537: invokestatic  #10
540: aload         9
542: invokestatic  #10
545: new           #55
548: dup
549: invokespecial #56
552: ldc           #57
554: invokevirtual #58
557: iload         11
559: invokevirtual #59
562: ldc           #60
564: invokevirtual #58
567: iconst_0
568: invokevirtual #59
571: ldc           #57
573: invokevirtual #58
576: invokevirtual #61
579: iload         11
581: ifne          588
584: iconst_1
585: goto          589
588: iconst_0
589: invokestatic  #62
592: aload         12
594: invokestatic  #10
597: aload         13
599: invokestatic  #10
602: aload         14
604: invokestatic  #10
607: new           #55
610: dup
611: invokespecial #56
614: ldc           #57
616: invokevirtual #58
619: iload         16
621: invokevirtual #59
624: ldc           #60
626: invokevirtual #58
629: iconst_0
630: invokevirtual #59
633: ldc           #57
635: invokevirtual #58
638: invokevirtual #61
641: iload         16
643: ifne          650
646: iconst_1
647: goto          651
650: iconst_0
651: invokestatic  #62
654: aload         18
656: invokestatic  #10
659: aload         19
661: invokestatic  #10
664: aload         20
666: invokestatic  #10
669: aload         21
671: invokestatic  #10
674: aload         22
676: invokestatic  #10
679: aload         23
681: invokestatic  #10
684: aload         24
686: invokestatic  #10
689: aload         26
691: invokestatic  #10
694: new           #55
697: dup
698: invokespecial #56
701: ldc           #57
703: invokevirtual #58
706: iload         27
708: invokevirtual #97
711: ldc           #60
713: invokevirtual #58
716: iconst_1
717: invokevirtual #97
720: ldc           #57
722: invokevirtual #58
725: invokevirtual #61
728: iload         27
730: iconst_1
731: if_icmpne     738
734: iconst_1
735: goto          739
738: iconst_0
739: invokestatic  #62
742: aload         29
744: invokestatic  #10
747: aload         30
749: invokestatic  #10
752: aload         31
754: invokestatic  #10
757: aload         34
759: invokestatic  #10
762: aload         35
764: invokestatic  #10
767: aload         36
769: invokestatic  #10
772: aload         37
774: invokestatic  #10
777: aload         38
779: invokestatic  #10
782: aload         39
784: invokestatic  #10
787: new           #55
790: dup
791: invokespecial #56
794: ldc           #57
796: invokevirtual #58
799: iload         40
801: invokevirtual #59
804: ldc           #60
806: invokevirtual #58
809: iconst_0
810: invokevirtual #59
813: ldc           #57
815: invokevirtual #58
818: invokevirtual #61
821: iload         40
823: ifne          830
826: iconst_1
827: goto          831
830: iconst_0
831: invokestatic  #62
834: aload         41
836: invokestatic  #10
839: aload         42
841: invokestatic  #10
844: aload         43
846: invokestatic  #10
849: aload         44
851: invokestatic  #10
854: aload         46
856: invokestatic  #10
859: new           #55
862: dup
863: invokespecial #56
866: ldc           #57
868: invokevirtual #58
871: iload         47
873: invokevirtual #97
876: ldc           #60
878: invokevirtual #58
881: iconst_0
882: invokevirtual #97
885: ldc           #57
887: invokevirtual #58
890: invokevirtual #61
893: iload         47
895: ifne          902
898: iconst_1
899: goto          903
902: iconst_0
903: invokestatic  #62
906: new           #55
909: dup
910: invokespecial #56
913: ldc           #57
915: invokevirtual #58
918: aload         48
920: invokevirtual #58
923: ldc           #238
925: invokevirtual #58
928: invokevirtual #61
931: aload         48
933: ldc           #239
935: invokestatic  #96
938: aload         49
940: invokestatic  #10
943: aload         50
945: invokestatic  #10
948: aload         51
950: invokestatic  #10
953: aload         51
955: invokestatic  #127
958: ldc_w         #309
961: invokestatic  #129
964: return
Exception table:
from    to  target type
427   442   445   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test056
Start line: 2142
End line: 2211
Method source code: 
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatterBuilder22.toFormatter();
        java.lang.StringBuffer stringBuffer24 = null;
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        int int26 = period25.getHours();
        org.joda.time.Period period28 = period25.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType33 = org.joda.time.DateTimeUtils.getPeriodType(periodType32);
        org.joda.time.Period period34 = new org.joda.time.Period(100L, (long) (short) -1, periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weeks();
        boolean boolean36 = periodType32.isSupported(durationFieldType35);
        mutablePeriod29.add(durationFieldType35, (int) (byte) 100);
        mutablePeriod29.addSeconds((int) (short) -1);
        mutablePeriod29.addHours(292278993);
        mutablePeriod29.setDays((int) (byte) 0);
        mutablePeriod29.setWeeks(2);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter23.printTo(stringBuffer24, (org.joda.time.ReadablePeriod) mutablePeriod29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #310
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload_2
156: invokevirtual #245
159: astore        19
161: aload         19
163: invokevirtual #161
166: astore        20
168: aconst_null
169: astore        21
171: getstatic     #8
174: astore        22
176: aload         22
178: invokevirtual #216
181: istore        23
183: aload         22
185: iconst_0
186: invokevirtual #200
189: astore        24
191: aload         24
193: invokevirtual #205
196: astore        25
198: invokestatic  #171
201: astore        26
203: aload         26
205: invokestatic  #172
208: astore        27
210: new           #46
213: dup
214: ldc2_w        #79
217: ldc2_w        #173
220: aload         26
222: invokespecial #175
225: astore        28
227: invokestatic  #176
230: astore        29
232: aload         26
234: aload         29
236: invokevirtual #177
239: istore        30
241: aload         25
243: aload         29
245: bipush        100
247: invokevirtual #226
250: aload         25
252: iconst_m1
253: invokevirtual #311
256: aload         25
258: ldc           #220
260: invokevirtual #312
263: aload         25
265: iconst_0
266: invokevirtual #313
269: aload         25
271: iconst_2
272: invokevirtual #207
275: aload         20
277: aload         21
279: aload         25
281: invokevirtual #314
284: ldc           #53
286: invokestatic  #22
289: goto          294
292: astore        31
294: aload_2
295: invokestatic  #10
298: aload_3
299: invokestatic  #10
302: aload         4
304: invokestatic  #10
307: aload         5
309: invokestatic  #10
312: aload         7
314: invokestatic  #10
317: new           #55
320: dup
321: invokespecial #56
324: ldc           #57
326: invokevirtual #58
329: iload         8
331: invokevirtual #97
334: ldc           #60
336: invokevirtual #58
339: iconst_1
340: invokevirtual #97
343: ldc           #57
345: invokevirtual #58
348: invokevirtual #61
351: iload         8
353: iconst_1
354: if_icmpne     361
357: iconst_1
358: goto          362
361: iconst_0
362: invokestatic  #62
365: aload         10
367: invokestatic  #10
370: aload         11
372: invokestatic  #10
375: aload         12
377: invokestatic  #10
380: aload         13
382: invokestatic  #10
385: aload         14
387: invokestatic  #10
390: aload         15
392: invokestatic  #10
395: aload         17
397: invokestatic  #10
400: aload         18
402: invokestatic  #10
405: aload         19
407: invokestatic  #10
410: aload         20
412: invokestatic  #10
415: aload         22
417: invokestatic  #10
420: new           #55
423: dup
424: invokespecial #56
427: ldc           #57
429: invokevirtual #58
432: iload         23
434: invokevirtual #59
437: ldc           #60
439: invokevirtual #58
442: iconst_0
443: invokevirtual #59
446: ldc           #57
448: invokevirtual #58
451: invokevirtual #61
454: iload         23
456: ifne          463
459: iconst_1
460: goto          464
463: iconst_0
464: invokestatic  #62
467: aload         24
469: invokestatic  #10
472: aload         25
474: invokestatic  #10
477: aload         26
479: invokestatic  #10
482: aload         27
484: invokestatic  #10
487: aload         29
489: invokestatic  #10
492: new           #55
495: dup
496: invokespecial #56
499: ldc           #57
501: invokevirtual #58
504: iload         30
506: invokevirtual #97
509: ldc           #60
511: invokevirtual #58
514: iconst_0
515: invokevirtual #97
518: ldc           #57
520: invokevirtual #58
523: invokevirtual #61
526: iload         30
528: ifne          535
531: iconst_1
532: goto          536
535: iconst_0
536: invokestatic  #62
539: return
Exception table:
from    to  target type
275   289   292   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test057
Start line: 2214
End line: 2232
Method source code: 
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeconds();
        jodaTimePermission1.checkGuard((java.lang.Object) periodFormatterBuilder6);
        java.lang.String str11 = jodaTimePermission1.getName();
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Invalid format: \"PeriodType[YearDay]\"" + "'", str11, "Invalid format: \"PeriodType[YearDay]\"");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #315
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #317
32: invokespecial #318
35: astore_1
36: new           #14
39: dup
40: invokespecial #15
43: astore_2
44: aload_2
45: ldc           #16
47: invokevirtual #17
50: astore_3
51: aload_2
52: invokevirtual #25
55: astore        4
57: aload_2
58: invokevirtual #39
61: astore        5
63: aload         5
65: ldc_w         #319
68: invokevirtual #196
71: astore        6
73: aload         5
75: invokevirtual #320
78: astore        7
80: aload_1
81: aload         5
83: invokevirtual #321
86: aload_1
87: invokevirtual #322
90: astore        8
92: aload_3
93: invokestatic  #10
96: aload         4
98: invokestatic  #10
101: aload         5
103: invokestatic  #10
106: aload         6
108: invokestatic  #10
111: aload         7
113: invokestatic  #10
116: new           #55
119: dup
120: invokespecial #56
123: ldc           #57
125: invokevirtual #58
128: aload         8
130: invokevirtual #58
133: ldc_w         #323
136: invokevirtual #58
139: invokevirtual #61
142: aload         8
144: ldc_w         #317
147: invokestatic  #96
150: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test058
Start line: 2235
End line: 2269
Method source code: 
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.format.PeriodFormatter periodFormatter19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder18.append(periodFormatter19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No formatter supplied");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #324
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: aload         14
133: aload         15
135: invokevirtual #118
138: astore        16
140: ldc_w         #325
143: invokestatic  #22
146: goto          151
149: astore        16
151: aload_2
152: invokestatic  #10
155: aload_3
156: invokestatic  #10
159: aload         4
161: invokestatic  #10
164: aload         5
166: invokestatic  #10
169: aload         6
171: invokestatic  #10
174: new           #55
177: dup
178: invokespecial #56
181: ldc           #57
183: invokevirtual #58
186: aload         9
188: invokevirtual #58
191: ldc           #94
193: invokevirtual #58
196: invokevirtual #61
199: aload         9
201: ldc           #95
203: invokestatic  #96
206: aload         10
208: invokestatic  #10
211: new           #55
214: dup
215: invokespecial #56
218: ldc           #57
220: invokevirtual #58
223: iload         12
225: invokevirtual #59
228: ldc           #60
230: invokevirtual #58
233: iconst_0
234: invokevirtual #59
237: ldc           #57
239: invokevirtual #58
242: invokevirtual #61
245: iload         12
247: ifne          254
250: iconst_1
251: goto          255
254: iconst_0
255: invokestatic  #62
258: aload         14
260: invokestatic  #10
263: return
Exception table:
from    to  target type
131   146   149   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test059
Start line: 2272
End line: 2286
Method source code: 
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("2024-05-15T11:18:09.344+00:00:00.010", "837");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #326
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #245
56: astore        5
58: aload         4
60: ldc_w         #327
63: ldc           #246
65: invokevirtual #41
68: astore        6
70: aload_2
71: invokestatic  #10
74: aload_3
75: invokestatic  #10
78: aload         4
80: invokestatic  #10
83: aload         5
85: invokestatic  #10
88: aload         6
90: invokestatic  #10
93: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test060
Start line: 2289
End line: 2305
Method source code: 
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("2024-05-15T11:17:19.237+00:00:00.010");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #328
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: iconst_0
59: invokevirtual #108
62: astore        6
64: aload_1
65: ldc           #159
67: invokevirtual #28
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test061
Start line: 2308
End line: 2324
Method source code: 
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatterBuilder6.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodParser7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #329
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #71
56: astore        5
58: aload         5
60: invokevirtual #142
63: astore        6
65: aload         5
67: invokevirtual #72
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test062
Start line: 2327
End line: 2347
Method source code: 
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #330
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         7
74: invokevirtual #26
77: astore        8
79: aload         7
81: invokevirtual #77
84: astore        9
86: aload_2
87: invokestatic  #10
90: aload_3
91: invokestatic  #10
94: aload         4
96: invokestatic  #10
99: aload         5
101: invokestatic  #10
104: aload         6
106: invokestatic  #10
109: aload         7
111: invokestatic  #10
114: aload         8
116: invokestatic  #10
119: aload         9
121: invokestatic  #10
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test063
Start line: 2350
End line: 2419
Method source code: 
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter12.isParser();
        java.util.Locale locale16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter12.withLocale(locale16);
        org.joda.time.format.PeriodParser periodParser18 = periodFormatter12.getParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder8.append(periodFormatter12);
        java.io.Writer writer20 = null;
        org.joda.time.Period period22 = org.joda.time.Period.millis(1);
        int int23 = period22.getMonths();
        int int24 = period22.size();
        org.joda.time.Period period26 = period22.withDays((int) (byte) 100);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = period27.get(durationFieldType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period34 = period27.withField(durationFieldType32, 8);
        java.lang.String str35 = durationFieldType32.getName();
        org.joda.time.Period period37 = period22.withField(durationFieldType32, 1);
        org.joda.time.Period period39 = period22.minusDays(10);
        org.joda.time.Period period41 = period22.plusWeeks((int) (short) 100);
        org.joda.time.Seconds seconds42 = period41.toStandardSeconds();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter12.printTo(writer20, (org.joda.time.ReadablePeriod) period41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodParser18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "seconds" + "'", str35, "seconds");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(seconds42);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #331
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: invokestatic  #12
88: astore        9
90: aconst_null
91: astore        10
93: aload         9
95: aload         10
97: invokevirtual #88
100: astore        11
102: aload         9
104: invokevirtual #89
107: istore        12
109: aconst_null
110: astore        13
112: aload         9
114: aload         13
116: invokevirtual #88
119: astore        14
121: aload         9
123: invokevirtual #119
126: astore        15
128: aload         6
130: aload         9
132: invokevirtual #118
135: astore        16
137: aconst_null
138: astore        17
140: iconst_1
141: invokestatic  #168
144: astore        18
146: aload         18
148: invokevirtual #169
151: istore        19
153: aload         18
155: invokevirtual #170
158: istore        20
160: aload         18
162: bipush        100
164: invokevirtual #200
167: astore        21
169: getstatic     #8
172: astore        22
174: aload         22
176: iconst_m1
177: invokevirtual #9
180: astore        23
182: aconst_null
183: astore        24
185: aload         22
187: aload         24
189: invokevirtual #201
192: istore        25
194: invokestatic  #202
197: astore        26
199: aload         22
201: aload         26
203: bipush        8
205: invokevirtual #203
208: astore        27
210: aload         26
212: invokevirtual #204
215: astore        28
217: aload         18
219: aload         26
221: iconst_1
222: invokevirtual #203
225: astore        29
227: aload         18
229: bipush        10
231: invokevirtual #85
234: astore        30
236: aload         18
238: bipush        100
240: invokevirtual #334
243: astore        31
245: aload         31
247: invokevirtual #335
250: astore        32
252: aload         9
254: aload         17
256: aload         31
258: invokevirtual #278
261: ldc           #53
263: invokestatic  #22
266: goto          271
269: astore        33
271: aload_2
272: invokestatic  #10
275: aload_3
276: invokestatic  #10
279: aload         4
281: invokestatic  #10
284: aload         5
286: invokestatic  #10
289: aload         6
291: invokestatic  #10
294: aload         7
296: invokestatic  #10
299: aload         8
301: invokestatic  #10
304: aload         9
306: invokestatic  #10
309: aload         11
311: invokestatic  #10
314: new           #55
317: dup
318: invokespecial #56
321: ldc           #57
323: invokevirtual #58
326: iload         12
328: invokevirtual #97
331: ldc           #60
333: invokevirtual #58
336: iconst_1
337: invokevirtual #97
340: ldc           #57
342: invokevirtual #58
345: invokevirtual #61
348: iload         12
350: iconst_1
351: if_icmpne     358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #62
362: aload         14
364: invokestatic  #10
367: aload         15
369: invokestatic  #10
372: aload         16
374: invokestatic  #10
377: aload         18
379: invokestatic  #10
382: new           #55
385: dup
386: invokespecial #56
389: ldc           #57
391: invokevirtual #58
394: iload         19
396: invokevirtual #59
399: ldc           #60
401: invokevirtual #58
404: iconst_0
405: invokevirtual #59
408: ldc           #57
410: invokevirtual #58
413: invokevirtual #61
416: iload         19
418: ifne          425
421: iconst_1
422: goto          426
425: iconst_0
426: invokestatic  #62
429: new           #55
432: dup
433: invokespecial #56
436: ldc           #57
438: invokevirtual #58
441: iload         20
443: invokevirtual #59
446: ldc           #60
448: invokevirtual #58
451: bipush        8
453: invokevirtual #59
456: ldc           #57
458: invokevirtual #58
461: invokevirtual #61
464: iload         20
466: bipush        8
468: if_icmpne     475
471: iconst_1
472: goto          476
475: iconst_0
476: invokestatic  #62
479: aload         21
481: invokestatic  #10
484: aload         22
486: invokestatic  #10
489: aload         23
491: invokestatic  #10
494: new           #55
497: dup
498: invokespecial #56
501: ldc           #57
503: invokevirtual #58
506: iload         25
508: invokevirtual #59
511: ldc           #60
513: invokevirtual #58
516: iconst_0
517: invokevirtual #59
520: ldc           #57
522: invokevirtual #58
525: invokevirtual #61
528: iload         25
530: ifne          537
533: iconst_1
534: goto          538
537: iconst_0
538: invokestatic  #62
541: aload         26
543: invokestatic  #10
546: aload         27
548: invokestatic  #10
551: new           #55
554: dup
555: invokespecial #56
558: ldc           #57
560: invokevirtual #58
563: aload         28
565: invokevirtual #58
568: ldc           #209
570: invokevirtual #58
573: invokevirtual #61
576: aload         28
578: ldc           #210
580: invokestatic  #96
583: aload         29
585: invokestatic  #10
588: aload         30
590: invokestatic  #10
593: aload         31
595: invokestatic  #10
598: aload         32
600: invokestatic  #10
603: return
Exception table:
from    to  target type
252   266   269   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test064
Start line: 2422
End line: 2442
Method source code: 
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.appendPrefix("2024-05-15T11:17:19.237+00:00:00.010");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #336
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #33
62: astore        6
64: aload         6
66: invokevirtual #39
69: astore        7
71: aload         7
73: invokevirtual #25
76: astore        8
78: aload         7
80: ldc           #159
82: invokevirtual #196
85: astore        9
87: aload_2
88: invokestatic  #10
91: aload_3
92: invokestatic  #10
95: aload         4
97: invokestatic  #10
100: aload         5
102: invokestatic  #10
105: aload         6
107: invokestatic  #10
110: aload         7
112: invokestatic  #10
115: aload         8
117: invokestatic  #10
120: aload         9
122: invokestatic  #10
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test065
Start line: 2445
End line: 2490
Method source code: 
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.joda.time.chrono.ISOChronology iSOChronology0 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField1 = iSOChronology0.months();
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period2.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType5 = null;
        int int6 = period2.get(durationFieldType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period9 = period2.withField(durationFieldType7, 8);
        boolean boolean10 = iSOChronology0.equals((java.lang.Object) durationFieldType7);
        org.joda.time.DateTimeField dateTimeField11 = iSOChronology0.year();
        org.joda.time.DateTimeField dateTimeField12 = iSOChronology0.secondOfMinute();
        java.lang.String str13 = iSOChronology0.toString();
        org.joda.time.DurationField durationField14 = iSOChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField15 = iSOChronology0.dayOfYear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder16.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder16.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder16.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder16.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder16.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodParser periodParser23 = periodFormatterBuilder16.toParser();
        boolean boolean24 = iSOChronology0.equals((java.lang.Object) periodParser23);
        org.junit.Assert.assertNotNull(iSOChronology0);
        org.junit.Assert.assertNotNull(durationField1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[hi!]" + "'", str13, "ISOChronology[hi!]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodParser23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #337
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #338
28: astore_1
29: aload_1
30: invokevirtual #339
33: astore_2
34: getstatic     #8
37: astore_3
38: aload_3
39: iconst_m1
40: invokevirtual #9
43: astore        4
45: aconst_null
46: astore        5
48: aload_3
49: aload         5
51: invokevirtual #201
54: istore        6
56: invokestatic  #202
59: astore        7
61: aload_3
62: aload         7
64: bipush        8
66: invokevirtual #203
69: astore        8
71: aload_1
72: aload         7
74: invokevirtual #340
77: istore        9
79: aload_1
80: invokevirtual #341
83: astore        10
85: aload_1
86: invokevirtual #342
89: astore        11
91: aload_1
92: invokevirtual #343
95: astore        12
97: aload_1
98: invokevirtual #344
101: astore        13
103: aload_1
104: invokevirtual #345
107: astore        14
109: new           #14
112: dup
113: invokespecial #15
116: astore        15
118: aload         15
120: ldc           #16
122: invokevirtual #17
125: astore        16
127: aload         15
129: invokevirtual #25
132: astore        17
134: aload         15
136: invokevirtual #26
139: astore        18
141: aload         15
143: invokevirtual #76
146: astore        19
148: aload         15
150: invokevirtual #25
153: astore        20
155: aload         15
157: invokevirtual #142
160: astore        21
162: aload_1
163: aload         21
165: invokevirtual #340
168: istore        22
170: aload_1
171: invokestatic  #10
174: aload_2
175: invokestatic  #10
178: aload_3
179: invokestatic  #10
182: aload         4
184: invokestatic  #10
187: new           #55
190: dup
191: invokespecial #56
194: ldc           #57
196: invokevirtual #58
199: iload         6
201: invokevirtual #59
204: ldc           #60
206: invokevirtual #58
209: iconst_0
210: invokevirtual #59
213: ldc           #57
215: invokevirtual #58
218: invokevirtual #61
221: iload         6
223: ifne          230
226: iconst_1
227: goto          231
230: iconst_0
231: invokestatic  #62
234: aload         7
236: invokestatic  #10
239: aload         8
241: invokestatic  #10
244: new           #55
247: dup
248: invokespecial #56
251: ldc           #57
253: invokevirtual #58
256: iload         9
258: invokevirtual #97
261: ldc           #60
263: invokevirtual #58
266: iconst_0
267: invokevirtual #97
270: ldc           #57
272: invokevirtual #58
275: invokevirtual #61
278: iload         9
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #62
291: aload         10
293: invokestatic  #10
296: aload         11
298: invokestatic  #10
301: aload         13
303: invokestatic  #10
306: aload         14
308: invokestatic  #10
311: aload         16
313: invokestatic  #10
316: aload         17
318: invokestatic  #10
321: aload         18
323: invokestatic  #10
326: aload         19
328: invokestatic  #10
331: aload         20
333: invokestatic  #10
336: aload         21
338: invokestatic  #10
341: new           #55
344: dup
345: invokespecial #56
348: ldc           #57
350: invokevirtual #58
353: iload         22
355: invokevirtual #97
358: ldc           #60
360: invokevirtual #58
363: iconst_0
364: invokevirtual #97
367: ldc           #57
369: invokevirtual #58
372: invokevirtual #61
375: iload         22
377: ifne          384
380: iconst_1
381: goto          385
384: iconst_0
385: invokestatic  #62
388: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test066
Start line: 2493
End line: 2508
Method source code: 
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder5.appendSeparator("-53", "97");
        periodFormatterBuilder9.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #346
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload         4
54: invokevirtual #33
57: astore        5
59: aload         4
61: ldc           #197
63: ldc_w         #347
66: invokevirtual #20
69: astore        6
71: aload         6
73: invokevirtual #212
76: aload_2
77: invokestatic  #10
80: aload_3
81: invokestatic  #10
84: aload         4
86: invokestatic  #10
89: aload         5
91: invokestatic  #10
94: aload         6
96: invokestatic  #10
99: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test067
Start line: 2511
End line: 2552
Method source code: 
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(100L, (long) (short) -1, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter6.withParseType(periodType22);
        boolean boolean24 = periodFormatter23.isParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #348
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: invokestatic  #171
129: astore        16
131: aload         16
133: invokestatic  #172
136: astore        17
138: new           #46
141: dup
142: ldc2_w        #79
145: ldc2_w        #173
148: aload         16
150: invokespecial #175
153: astore        18
155: aload         16
157: invokevirtual #352
160: astore        19
162: aload         16
164: invokevirtual #353
167: astore        20
169: aload         6
171: aload         20
173: invokevirtual #117
176: astore        21
178: aload         21
180: invokevirtual #89
183: istore        22
185: aload_2
186: invokestatic  #10
189: aload_3
190: invokestatic  #10
193: aload         4
195: invokestatic  #10
198: aload         5
200: invokestatic  #10
203: aload         6
205: invokestatic  #10
208: aload         7
210: invokestatic  #354
213: aload         10
215: invokestatic  #10
218: new           #55
221: dup
222: invokespecial #56
225: ldc           #57
227: invokevirtual #58
230: iload         12
232: invokevirtual #97
235: ldc           #60
237: invokevirtual #58
240: iconst_0
241: invokevirtual #97
244: ldc           #57
246: invokevirtual #58
249: invokevirtual #61
252: iload         12
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #62
265: aload         14
267: invokestatic  #10
270: aload         15
272: invokestatic  #10
275: aload         16
277: invokestatic  #10
280: aload         17
282: invokestatic  #10
285: aload         19
287: invokestatic  #10
290: aload         20
292: invokestatic  #10
295: aload         21
297: invokestatic  #10
300: new           #55
303: dup
304: invokespecial #56
307: ldc           #57
309: invokevirtual #58
312: iload         22
314: invokevirtual #97
317: ldc           #60
319: invokevirtual #58
322: iconst_1
323: invokevirtual #97
326: ldc           #57
328: invokevirtual #58
331: invokevirtual #61
334: iload         22
336: iconst_1
337: if_icmpne     344
340: iconst_1
341: goto          345
344: iconst_0
345: invokestatic  #62
348: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test068
Start line: 2555
End line: 2571
Method source code: 
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSuffix("P10Y100W");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder5.appendSeparator("", "837");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #355
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         5
60: ldc_w         #356
63: invokevirtual #132
66: astore        6
68: aload         5
70: ldc           #74
72: ldc           #246
74: invokevirtual #20
77: astore        7
79: aload_2
80: invokestatic  #10
83: aload_3
84: invokestatic  #10
87: aload         4
89: invokestatic  #10
92: aload         5
94: invokestatic  #10
97: aload         6
99: invokestatic  #10
102: aload         7
104: invokestatic  #10
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test069
Start line: 2574
End line: 2697
Method source code: 
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant21, readableInstant22);
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.Period period26 = new org.joda.time.Period(1L, (long) 1, chronology24);
        int[] intArray27 = period26.getValues();
        java.util.Locale locale29 = null;
        int int30 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period26, 2922790, locale29);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder31.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder31.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder31.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder31.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal37 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology40);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period44 = period41.minusDays((int) (byte) 100);
        java.util.Locale locale46 = null;
        int int47 = literal37.countFieldsToPrint((org.joda.time.ReadablePeriod) period44, 999, locale46);
        org.joda.time.format.PeriodParser periodParser48 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder49 = periodFormatterBuilder31.append((org.joda.time.format.PeriodPrinter) literal37, periodParser48);
        org.joda.time.format.PeriodFormatter periodFormatter50 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal6, (org.joda.time.format.PeriodParser) literal37);
        java.lang.Object obj51 = null;
        org.joda.time.chrono.ISOChronology iSOChronology52 = org.joda.time.chrono.ISOChronology.getInstance();
        org.joda.time.DurationField durationField53 = iSOChronology52.months();
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        org.joda.time.Period period56 = period54.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType57 = null;
        int int58 = period54.get(durationFieldType57);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period61 = period54.withField(durationFieldType59, 8);
        boolean boolean62 = iSOChronology52.equals((java.lang.Object) durationFieldType59);
        org.joda.time.DateTimeField dateTimeField63 = iSOChronology52.year();
        org.joda.time.DateTimeField dateTimeField64 = iSOChronology52.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField65 = iSOChronology52.era();
        org.joda.time.Period period66 = new org.joda.time.Period(obj51, (org.joda.time.Chronology) iSOChronology52);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.Period period68 = period66.withFields(readablePeriod67);
        java.util.Locale locale69 = null;
        int int70 = literal6.calculatePrintedLength((org.joda.time.ReadablePeriod) period66, locale69);
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        int int72 = period71.getHours();
        org.joda.time.Period period74 = period71.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod75 = period74.toMutablePeriod();
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType79 = org.joda.time.DateTimeUtils.getPeriodType(periodType78);
        org.joda.time.Period period80 = new org.joda.time.Period(100L, (long) (short) -1, periodType78);
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.weeks();
        boolean boolean82 = periodType78.isSupported(durationFieldType81);
        mutablePeriod75.add(durationFieldType81, (int) (byte) 100);
        mutablePeriod75.setSeconds(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType87.getDurationType();
        mutablePeriod75.add(durationFieldType88, 0);
        java.util.Locale locale93 = null;
        int int94 = literal6.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod75, "Invalid format: \"PeriodType[YearDay]\"", 39120000, locale93);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(literal37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT-0.090S" + "'", str42, "PT-0.090S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder49);
        org.junit.Assert.assertNotNull(iSOChronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(durationFieldType88);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-39120001) + "'", int94 == (-39120001));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #357
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: aconst_null
132: astore        16
134: aload         15
136: aload         16
138: invokestatic  #358
141: astore        17
143: aload         17
145: invokevirtual #359
148: astore        18
150: aload         18
152: invokevirtual #360
155: astore        19
157: new           #46
160: dup
161: lconst_1
162: lconst_1
163: aload         18
165: invokespecial #83
168: astore        20
170: aload         20
172: invokevirtual #123
175: astore        21
177: aconst_null
178: astore        22
180: aload         6
182: aload         20
184: ldc_w         #361
187: aload         22
189: invokevirtual #86
192: istore        23
194: new           #14
197: dup
198: invokespecial #15
201: astore        24
203: aload         24
205: ldc           #16
207: invokevirtual #17
210: astore        25
212: aload         24
214: invokevirtual #25
217: astore        26
219: aload         24
221: invokevirtual #76
224: astore        27
226: aload         24
228: invokevirtual #77
231: astore        28
233: getstatic     #78
236: astore        29
238: aconst_null
239: astore        30
241: new           #46
244: dup
245: ldc2_w        #79
248: ldc2_w        #81
251: aload         30
253: invokespecial #83
256: astore        31
258: aload         31
260: invokevirtual #84
263: astore        32
265: aload         31
267: bipush        100
269: invokevirtual #85
272: astore        33
274: aconst_null
275: astore        34
277: aload         29
279: aload         33
281: sipush        999
284: aload         34
286: invokevirtual #86
289: istore        35
291: aconst_null
292: astore        36
294: aload         24
296: aload         29
298: aload         36
300: invokevirtual #87
303: astore        37
305: new           #164
308: dup
309: aload         6
311: aload         29
313: invokespecial #165
316: astore        38
318: aconst_null
319: astore        39
321: invokestatic  #338
324: astore        40
326: aload         40
328: invokevirtual #339
331: astore        41
333: getstatic     #8
336: astore        42
338: aload         42
340: iconst_m1
341: invokevirtual #9
344: astore        43
346: aconst_null
347: astore        44
349: aload         42
351: aload         44
353: invokevirtual #201
356: istore        45
358: invokestatic  #202
361: astore        46
363: aload         42
365: aload         46
367: bipush        8
369: invokevirtual #203
372: astore        47
374: aload         40
376: aload         46
378: invokevirtual #340
381: istore        48
383: aload         40
385: invokevirtual #341
388: astore        49
390: aload         40
392: invokevirtual #342
395: astore        50
397: aload         40
399: invokevirtual #362
402: astore        51
404: new           #46
407: dup
408: aload         39
410: aload         40
412: invokespecial #363
415: astore        52
417: aconst_null
418: astore        53
420: aload         52
422: aload         53
424: invokevirtual #364
427: astore        54
429: aconst_null
430: astore        55
432: aload         6
434: aload         52
436: aload         55
438: invokevirtual #365
441: istore        56
443: getstatic     #8
446: astore        57
448: aload         57
450: invokevirtual #216
453: istore        58
455: aload         57
457: iconst_0
458: invokevirtual #200
461: astore        59
463: aload         59
465: invokevirtual #205
468: astore        60
470: invokestatic  #171
473: astore        61
475: aload         61
477: invokestatic  #172
480: astore        62
482: new           #46
485: dup
486: ldc2_w        #79
489: ldc2_w        #173
492: aload         61
494: invokespecial #175
497: astore        63
499: invokestatic  #176
502: astore        64
504: aload         61
506: aload         64
508: invokevirtual #177
511: istore        65
513: aload         60
515: aload         64
517: bipush        100
519: invokevirtual #226
522: aload         60
524: iconst_1
525: invokevirtual #366
528: invokestatic  #367
531: astore        66
533: aload         66
535: invokevirtual #368
538: astore        67
540: aload         60
542: aload         67
544: iconst_0
545: invokevirtual #226
548: aconst_null
549: astore        68
551: aload         6
553: aload         60
555: ldc_w         #317
558: ldc_w         #369
561: aload         68
563: invokevirtual #221
566: istore        69
568: aload_2
569: invokestatic  #10
572: aload_3
573: invokestatic  #10
576: aload         4
578: invokestatic  #10
581: aload         5
583: invokestatic  #10
586: aload         6
588: invokestatic  #10
591: new           #55
594: dup
595: invokespecial #56
598: ldc           #57
600: invokevirtual #58
603: aload         9
605: invokevirtual #58
608: ldc           #94
610: invokevirtual #58
613: invokevirtual #61
616: aload         9
618: ldc           #95
620: invokestatic  #96
623: aload         10
625: invokestatic  #10
628: new           #55
631: dup
632: invokespecial #56
635: ldc           #57
637: invokevirtual #58
640: iload         12
642: invokevirtual #59
645: ldc           #60
647: invokevirtual #58
650: iconst_0
651: invokevirtual #59
654: ldc           #57
656: invokevirtual #58
659: invokevirtual #61
662: iload         12
664: ifne          671
667: iconst_1
668: goto          672
671: iconst_0
672: invokestatic  #62
675: aload         14
677: invokestatic  #10
680: aload         17
682: invokestatic  #10
685: aload         18
687: invokestatic  #10
690: aload         19
692: invokestatic  #10
695: aload         21
697: invokestatic  #10
700: aload         21
702: invokestatic  #127
705: ldc_w         #370
708: invokestatic  #129
711: new           #55
714: dup
715: invokespecial #56
718: ldc           #57
720: invokevirtual #58
723: iload         23
725: invokevirtual #59
728: ldc           #60
730: invokevirtual #58
733: iconst_0
734: invokevirtual #59
737: ldc           #57
739: invokevirtual #58
742: invokevirtual #61
745: iload         23
747: ifne          754
750: iconst_1
751: goto          755
754: iconst_0
755: invokestatic  #62
758: aload         25
760: invokestatic  #10
763: aload         26
765: invokestatic  #10
768: aload         27
770: invokestatic  #10
773: aload         28
775: invokestatic  #10
778: aload         29
780: invokestatic  #10
783: new           #55
786: dup
787: invokespecial #56
790: ldc           #57
792: invokevirtual #58
795: aload         32
797: invokevirtual #58
800: ldc           #94
802: invokevirtual #58
805: invokevirtual #61
808: aload         32
810: ldc           #95
812: invokestatic  #96
815: aload         33
817: invokestatic  #10
820: new           #55
823: dup
824: invokespecial #56
827: ldc           #57
829: invokevirtual #58
832: iload         35
834: invokevirtual #59
837: ldc           #60
839: invokevirtual #58
842: iconst_0
843: invokevirtual #59
846: ldc           #57
848: invokevirtual #58
851: invokevirtual #61
854: iload         35
856: ifne          863
859: iconst_1
860: goto          864
863: iconst_0
864: invokestatic  #62
867: aload         37
869: invokestatic  #10
872: aload         40
874: invokestatic  #10
877: aload         41
879: invokestatic  #10
882: aload         42
884: invokestatic  #10
887: aload         43
889: invokestatic  #10
892: new           #55
895: dup
896: invokespecial #56
899: ldc           #57
901: invokevirtual #58
904: iload         45
906: invokevirtual #59
909: ldc           #60
911: invokevirtual #58
914: iconst_0
915: invokevirtual #59
918: ldc           #57
920: invokevirtual #58
923: invokevirtual #61
926: iload         45
928: ifne          935
931: iconst_1
932: goto          936
935: iconst_0
936: invokestatic  #62
939: aload         46
941: invokestatic  #10
944: aload         47
946: invokestatic  #10
949: new           #55
952: dup
953: invokespecial #56
956: ldc           #57
958: invokevirtual #58
961: iload         48
963: invokevirtual #97
966: ldc           #60
968: invokevirtual #58
971: iconst_0
972: invokevirtual #97
975: ldc           #57
977: invokevirtual #58
980: invokevirtual #61
983: iload         48
985: ifne          992
988: iconst_1
989: goto          993
992: iconst_0
993: invokestatic  #62
996: aload         49
998: invokestatic  #10
1001: aload         50
1003: invokestatic  #10
1006: aload         51
1008: invokestatic  #10
1011: aload         54
1013: invokestatic  #10
1016: new           #55
1019: dup
1020: invokespecial #56
1023: ldc           #57
1025: invokevirtual #58
1028: iload         56
1030: invokevirtual #59
1033: ldc           #60
1035: invokevirtual #58
1038: iconst_0
1039: invokevirtual #59
1042: ldc           #57
1044: invokevirtual #58
1047: invokevirtual #61
1050: iload         56
1052: ifne          1059
1055: iconst_1
1056: goto          1060
1059: iconst_0
1060: invokestatic  #62
1063: aload         57
1065: invokestatic  #10
1068: new           #55
1071: dup
1072: invokespecial #56
1075: ldc           #57
1077: invokevirtual #58
1080: iload         58
1082: invokevirtual #59
1085: ldc           #60
1087: invokevirtual #58
1090: iconst_0
1091: invokevirtual #59
1094: ldc           #57
1096: invokevirtual #58
1099: invokevirtual #61
1102: iload         58
1104: ifne          1111
1107: iconst_1
1108: goto          1112
1111: iconst_0
1112: invokestatic  #62
1115: aload         59
1117: invokestatic  #10
1120: aload         60
1122: invokestatic  #10
1125: aload         61
1127: invokestatic  #10
1130: aload         62
1132: invokestatic  #10
1135: aload         64
1137: invokestatic  #10
1140: new           #55
1143: dup
1144: invokespecial #56
1147: ldc           #57
1149: invokevirtual #58
1152: iload         65
1154: invokevirtual #97
1157: ldc           #60
1159: invokevirtual #58
1162: iconst_0
1163: invokevirtual #97
1166: ldc           #57
1168: invokevirtual #58
1171: invokevirtual #61
1174: iload         65
1176: ifne          1183
1179: iconst_1
1180: goto          1184
1183: iconst_0
1184: invokestatic  #62
1187: aload         66
1189: invokestatic  #10
1192: aload         67
1194: invokestatic  #10
1197: new           #55
1200: dup
1201: invokespecial #56
1204: ldc           #57
1206: invokevirtual #58
1209: iload         69
1211: invokevirtual #59
1214: ldc           #60
1216: invokevirtual #58
1219: ldc_w         #371
1222: invokevirtual #59
1225: ldc           #57
1227: invokevirtual #58
1230: invokevirtual #61
1233: iload         69
1235: ldc_w         #371
1238: if_icmpne     1245
1241: iconst_1
1242: goto          1246
1245: iconst_0
1246: invokestatic  #62
1249: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test070
Start line: 2700
End line: 2720
Method source code: 
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #372
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #139
83: astore        8
85: aload         7
87: invokevirtual #185
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test071
Start line: 2723
End line: 2739
Method source code: 
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSuffix("2836", "450");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #373
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #139
56: astore        5
58: aload         5
60: invokevirtual #245
63: astore        6
65: aload         6
67: ldc_w         #374
70: ldc_w         #375
73: invokevirtual #30
76: astore        7
78: aload_2
79: invokestatic  #10
82: aload_3
83: invokestatic  #10
86: aload         4
88: invokestatic  #10
91: aload         5
93: invokestatic  #10
96: aload         6
98: invokestatic  #10
101: aload         7
103: invokestatic  #10
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test072
Start line: 2742
End line: 2760
Method source code: 
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendSuffix("35", "");
        org.joda.time.format.PeriodParser periodParser9 = periodFormatterBuilder4.toParser();
        org.joda.time.format.PeriodParser periodParser10 = periodFormatterBuilder4.toParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodParser9);
        org.junit.Assert.assertNotNull(periodParser10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #376
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         4
60: ldc           #73
62: ldc           #74
64: invokevirtual #30
67: astore        6
69: aload         4
71: invokevirtual #142
74: astore        7
76: aload         4
78: invokevirtual #142
81: astore        8
83: aload_2
84: invokestatic  #10
87: aload_3
88: invokestatic  #10
91: aload         4
93: invokestatic  #10
96: aload         5
98: invokestatic  #10
101: aload         6
103: invokestatic  #10
106: aload         7
108: invokestatic  #10
111: aload         8
113: invokestatic  #10
116: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test073
Start line: 2763
End line: 2776
Method source code: 
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        periodFormatterBuilder3.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.printZeroNever();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #377
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: ldc           #34
48: ldc           #35
50: invokevirtual #20
53: astore        4
55: aload_3
56: invokevirtual #212
59: aload_3
60: invokevirtual #76
63: astore        5
65: aload_2
66: invokestatic  #10
69: aload_3
70: invokestatic  #10
73: aload         4
75: invokestatic  #10
78: aload         5
80: invokestatic  #10
83: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test074
Start line: 2779
End line: 2882
Method source code: 
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("7968");
        org.joda.time.JodaTimePermission jodaTimePermission3 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSeconds();
        jodaTimePermission3.checkGuard((java.lang.Object) periodFormatterBuilder8);
        boolean boolean13 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission3);
        org.joda.time.JodaTimePermission jodaTimePermission15 = new org.joda.time.JodaTimePermission("P100W");
        java.lang.String str16 = jodaTimePermission15.getActions();
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology17.minuteOfHour();
        org.joda.time.Period period20 = org.joda.time.Period.millis(1);
        int int21 = period20.getMonths();
        int int22 = period20.size();
        org.joda.time.Period period24 = period20.withDays((int) (byte) 100);
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period25.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = period25.get(durationFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period32 = period25.withField(durationFieldType30, 8);
        java.lang.String str33 = durationFieldType30.getName();
        org.joda.time.Period period35 = period20.withField(durationFieldType30, 1);
        org.joda.time.Period period37 = period20.minusDays(10);
        long long40 = gregorianChronology17.add((org.joda.time.ReadablePeriod) period20, (long) (short) 100, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField41 = gregorianChronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = gregorianChronology17.dayOfYear();
        boolean boolean43 = jodaTimePermission15.equals((java.lang.Object) gregorianChronology17);
        org.joda.time.JodaTimePermission jodaTimePermission45 = new org.joda.time.JodaTimePermission("P100W");
        java.lang.String str46 = jodaTimePermission45.getActions();
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology47.minuteOfHour();
        org.joda.time.Period period50 = org.joda.time.Period.millis(1);
        int int51 = period50.getMonths();
        int int52 = period50.size();
        org.joda.time.Period period54 = period50.withDays((int) (byte) 100);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType58 = null;
        int int59 = period55.get(durationFieldType58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period62 = period55.withField(durationFieldType60, 8);
        java.lang.String str63 = durationFieldType60.getName();
        org.joda.time.Period period65 = period50.withField(durationFieldType60, 1);
        org.joda.time.Period period67 = period50.minusDays(10);
        long long70 = gregorianChronology47.add((org.joda.time.ReadablePeriod) period50, (long) (short) 100, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField71 = gregorianChronology47.hourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = gregorianChronology47.dayOfYear();
        boolean boolean73 = jodaTimePermission45.equals((java.lang.Object) gregorianChronology47);
        boolean boolean74 = jodaTimePermission15.implies((java.security.Permission) jodaTimePermission45);
        boolean boolean75 = jodaTimePermission3.implies((java.security.Permission) jodaTimePermission45);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "seconds" + "'", str33, "seconds");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 200L + "'", long40 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "seconds" + "'", str63, "seconds");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 200L + "'", long70 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #378
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #379
32: invokespecial #318
35: astore_1
36: new           #316
39: dup
40: ldc_w         #317
43: invokespecial #318
46: astore_2
47: new           #14
50: dup
51: invokespecial #15
54: astore_3
55: aload_3
56: ldc           #16
58: invokevirtual #17
61: astore        4
63: aload_3
64: invokevirtual #25
67: astore        5
69: aload_3
70: invokevirtual #39
73: astore        6
75: aload         6
77: ldc_w         #319
80: invokevirtual #196
83: astore        7
85: aload         6
87: invokevirtual #320
90: astore        8
92: aload_2
93: aload         6
95: invokevirtual #321
98: aload_1
99: aload_2
100: invokevirtual #380
103: istore        9
105: new           #316
108: dup
109: ldc           #239
111: invokespecial #318
114: astore        10
116: aload         10
118: invokevirtual #381
121: astore        11
123: invokestatic  #110
126: astore        12
128: aload         12
130: invokevirtual #111
133: astore        13
135: iconst_1
136: invokestatic  #168
139: astore        14
141: aload         14
143: invokevirtual #169
146: istore        15
148: aload         14
150: invokevirtual #170
153: istore        16
155: aload         14
157: bipush        100
159: invokevirtual #200
162: astore        17
164: getstatic     #8
167: astore        18
169: aload         18
171: iconst_m1
172: invokevirtual #9
175: astore        19
177: aconst_null
178: astore        20
180: aload         18
182: aload         20
184: invokevirtual #201
187: istore        21
189: invokestatic  #202
192: astore        22
194: aload         18
196: aload         22
198: bipush        8
200: invokevirtual #203
203: astore        23
205: aload         22
207: invokevirtual #204
210: astore        24
212: aload         14
214: aload         22
216: iconst_1
217: invokevirtual #203
220: astore        25
222: aload         14
224: bipush        10
226: invokevirtual #85
229: astore        26
231: aload         12
233: aload         14
235: ldc2_w        #79
238: bipush        100
240: invokevirtual #227
243: lstore        27
245: aload         12
247: invokevirtual #382
250: astore        29
252: aload         12
254: invokevirtual #383
257: astore        30
259: aload         10
261: aload         12
263: invokevirtual #384
266: istore        31
268: new           #316
271: dup
272: ldc           #239
274: invokespecial #318
277: astore        32
279: aload         32
281: invokevirtual #381
284: astore        33
286: invokestatic  #110
289: astore        34
291: aload         34
293: invokevirtual #111
296: astore        35
298: iconst_1
299: invokestatic  #168
302: astore        36
304: aload         36
306: invokevirtual #169
309: istore        37
311: aload         36
313: invokevirtual #170
316: istore        38
318: aload         36
320: bipush        100
322: invokevirtual #200
325: astore        39
327: getstatic     #8
330: astore        40
332: aload         40
334: iconst_m1
335: invokevirtual #9
338: astore        41
340: aconst_null
341: astore        42
343: aload         40
345: aload         42
347: invokevirtual #201
350: istore        43
352: invokestatic  #202
355: astore        44
357: aload         40
359: aload         44
361: bipush        8
363: invokevirtual #203
366: astore        45
368: aload         44
370: invokevirtual #204
373: astore        46
375: aload         36
377: aload         44
379: iconst_1
380: invokevirtual #203
383: astore        47
385: aload         36
387: bipush        10
389: invokevirtual #85
392: astore        48
394: aload         34
396: aload         36
398: ldc2_w        #79
401: bipush        100
403: invokevirtual #227
406: lstore        49
408: aload         34
410: invokevirtual #382
413: astore        51
415: aload         34
417: invokevirtual #383
420: astore        52
422: aload         32
424: aload         34
426: invokevirtual #384
429: istore        53
431: aload         10
433: aload         32
435: invokevirtual #380
438: istore        54
440: aload_2
441: aload         32
443: invokevirtual #380
446: istore        55
448: aload         4
450: invokestatic  #10
453: aload         5
455: invokestatic  #10
458: aload         6
460: invokestatic  #10
463: aload         7
465: invokestatic  #10
468: aload         8
470: invokestatic  #10
473: new           #55
476: dup
477: invokespecial #56
480: ldc           #57
482: invokevirtual #58
485: iload         9
487: invokevirtual #97
490: ldc           #60
492: invokevirtual #58
495: iconst_0
496: invokevirtual #97
499: ldc           #57
501: invokevirtual #58
504: invokevirtual #61
507: iload         9
509: ifne          516
512: iconst_1
513: goto          517
516: iconst_0
517: invokestatic  #62
520: new           #55
523: dup
524: invokespecial #56
527: ldc           #57
529: invokevirtual #58
532: aload         11
534: invokevirtual #58
537: ldc_w         #385
540: invokevirtual #58
543: invokevirtual #61
546: aload         11
548: ldc           #74
550: invokestatic  #96
553: aload         12
555: invokestatic  #10
558: aload         13
560: invokestatic  #10
563: aload         14
565: invokestatic  #10
568: new           #55
571: dup
572: invokespecial #56
575: ldc           #57
577: invokevirtual #58
580: iload         15
582: invokevirtual #59
585: ldc           #60
587: invokevirtual #58
590: iconst_0
591: invokevirtual #59
594: ldc           #57
596: invokevirtual #58
599: invokevirtual #61
602: iload         15
604: ifne          611
607: iconst_1
608: goto          612
611: iconst_0
612: invokestatic  #62
615: new           #55
618: dup
619: invokespecial #56
622: ldc           #57
624: invokevirtual #58
627: iload         16
629: invokevirtual #59
632: ldc           #60
634: invokevirtual #58
637: bipush        8
639: invokevirtual #59
642: ldc           #57
644: invokevirtual #58
647: invokevirtual #61
650: iload         16
652: bipush        8
654: if_icmpne     661
657: iconst_1
658: goto          662
661: iconst_0
662: invokestatic  #62
665: aload         17
667: invokestatic  #10
670: aload         18
672: invokestatic  #10
675: aload         19
677: invokestatic  #10
680: new           #55
683: dup
684: invokespecial #56
687: ldc           #57
689: invokevirtual #58
692: iload         21
694: invokevirtual #59
697: ldc           #60
699: invokevirtual #58
702: iconst_0
703: invokevirtual #59
706: ldc           #57
708: invokevirtual #58
711: invokevirtual #61
714: iload         21
716: ifne          723
719: iconst_1
720: goto          724
723: iconst_0
724: invokestatic  #62
727: aload         22
729: invokestatic  #10
732: aload         23
734: invokestatic  #10
737: new           #55
740: dup
741: invokespecial #56
744: ldc           #57
746: invokevirtual #58
749: aload         24
751: invokevirtual #58
754: ldc           #209
756: invokevirtual #58
759: invokevirtual #61
762: aload         24
764: ldc           #210
766: invokestatic  #96
769: aload         25
771: invokestatic  #10
774: aload         26
776: invokestatic  #10
779: new           #55
782: dup
783: invokespecial #56
786: ldc           #57
788: invokevirtual #58
791: lload         27
793: invokevirtual #386
796: ldc           #60
798: invokevirtual #58
801: ldc2_w        #387
804: invokevirtual #386
807: ldc           #57
809: invokevirtual #58
812: invokevirtual #61
815: lload         27
817: ldc2_w        #387
820: lcmp
821: ifne          828
824: iconst_1
825: goto          829
828: iconst_0
829: invokestatic  #62
832: aload         29
834: invokestatic  #10
837: aload         30
839: invokestatic  #10
842: new           #55
845: dup
846: invokespecial #56
849: ldc           #57
851: invokevirtual #58
854: iload         31
856: invokevirtual #97
859: ldc           #60
861: invokevirtual #58
864: iconst_0
865: invokevirtual #97
868: ldc           #57
870: invokevirtual #58
873: invokevirtual #61
876: iload         31
878: ifne          885
881: iconst_1
882: goto          886
885: iconst_0
886: invokestatic  #62
889: new           #55
892: dup
893: invokespecial #56
896: ldc           #57
898: invokevirtual #58
901: aload         33
903: invokevirtual #58
906: ldc_w         #385
909: invokevirtual #58
912: invokevirtual #61
915: aload         33
917: ldc           #74
919: invokestatic  #96
922: aload         34
924: invokestatic  #10
927: aload         35
929: invokestatic  #10
932: aload         36
934: invokestatic  #10
937: new           #55
940: dup
941: invokespecial #56
944: ldc           #57
946: invokevirtual #58
949: iload         37
951: invokevirtual #59
954: ldc           #60
956: invokevirtual #58
959: iconst_0
960: invokevirtual #59
963: ldc           #57
965: invokevirtual #58
968: invokevirtual #61
971: iload         37
973: ifne          980
976: iconst_1
977: goto          981
980: iconst_0
981: invokestatic  #62
984: new           #55
987: dup
988: invokespecial #56
991: ldc           #57
993: invokevirtual #58
996: iload         38
998: invokevirtual #59
1001: ldc           #60
1003: invokevirtual #58
1006: bipush        8
1008: invokevirtual #59
1011: ldc           #57
1013: invokevirtual #58
1016: invokevirtual #61
1019: iload         38
1021: bipush        8
1023: if_icmpne     1030
1026: iconst_1
1027: goto          1031
1030: iconst_0
1031: invokestatic  #62
1034: aload         39
1036: invokestatic  #10
1039: aload         40
1041: invokestatic  #10
1044: aload         41
1046: invokestatic  #10
1049: new           #55
1052: dup
1053: invokespecial #56
1056: ldc           #57
1058: invokevirtual #58
1061: iload         43
1063: invokevirtual #59
1066: ldc           #60
1068: invokevirtual #58
1071: iconst_0
1072: invokevirtual #59
1075: ldc           #57
1077: invokevirtual #58
1080: invokevirtual #61
1083: iload         43
1085: ifne          1092
1088: iconst_1
1089: goto          1093
1092: iconst_0
1093: invokestatic  #62
1096: aload         44
1098: invokestatic  #10
1101: aload         45
1103: invokestatic  #10
1106: new           #55
1109: dup
1110: invokespecial #56
1113: ldc           #57
1115: invokevirtual #58
1118: aload         46
1120: invokevirtual #58
1123: ldc           #209
1125: invokevirtual #58
1128: invokevirtual #61
1131: aload         46
1133: ldc           #210
1135: invokestatic  #96
1138: aload         47
1140: invokestatic  #10
1143: aload         48
1145: invokestatic  #10
1148: new           #55
1151: dup
1152: invokespecial #56
1155: ldc           #57
1157: invokevirtual #58
1160: lload         49
1162: invokevirtual #386
1165: ldc           #60
1167: invokevirtual #58
1170: ldc2_w        #387
1173: invokevirtual #386
1176: ldc           #57
1178: invokevirtual #58
1181: invokevirtual #61
1184: lload         49
1186: ldc2_w        #387
1189: lcmp
1190: ifne          1197
1193: iconst_1
1194: goto          1198
1197: iconst_0
1198: invokestatic  #62
1201: aload         51
1203: invokestatic  #10
1206: aload         52
1208: invokestatic  #10
1211: new           #55
1214: dup
1215: invokespecial #56
1218: ldc           #57
1220: invokevirtual #58
1223: iload         53
1225: invokevirtual #97
1228: ldc           #60
1230: invokevirtual #58
1233: iconst_0
1234: invokevirtual #97
1237: ldc           #57
1239: invokevirtual #58
1242: invokevirtual #61
1245: iload         53
1247: ifne          1254
1250: iconst_1
1251: goto          1255
1254: iconst_0
1255: invokestatic  #62
1258: new           #55
1261: dup
1262: invokespecial #56
1265: ldc           #57
1267: invokevirtual #58
1270: iload         54
1272: invokevirtual #97
1275: ldc           #60
1277: invokevirtual #58
1280: iconst_1
1281: invokevirtual #97
1284: ldc           #57
1286: invokevirtual #58
1289: invokevirtual #61
1292: iload         54
1294: iconst_1
1295: if_icmpne     1302
1298: iconst_1
1299: goto          1303
1302: iconst_0
1303: invokestatic  #62
1306: new           #55
1309: dup
1310: invokespecial #56
1313: ldc           #57
1315: invokevirtual #58
1318: iload         55
1320: invokevirtual #97
1323: ldc           #60
1325: invokevirtual #58
1328: iconst_0
1329: invokevirtual #97
1332: ldc           #57
1334: invokevirtual #58
1337: invokevirtual #61
1340: iload         55
1342: ifne          1349
1345: iconst_1
1346: goto          1350
1349: iconst_0
1350: invokestatic  #62
1353: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test075
Start line: 2885
End line: 2907
Method source code: 
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.rejectSignedValues(true);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder13.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #389
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: iconst_1
85: invokevirtual #108
88: astore        9
90: aload         9
92: invokevirtual #72
95: astore        10
97: aload_2
98: invokestatic  #10
101: aload_3
102: invokestatic  #10
105: aload         4
107: invokestatic  #10
110: aload         5
112: invokestatic  #10
115: aload         6
117: invokestatic  #10
120: aload         7
122: invokestatic  #10
125: aload         8
127: invokestatic  #10
130: aload         9
132: invokestatic  #10
135: aload         10
137: invokestatic  #10
140: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test076
Start line: 2910
End line: 2924
Method source code: 
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #390
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: invokevirtual #71
61: astore        6
63: aload_2
64: invokestatic  #10
67: aload_3
68: invokestatic  #10
71: aload         4
73: invokestatic  #10
76: aload         5
78: invokestatic  #10
81: aload         6
83: invokestatic  #10
86: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test077
Start line: 2927
End line: 3003
Method source code: 
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder6.printZeroIfSupported();
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatterBuilder6.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder13.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder13.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder17.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder17.appendSeconds();
        periodFormatterBuilder17.clear();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatterBuilder17.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal24 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter25 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale26 = null;
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter25.withLocale(locale26);
        boolean boolean28 = periodFormatter27.isParser();
        org.joda.time.format.PeriodParser periodParser29 = periodFormatter27.getParser();
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        int int31 = period30.getHours();
        org.joda.time.Period period33 = period30.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.Period period39 = new org.joda.time.Period(100L, (long) (short) -1, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weeks();
        boolean boolean41 = periodType37.isSupported(durationFieldType40);
        mutablePeriod34.add(durationFieldType40, (int) (byte) 100);
        java.lang.String str44 = mutablePeriod34.toString();
        java.util.Locale locale47 = null;
        int int48 = periodParser29.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod34, "weekyear", (int) '#', locale47);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder49 = periodFormatterBuilder17.append((org.joda.time.format.PeriodPrinter) literal24, periodParser29);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder50 = periodFormatterBuilder1.append(periodPrinter12, periodParser29);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder51 = periodFormatterBuilder1.printZeroRarelyFirst();
        org.joda.time.format.PeriodParser periodParser52 = periodFormatterBuilder1.toParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodPrinter12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodParser29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P100W" + "'", str44, "P100W");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-36) + "'", int48 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder49);
        org.junit.Assert.assertNotNull(periodFormatterBuilder50);
        org.junit.Assert.assertNotNull(periodFormatterBuilder51);
        org.junit.Assert.assertNotNull(periodParser52);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #391
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #320
37: astore_2
38: new           #14
41: dup
42: invokespecial #15
45: astore_3
46: aload_3
47: ldc           #16
49: invokevirtual #17
52: astore        4
54: aload_3
55: invokevirtual #25
58: astore        5
60: aload_3
61: invokevirtual #26
64: astore        6
66: aload         6
68: invokevirtual #33
71: astore        7
73: aload         6
75: ldc           #29
77: ldc           #192
79: invokevirtual #41
82: astore        8
84: aload         6
86: invokevirtual #149
89: astore        9
91: aload         6
93: invokevirtual #45
96: astore        10
98: new           #14
101: dup
102: invokespecial #15
105: astore        11
107: aload         11
109: ldc           #16
111: invokevirtual #17
114: astore        12
116: aload         11
118: invokevirtual #25
121: astore        13
123: aload         11
125: invokevirtual #39
128: astore        14
130: aload         14
132: ldc_w         #319
135: invokevirtual #196
138: astore        15
140: aload         14
142: invokevirtual #320
145: astore        16
147: aload         14
149: invokevirtual #212
152: aload         14
154: invokevirtual #161
157: astore        17
159: new           #392
162: dup
163: ldc           #74
165: invokespecial #393
168: astore        18
170: invokestatic  #12
173: astore        19
175: aconst_null
176: astore        20
178: aload         19
180: aload         20
182: invokevirtual #88
185: astore        21
187: aload         21
189: invokevirtual #89
192: istore        22
194: aload         21
196: invokevirtual #119
199: astore        23
201: getstatic     #8
204: astore        24
206: aload         24
208: invokevirtual #216
211: istore        25
213: aload         24
215: iconst_0
216: invokevirtual #200
219: astore        26
221: aload         26
223: invokevirtual #205
226: astore        27
228: invokestatic  #171
231: astore        28
233: aload         28
235: invokestatic  #172
238: astore        29
240: new           #46
243: dup
244: ldc2_w        #79
247: ldc2_w        #173
250: aload         28
252: invokespecial #175
255: astore        30
257: invokestatic  #176
260: astore        31
262: aload         28
264: aload         31
266: invokevirtual #177
269: istore        32
271: aload         27
273: aload         31
275: bipush        100
277: invokevirtual #226
280: aload         27
282: invokevirtual #235
285: astore        33
287: aconst_null
288: astore        34
290: aload         23
292: aload         27
294: ldc           #135
296: bipush        35
298: aload         34
300: invokeinterface #231,  5
305: istore        35
307: aload         14
309: aload         18
311: aload         23
313: invokevirtual #87
316: astore        36
318: aload_2
319: aload         10
321: aload         23
323: invokevirtual #87
326: astore        37
328: aload_2
329: invokevirtual #248
332: astore        38
334: aload_2
335: invokevirtual #142
338: astore        39
340: aload_2
341: invokestatic  #10
344: aload         4
346: invokestatic  #10
349: aload         5
351: invokestatic  #10
354: aload         6
356: invokestatic  #10
359: aload         7
361: invokestatic  #10
364: aload         8
366: invokestatic  #10
369: aload         9
371: invokestatic  #10
374: aload         10
376: invokestatic  #10
379: aload         12
381: invokestatic  #10
384: aload         13
386: invokestatic  #10
389: aload         14
391: invokestatic  #10
394: aload         15
396: invokestatic  #10
399: aload         16
401: invokestatic  #10
404: aload         17
406: invokestatic  #10
409: aload         19
411: invokestatic  #10
414: aload         21
416: invokestatic  #10
419: new           #55
422: dup
423: invokespecial #56
426: ldc           #57
428: invokevirtual #58
431: iload         22
433: invokevirtual #97
436: ldc           #60
438: invokevirtual #58
441: iconst_1
442: invokevirtual #97
445: ldc           #57
447: invokevirtual #58
450: invokevirtual #61
453: iload         22
455: iconst_1
456: if_icmpne     463
459: iconst_1
460: goto          464
463: iconst_0
464: invokestatic  #62
467: aload         23
469: invokestatic  #10
472: aload         24
474: invokestatic  #10
477: new           #55
480: dup
481: invokespecial #56
484: ldc           #57
486: invokevirtual #58
489: iload         25
491: invokevirtual #59
494: ldc           #60
496: invokevirtual #58
499: iconst_0
500: invokevirtual #59
503: ldc           #57
505: invokevirtual #58
508: invokevirtual #61
511: iload         25
513: ifne          520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #62
524: aload         26
526: invokestatic  #10
529: aload         27
531: invokestatic  #10
534: aload         28
536: invokestatic  #10
539: aload         29
541: invokestatic  #10
544: aload         31
546: invokestatic  #10
549: new           #55
552: dup
553: invokespecial #56
556: ldc           #57
558: invokevirtual #58
561: iload         32
563: invokevirtual #97
566: ldc           #60
568: invokevirtual #58
571: iconst_0
572: invokevirtual #97
575: ldc           #57
577: invokevirtual #58
580: invokevirtual #61
583: iload         32
585: ifne          592
588: iconst_1
589: goto          593
592: iconst_0
593: invokestatic  #62
596: new           #55
599: dup
600: invokespecial #56
603: ldc           #57
605: invokevirtual #58
608: aload         33
610: invokevirtual #58
613: ldc           #238
615: invokevirtual #58
618: invokevirtual #61
621: aload         33
623: ldc           #239
625: invokestatic  #96
628: new           #55
631: dup
632: invokespecial #56
635: ldc           #57
637: invokevirtual #58
640: iload         35
642: invokevirtual #59
645: ldc           #60
647: invokevirtual #58
650: bipush        -36
652: invokevirtual #59
655: ldc           #57
657: invokevirtual #58
660: invokevirtual #61
663: iload         35
665: bipush        -36
667: if_icmpne     674
670: iconst_1
671: goto          675
674: iconst_0
675: invokestatic  #62
678: aload         36
680: invokestatic  #10
683: aload         37
685: invokestatic  #10
688: aload         38
690: invokestatic  #10
693: aload         39
695: invokestatic  #10
698: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test078
Start line: 3006
End line: 3049
Method source code: 
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatterBuilder22.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder24 = periodFormatterBuilder22.printZeroIfSupported();
        org.joda.time.format.PeriodFormatter periodFormatter25 = periodFormatterBuilder22.toFormatter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder24);
        org.junit.Assert.assertNotNull(periodFormatter25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #394
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload_2
156: invokevirtual #245
159: astore        19
161: aload         19
163: invokevirtual #161
166: astore        20
168: aload         19
170: invokevirtual #149
173: astore        21
175: aload         19
177: invokevirtual #161
180: astore        22
182: aload_2
183: invokestatic  #10
186: aload_3
187: invokestatic  #10
190: aload         4
192: invokestatic  #10
195: aload         5
197: invokestatic  #10
200: aload         7
202: invokestatic  #10
205: new           #55
208: dup
209: invokespecial #56
212: ldc           #57
214: invokevirtual #58
217: iload         8
219: invokevirtual #97
222: ldc           #60
224: invokevirtual #58
227: iconst_1
228: invokevirtual #97
231: ldc           #57
233: invokevirtual #58
236: invokevirtual #61
239: iload         8
241: iconst_1
242: if_icmpne     249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #62
253: aload         10
255: invokestatic  #10
258: aload         11
260: invokestatic  #10
263: aload         12
265: invokestatic  #10
268: aload         13
270: invokestatic  #10
273: aload         14
275: invokestatic  #10
278: aload         15
280: invokestatic  #10
283: aload         17
285: invokestatic  #10
288: aload         18
290: invokestatic  #10
293: aload         19
295: invokestatic  #10
298: aload         20
300: invokestatic  #10
303: aload         21
305: invokestatic  #10
308: aload         22
310: invokestatic  #10
313: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test079
Start line: 3052
End line: 3086
Method source code: 
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter12.isParser();
        java.util.Locale locale16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter12.withLocale(locale16);
        org.joda.time.format.PeriodParser periodParser18 = periodFormatter12.getParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder8.append(periodFormatter12);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder19.maximumParsedDigits(315532800);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodParser18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #395
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: invokestatic  #12
88: astore        9
90: aconst_null
91: astore        10
93: aload         9
95: aload         10
97: invokevirtual #88
100: astore        11
102: aload         9
104: invokevirtual #89
107: istore        12
109: aconst_null
110: astore        13
112: aload         9
114: aload         13
116: invokevirtual #88
119: astore        14
121: aload         9
123: invokevirtual #119
126: astore        15
128: aload         6
130: aload         9
132: invokevirtual #118
135: astore        16
137: aload         16
139: ldc_w         #276
142: invokevirtual #213
145: astore        17
147: aload_2
148: invokestatic  #10
151: aload_3
152: invokestatic  #10
155: aload         4
157: invokestatic  #10
160: aload         5
162: invokestatic  #10
165: aload         6
167: invokestatic  #10
170: aload         7
172: invokestatic  #10
175: aload         8
177: invokestatic  #10
180: aload         9
182: invokestatic  #10
185: aload         11
187: invokestatic  #10
190: new           #55
193: dup
194: invokespecial #56
197: ldc           #57
199: invokevirtual #58
202: iload         12
204: invokevirtual #97
207: ldc           #60
209: invokevirtual #58
212: iconst_1
213: invokevirtual #97
216: ldc           #57
218: invokevirtual #58
221: invokevirtual #61
224: iload         12
226: iconst_1
227: if_icmpne     234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #62
238: aload         14
240: invokestatic  #10
243: aload         15
245: invokestatic  #10
248: aload         16
250: invokestatic  #10
253: aload         17
255: invokestatic  #10
258: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test080
Start line: 3089
End line: 3124
Method source code: 
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatterBuilder9.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.appendWeeks();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = period14.getFieldTypes();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.forFields(durationFieldTypeArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period17 = new org.joda.time.Period((java.lang.Object) periodFormatterBuilder9, periodType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.format.PeriodFormatterBuilder");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodPrinter12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertNotNull(periodType16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #396
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: invokevirtual #45
87: astore        9
89: aload         7
91: invokevirtual #26
94: astore        10
96: getstatic     #8
99: astore        11
101: aload         11
103: invokevirtual #397
106: astore        12
108: aload         12
110: invokestatic  #398
113: astore        13
115: new           #46
118: dup
119: aload         7
121: aload         13
123: invokespecial #399
126: astore        14
128: ldc_w         #400
131: invokestatic  #22
134: goto          139
137: astore        14
139: aload_2
140: invokestatic  #10
143: aload_3
144: invokestatic  #10
147: aload         4
149: invokestatic  #10
152: aload         5
154: invokestatic  #10
157: aload         6
159: invokestatic  #10
162: aload         7
164: invokestatic  #10
167: aload         8
169: invokestatic  #10
172: aload         9
174: invokestatic  #10
177: aload         10
179: invokestatic  #10
182: aload         11
184: invokestatic  #10
187: aload         12
189: invokestatic  #10
192: aload         13
194: invokestatic  #10
197: return
Exception table:
from    to  target type
115   134   137   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test081
Start line: 3127
End line: 3142
Method source code: 
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatterBuilder5.toParser();
        periodFormatterBuilder5.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodParser6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #401
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         5
60: invokevirtual #142
63: astore        6
65: aload         5
67: invokevirtual #212
70: aload_2
71: invokestatic  #10
74: aload_3
75: invokestatic  #10
78: aload         4
80: invokestatic  #10
83: aload         5
85: invokestatic  #10
88: aload         6
90: invokestatic  #10
93: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test082
Start line: 3145
End line: 3258
Method source code: 
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSeparatorIfFieldsBefore("dayOfMonth");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder12.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder12.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder12.printZeroIfSupported();
        org.joda.time.format.PeriodPrinter periodPrinter18 = periodFormatterBuilder12.toPrinter();
        org.joda.time.format.PeriodFormatter periodFormatter19 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter19.withLocale(locale20);
        boolean boolean22 = periodFormatter19.isParser();
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter19.withLocale(locale23);
        org.joda.time.format.PeriodPrinter periodPrinter25 = periodFormatter24.getPrinter();
        java.lang.String[] strArray30 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal31 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology34);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period38 = period35.minusDays((int) (byte) 100);
        java.util.Locale locale40 = null;
        int int41 = literal31.countFieldsToPrint((org.joda.time.ReadablePeriod) period38, 999, locale40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType45 = null;
        int int46 = period42.get(durationFieldType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period49 = period42.withField(durationFieldType47, 8);
        org.joda.time.Period period51 = period49.plusMonths((int) (short) 1);
        java.util.Locale locale53 = null;
        int int54 = literal31.countFieldsToPrint((org.joda.time.ReadablePeriod) period49, (-292275054), locale53);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal55 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology58);
        java.lang.String str60 = period59.toString();
        org.joda.time.Period period62 = period59.minusDays((int) (byte) 100);
        java.util.Locale locale64 = null;
        int int65 = literal55.countFieldsToPrint((org.joda.time.ReadablePeriod) period62, 999, locale64);
        org.joda.time.Period period66 = org.joda.time.Period.ZERO;
        org.joda.time.Period period68 = period66.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType69 = null;
        int int70 = period66.get(durationFieldType69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period73 = period66.withField(durationFieldType71, 8);
        org.joda.time.Period period75 = period73.plusMonths((int) (short) 1);
        java.util.Locale locale77 = null;
        int int78 = literal55.countFieldsToPrint((org.joda.time.ReadablePeriod) period73, (-292275054), locale77);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator81 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray30, (org.joda.time.format.PeriodPrinter) literal31, (org.joda.time.format.PeriodParser) literal55, true, true);
        org.joda.time.format.PeriodFormatter periodFormatter82 = new org.joda.time.format.PeriodFormatter(periodPrinter25, (org.joda.time.format.PeriodParser) literal55);
        org.joda.time.format.PeriodFormatter periodFormatter83 = new org.joda.time.format.PeriodFormatter(periodPrinter18, (org.joda.time.format.PeriodParser) literal55);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder84 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder86 = periodFormatterBuilder84.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder87 = periodFormatterBuilder84.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder88 = periodFormatterBuilder84.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder89 = periodFormatterBuilder88.appendMonths();
        org.joda.time.format.PeriodParser periodParser90 = periodFormatterBuilder89.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder91 = periodFormatterBuilder7.append((org.joda.time.format.PeriodPrinter) literal55, periodParser90);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodPrinter18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNotNull(periodPrinter25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(literal31);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT-0.090S" + "'", str36, "PT-0.090S");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(literal55);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT-0.090S" + "'", str60, "PT-0.090S");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder86);
        org.junit.Assert.assertNotNull(periodFormatterBuilder87);
        org.junit.Assert.assertNotNull(periodFormatterBuilder88);
        org.junit.Assert.assertNotNull(periodFormatterBuilder89);
        org.junit.Assert.assertNotNull(periodParser90);
        org.junit.Assert.assertNotNull(periodFormatterBuilder91);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #402
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #139
56: astore        5
58: aload         5
60: ldc_w         #403
63: invokevirtual #67
66: astore        6
68: new           #14
71: dup
72: invokespecial #15
75: astore        7
77: aload         7
79: ldc           #16
81: invokevirtual #17
84: astore        8
86: aload         7
88: invokevirtual #25
91: astore        9
93: aload         7
95: invokevirtual #26
98: astore        10
100: aload         10
102: invokevirtual #33
105: astore        11
107: aload         10
109: ldc           #29
111: ldc           #192
113: invokevirtual #41
116: astore        12
118: aload         10
120: invokevirtual #149
123: astore        13
125: aload         10
127: invokevirtual #45
130: astore        14
132: invokestatic  #12
135: astore        15
137: aconst_null
138: astore        16
140: aload         15
142: aload         16
144: invokevirtual #88
147: astore        17
149: aload         15
151: invokevirtual #89
154: istore        18
156: aconst_null
157: astore        19
159: aload         15
161: aload         19
163: invokevirtual #88
166: astore        20
168: aload         20
170: invokevirtual #90
173: astore        21
175: iconst_2
176: anewarray     #99
179: dup
180: iconst_0
181: ldc           #141
183: aastore
184: dup
185: iconst_1
186: ldc           #250
188: aastore
189: astore        22
191: getstatic     #78
194: astore        23
196: aconst_null
197: astore        24
199: new           #46
202: dup
203: ldc2_w        #79
206: ldc2_w        #81
209: aload         24
211: invokespecial #83
214: astore        25
216: aload         25
218: invokevirtual #84
221: astore        26
223: aload         25
225: bipush        100
227: invokevirtual #85
230: astore        27
232: aconst_null
233: astore        28
235: aload         23
237: aload         27
239: sipush        999
242: aload         28
244: invokevirtual #86
247: istore        29
249: getstatic     #8
252: astore        30
254: aload         30
256: iconst_m1
257: invokevirtual #9
260: astore        31
262: aconst_null
263: astore        32
265: aload         30
267: aload         32
269: invokevirtual #201
272: istore        33
274: invokestatic  #202
277: astore        34
279: aload         30
281: aload         34
283: bipush        8
285: invokevirtual #203
288: astore        35
290: aload         35
292: iconst_1
293: invokevirtual #251
296: astore        36
298: aconst_null
299: astore        37
301: aload         23
303: aload         35
305: ldc           #252
307: aload         37
309: invokevirtual #86
312: istore        38
314: getstatic     #78
317: astore        39
319: aconst_null
320: astore        40
322: new           #46
325: dup
326: ldc2_w        #79
329: ldc2_w        #81
332: aload         40
334: invokespecial #83
337: astore        41
339: aload         41
341: invokevirtual #84
344: astore        42
346: aload         41
348: bipush        100
350: invokevirtual #85
353: astore        43
355: aconst_null
356: astore        44
358: aload         39
360: aload         43
362: sipush        999
365: aload         44
367: invokevirtual #86
370: istore        45
372: getstatic     #8
375: astore        46
377: aload         46
379: iconst_m1
380: invokevirtual #9
383: astore        47
385: aconst_null
386: astore        48
388: aload         46
390: aload         48
392: invokevirtual #201
395: istore        49
397: invokestatic  #202
400: astore        50
402: aload         46
404: aload         50
406: bipush        8
408: invokevirtual #203
411: astore        51
413: aload         51
415: iconst_1
416: invokevirtual #251
419: astore        52
421: aconst_null
422: astore        53
424: aload         39
426: aload         51
428: ldc           #252
430: aload         53
432: invokevirtual #86
435: istore        54
437: new           #105
440: dup
441: ldc           #131
443: ldc           #253
445: aload         22
447: aload         23
449: aload         39
451: iconst_1
452: iconst_1
453: invokespecial #107
456: astore        55
458: new           #164
461: dup
462: aload         21
464: aload         39
466: invokespecial #165
469: astore        56
471: new           #164
474: dup
475: aload         14
477: aload         39
479: invokespecial #165
482: astore        57
484: new           #14
487: dup
488: invokespecial #15
491: astore        58
493: aload         58
495: ldc           #16
497: invokevirtual #17
500: astore        59
502: aload         58
504: invokevirtual #25
507: astore        60
509: aload         58
511: invokevirtual #39
514: astore        61
516: aload         61
518: invokevirtual #72
521: astore        62
523: aload         62
525: invokevirtual #142
528: astore        63
530: aload         6
532: aload         39
534: aload         63
536: invokevirtual #87
539: astore        64
541: aload_2
542: invokestatic  #10
545: aload_3
546: invokestatic  #10
549: aload         4
551: invokestatic  #10
554: aload         5
556: invokestatic  #10
559: aload         6
561: invokestatic  #10
564: aload         8
566: invokestatic  #10
569: aload         9
571: invokestatic  #10
574: aload         10
576: invokestatic  #10
579: aload         11
581: invokestatic  #10
584: aload         12
586: invokestatic  #10
589: aload         13
591: invokestatic  #10
594: aload         14
596: invokestatic  #10
599: aload         15
601: invokestatic  #10
604: aload         17
606: invokestatic  #10
609: new           #55
612: dup
613: invokespecial #56
616: ldc           #57
618: invokevirtual #58
621: iload         18
623: invokevirtual #97
626: ldc           #60
628: invokevirtual #58
631: iconst_1
632: invokevirtual #97
635: ldc           #57
637: invokevirtual #58
640: invokevirtual #61
643: iload         18
645: iconst_1
646: if_icmpne     653
649: iconst_1
650: goto          654
653: iconst_0
654: invokestatic  #62
657: aload         20
659: invokestatic  #10
662: aload         21
664: invokestatic  #10
667: aload         22
669: invokestatic  #10
672: aload         23
674: invokestatic  #10
677: new           #55
680: dup
681: invokespecial #56
684: ldc           #57
686: invokevirtual #58
689: aload         26
691: invokevirtual #58
694: ldc           #94
696: invokevirtual #58
699: invokevirtual #61
702: aload         26
704: ldc           #95
706: invokestatic  #96
709: aload         27
711: invokestatic  #10
714: new           #55
717: dup
718: invokespecial #56
721: ldc           #57
723: invokevirtual #58
726: iload         29
728: invokevirtual #59
731: ldc           #60
733: invokevirtual #58
736: iconst_0
737: invokevirtual #59
740: ldc           #57
742: invokevirtual #58
745: invokevirtual #61
748: iload         29
750: ifne          757
753: iconst_1
754: goto          758
757: iconst_0
758: invokestatic  #62
761: aload         30
763: invokestatic  #10
766: aload         31
768: invokestatic  #10
771: new           #55
774: dup
775: invokespecial #56
778: ldc           #57
780: invokevirtual #58
783: iload         33
785: invokevirtual #59
788: ldc           #60
790: invokevirtual #58
793: iconst_0
794: invokevirtual #59
797: ldc           #57
799: invokevirtual #58
802: invokevirtual #61
805: iload         33
807: ifne          814
810: iconst_1
811: goto          815
814: iconst_0
815: invokestatic  #62
818: aload         34
820: invokestatic  #10
823: aload         35
825: invokestatic  #10
828: aload         36
830: invokestatic  #10
833: new           #55
836: dup
837: invokespecial #56
840: ldc           #57
842: invokevirtual #58
845: iload         38
847: invokevirtual #59
850: ldc           #60
852: invokevirtual #58
855: iconst_0
856: invokevirtual #59
859: ldc           #57
861: invokevirtual #58
864: invokevirtual #61
867: iload         38
869: ifne          876
872: iconst_1
873: goto          877
876: iconst_0
877: invokestatic  #62
880: aload         39
882: invokestatic  #10
885: new           #55
888: dup
889: invokespecial #56
892: ldc           #57
894: invokevirtual #58
897: aload         42
899: invokevirtual #58
902: ldc           #94
904: invokevirtual #58
907: invokevirtual #61
910: aload         42
912: ldc           #95
914: invokestatic  #96
917: aload         43
919: invokestatic  #10
922: new           #55
925: dup
926: invokespecial #56
929: ldc           #57
931: invokevirtual #58
934: iload         45
936: invokevirtual #59
939: ldc           #60
941: invokevirtual #58
944: iconst_0
945: invokevirtual #59
948: ldc           #57
950: invokevirtual #58
953: invokevirtual #61
956: iload         45
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #62
969: aload         46
971: invokestatic  #10
974: aload         47
976: invokestatic  #10
979: new           #55
982: dup
983: invokespecial #56
986: ldc           #57
988: invokevirtual #58
991: iload         49
993: invokevirtual #59
996: ldc           #60
998: invokevirtual #58
1001: iconst_0
1002: invokevirtual #59
1005: ldc           #57
1007: invokevirtual #58
1010: invokevirtual #61
1013: iload         49
1015: ifne          1022
1018: iconst_1
1019: goto          1023
1022: iconst_0
1023: invokestatic  #62
1026: aload         50
1028: invokestatic  #10
1031: aload         51
1033: invokestatic  #10
1036: aload         52
1038: invokestatic  #10
1041: new           #55
1044: dup
1045: invokespecial #56
1048: ldc           #57
1050: invokevirtual #58
1053: iload         54
1055: invokevirtual #59
1058: ldc           #60
1060: invokevirtual #58
1063: iconst_0
1064: invokevirtual #59
1067: ldc           #57
1069: invokevirtual #58
1072: invokevirtual #61
1075: iload         54
1077: ifne          1084
1080: iconst_1
1081: goto          1085
1084: iconst_0
1085: invokestatic  #62
1088: aload         59
1090: invokestatic  #10
1093: aload         60
1095: invokestatic  #10
1098: aload         61
1100: invokestatic  #10
1103: aload         62
1105: invokestatic  #10
1108: aload         63
1110: invokestatic  #10
1113: aload         64
1115: invokestatic  #10
1118: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test083
Start line: 3261
End line: 3281
Method source code: 
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder6.appendMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #404
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         6
118: invokevirtual #39
121: astore        9
123: aload_2
124: invokestatic  #10
127: aload_3
128: invokestatic  #10
131: aload         4
133: invokestatic  #10
136: aload         5
138: invokestatic  #10
141: aload         6
143: invokestatic  #10
146: aload         7
148: invokestatic  #10
151: aload         8
153: invokestatic  #10
156: aload         9
158: invokestatic  #10
161: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test084
Start line: 3284
End line: 3314
Method source code: 
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder15.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #406
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: aload         15
128: invokevirtual #26
131: astore        16
133: aload_2
134: invokestatic  #10
137: aload_3
138: invokestatic  #10
141: aload         4
143: invokestatic  #10
146: aload         5
148: invokestatic  #10
151: aload         6
153: invokestatic  #10
156: aload         7
158: invokestatic  #354
161: aload         10
163: invokestatic  #10
166: new           #55
169: dup
170: invokespecial #56
173: ldc           #57
175: invokevirtual #58
178: iload         12
180: invokevirtual #97
183: ldc           #60
185: invokevirtual #58
188: iconst_0
189: invokevirtual #97
192: ldc           #57
194: invokevirtual #58
197: invokevirtual #61
200: iload         12
202: ifne          209
205: iconst_1
206: goto          210
209: iconst_0
210: invokestatic  #62
213: aload         14
215: invokestatic  #10
218: aload         15
220: invokestatic  #10
223: aload         16
225: invokestatic  #10
228: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test085
Start line: 3317
End line: 3338
Method source code: 
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSeparatorIfFieldsBefore("dayOfMonth");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.appendSeparator("centuryOfEra", "33075063");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #407
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #139
56: astore        5
58: aload         5
60: ldc_w         #403
63: invokevirtual #67
66: astore        6
68: aload         6
70: ldc_w         #408
73: ldc_w         #409
76: invokevirtual #20
79: astore        7
81: ldc           #21
83: invokestatic  #22
86: goto          91
89: astore        7
91: aload_2
92: invokestatic  #10
95: aload_3
96: invokestatic  #10
99: aload         4
101: invokestatic  #10
104: aload         5
106: invokestatic  #10
109: aload         6
111: invokestatic  #10
114: return
Exception table:
from    to  target type
68    86    89   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test086
Start line: 3341
End line: 3380
Method source code: 
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder24 = periodFormatterBuilder2.appendSuffix("379");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodFormatterBuilder24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #410
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload_2
156: invokevirtual #245
159: astore        19
161: aload_2
162: ldc_w         #411
165: invokevirtual #132
168: astore        20
170: aload_2
171: invokestatic  #10
174: aload_3
175: invokestatic  #10
178: aload         4
180: invokestatic  #10
183: aload         5
185: invokestatic  #10
188: aload         7
190: invokestatic  #10
193: new           #55
196: dup
197: invokespecial #56
200: ldc           #57
202: invokevirtual #58
205: iload         8
207: invokevirtual #97
210: ldc           #60
212: invokevirtual #58
215: iconst_1
216: invokevirtual #97
219: ldc           #57
221: invokevirtual #58
224: invokevirtual #61
227: iload         8
229: iconst_1
230: if_icmpne     237
233: iconst_1
234: goto          238
237: iconst_0
238: invokestatic  #62
241: aload         10
243: invokestatic  #10
246: aload         11
248: invokestatic  #10
251: aload         12
253: invokestatic  #10
256: aload         13
258: invokestatic  #10
261: aload         14
263: invokestatic  #10
266: aload         15
268: invokestatic  #10
271: aload         17
273: invokestatic  #10
276: aload         18
278: invokestatic  #10
281: aload         19
283: invokestatic  #10
286: aload         20
288: invokestatic  #10
291: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test087
Start line: 3383
End line: 3394
Method source code: 
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        periodFormatterBuilder0.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #412
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #212
55: aload_2
56: invokestatic  #10
59: aload_3
60: invokestatic  #10
63: aload         4
65: invokestatic  #10
68: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test088
Start line: 3397
End line: 3415
Method source code: 
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendPrefix("DateTimeField[clockhourOfHalfday]", "eras");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #413
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         4
71: invokevirtual #149
74: astore        7
76: aload         7
78: ldc_w         #414
81: ldc_w         #295
84: invokevirtual #41
87: astore        8
89: aload_2
90: invokestatic  #10
93: aload_3
94: invokestatic  #10
97: aload         4
99: invokestatic  #10
102: aload         5
104: invokestatic  #10
107: aload         6
109: invokestatic  #10
112: aload         7
114: invokestatic  #10
117: aload         8
119: invokestatic  #10
122: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test089
Start line: 3418
End line: 3530
Method source code: 
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.maximumParsedDigits((-24));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder11.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder11.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder11.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder11.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal17 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology20);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period24 = period21.minusDays((int) (byte) 100);
        java.util.Locale locale26 = null;
        int int27 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) period24, 999, locale26);
        org.joda.time.format.PeriodParser periodParser28 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder11.append((org.joda.time.format.PeriodPrinter) literal17, periodParser28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) ' ');
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        int int33 = period32.getHours();
        org.joda.time.Period period35 = period32.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod36 = period35.toMutablePeriod();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType40 = org.joda.time.DateTimeUtils.getPeriodType(periodType39);
        org.joda.time.Period period41 = new org.joda.time.Period(100L, (long) (short) -1, periodType39);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.weeks();
        boolean boolean43 = periodType39.isSupported(durationFieldType42);
        mutablePeriod36.add(durationFieldType42, (int) (byte) 100);
        java.lang.String str46 = mutablePeriod36.toString();
        mutablePeriod36.setHours((int) (short) 10);
        mutablePeriod36.setYears(0);
        org.joda.time.Period period51 = period31.withFields((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration52, readableInstant53);
        int int55 = period54.getWeeks();
        org.joda.time.Period period57 = period54.minusHours((int) '4');
        org.joda.time.Minutes minutes58 = period57.toStandardMinutes();
        org.joda.time.Period period60 = period57.minusMonths(0);
        int int61 = period57.getMillis();
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) period57);
        java.util.Locale locale64 = null;
        int int65 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod36, 3, locale64);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder66 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder68 = periodFormatterBuilder66.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder69 = periodFormatterBuilder66.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder70 = periodFormatterBuilder66.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder71 = periodFormatterBuilder66.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder74 = periodFormatterBuilder66.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder76 = periodFormatterBuilder74.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder77 = periodFormatterBuilder74.appendWeeks();
        org.joda.time.format.PeriodParser periodParser78 = periodFormatterBuilder74.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder7.append((org.joda.time.format.PeriodPrinter) literal17, periodParser78);
        org.joda.time.Period period81 = org.joda.time.Period.months(6);
        org.joda.time.Period period83 = period81.plusWeeks((-81));
        org.joda.time.tz.DefaultNameProvider defaultNameProvider84 = new org.joda.time.tz.DefaultNameProvider();
        boolean boolean85 = period83.equals((java.lang.Object) defaultNameProvider84);
        java.util.Locale locale87 = null;
        int int88 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) period83, (int) '#', locale87);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(literal17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-0.090S" + "'", str22, "PT-0.090S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P100W" + "'", str46, "P100W");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder68);
        org.junit.Assert.assertNotNull(periodFormatterBuilder69);
        org.junit.Assert.assertNotNull(periodFormatterBuilder70);
        org.junit.Assert.assertNotNull(periodFormatterBuilder71);
        org.junit.Assert.assertNotNull(periodFormatterBuilder74);
        org.junit.Assert.assertNotNull(periodFormatterBuilder76);
        org.junit.Assert.assertNotNull(periodFormatterBuilder77);
        org.junit.Assert.assertNotNull(periodParser78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #415
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: ldc           #184
61: invokevirtual #28
64: astore        6
66: aload         6
68: invokevirtual #185
71: astore        7
73: aload         6
75: bipush        -24
77: invokevirtual #213
80: astore        8
82: new           #14
85: dup
86: invokespecial #15
89: astore        9
91: aload         9
93: ldc           #16
95: invokevirtual #17
98: astore        10
100: aload         9
102: invokevirtual #25
105: astore        11
107: aload         9
109: invokevirtual #76
112: astore        12
114: aload         9
116: invokevirtual #77
119: astore        13
121: getstatic     #78
124: astore        14
126: aconst_null
127: astore        15
129: new           #46
132: dup
133: ldc2_w        #79
136: ldc2_w        #81
139: aload         15
141: invokespecial #83
144: astore        16
146: aload         16
148: invokevirtual #84
151: astore        17
153: aload         16
155: bipush        100
157: invokevirtual #85
160: astore        18
162: aconst_null
163: astore        19
165: aload         14
167: aload         18
169: sipush        999
172: aload         19
174: invokevirtual #86
177: istore        20
179: aconst_null
180: astore        21
182: aload         9
184: aload         14
186: aload         21
188: invokevirtual #87
191: astore        22
193: new           #46
196: dup
197: ldc2_w        #121
200: invokespecial #91
203: astore        23
205: getstatic     #8
208: astore        24
210: aload         24
212: invokevirtual #216
215: istore        25
217: aload         24
219: iconst_0
220: invokevirtual #200
223: astore        26
225: aload         26
227: invokevirtual #205
230: astore        27
232: invokestatic  #171
235: astore        28
237: aload         28
239: invokestatic  #172
242: astore        29
244: new           #46
247: dup
248: ldc2_w        #79
251: ldc2_w        #173
254: aload         28
256: invokespecial #175
259: astore        30
261: invokestatic  #176
264: astore        31
266: aload         28
268: aload         31
270: invokevirtual #177
273: istore        32
275: aload         27
277: aload         31
279: bipush        100
281: invokevirtual #226
284: aload         27
286: invokevirtual #235
289: astore        33
291: aload         27
293: bipush        10
295: invokevirtual #416
298: aload         27
300: iconst_0
301: invokevirtual #236
304: aload         23
306: aload         27
308: invokevirtual #364
311: astore        34
313: aconst_null
314: astore        35
316: aconst_null
317: astore        36
319: new           #46
322: dup
323: aload         35
325: aload         36
327: invokespecial #47
330: astore        37
332: aload         37
334: invokevirtual #48
337: istore        38
339: aload         37
341: bipush        52
343: invokevirtual #49
346: astore        39
348: aload         39
350: invokevirtual #50
353: astore        40
355: aload         39
357: iconst_0
358: invokevirtual #51
361: astore        41
363: aload         39
365: invokevirtual #417
368: istore        42
370: aload         27
372: aload         39
374: invokevirtual #219
377: aconst_null
378: astore        43
380: aload         14
382: aload         27
384: iconst_3
385: aload         43
387: invokevirtual #86
390: istore        44
392: new           #14
395: dup
396: invokespecial #15
399: astore        45
401: aload         45
403: ldc           #16
405: invokevirtual #17
408: astore        46
410: aload         45
412: invokevirtual #25
415: astore        47
417: aload         45
419: invokevirtual #76
422: astore        48
424: aload         45
426: invokevirtual #77
429: astore        49
431: aload         45
433: ldc_w         #332
436: ldc_w         #333
439: invokevirtual #30
442: astore        50
444: aload         50
446: ldc           #146
448: invokevirtual #132
451: astore        51
453: aload         50
455: invokevirtual #26
458: astore        52
460: aload         50
462: invokevirtual #142
465: astore        53
467: aload         6
469: aload         14
471: aload         53
473: invokevirtual #87
476: astore        54
478: bipush        6
480: invokestatic  #189
483: astore        55
485: aload         55
487: bipush        -81
489: invokevirtual #334
492: astore        56
494: new           #418
497: dup
498: invokespecial #419
501: astore        57
503: aload         56
505: aload         57
507: invokevirtual #420
510: istore        58
512: aconst_null
513: astore        59
515: aload         14
517: aload         56
519: bipush        35
521: aload         59
523: invokevirtual #86
526: istore        60
528: aload_2
529: invokestatic  #10
532: aload_3
533: invokestatic  #10
536: aload         4
538: invokestatic  #10
541: aload         5
543: invokestatic  #10
546: aload         6
548: invokestatic  #10
551: aload         7
553: invokestatic  #10
556: aload         8
558: invokestatic  #10
561: aload         10
563: invokestatic  #10
566: aload         11
568: invokestatic  #10
571: aload         12
573: invokestatic  #10
576: aload         13
578: invokestatic  #10
581: aload         14
583: invokestatic  #10
586: new           #55
589: dup
590: invokespecial #56
593: ldc           #57
595: invokevirtual #58
598: aload         17
600: invokevirtual #58
603: ldc           #94
605: invokevirtual #58
608: invokevirtual #61
611: aload         17
613: ldc           #95
615: invokestatic  #96
618: aload         18
620: invokestatic  #10
623: new           #55
626: dup
627: invokespecial #56
630: ldc           #57
632: invokevirtual #58
635: iload         20
637: invokevirtual #59
640: ldc           #60
642: invokevirtual #58
645: iconst_0
646: invokevirtual #59
649: ldc           #57
651: invokevirtual #58
654: invokevirtual #61
657: iload         20
659: ifne          666
662: iconst_1
663: goto          667
666: iconst_0
667: invokestatic  #62
670: aload         22
672: invokestatic  #10
675: aload         24
677: invokestatic  #10
680: new           #55
683: dup
684: invokespecial #56
687: ldc           #57
689: invokevirtual #58
692: iload         25
694: invokevirtual #59
697: ldc           #60
699: invokevirtual #58
702: iconst_0
703: invokevirtual #59
706: ldc           #57
708: invokevirtual #58
711: invokevirtual #61
714: iload         25
716: ifne          723
719: iconst_1
720: goto          724
723: iconst_0
724: invokestatic  #62
727: aload         26
729: invokestatic  #10
732: aload         27
734: invokestatic  #10
737: aload         28
739: invokestatic  #10
742: aload         29
744: invokestatic  #10
747: aload         31
749: invokestatic  #10
752: new           #55
755: dup
756: invokespecial #56
759: ldc           #57
761: invokevirtual #58
764: iload         32
766: invokevirtual #97
769: ldc           #60
771: invokevirtual #58
774: iconst_0
775: invokevirtual #97
778: ldc           #57
780: invokevirtual #58
783: invokevirtual #61
786: iload         32
788: ifne          795
791: iconst_1
792: goto          796
795: iconst_0
796: invokestatic  #62
799: new           #55
802: dup
803: invokespecial #56
806: ldc           #57
808: invokevirtual #58
811: aload         33
813: invokevirtual #58
816: ldc           #238
818: invokevirtual #58
821: invokevirtual #61
824: aload         33
826: ldc           #239
828: invokestatic  #96
831: aload         34
833: invokestatic  #10
836: new           #55
839: dup
840: invokespecial #56
843: ldc           #57
845: invokevirtual #58
848: iload         38
850: invokevirtual #59
853: ldc           #60
855: invokevirtual #58
858: iconst_0
859: invokevirtual #59
862: ldc           #57
864: invokevirtual #58
867: invokevirtual #61
870: iload         38
872: ifne          879
875: iconst_1
876: goto          880
879: iconst_0
880: invokestatic  #62
883: aload         39
885: invokestatic  #10
888: aload         40
890: invokestatic  #10
893: aload         41
895: invokestatic  #10
898: new           #55
901: dup
902: invokespecial #56
905: ldc           #57
907: invokevirtual #58
910: iload         42
912: invokevirtual #59
915: ldc           #60
917: invokevirtual #58
920: iconst_0
921: invokevirtual #59
924: ldc           #57
926: invokevirtual #58
929: invokevirtual #61
932: iload         42
934: ifne          941
937: iconst_1
938: goto          942
941: iconst_0
942: invokestatic  #62
945: new           #55
948: dup
949: invokespecial #56
952: ldc           #57
954: invokevirtual #58
957: iload         44
959: invokevirtual #59
962: ldc           #60
964: invokevirtual #58
967: iconst_0
968: invokevirtual #59
971: ldc           #57
973: invokevirtual #58
976: invokevirtual #61
979: iload         44
981: ifne          988
984: iconst_1
985: goto          989
988: iconst_0
989: invokestatic  #62
992: aload         46
994: invokestatic  #10
997: aload         47
999: invokestatic  #10
1002: aload         48
1004: invokestatic  #10
1007: aload         49
1009: invokestatic  #10
1012: aload         50
1014: invokestatic  #10
1017: aload         51
1019: invokestatic  #10
1022: aload         52
1024: invokestatic  #10
1027: aload         53
1029: invokestatic  #10
1032: aload         54
1034: invokestatic  #10
1037: aload         55
1039: invokestatic  #10
1042: aload         56
1044: invokestatic  #10
1047: new           #55
1050: dup
1051: invokespecial #56
1054: ldc           #57
1056: invokevirtual #58
1059: iload         58
1061: invokevirtual #97
1064: ldc           #60
1066: invokevirtual #58
1069: iconst_0
1070: invokevirtual #97
1073: ldc           #57
1075: invokevirtual #58
1078: invokevirtual #61
1081: iload         58
1083: ifne          1090
1086: iconst_1
1087: goto          1091
1090: iconst_0
1091: invokestatic  #62
1094: new           #55
1097: dup
1098: invokespecial #56
1101: ldc           #57
1103: invokevirtual #58
1106: iload         60
1108: invokevirtual #59
1111: ldc           #60
1113: invokevirtual #58
1116: iconst_0
1117: invokevirtual #59
1120: ldc           #57
1122: invokevirtual #58
1125: invokevirtual #61
1128: iload         60
1130: ifne          1137
1133: iconst_1
1134: goto          1138
1137: iconst_0
1138: invokestatic  #62
1141: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test090
Start line: 3533
End line: 3616
Method source code: 
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodParser periodParser12 = periodFormatterBuilder8.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder8.appendPrefix("+07:32", "1776");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder8.appendDays();
        java.lang.String[] strArray23 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal24 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology27);
        java.lang.String str29 = period28.toString();
        org.joda.time.Period period31 = period28.minusDays((int) (byte) 100);
        java.util.Locale locale33 = null;
        int int34 = literal24.countFieldsToPrint((org.joda.time.ReadablePeriod) period31, 999, locale33);
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period35.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType38 = null;
        int int39 = period35.get(durationFieldType38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period42 = period35.withField(durationFieldType40, 8);
        org.joda.time.Period period44 = period42.plusMonths((int) (short) 1);
        java.util.Locale locale46 = null;
        int int47 = literal24.countFieldsToPrint((org.joda.time.ReadablePeriod) period42, (-292275054), locale46);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal48 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology51);
        java.lang.String str53 = period52.toString();
        org.joda.time.Period period55 = period52.minusDays((int) (byte) 100);
        java.util.Locale locale57 = null;
        int int58 = literal48.countFieldsToPrint((org.joda.time.ReadablePeriod) period55, 999, locale57);
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.Period period61 = period59.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType62 = null;
        int int63 = period59.get(durationFieldType62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period66 = period59.withField(durationFieldType64, 8);
        org.joda.time.Period period68 = period66.plusMonths((int) (short) 1);
        java.util.Locale locale70 = null;
        int int71 = literal48.countFieldsToPrint((org.joda.time.ReadablePeriod) period66, (-292275054), locale70);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator74 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray23, (org.joda.time.format.PeriodPrinter) literal24, (org.joda.time.format.PeriodParser) literal48, true, true);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder75 = periodFormatterBuilder16.appendSeparator("24", "", strArray23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodParser12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(literal24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT-0.090S" + "'", str29, "PT-0.090S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(literal48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT-0.090S" + "'", str53, "PT-0.090S");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder75);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #421
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: aload         6
87: invokevirtual #142
90: astore        9
92: aload         6
94: ldc           #255
96: ldc_w         #422
99: invokevirtual #41
102: astore        10
104: aload         6
106: invokevirtual #71
109: astore        11
111: iconst_2
112: anewarray     #99
115: dup
116: iconst_0
117: ldc           #141
119: aastore
120: dup
121: iconst_1
122: ldc           #250
124: aastore
125: astore        12
127: getstatic     #78
130: astore        13
132: aconst_null
133: astore        14
135: new           #46
138: dup
139: ldc2_w        #79
142: ldc2_w        #81
145: aload         14
147: invokespecial #83
150: astore        15
152: aload         15
154: invokevirtual #84
157: astore        16
159: aload         15
161: bipush        100
163: invokevirtual #85
166: astore        17
168: aconst_null
169: astore        18
171: aload         13
173: aload         17
175: sipush        999
178: aload         18
180: invokevirtual #86
183: istore        19
185: getstatic     #8
188: astore        20
190: aload         20
192: iconst_m1
193: invokevirtual #9
196: astore        21
198: aconst_null
199: astore        22
201: aload         20
203: aload         22
205: invokevirtual #201
208: istore        23
210: invokestatic  #202
213: astore        24
215: aload         20
217: aload         24
219: bipush        8
221: invokevirtual #203
224: astore        25
226: aload         25
228: iconst_1
229: invokevirtual #251
232: astore        26
234: aconst_null
235: astore        27
237: aload         13
239: aload         25
241: ldc           #252
243: aload         27
245: invokevirtual #86
248: istore        28
250: getstatic     #78
253: astore        29
255: aconst_null
256: astore        30
258: new           #46
261: dup
262: ldc2_w        #79
265: ldc2_w        #81
268: aload         30
270: invokespecial #83
273: astore        31
275: aload         31
277: invokevirtual #84
280: astore        32
282: aload         31
284: bipush        100
286: invokevirtual #85
289: astore        33
291: aconst_null
292: astore        34
294: aload         29
296: aload         33
298: sipush        999
301: aload         34
303: invokevirtual #86
306: istore        35
308: getstatic     #8
311: astore        36
313: aload         36
315: iconst_m1
316: invokevirtual #9
319: astore        37
321: aconst_null
322: astore        38
324: aload         36
326: aload         38
328: invokevirtual #201
331: istore        39
333: invokestatic  #202
336: astore        40
338: aload         36
340: aload         40
342: bipush        8
344: invokevirtual #203
347: astore        41
349: aload         41
351: iconst_1
352: invokevirtual #251
355: astore        42
357: aconst_null
358: astore        43
360: aload         29
362: aload         41
364: ldc           #252
366: aload         43
368: invokevirtual #86
371: istore        44
373: new           #105
376: dup
377: ldc           #131
379: ldc           #253
381: aload         12
383: aload         13
385: aload         29
387: iconst_1
388: iconst_1
389: invokespecial #107
392: astore        45
394: aload         11
396: ldc_w         #423
399: ldc           #74
401: aload         12
403: invokevirtual #137
406: astore        46
408: aload_2
409: invokestatic  #10
412: aload_3
413: invokestatic  #10
416: aload         4
418: invokestatic  #10
421: aload         5
423: invokestatic  #10
426: aload         6
428: invokestatic  #10
431: aload         7
433: invokestatic  #10
436: aload         8
438: invokestatic  #10
441: aload         9
443: invokestatic  #10
446: aload         10
448: invokestatic  #10
451: aload         11
453: invokestatic  #10
456: aload         12
458: invokestatic  #10
461: aload         13
463: invokestatic  #10
466: new           #55
469: dup
470: invokespecial #56
473: ldc           #57
475: invokevirtual #58
478: aload         16
480: invokevirtual #58
483: ldc           #94
485: invokevirtual #58
488: invokevirtual #61
491: aload         16
493: ldc           #95
495: invokestatic  #96
498: aload         17
500: invokestatic  #10
503: new           #55
506: dup
507: invokespecial #56
510: ldc           #57
512: invokevirtual #58
515: iload         19
517: invokevirtual #59
520: ldc           #60
522: invokevirtual #58
525: iconst_0
526: invokevirtual #59
529: ldc           #57
531: invokevirtual #58
534: invokevirtual #61
537: iload         19
539: ifne          546
542: iconst_1
543: goto          547
546: iconst_0
547: invokestatic  #62
550: aload         20
552: invokestatic  #10
555: aload         21
557: invokestatic  #10
560: new           #55
563: dup
564: invokespecial #56
567: ldc           #57
569: invokevirtual #58
572: iload         23
574: invokevirtual #59
577: ldc           #60
579: invokevirtual #58
582: iconst_0
583: invokevirtual #59
586: ldc           #57
588: invokevirtual #58
591: invokevirtual #61
594: iload         23
596: ifne          603
599: iconst_1
600: goto          604
603: iconst_0
604: invokestatic  #62
607: aload         24
609: invokestatic  #10
612: aload         25
614: invokestatic  #10
617: aload         26
619: invokestatic  #10
622: new           #55
625: dup
626: invokespecial #56
629: ldc           #57
631: invokevirtual #58
634: iload         28
636: invokevirtual #59
639: ldc           #60
641: invokevirtual #58
644: iconst_0
645: invokevirtual #59
648: ldc           #57
650: invokevirtual #58
653: invokevirtual #61
656: iload         28
658: ifne          665
661: iconst_1
662: goto          666
665: iconst_0
666: invokestatic  #62
669: aload         29
671: invokestatic  #10
674: new           #55
677: dup
678: invokespecial #56
681: ldc           #57
683: invokevirtual #58
686: aload         32
688: invokevirtual #58
691: ldc           #94
693: invokevirtual #58
696: invokevirtual #61
699: aload         32
701: ldc           #95
703: invokestatic  #96
706: aload         33
708: invokestatic  #10
711: new           #55
714: dup
715: invokespecial #56
718: ldc           #57
720: invokevirtual #58
723: iload         35
725: invokevirtual #59
728: ldc           #60
730: invokevirtual #58
733: iconst_0
734: invokevirtual #59
737: ldc           #57
739: invokevirtual #58
742: invokevirtual #61
745: iload         35
747: ifne          754
750: iconst_1
751: goto          755
754: iconst_0
755: invokestatic  #62
758: aload         36
760: invokestatic  #10
763: aload         37
765: invokestatic  #10
768: new           #55
771: dup
772: invokespecial #56
775: ldc           #57
777: invokevirtual #58
780: iload         39
782: invokevirtual #59
785: ldc           #60
787: invokevirtual #58
790: iconst_0
791: invokevirtual #59
794: ldc           #57
796: invokevirtual #58
799: invokevirtual #61
802: iload         39
804: ifne          811
807: iconst_1
808: goto          812
811: iconst_0
812: invokestatic  #62
815: aload         40
817: invokestatic  #10
820: aload         41
822: invokestatic  #10
825: aload         42
827: invokestatic  #10
830: new           #55
833: dup
834: invokespecial #56
837: ldc           #57
839: invokevirtual #58
842: iload         44
844: invokevirtual #59
847: ldc           #60
849: invokevirtual #58
852: iconst_0
853: invokevirtual #59
856: ldc           #57
858: invokevirtual #58
861: invokevirtual #61
864: iload         44
866: ifne          873
869: iconst_1
870: goto          874
873: iconst_0
874: invokestatic  #62
877: aload         46
879: invokestatic  #10
882: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test091
Start line: 3619
End line: 3638
Method source code: 
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.maximumParsedDigits(99);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.maximumParsedDigits(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.appendSuffix("P0000-W00-36T00:00:292275.053", "PeriodType[Time]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #424
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: ldc           #42
41: invokevirtual #67
44: astore_3
45: aload_2
46: bipush        99
48: invokevirtual #213
51: astore        4
53: aload         4
55: iconst_5
56: invokevirtual #213
59: astore        5
61: aload         5
63: ldc_w         #273
66: ldc_w         #425
69: invokevirtual #30
72: astore        6
74: ldc           #31
76: invokestatic  #22
79: goto          84
82: astore        6
84: aload_2
85: invokestatic  #10
88: aload_3
89: invokestatic  #10
92: aload         4
94: invokestatic  #10
97: aload         5
99: invokestatic  #10
102: return
Exception table:
from    to  target type
61    79    82   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test092
Start line: 3641
End line: 3657
Method source code: 
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSeparatorIfFieldsBefore("dayOfMonth");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #426
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #139
56: astore        5
58: aload         5
60: ldc_w         #403
63: invokevirtual #67
66: astore        6
68: aload         6
70: invokevirtual #185
73: astore        7
75: aload_2
76: invokestatic  #10
79: aload_3
80: invokestatic  #10
83: aload         4
85: invokestatic  #10
88: aload         5
90: invokestatic  #10
93: aload         6
95: invokestatic  #10
98: aload         7
100: invokestatic  #10
103: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test093
Start line: 3660
End line: 3678
Method source code: 
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendLiteral("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.printZeroNever();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #427
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: ldc           #74
66: invokevirtual #28
69: astore        7
71: aload         7
73: invokevirtual #76
76: astore        8
78: aload_2
79: invokestatic  #10
82: aload_3
83: invokestatic  #10
86: aload         4
88: invokestatic  #10
91: aload         5
93: invokestatic  #10
96: aload         6
98: invokestatic  #10
101: aload         7
103: invokestatic  #10
106: aload         8
108: invokestatic  #10
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test094
Start line: 3681
End line: 3720
Method source code: 
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder23 = periodFormatterBuilder22.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodFormatterBuilder23);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #428
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload_2
156: invokevirtual #245
159: astore        19
161: aload         19
163: invokevirtual #71
166: astore        20
168: aload_2
169: invokestatic  #10
172: aload_3
173: invokestatic  #10
176: aload         4
178: invokestatic  #10
181: aload         5
183: invokestatic  #10
186: aload         7
188: invokestatic  #10
191: new           #55
194: dup
195: invokespecial #56
198: ldc           #57
200: invokevirtual #58
203: iload         8
205: invokevirtual #97
208: ldc           #60
210: invokevirtual #58
213: iconst_1
214: invokevirtual #97
217: ldc           #57
219: invokevirtual #58
222: invokevirtual #61
225: iload         8
227: iconst_1
228: if_icmpne     235
231: iconst_1
232: goto          236
235: iconst_0
236: invokestatic  #62
239: aload         10
241: invokestatic  #10
244: aload         11
246: invokestatic  #10
249: aload         12
251: invokestatic  #10
254: aload         13
256: invokestatic  #10
259: aload         14
261: invokestatic  #10
264: aload         15
266: invokestatic  #10
269: aload         17
271: invokestatic  #10
274: aload         18
276: invokestatic  #10
279: aload         19
281: invokestatic  #10
284: aload         20
286: invokestatic  #10
289: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test095
Start line: 3723
End line: 3739
Method source code: 
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendHours();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #429
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: invokevirtual #185
63: astore        6
65: aload         4
67: invokevirtual #245
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test096
Start line: 3742
End line: 3837
Method source code: 
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        java.lang.String[] strArray36 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter37 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter37.withLocale(locale38);
        boolean boolean40 = periodFormatter37.isParser();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter37.withLocale(locale41);
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter42.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal44 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology47);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period51 = period48.minusDays((int) (byte) 100);
        java.util.Locale locale53 = null;
        int int54 = literal44.countFieldsToPrint((org.joda.time.ReadablePeriod) period51, 999, locale53);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator57 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray36, periodPrinter43, (org.joda.time.format.PeriodParser) literal44, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder58 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = periodFormatterBuilder58.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter61 = periodFormatterBuilder60.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = periodFormatterBuilder60.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter64 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter64.withLocale(locale65);
        boolean boolean67 = periodFormatter66.isParser();
        java.util.Locale locale68 = null;
        org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter66.withLocale(locale68);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone75 = gregorianChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.yearOfCentury();
        org.joda.time.Period period77 = new org.joda.time.Period((long) '4', 100L, periodType72, (org.joda.time.Chronology) gregorianChronology73);
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter66.withParseType(periodType72);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder60.append(periodFormatter78);
        org.joda.time.format.PeriodParser periodParser80 = periodFormatter78.getParser();
        org.joda.time.format.PeriodFormatterBuilder.Separator separator81 = separator28.finish((org.joda.time.format.PeriodPrinter) literal44, periodParser80);
        org.joda.time.ReadablePeriod readablePeriod82 = null;
        java.util.Locale locale84 = null;
        int int85 = literal44.countFieldsToPrint(readablePeriod82, 0, locale84);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodPrinter43);
        org.junit.Assert.assertNotNull(literal44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT-0.090S" + "'", str49, "PT-0.090S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder60);
        org.junit.Assert.assertNotNull(periodPrinter61);
        org.junit.Assert.assertNotNull(periodFormatterBuilder63);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodParser80);
        org.junit.Assert.assertNotNull(separator81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #430
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: iconst_5
171: anewarray     #99
174: dup
175: iconst_0
176: ldc           #100
178: aastore
179: dup
180: iconst_1
181: ldc           #101
183: aastore
184: dup
185: iconst_2
186: ldc           #102
188: aastore
189: dup
190: iconst_3
191: ldc           #103
193: aastore
194: dup
195: iconst_4
196: ldc           #104
198: aastore
199: astore        17
201: invokestatic  #12
204: astore        18
206: aconst_null
207: astore        19
209: aload         18
211: aload         19
213: invokevirtual #88
216: astore        20
218: aload         18
220: invokevirtual #89
223: istore        21
225: aconst_null
226: astore        22
228: aload         18
230: aload         22
232: invokevirtual #88
235: astore        23
237: aload         23
239: invokevirtual #90
242: astore        24
244: getstatic     #78
247: astore        25
249: aconst_null
250: astore        26
252: new           #46
255: dup
256: ldc2_w        #79
259: ldc2_w        #81
262: aload         26
264: invokespecial #83
267: astore        27
269: aload         27
271: invokevirtual #84
274: astore        28
276: aload         27
278: bipush        100
280: invokevirtual #85
283: astore        29
285: aconst_null
286: astore        30
288: aload         25
290: aload         29
292: sipush        999
295: aload         30
297: invokevirtual #86
300: istore        31
302: new           #105
305: dup
306: ldc           #106
308: ldc           #104
310: aload         17
312: aload         24
314: aload         25
316: iconst_0
317: iconst_0
318: invokespecial #107
321: astore        32
323: new           #14
326: dup
327: invokespecial #15
330: astore        33
332: aload         33
334: ldc           #16
336: invokevirtual #17
339: astore        34
341: aload         34
343: invokevirtual #45
346: astore        35
348: aload         34
350: iconst_0
351: invokevirtual #108
354: astore        36
356: invokestatic  #12
359: astore        37
361: aconst_null
362: astore        38
364: aload         37
366: aload         38
368: invokevirtual #88
371: astore        39
373: aload         39
375: invokevirtual #89
378: istore        40
380: aconst_null
381: astore        41
383: aload         39
385: aload         41
387: invokevirtual #88
390: astore        42
392: invokestatic  #109
395: astore        43
397: invokestatic  #110
400: astore        44
402: aload         44
404: invokevirtual #111
407: astore        45
409: aload         44
411: invokevirtual #112
414: astore        46
416: aload         44
418: invokevirtual #113
421: astore        47
423: new           #46
426: dup
427: ldc2_w        #114
430: ldc2_w        #79
433: aload         43
435: aload         44
437: invokespecial #116
440: astore        48
442: aload         39
444: aload         43
446: invokevirtual #117
449: astore        49
451: aload         34
453: aload         49
455: invokevirtual #118
458: astore        50
460: aload         49
462: invokevirtual #119
465: astore        51
467: aload         16
469: aload         25
471: aload         51
473: invokevirtual #120
476: astore        52
478: aconst_null
479: astore        53
481: aconst_null
482: astore        54
484: aload         25
486: aload         53
488: iconst_0
489: aload         54
491: invokevirtual #86
494: istore        55
496: aload_1
497: invokestatic  #10
500: aload_2
501: invokestatic  #10
504: aload         4
506: invokestatic  #10
509: new           #55
512: dup
513: invokespecial #56
516: ldc           #57
518: invokevirtual #58
521: iload         5
523: invokevirtual #97
526: ldc           #60
528: invokevirtual #58
531: iconst_1
532: invokevirtual #97
535: ldc           #57
537: invokevirtual #58
540: invokevirtual #61
543: iload         5
545: iconst_1
546: if_icmpne     553
549: iconst_1
550: goto          554
553: iconst_0
554: invokestatic  #62
557: aload         7
559: invokestatic  #10
562: aload         8
564: invokestatic  #10
567: aload         9
569: invokestatic  #10
572: new           #55
575: dup
576: invokespecial #56
579: ldc           #57
581: invokevirtual #58
584: aload         12
586: invokevirtual #58
589: ldc           #94
591: invokevirtual #58
594: invokevirtual #61
597: aload         12
599: ldc           #95
601: invokestatic  #96
604: aload         13
606: invokestatic  #10
609: new           #55
612: dup
613: invokespecial #56
616: ldc           #57
618: invokevirtual #58
621: iload         15
623: invokevirtual #59
626: ldc           #60
628: invokevirtual #58
631: iconst_0
632: invokevirtual #59
635: ldc           #57
637: invokevirtual #58
640: invokevirtual #61
643: iload         15
645: ifne          652
648: iconst_1
649: goto          653
652: iconst_0
653: invokestatic  #62
656: aload         17
658: invokestatic  #10
661: aload         18
663: invokestatic  #10
666: aload         20
668: invokestatic  #10
671: new           #55
674: dup
675: invokespecial #56
678: ldc           #57
680: invokevirtual #58
683: iload         21
685: invokevirtual #97
688: ldc           #60
690: invokevirtual #58
693: iconst_1
694: invokevirtual #97
697: ldc           #57
699: invokevirtual #58
702: invokevirtual #61
705: iload         21
707: iconst_1
708: if_icmpne     715
711: iconst_1
712: goto          716
715: iconst_0
716: invokestatic  #62
719: aload         23
721: invokestatic  #10
724: aload         24
726: invokestatic  #10
729: aload         25
731: invokestatic  #10
734: new           #55
737: dup
738: invokespecial #56
741: ldc           #57
743: invokevirtual #58
746: aload         28
748: invokevirtual #58
751: ldc           #94
753: invokevirtual #58
756: invokevirtual #61
759: aload         28
761: ldc           #95
763: invokestatic  #96
766: aload         29
768: invokestatic  #10
771: new           #55
774: dup
775: invokespecial #56
778: ldc           #57
780: invokevirtual #58
783: iload         31
785: invokevirtual #59
788: ldc           #60
790: invokevirtual #58
793: iconst_0
794: invokevirtual #59
797: ldc           #57
799: invokevirtual #58
802: invokevirtual #61
805: iload         31
807: ifne          814
810: iconst_1
811: goto          815
814: iconst_0
815: invokestatic  #62
818: aload         34
820: invokestatic  #10
823: aload         35
825: invokestatic  #10
828: aload         36
830: invokestatic  #10
833: aload         37
835: invokestatic  #10
838: aload         39
840: invokestatic  #10
843: new           #55
846: dup
847: invokespecial #56
850: ldc           #57
852: invokevirtual #58
855: iload         40
857: invokevirtual #97
860: ldc           #60
862: invokevirtual #58
865: iconst_1
866: invokevirtual #97
869: ldc           #57
871: invokevirtual #58
874: invokevirtual #61
877: iload         40
879: iconst_1
880: if_icmpne     887
883: iconst_1
884: goto          888
887: iconst_0
888: invokestatic  #62
891: aload         42
893: invokestatic  #10
896: aload         43
898: invokestatic  #10
901: aload         44
903: invokestatic  #10
906: aload         45
908: invokestatic  #10
911: aload         46
913: invokestatic  #10
916: aload         47
918: invokestatic  #10
921: aload         49
923: invokestatic  #10
926: aload         50
928: invokestatic  #10
931: aload         51
933: invokestatic  #10
936: aload         52
938: invokestatic  #10
941: new           #55
944: dup
945: invokespecial #56
948: ldc           #57
950: invokevirtual #58
953: iload         55
955: invokevirtual #59
958: ldc           #60
960: invokevirtual #58
963: iconst_0
964: invokevirtual #59
967: ldc           #57
969: invokevirtual #58
972: invokevirtual #61
975: iload         55
977: ifne          984
980: iconst_1
981: goto          985
984: iconst_0
985: invokestatic  #62
988: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test097
Start line: 3840
End line: 3853
Method source code: 
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendSeparator("1970-01-01T00:00:00.001+00:00:00.010", "2024-05-19T12:57:02.916+00:00:00.010/2024-05-19T12:57:02.916+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #431
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: ldc           #144
43: ldc_w         #432
46: invokevirtual #20
49: astore_3
50: ldc           #21
52: invokestatic  #22
55: goto          59
58: astore_3
59: aload_2
60: invokestatic  #10
63: return
Exception table:
from    to  target type
40    55    58   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test098
Start line: 3856
End line: 3874
Method source code: 
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendMinutes();
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatterBuilder5.toPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodPrinter9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #433
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         5
60: iconst_0
61: invokevirtual #108
64: astore        6
66: aload         5
68: invokevirtual #134
71: astore        7
73: aload         5
75: invokevirtual #45
78: astore        8
80: aload_2
81: invokestatic  #10
84: aload_3
85: invokestatic  #10
88: aload         4
90: invokestatic  #10
93: aload         5
95: invokestatic  #10
98: aload         6
100: invokestatic  #10
103: aload         7
105: invokestatic  #10
108: aload         8
110: invokestatic  #10
113: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test099
Start line: 3877
End line: 3895
Method source code: 
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendSeparatorIfFieldsBefore("halfdayOfDay");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #434
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload         6
65: invokevirtual #26
68: astore        7
70: aload         7
72: ldc_w         #435
75: invokevirtual #67
78: astore        8
80: aload_2
81: invokestatic  #10
84: aload_3
85: invokestatic  #10
88: aload         4
90: invokestatic  #10
93: aload         5
95: invokestatic  #10
98: aload         6
100: invokestatic  #10
103: aload         7
105: invokestatic  #10
108: aload         8
110: invokestatic  #10
113: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test100
Start line: 3898
End line: 3914
Method source code: 
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #436
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload         6
65: invokevirtual #25
68: astore        7
70: aload_2
71: invokestatic  #10
74: aload_3
75: invokestatic  #10
78: aload         4
80: invokestatic  #10
83: aload         5
85: invokestatic  #10
88: aload         6
90: invokestatic  #10
93: aload         7
95: invokestatic  #10
98: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test101
Start line: 3917
End line: 3937
Method source code: 
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatterBuilder0.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.minimumPrintedDigits(292275053);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSuffix("org.joda.time.IllegalFieldValueException: Value 1715771843815 for dayOfMonth must be in the range [-855360000010,86083199990]");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodParser7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #437
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #142
67: astore        7
69: aload_1
70: ldc_w         #438
73: invokevirtual #151
76: astore        8
78: aload         8
80: ldc_w         #439
83: invokevirtual #132
86: astore        9
88: aload_2
89: invokestatic  #10
92: aload_3
93: invokestatic  #10
96: aload         4
98: invokestatic  #10
101: aload         5
103: invokestatic  #10
106: aload         6
108: invokestatic  #10
111: aload         7
113: invokestatic  #10
116: aload         8
118: invokestatic  #10
121: aload         9
123: invokestatic  #10
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test102
Start line: 3940
End line: 3953
Method source code: 
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        periodFormatterBuilder0.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #440
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload_1
52: invokevirtual #212
55: aload_1
56: invokevirtual #71
59: astore        5
61: aload_2
62: invokestatic  #10
65: aload_3
66: invokestatic  #10
69: aload         4
71: invokestatic  #10
74: aload         5
76: invokestatic  #10
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test103
Start line: 3956
End line: 4063
Method source code: 
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) ' ');
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        int int22 = period21.getHours();
        org.joda.time.Period period24 = period21.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType29 = org.joda.time.DateTimeUtils.getPeriodType(periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period(100L, (long) (short) -1, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weeks();
        boolean boolean32 = periodType28.isSupported(durationFieldType31);
        mutablePeriod25.add(durationFieldType31, (int) (byte) 100);
        java.lang.String str35 = mutablePeriod25.toString();
        mutablePeriod25.setHours((int) (short) 10);
        mutablePeriod25.setYears(0);
        org.joda.time.Period period40 = period20.withFields((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        int int44 = period43.getWeeks();
        org.joda.time.Period period46 = period43.minusHours((int) '4');
        org.joda.time.Minutes minutes47 = period46.toStandardMinutes();
        org.joda.time.Period period49 = period46.minusMonths(0);
        int int50 = period46.getMillis();
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) period46);
        java.util.Locale locale53 = null;
        int int54 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod25, 3, locale53);
        java.io.Writer writer55 = null;
        org.joda.time.Period period57 = org.joda.time.Period.millis(1);
        int int58 = period57.getMonths();
        int int59 = period57.size();
        org.joda.time.Period period61 = period57.withDays((int) (byte) 100);
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period64 = period62.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType65 = null;
        int int66 = period62.get(durationFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period69 = period62.withField(durationFieldType67, 8);
        java.lang.String str70 = durationFieldType67.getName();
        org.joda.time.Period period72 = period57.withField(durationFieldType67, 1);
        org.joda.time.Period period74 = period57.minusDays(10);
        org.joda.time.MutablePeriod mutablePeriod75 = period74.toMutablePeriod();
        org.joda.time.Period period76 = mutablePeriod75.toPeriod();
        mutablePeriod75.setWeeks((-7));
        java.util.Locale locale79 = null;
        // The following exception was thrown during execution in test generation
        try {
            literal6.printTo(writer55, (org.joda.time.ReadablePeriod) mutablePeriod75, locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P100W" + "'", str35, "P100W");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "seconds" + "'", str70, "seconds");
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertNotNull(period76);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #441
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: new           #46
131: dup
132: ldc2_w        #121
135: invokespecial #91
138: astore        15
140: getstatic     #8
143: astore        16
145: aload         16
147: invokevirtual #216
150: istore        17
152: aload         16
154: iconst_0
155: invokevirtual #200
158: astore        18
160: aload         18
162: invokevirtual #205
165: astore        19
167: invokestatic  #171
170: astore        20
172: aload         20
174: invokestatic  #172
177: astore        21
179: new           #46
182: dup
183: ldc2_w        #79
186: ldc2_w        #173
189: aload         20
191: invokespecial #175
194: astore        22
196: invokestatic  #176
199: astore        23
201: aload         20
203: aload         23
205: invokevirtual #177
208: istore        24
210: aload         19
212: aload         23
214: bipush        100
216: invokevirtual #226
219: aload         19
221: invokevirtual #235
224: astore        25
226: aload         19
228: bipush        10
230: invokevirtual #416
233: aload         19
235: iconst_0
236: invokevirtual #236
239: aload         15
241: aload         19
243: invokevirtual #364
246: astore        26
248: aconst_null
249: astore        27
251: aconst_null
252: astore        28
254: new           #46
257: dup
258: aload         27
260: aload         28
262: invokespecial #47
265: astore        29
267: aload         29
269: invokevirtual #48
272: istore        30
274: aload         29
276: bipush        52
278: invokevirtual #49
281: astore        31
283: aload         31
285: invokevirtual #50
288: astore        32
290: aload         31
292: iconst_0
293: invokevirtual #51
296: astore        33
298: aload         31
300: invokevirtual #417
303: istore        34
305: aload         19
307: aload         31
309: invokevirtual #219
312: aconst_null
313: astore        35
315: aload         6
317: aload         19
319: iconst_3
320: aload         35
322: invokevirtual #86
325: istore        36
327: aconst_null
328: astore        37
330: iconst_1
331: invokestatic  #168
334: astore        38
336: aload         38
338: invokevirtual #169
341: istore        39
343: aload         38
345: invokevirtual #170
348: istore        40
350: aload         38
352: bipush        100
354: invokevirtual #200
357: astore        41
359: getstatic     #8
362: astore        42
364: aload         42
366: iconst_m1
367: invokevirtual #9
370: astore        43
372: aconst_null
373: astore        44
375: aload         42
377: aload         44
379: invokevirtual #201
382: istore        45
384: invokestatic  #202
387: astore        46
389: aload         42
391: aload         46
393: bipush        8
395: invokevirtual #203
398: astore        47
400: aload         46
402: invokevirtual #204
405: astore        48
407: aload         38
409: aload         46
411: iconst_1
412: invokevirtual #203
415: astore        49
417: aload         38
419: bipush        10
421: invokevirtual #85
424: astore        50
426: aload         50
428: invokevirtual #205
431: astore        51
433: aload         51
435: invokevirtual #206
438: astore        52
440: aload         51
442: bipush        -7
444: invokevirtual #207
447: aconst_null
448: astore        53
450: aload         6
452: aload         37
454: aload         51
456: aload         53
458: invokevirtual #93
461: ldc           #53
463: invokestatic  #22
466: goto          471
469: astore        54
471: aload_2
472: invokestatic  #10
475: aload_3
476: invokestatic  #10
479: aload         4
481: invokestatic  #10
484: aload         5
486: invokestatic  #10
489: aload         6
491: invokestatic  #10
494: new           #55
497: dup
498: invokespecial #56
501: ldc           #57
503: invokevirtual #58
506: aload         9
508: invokevirtual #58
511: ldc           #94
513: invokevirtual #58
516: invokevirtual #61
519: aload         9
521: ldc           #95
523: invokestatic  #96
526: aload         10
528: invokestatic  #10
531: new           #55
534: dup
535: invokespecial #56
538: ldc           #57
540: invokevirtual #58
543: iload         12
545: invokevirtual #59
548: ldc           #60
550: invokevirtual #58
553: iconst_0
554: invokevirtual #59
557: ldc           #57
559: invokevirtual #58
562: invokevirtual #61
565: iload         12
567: ifne          574
570: iconst_1
571: goto          575
574: iconst_0
575: invokestatic  #62
578: aload         14
580: invokestatic  #10
583: aload         16
585: invokestatic  #10
588: new           #55
591: dup
592: invokespecial #56
595: ldc           #57
597: invokevirtual #58
600: iload         17
602: invokevirtual #59
605: ldc           #60
607: invokevirtual #58
610: iconst_0
611: invokevirtual #59
614: ldc           #57
616: invokevirtual #58
619: invokevirtual #61
622: iload         17
624: ifne          631
627: iconst_1
628: goto          632
631: iconst_0
632: invokestatic  #62
635: aload         18
637: invokestatic  #10
640: aload         19
642: invokestatic  #10
645: aload         20
647: invokestatic  #10
650: aload         21
652: invokestatic  #10
655: aload         23
657: invokestatic  #10
660: new           #55
663: dup
664: invokespecial #56
667: ldc           #57
669: invokevirtual #58
672: iload         24
674: invokevirtual #97
677: ldc           #60
679: invokevirtual #58
682: iconst_0
683: invokevirtual #97
686: ldc           #57
688: invokevirtual #58
691: invokevirtual #61
694: iload         24
696: ifne          703
699: iconst_1
700: goto          704
703: iconst_0
704: invokestatic  #62
707: new           #55
710: dup
711: invokespecial #56
714: ldc           #57
716: invokevirtual #58
719: aload         25
721: invokevirtual #58
724: ldc           #238
726: invokevirtual #58
729: invokevirtual #61
732: aload         25
734: ldc           #239
736: invokestatic  #96
739: aload         26
741: invokestatic  #10
744: new           #55
747: dup
748: invokespecial #56
751: ldc           #57
753: invokevirtual #58
756: iload         30
758: invokevirtual #59
761: ldc           #60
763: invokevirtual #58
766: iconst_0
767: invokevirtual #59
770: ldc           #57
772: invokevirtual #58
775: invokevirtual #61
778: iload         30
780: ifne          787
783: iconst_1
784: goto          788
787: iconst_0
788: invokestatic  #62
791: aload         31
793: invokestatic  #10
796: aload         32
798: invokestatic  #10
801: aload         33
803: invokestatic  #10
806: new           #55
809: dup
810: invokespecial #56
813: ldc           #57
815: invokevirtual #58
818: iload         34
820: invokevirtual #59
823: ldc           #60
825: invokevirtual #58
828: iconst_0
829: invokevirtual #59
832: ldc           #57
834: invokevirtual #58
837: invokevirtual #61
840: iload         34
842: ifne          849
845: iconst_1
846: goto          850
849: iconst_0
850: invokestatic  #62
853: new           #55
856: dup
857: invokespecial #56
860: ldc           #57
862: invokevirtual #58
865: iload         36
867: invokevirtual #59
870: ldc           #60
872: invokevirtual #58
875: iconst_0
876: invokevirtual #59
879: ldc           #57
881: invokevirtual #58
884: invokevirtual #61
887: iload         36
889: ifne          896
892: iconst_1
893: goto          897
896: iconst_0
897: invokestatic  #62
900: aload         38
902: invokestatic  #10
905: new           #55
908: dup
909: invokespecial #56
912: ldc           #57
914: invokevirtual #58
917: iload         39
919: invokevirtual #59
922: ldc           #60
924: invokevirtual #58
927: iconst_0
928: invokevirtual #59
931: ldc           #57
933: invokevirtual #58
936: invokevirtual #61
939: iload         39
941: ifne          948
944: iconst_1
945: goto          949
948: iconst_0
949: invokestatic  #62
952: new           #55
955: dup
956: invokespecial #56
959: ldc           #57
961: invokevirtual #58
964: iload         40
966: invokevirtual #59
969: ldc           #60
971: invokevirtual #58
974: bipush        8
976: invokevirtual #59
979: ldc           #57
981: invokevirtual #58
984: invokevirtual #61
987: iload         40
989: bipush        8
991: if_icmpne     998
994: iconst_1
995: goto          999
998: iconst_0
999: invokestatic  #62
1002: aload         41
1004: invokestatic  #10
1007: aload         42
1009: invokestatic  #10
1012: aload         43
1014: invokestatic  #10
1017: new           #55
1020: dup
1021: invokespecial #56
1024: ldc           #57
1026: invokevirtual #58
1029: iload         45
1031: invokevirtual #59
1034: ldc           #60
1036: invokevirtual #58
1039: iconst_0
1040: invokevirtual #59
1043: ldc           #57
1045: invokevirtual #58
1048: invokevirtual #61
1051: iload         45
1053: ifne          1060
1056: iconst_1
1057: goto          1061
1060: iconst_0
1061: invokestatic  #62
1064: aload         46
1066: invokestatic  #10
1069: aload         47
1071: invokestatic  #10
1074: new           #55
1077: dup
1078: invokespecial #56
1081: ldc           #57
1083: invokevirtual #58
1086: aload         48
1088: invokevirtual #58
1091: ldc           #209
1093: invokevirtual #58
1096: invokevirtual #61
1099: aload         48
1101: ldc           #210
1103: invokestatic  #96
1106: aload         49
1108: invokestatic  #10
1111: aload         50
1113: invokestatic  #10
1116: aload         51
1118: invokestatic  #10
1121: aload         52
1123: invokestatic  #10
1126: return
Exception table:
from    to  target type
450   466   469   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test104
Start line: 4066
End line: 4084
Method source code: 
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #442
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         5
60: iconst_0
61: invokevirtual #108
64: astore        6
66: aload         5
68: invokevirtual #134
71: astore        7
73: aload         7
75: invokevirtual #26
78: astore        8
80: aload_2
81: invokestatic  #10
84: aload_3
85: invokestatic  #10
88: aload         4
90: invokestatic  #10
93: aload         5
95: invokestatic  #10
98: aload         6
100: invokestatic  #10
103: aload         7
105: invokestatic  #10
108: aload         8
110: invokestatic  #10
113: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test105
Start line: 4087
End line: 4111
Method source code: 
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatterBuilder9.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendPrefix("979");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodPrinter12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #443
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: invokevirtual #45
87: astore        9
89: aload         7
91: invokevirtual #76
94: astore        10
96: aload         10
98: ldc_w         #444
101: invokevirtual #196
104: astore        11
106: aload_2
107: invokestatic  #10
110: aload_3
111: invokestatic  #10
114: aload         4
116: invokestatic  #10
119: aload         5
121: invokestatic  #10
124: aload         6
126: invokestatic  #10
129: aload         7
131: invokestatic  #10
134: aload         8
136: invokestatic  #10
139: aload         9
141: invokestatic  #10
144: aload         10
146: invokestatic  #10
149: aload         11
151: invokestatic  #10
154: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test106
Start line: 4114
End line: 4166
Method source code: 
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        int int17 = period16.getHours();
        org.joda.time.Period period19 = period16.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType24 = org.joda.time.DateTimeUtils.getPeriodType(periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period(100L, (long) (short) -1, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weeks();
        boolean boolean27 = periodType23.isSupported(durationFieldType26);
        mutablePeriod20.add(durationFieldType26, (int) (byte) 100);
        mutablePeriod20.setSeconds(1);
        mutablePeriod20.setMillis((int) (byte) 100);
        int int36 = periodFormatter6.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod20, "52", 33075063);
        boolean boolean37 = periodFormatter6.isParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-33075064) + "'", int36 == (-33075064));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #445
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: getstatic     #8
129: astore        16
131: aload         16
133: invokevirtual #216
136: istore        17
138: aload         16
140: iconst_0
141: invokevirtual #200
144: astore        18
146: aload         18
148: invokevirtual #205
151: astore        19
153: invokestatic  #171
156: astore        20
158: aload         20
160: invokestatic  #172
163: astore        21
165: new           #46
168: dup
169: ldc2_w        #79
172: ldc2_w        #173
175: aload         20
177: invokespecial #175
180: astore        22
182: invokestatic  #176
185: astore        23
187: aload         20
189: aload         23
191: invokevirtual #177
194: istore        24
196: aload         19
198: aload         23
200: bipush        100
202: invokevirtual #226
205: aload         19
207: iconst_1
208: invokevirtual #366
211: aload         19
213: bipush        100
215: invokevirtual #446
218: aload         6
220: aload         19
222: ldc           #141
224: ldc_w         #447
227: invokevirtual #237
230: istore        25
232: aload         6
234: invokevirtual #89
237: istore        26
239: aload_2
240: invokestatic  #10
243: aload_3
244: invokestatic  #10
247: aload         4
249: invokestatic  #10
252: aload         5
254: invokestatic  #10
257: aload         6
259: invokestatic  #10
262: aload         7
264: invokestatic  #354
267: aload         10
269: invokestatic  #10
272: new           #55
275: dup
276: invokespecial #56
279: ldc           #57
281: invokevirtual #58
284: iload         12
286: invokevirtual #97
289: ldc           #60
291: invokevirtual #58
294: iconst_0
295: invokevirtual #97
298: ldc           #57
300: invokevirtual #58
303: invokevirtual #61
306: iload         12
308: ifne          315
311: iconst_1
312: goto          316
315: iconst_0
316: invokestatic  #62
319: aload         14
321: invokestatic  #10
324: aload         15
326: invokestatic  #10
329: aload         16
331: invokestatic  #10
334: new           #55
337: dup
338: invokespecial #56
341: ldc           #57
343: invokevirtual #58
346: iload         17
348: invokevirtual #59
351: ldc           #60
353: invokevirtual #58
356: iconst_0
357: invokevirtual #59
360: ldc           #57
362: invokevirtual #58
365: invokevirtual #61
368: iload         17
370: ifne          377
373: iconst_1
374: goto          378
377: iconst_0
378: invokestatic  #62
381: aload         18
383: invokestatic  #10
386: aload         19
388: invokestatic  #10
391: aload         20
393: invokestatic  #10
396: aload         21
398: invokestatic  #10
401: aload         23
403: invokestatic  #10
406: new           #55
409: dup
410: invokespecial #56
413: ldc           #57
415: invokevirtual #58
418: iload         24
420: invokevirtual #97
423: ldc           #60
425: invokevirtual #58
428: iconst_0
429: invokevirtual #97
432: ldc           #57
434: invokevirtual #58
437: invokevirtual #61
440: iload         24
442: ifne          449
445: iconst_1
446: goto          450
449: iconst_0
450: invokestatic  #62
453: new           #55
456: dup
457: invokespecial #56
460: ldc           #57
462: invokevirtual #58
465: iload         25
467: invokevirtual #59
470: ldc           #60
472: invokevirtual #58
475: ldc_w         #448
478: invokevirtual #59
481: ldc           #57
483: invokevirtual #58
486: invokevirtual #61
489: iload         25
491: ldc_w         #448
494: if_icmpne     501
497: iconst_1
498: goto          502
501: iconst_0
502: invokestatic  #62
505: new           #55
508: dup
509: invokespecial #56
512: ldc           #57
514: invokevirtual #58
517: iload         26
519: invokevirtual #97
522: ldc           #60
524: invokevirtual #58
527: iconst_1
528: invokevirtual #97
531: ldc           #57
533: invokevirtual #58
536: invokevirtual #61
539: iload         26
541: iconst_1
542: if_icmpne     549
545: iconst_1
546: goto          550
549: iconst_0
550: invokestatic  #62
553: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test107
Start line: 4169
End line: 4179
Method source code: 
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSuffix("53321", "+00:00:00.008");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #449
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #134
44: astore_3
45: aload_3
46: ldc_w         #450
49: ldc_w         #257
52: invokevirtual #30
55: astore        4
57: aload_2
58: invokestatic  #10
61: aload_3
62: invokestatic  #10
65: aload         4
67: invokestatic  #10
70: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test108
Start line: 4182
End line: 4202
Method source code: 
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.printZeroNever();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #451
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         5
67: invokevirtual #245
70: astore        7
72: aload         7
74: invokevirtual #25
77: astore        8
79: aload         8
81: invokevirtual #76
84: astore        9
86: aload_2
87: invokestatic  #10
90: aload_3
91: invokestatic  #10
94: aload         4
96: invokestatic  #10
99: aload         5
101: invokestatic  #10
104: aload         6
106: invokestatic  #10
109: aload         7
111: invokestatic  #10
114: aload         8
116: invokestatic  #10
119: aload         9
121: invokestatic  #10
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test109
Start line: 4205
End line: 4228
Method source code: 
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("months");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.maximumParsedDigits((-1217829137));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder4.appendSeparator("DateTimeField[secondOfDay]", "799");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder11.appendSuffix("-24");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #452
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: ldc           #27
55: invokevirtual #28
58: astore        5
60: aload         4
62: ldc_w         #453
65: invokevirtual #213
68: astore        6
70: aload         4
72: ldc_w         #289
75: ldc_w         #454
78: invokevirtual #20
81: astore        7
83: aload         7
85: ldc_w         #455
88: invokevirtual #132
91: astore        8
93: ldc           #31
95: invokestatic  #22
98: goto          103
101: astore        8
103: aload_2
104: invokestatic  #10
107: aload_3
108: invokestatic  #10
111: aload         4
113: invokestatic  #10
116: aload         5
118: invokestatic  #10
121: aload         6
123: invokestatic  #10
126: aload         7
128: invokestatic  #10
131: return
Exception table:
from    to  target type
83    98   101   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test110
Start line: 4231
End line: 4319
Method source code: 
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        int int45 = period44.getHours();
        org.joda.time.Period period47 = period44.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        mutablePeriod48.setWeeks((-28800000));
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology53);
        int int55 = period54.getMonths();
        java.lang.String str56 = period54.toString();
        org.joda.time.Period period58 = period54.plusHours(0);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) period54);
        mutablePeriod48.clear();
        int int63 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod48, "", 787);
        org.joda.time.format.PeriodPrinter periodPrinter64 = periodFormatter40.getPrinter();
        org.joda.time.format.PeriodParser periodParser65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = new org.joda.time.format.PeriodFormatter(periodPrinter64, periodParser65);
        org.joda.time.format.PeriodPrinter periodPrinter67 = periodFormatter66.getPrinter();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT-0.090S" + "'", str56, "PT-0.090S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-788) + "'", int63 == (-788));
        org.junit.Assert.assertNotNull(periodPrinter64);
        org.junit.Assert.assertNotNull(periodPrinter67);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #456
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: getstatic     #8
275: astore        32
277: aload         32
279: invokevirtual #216
282: istore        33
284: aload         32
286: iconst_0
287: invokevirtual #200
290: astore        34
292: aload         34
294: invokevirtual #205
297: astore        35
299: aload         35
301: ldc           #217
303: invokevirtual #207
306: aconst_null
307: astore        36
309: new           #46
312: dup
313: ldc2_w        #79
316: ldc2_w        #81
319: aload         36
321: invokespecial #83
324: astore        37
326: aload         37
328: invokevirtual #169
331: istore        38
333: aload         37
335: invokevirtual #84
338: astore        39
340: aload         37
342: iconst_0
343: invokevirtual #218
346: astore        40
348: aload         35
350: aload         37
352: invokevirtual #219
355: aload         35
357: invokevirtual #457
360: aload         28
362: aload         35
364: ldc           #74
366: sipush        787
369: invokevirtual #237
372: istore        41
374: aload         28
376: invokevirtual #90
379: astore        42
381: aconst_null
382: astore        43
384: new           #164
387: dup
388: aload         42
390: aload         43
392: invokespecial #165
395: astore        44
397: aload         44
399: invokevirtual #90
402: astore        45
404: aload_1
405: invokestatic  #10
408: new           #55
411: dup
412: invokespecial #56
415: ldc           #57
417: invokevirtual #58
420: iload_2
421: invokevirtual #59
424: ldc           #60
426: invokevirtual #58
429: iconst_0
430: invokevirtual #59
433: ldc           #57
435: invokevirtual #58
438: invokevirtual #61
441: iload_2
442: ifne          449
445: iconst_1
446: goto          450
449: iconst_0
450: invokestatic  #62
453: aload_3
454: invokestatic  #10
457: aload         4
459: invokestatic  #10
462: new           #55
465: dup
466: invokespecial #56
469: ldc           #57
471: invokevirtual #58
474: iload         7
476: invokevirtual #59
479: ldc           #60
481: invokevirtual #58
484: iconst_0
485: invokevirtual #59
488: ldc           #57
490: invokevirtual #58
493: invokevirtual #61
496: iload         7
498: ifne          505
501: iconst_1
502: goto          506
505: iconst_0
506: invokestatic  #62
509: new           #55
512: dup
513: invokespecial #56
516: ldc           #57
518: invokevirtual #58
521: aload         8
523: invokevirtual #58
526: ldc           #94
528: invokevirtual #58
531: invokevirtual #61
534: aload         8
536: ldc           #95
538: invokestatic  #96
541: aload         9
543: invokestatic  #10
546: aload         10
548: invokestatic  #10
551: aload         11
553: invokestatic  #10
556: aload         13
558: invokestatic  #10
561: aload         14
563: invokestatic  #10
566: aload         15
568: invokestatic  #10
571: aload         16
573: invokestatic  #10
576: aload         18
578: invokestatic  #10
581: new           #55
584: dup
585: invokespecial #56
588: ldc           #57
590: invokevirtual #58
593: iload         19
595: invokevirtual #97
598: ldc           #60
600: invokevirtual #58
603: iconst_1
604: invokevirtual #97
607: ldc           #57
609: invokevirtual #58
612: invokevirtual #61
615: iload         19
617: iconst_1
618: if_icmpne     625
621: iconst_1
622: goto          626
625: iconst_0
626: invokestatic  #62
629: aload         21
631: invokestatic  #10
634: aload         22
636: invokestatic  #10
639: aload         23
641: invokestatic  #10
644: aload         24
646: invokestatic  #10
649: aload         25
651: invokestatic  #10
654: aload         26
656: invokestatic  #10
659: aload         28
661: invokestatic  #10
664: aload         29
666: invokestatic  #10
669: aload         30
671: invokestatic  #10
674: new           #55
677: dup
678: invokespecial #56
681: ldc           #57
683: invokevirtual #58
686: aload         31
688: invokevirtual #58
691: ldc_w         #286
694: invokevirtual #58
697: invokevirtual #61
700: aload         31
702: ldc           #143
704: invokestatic  #96
707: aload         32
709: invokestatic  #10
712: new           #55
715: dup
716: invokespecial #56
719: ldc           #57
721: invokevirtual #58
724: iload         33
726: invokevirtual #59
729: ldc           #60
731: invokevirtual #58
734: iconst_0
735: invokevirtual #59
738: ldc           #57
740: invokevirtual #58
743: invokevirtual #61
746: iload         33
748: ifne          755
751: iconst_1
752: goto          756
755: iconst_0
756: invokestatic  #62
759: aload         34
761: invokestatic  #10
764: aload         35
766: invokestatic  #10
769: new           #55
772: dup
773: invokespecial #56
776: ldc           #57
778: invokevirtual #58
781: iload         38
783: invokevirtual #59
786: ldc           #60
788: invokevirtual #58
791: iconst_0
792: invokevirtual #59
795: ldc           #57
797: invokevirtual #58
800: invokevirtual #61
803: iload         38
805: ifne          812
808: iconst_1
809: goto          813
812: iconst_0
813: invokestatic  #62
816: new           #55
819: dup
820: invokespecial #56
823: ldc           #57
825: invokevirtual #58
828: aload         39
830: invokevirtual #58
833: ldc           #94
835: invokevirtual #58
838: invokevirtual #61
841: aload         39
843: ldc           #95
845: invokestatic  #96
848: aload         40
850: invokestatic  #10
853: new           #55
856: dup
857: invokespecial #56
860: ldc           #57
862: invokevirtual #58
865: iload         41
867: invokevirtual #59
870: ldc           #60
872: invokevirtual #58
875: sipush        -788
878: invokevirtual #59
881: ldc           #57
883: invokevirtual #58
886: invokevirtual #61
889: iload         41
891: sipush        -788
894: if_icmpne     901
897: iconst_1
898: goto          902
901: iconst_0
902: invokestatic  #62
905: aload         42
907: invokestatic  #10
910: aload         45
912: invokestatic  #10
915: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test111
Start line: 4322
End line: 4347
Method source code: 
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder11.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder11.minimumPrintedDigits(5);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder14.rejectSignedValues(false);
        periodFormatterBuilder14.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #458
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #26
83: astore        8
85: aload         8
87: invokevirtual #149
90: astore        9
92: aload         8
94: iconst_5
95: invokevirtual #151
98: astore        10
100: aload         10
102: iconst_0
103: invokevirtual #108
106: astore        11
108: aload         10
110: invokevirtual #212
113: aload_2
114: invokestatic  #10
117: aload_3
118: invokestatic  #10
121: aload         4
123: invokestatic  #10
126: aload         5
128: invokestatic  #10
131: aload         6
133: invokestatic  #10
136: aload         7
138: invokestatic  #10
141: aload         8
143: invokestatic  #10
146: aload         9
148: invokestatic  #10
151: aload         10
153: invokestatic  #10
156: aload         11
158: invokestatic  #10
161: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test112
Start line: 4350
End line: 4379
Method source code: 
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        boolean boolean6 = cachedDateTimeZone3.equals((java.lang.Object) periodType5);
        java.lang.String str8 = cachedDateTimeZone3.getNameKey((long) (short) 1);
        int int10 = cachedDateTimeZone3.getStandardOffset(32284799990L);
        long long12 = cachedDateTimeZone3.previousTransition(0L);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder13.appendSeconds();
        boolean boolean15 = cachedDateTimeZone3.equals((java.lang.Object) periodFormatterBuilder13);
        org.joda.time.chrono.ISOChronology iSOChronology16 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone) cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT-0.090S" + "'", str8, "PT-0.090S");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(iSOChronology16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #459
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #460
31: astore_2
32: aload_2
33: invokestatic  #461
36: astore_3
37: aload_3
38: invokestatic  #462
41: astore        4
43: invokestatic  #463
46: astore        5
48: aload         5
50: invokevirtual #464
53: astore        6
55: aload         4
57: aload         6
59: invokevirtual #465
62: istore        7
64: aload         4
66: lconst_1
67: invokevirtual #466
70: astore        8
72: aload         4
74: ldc2_w        #467
77: invokevirtual #469
80: istore        9
82: aload         4
84: lconst_0
85: invokevirtual #470
88: lstore        10
90: new           #14
93: dup
94: invokespecial #15
97: astore        12
99: aload         12
101: invokevirtual #320
104: astore        13
106: aload         4
108: aload         12
110: invokevirtual #465
113: istore        14
115: aload         4
117: invokestatic  #471
120: astore        15
122: aload_2
123: invokestatic  #10
126: aload_3
127: invokestatic  #10
130: aload         4
132: invokestatic  #10
135: aload         5
137: invokestatic  #10
140: aload         6
142: invokestatic  #10
145: new           #55
148: dup
149: invokespecial #56
152: ldc           #57
154: invokevirtual #58
157: iload         7
159: invokevirtual #97
162: ldc           #60
164: invokevirtual #58
167: iconst_0
168: invokevirtual #97
171: ldc           #57
173: invokevirtual #58
176: invokevirtual #61
179: iload         7
181: ifne          188
184: iconst_1
185: goto          189
188: iconst_0
189: invokestatic  #62
192: aload         13
194: invokestatic  #10
197: new           #55
200: dup
201: invokespecial #56
204: ldc           #57
206: invokevirtual #58
209: iload         14
211: invokevirtual #97
214: ldc           #60
216: invokevirtual #58
219: iconst_0
220: invokevirtual #97
223: ldc           #57
225: invokevirtual #58
228: invokevirtual #61
231: iload         14
233: ifne          240
236: iconst_1
237: goto          241
240: iconst_0
241: invokestatic  #62
244: aload         15
246: invokestatic  #10
249: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test113
Start line: 4382
End line: 4505
Method source code: 
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.minuteOfHour();
        org.joda.time.Period period3 = org.joda.time.Period.millis(1);
        int int4 = period3.getMonths();
        int int5 = period3.size();
        org.joda.time.Period period7 = period3.withDays((int) (byte) 100);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = period8.get(durationFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period8.withField(durationFieldType13, 8);
        java.lang.String str16 = durationFieldType13.getName();
        org.joda.time.Period period18 = period3.withField(durationFieldType13, 1);
        org.joda.time.Period period20 = period3.minusDays(10);
        long long23 = gregorianChronology0.add((org.joda.time.ReadablePeriod) period3, (long) (short) 100, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology0.halfdayOfDay();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder30 = periodFormatterBuilder28.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder28.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder28.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder32.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder32.appendSeconds();
        periodFormatterBuilder32.clear();
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatterBuilder32.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal39 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter40 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter40.withLocale(locale41);
        boolean boolean43 = periodFormatter42.isParser();
        org.joda.time.format.PeriodParser periodParser44 = periodFormatter42.getParser();
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        int int46 = period45.getHours();
        org.joda.time.Period period48 = period45.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod49 = period48.toMutablePeriod();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType53 = org.joda.time.DateTimeUtils.getPeriodType(periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period(100L, (long) (short) -1, periodType52);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.weeks();
        boolean boolean56 = periodType52.isSupported(durationFieldType55);
        mutablePeriod49.add(durationFieldType55, (int) (byte) 100);
        java.lang.String str59 = mutablePeriod49.toString();
        java.util.Locale locale62 = null;
        int int63 = periodParser44.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod49, "weekyear", (int) '#', locale62);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder64 = periodFormatterBuilder32.append((org.joda.time.format.PeriodPrinter) literal39, periodParser44);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        int int66 = period65.getHours();
        org.joda.time.Period period68 = period65.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod69 = period68.toMutablePeriod();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType73 = org.joda.time.DateTimeUtils.getPeriodType(periodType72);
        org.joda.time.Period period74 = new org.joda.time.Period(100L, (long) (short) -1, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.weeks();
        boolean boolean76 = periodType72.isSupported(durationFieldType75);
        mutablePeriod69.add(durationFieldType75, (int) (byte) 100);
        java.lang.String str79 = mutablePeriod69.toString();
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.years();
        mutablePeriod69.set(durationFieldType80, (int) (short) -1);
        mutablePeriod69.addYears((int) '4');
        mutablePeriod69.addMillis((-101));
        java.util.Locale locale89 = null;
        int int90 = literal39.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod69, "-106", 315532800, locale89);
        boolean boolean91 = gregorianChronology0.equals((java.lang.Object) "-106");
        org.joda.time.DateTimeField dateTimeField92 = gregorianChronology0.millisOfSecond();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "seconds" + "'", str16, "seconds");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder30);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(periodParser44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "P100W" + "'", str59, "P100W");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-36) + "'", int63 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "P100W" + "'", str79, "P100W");
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-315532801) + "'", int90 == (-315532801));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #472
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #110
28: astore_1
29: aload_1
30: invokevirtual #111
33: astore_2
34: iconst_1
35: invokestatic  #168
38: astore_3
39: aload_3
40: invokevirtual #169
43: istore        4
45: aload_3
46: invokevirtual #170
49: istore        5
51: aload_3
52: bipush        100
54: invokevirtual #200
57: astore        6
59: getstatic     #8
62: astore        7
64: aload         7
66: iconst_m1
67: invokevirtual #9
70: astore        8
72: aconst_null
73: astore        9
75: aload         7
77: aload         9
79: invokevirtual #201
82: istore        10
84: invokestatic  #202
87: astore        11
89: aload         7
91: aload         11
93: bipush        8
95: invokevirtual #203
98: astore        12
100: aload         11
102: invokevirtual #204
105: astore        13
107: aload_3
108: aload         11
110: iconst_1
111: invokevirtual #203
114: astore        14
116: aload_3
117: bipush        10
119: invokevirtual #85
122: astore        15
124: aload_1
125: aload_3
126: ldc2_w        #79
129: bipush        100
131: invokevirtual #227
134: lstore        16
136: aload_1
137: invokevirtual #382
140: astore        18
142: aload_1
143: invokevirtual #473
146: astore        19
148: aload_1
149: invokevirtual #383
152: astore        20
154: aload_1
155: invokevirtual #474
158: astore        21
160: new           #14
163: dup
164: invokespecial #15
167: astore        22
169: aload         22
171: ldc           #16
173: invokevirtual #17
176: astore        23
178: aload         22
180: invokevirtual #25
183: astore        24
185: aload         22
187: invokevirtual #39
190: astore        25
192: aload         25
194: ldc_w         #319
197: invokevirtual #196
200: astore        26
202: aload         25
204: invokevirtual #320
207: astore        27
209: aload         25
211: invokevirtual #212
214: aload         25
216: invokevirtual #161
219: astore        28
221: new           #392
224: dup
225: ldc           #74
227: invokespecial #393
230: astore        29
232: invokestatic  #12
235: astore        30
237: aconst_null
238: astore        31
240: aload         30
242: aload         31
244: invokevirtual #88
247: astore        32
249: aload         32
251: invokevirtual #89
254: istore        33
256: aload         32
258: invokevirtual #119
261: astore        34
263: getstatic     #8
266: astore        35
268: aload         35
270: invokevirtual #216
273: istore        36
275: aload         35
277: iconst_0
278: invokevirtual #200
281: astore        37
283: aload         37
285: invokevirtual #205
288: astore        38
290: invokestatic  #171
293: astore        39
295: aload         39
297: invokestatic  #172
300: astore        40
302: new           #46
305: dup
306: ldc2_w        #79
309: ldc2_w        #173
312: aload         39
314: invokespecial #175
317: astore        41
319: invokestatic  #176
322: astore        42
324: aload         39
326: aload         42
328: invokevirtual #177
331: istore        43
333: aload         38
335: aload         42
337: bipush        100
339: invokevirtual #226
342: aload         38
344: invokevirtual #235
347: astore        44
349: aconst_null
350: astore        45
352: aload         34
354: aload         38
356: ldc           #135
358: bipush        35
360: aload         45
362: invokeinterface #231,  5
367: istore        46
369: aload         25
371: aload         29
373: aload         34
375: invokevirtual #87
378: astore        47
380: getstatic     #8
383: astore        48
385: aload         48
387: invokevirtual #216
390: istore        49
392: aload         48
394: iconst_0
395: invokevirtual #200
398: astore        50
400: aload         50
402: invokevirtual #205
405: astore        51
407: invokestatic  #171
410: astore        52
412: aload         52
414: invokestatic  #172
417: astore        53
419: new           #46
422: dup
423: ldc2_w        #79
426: ldc2_w        #173
429: aload         52
431: invokespecial #175
434: astore        54
436: invokestatic  #176
439: astore        55
441: aload         52
443: aload         55
445: invokevirtual #177
448: istore        56
450: aload         51
452: aload         55
454: bipush        100
456: invokevirtual #226
459: aload         51
461: invokevirtual #235
464: astore        57
466: invokestatic  #300
469: astore        58
471: aload         51
473: aload         58
475: iconst_m1
476: invokevirtual #301
479: aload         51
481: bipush        52
483: invokevirtual #475
486: aload         51
488: bipush        -101
490: invokevirtual #476
493: aconst_null
494: astore        59
496: aload         29
498: aload         51
500: ldc_w         #477
503: ldc_w         #276
506: aload         59
508: invokevirtual #221
511: istore        60
513: aload_1
514: ldc_w         #477
517: invokevirtual #478
520: istore        61
522: aload_1
523: invokevirtual #299
526: astore        62
528: aload_1
529: invokestatic  #10
532: aload_2
533: invokestatic  #10
536: aload_3
537: invokestatic  #10
540: new           #55
543: dup
544: invokespecial #56
547: ldc           #57
549: invokevirtual #58
552: iload         4
554: invokevirtual #59
557: ldc           #60
559: invokevirtual #58
562: iconst_0
563: invokevirtual #59
566: ldc           #57
568: invokevirtual #58
571: invokevirtual #61
574: iload         4
576: ifne          583
579: iconst_1
580: goto          584
583: iconst_0
584: invokestatic  #62
587: new           #55
590: dup
591: invokespecial #56
594: ldc           #57
596: invokevirtual #58
599: iload         5
601: invokevirtual #59
604: ldc           #60
606: invokevirtual #58
609: bipush        8
611: invokevirtual #59
614: ldc           #57
616: invokevirtual #58
619: invokevirtual #61
622: iload         5
624: bipush        8
626: if_icmpne     633
629: iconst_1
630: goto          634
633: iconst_0
634: invokestatic  #62
637: aload         6
639: invokestatic  #10
642: aload         7
644: invokestatic  #10
647: aload         8
649: invokestatic  #10
652: new           #55
655: dup
656: invokespecial #56
659: ldc           #57
661: invokevirtual #58
664: iload         10
666: invokevirtual #59
669: ldc           #60
671: invokevirtual #58
674: iconst_0
675: invokevirtual #59
678: ldc           #57
680: invokevirtual #58
683: invokevirtual #61
686: iload         10
688: ifne          695
691: iconst_1
692: goto          696
695: iconst_0
696: invokestatic  #62
699: aload         11
701: invokestatic  #10
704: aload         12
706: invokestatic  #10
709: new           #55
712: dup
713: invokespecial #56
716: ldc           #57
718: invokevirtual #58
721: aload         13
723: invokevirtual #58
726: ldc           #209
728: invokevirtual #58
731: invokevirtual #61
734: aload         13
736: ldc           #210
738: invokestatic  #96
741: aload         14
743: invokestatic  #10
746: aload         15
748: invokestatic  #10
751: new           #55
754: dup
755: invokespecial #56
758: ldc           #57
760: invokevirtual #58
763: lload         16
765: invokevirtual #386
768: ldc           #60
770: invokevirtual #58
773: ldc2_w        #387
776: invokevirtual #386
779: ldc           #57
781: invokevirtual #58
784: invokevirtual #61
787: lload         16
789: ldc2_w        #387
792: lcmp
793: ifne          800
796: iconst_1
797: goto          801
800: iconst_0
801: invokestatic  #62
804: aload         18
806: invokestatic  #10
809: aload         19
811: invokestatic  #10
814: aload         20
816: invokestatic  #10
819: aload         21
821: invokestatic  #10
824: aload         23
826: invokestatic  #10
829: aload         24
831: invokestatic  #10
834: aload         25
836: invokestatic  #10
839: aload         26
841: invokestatic  #10
844: aload         27
846: invokestatic  #10
849: aload         28
851: invokestatic  #10
854: aload         30
856: invokestatic  #10
859: aload         32
861: invokestatic  #10
864: new           #55
867: dup
868: invokespecial #56
871: ldc           #57
873: invokevirtual #58
876: iload         33
878: invokevirtual #97
881: ldc           #60
883: invokevirtual #58
886: iconst_1
887: invokevirtual #97
890: ldc           #57
892: invokevirtual #58
895: invokevirtual #61
898: iload         33
900: iconst_1
901: if_icmpne     908
904: iconst_1
905: goto          909
908: iconst_0
909: invokestatic  #62
912: aload         34
914: invokestatic  #10
917: aload         35
919: invokestatic  #10
922: new           #55
925: dup
926: invokespecial #56
929: ldc           #57
931: invokevirtual #58
934: iload         36
936: invokevirtual #59
939: ldc           #60
941: invokevirtual #58
944: iconst_0
945: invokevirtual #59
948: ldc           #57
950: invokevirtual #58
953: invokevirtual #61
956: iload         36
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #62
969: aload         37
971: invokestatic  #10
974: aload         38
976: invokestatic  #10
979: aload         39
981: invokestatic  #10
984: aload         40
986: invokestatic  #10
989: aload         42
991: invokestatic  #10
994: new           #55
997: dup
998: invokespecial #56
1001: ldc           #57
1003: invokevirtual #58
1006: iload         43
1008: invokevirtual #97
1011: ldc           #60
1013: invokevirtual #58
1016: iconst_0
1017: invokevirtual #97
1020: ldc           #57
1022: invokevirtual #58
1025: invokevirtual #61
1028: iload         43
1030: ifne          1037
1033: iconst_1
1034: goto          1038
1037: iconst_0
1038: invokestatic  #62
1041: new           #55
1044: dup
1045: invokespecial #56
1048: ldc           #57
1050: invokevirtual #58
1053: aload         44
1055: invokevirtual #58
1058: ldc           #238
1060: invokevirtual #58
1063: invokevirtual #61
1066: aload         44
1068: ldc           #239
1070: invokestatic  #96
1073: new           #55
1076: dup
1077: invokespecial #56
1080: ldc           #57
1082: invokevirtual #58
1085: iload         46
1087: invokevirtual #59
1090: ldc           #60
1092: invokevirtual #58
1095: bipush        -36
1097: invokevirtual #59
1100: ldc           #57
1102: invokevirtual #58
1105: invokevirtual #61
1108: iload         46
1110: bipush        -36
1112: if_icmpne     1119
1115: iconst_1
1116: goto          1120
1119: iconst_0
1120: invokestatic  #62
1123: aload         47
1125: invokestatic  #10
1128: aload         48
1130: invokestatic  #10
1133: new           #55
1136: dup
1137: invokespecial #56
1140: ldc           #57
1142: invokevirtual #58
1145: iload         49
1147: invokevirtual #59
1150: ldc           #60
1152: invokevirtual #58
1155: iconst_0
1156: invokevirtual #59
1159: ldc           #57
1161: invokevirtual #58
1164: invokevirtual #61
1167: iload         49
1169: ifne          1176
1172: iconst_1
1173: goto          1177
1176: iconst_0
1177: invokestatic  #62
1180: aload         50
1182: invokestatic  #10
1185: aload         51
1187: invokestatic  #10
1190: aload         52
1192: invokestatic  #10
1195: aload         53
1197: invokestatic  #10
1200: aload         55
1202: invokestatic  #10
1205: new           #55
1208: dup
1209: invokespecial #56
1212: ldc           #57
1214: invokevirtual #58
1217: iload         56
1219: invokevirtual #97
1222: ldc           #60
1224: invokevirtual #58
1227: iconst_0
1228: invokevirtual #97
1231: ldc           #57
1233: invokevirtual #58
1236: invokevirtual #61
1239: iload         56
1241: ifne          1248
1244: iconst_1
1245: goto          1249
1248: iconst_0
1249: invokestatic  #62
1252: new           #55
1255: dup
1256: invokespecial #56
1259: ldc           #57
1261: invokevirtual #58
1264: aload         57
1266: invokevirtual #58
1269: ldc           #238
1271: invokevirtual #58
1274: invokevirtual #61
1277: aload         57
1279: ldc           #239
1281: invokestatic  #96
1284: aload         58
1286: invokestatic  #10
1289: new           #55
1292: dup
1293: invokespecial #56
1296: ldc           #57
1298: invokevirtual #58
1301: iload         60
1303: invokevirtual #59
1306: ldc           #60
1308: invokevirtual #58
1311: ldc_w         #479
1314: invokevirtual #59
1317: ldc           #57
1319: invokevirtual #58
1322: invokevirtual #61
1325: iload         60
1327: ldc_w         #479
1330: if_icmpne     1337
1333: iconst_1
1334: goto          1338
1337: iconst_0
1338: invokestatic  #62
1341: new           #55
1344: dup
1345: invokespecial #56
1348: ldc           #57
1350: invokevirtual #58
1353: iload         61
1355: invokevirtual #97
1358: ldc           #60
1360: invokevirtual #58
1363: iconst_0
1364: invokevirtual #97
1367: ldc           #57
1369: invokevirtual #58
1372: invokevirtual #61
1375: iload         61
1377: ifne          1384
1380: iconst_1
1381: goto          1385
1384: iconst_0
1385: invokestatic  #62
1388: aload         62
1390: invokestatic  #10
1393: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test114
Start line: 4508
End line: 4612
Method source code: 
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        java.lang.String[] strArray36 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter37 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter37.withLocale(locale38);
        boolean boolean40 = periodFormatter37.isParser();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter37.withLocale(locale41);
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter42.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal44 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology47);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period51 = period48.minusDays((int) (byte) 100);
        java.util.Locale locale53 = null;
        int int54 = literal44.countFieldsToPrint((org.joda.time.ReadablePeriod) period51, 999, locale53);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator57 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray36, periodPrinter43, (org.joda.time.format.PeriodParser) literal44, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder58 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = periodFormatterBuilder58.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter61 = periodFormatterBuilder60.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = periodFormatterBuilder60.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter64 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter64.withLocale(locale65);
        boolean boolean67 = periodFormatter66.isParser();
        java.util.Locale locale68 = null;
        org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter66.withLocale(locale68);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone75 = gregorianChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.yearOfCentury();
        org.joda.time.Period period77 = new org.joda.time.Period((long) '4', 100L, periodType72, (org.joda.time.Chronology) gregorianChronology73);
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter66.withParseType(periodType72);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder60.append(periodFormatter78);
        org.joda.time.format.PeriodParser periodParser80 = periodFormatter78.getParser();
        org.joda.time.format.PeriodFormatterBuilder.Separator separator81 = separator28.finish((org.joda.time.format.PeriodPrinter) literal44, periodParser80);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology84);
        java.lang.String str86 = period85.toString();
        org.joda.time.Period period88 = period85.minusDays((int) (byte) 100);
        org.joda.time.Period period89 = period85.toPeriod();
        org.joda.time.Period period91 = period89.withYears((-894));
        java.util.Locale locale92 = null;
        int int93 = separator28.calculatePrintedLength((org.joda.time.ReadablePeriod) period89, locale92);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodPrinter43);
        org.junit.Assert.assertNotNull(literal44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT-0.090S" + "'", str49, "PT-0.090S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder60);
        org.junit.Assert.assertNotNull(periodPrinter61);
        org.junit.Assert.assertNotNull(periodFormatterBuilder63);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodParser80);
        org.junit.Assert.assertNotNull(separator81);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT-0.090S" + "'", str86, "PT-0.090S");
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 25 + "'", int93 == 25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #480
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: iconst_5
171: anewarray     #99
174: dup
175: iconst_0
176: ldc           #100
178: aastore
179: dup
180: iconst_1
181: ldc           #101
183: aastore
184: dup
185: iconst_2
186: ldc           #102
188: aastore
189: dup
190: iconst_3
191: ldc           #103
193: aastore
194: dup
195: iconst_4
196: ldc           #104
198: aastore
199: astore        17
201: invokestatic  #12
204: astore        18
206: aconst_null
207: astore        19
209: aload         18
211: aload         19
213: invokevirtual #88
216: astore        20
218: aload         18
220: invokevirtual #89
223: istore        21
225: aconst_null
226: astore        22
228: aload         18
230: aload         22
232: invokevirtual #88
235: astore        23
237: aload         23
239: invokevirtual #90
242: astore        24
244: getstatic     #78
247: astore        25
249: aconst_null
250: astore        26
252: new           #46
255: dup
256: ldc2_w        #79
259: ldc2_w        #81
262: aload         26
264: invokespecial #83
267: astore        27
269: aload         27
271: invokevirtual #84
274: astore        28
276: aload         27
278: bipush        100
280: invokevirtual #85
283: astore        29
285: aconst_null
286: astore        30
288: aload         25
290: aload         29
292: sipush        999
295: aload         30
297: invokevirtual #86
300: istore        31
302: new           #105
305: dup
306: ldc           #106
308: ldc           #104
310: aload         17
312: aload         24
314: aload         25
316: iconst_0
317: iconst_0
318: invokespecial #107
321: astore        32
323: new           #14
326: dup
327: invokespecial #15
330: astore        33
332: aload         33
334: ldc           #16
336: invokevirtual #17
339: astore        34
341: aload         34
343: invokevirtual #45
346: astore        35
348: aload         34
350: iconst_0
351: invokevirtual #108
354: astore        36
356: invokestatic  #12
359: astore        37
361: aconst_null
362: astore        38
364: aload         37
366: aload         38
368: invokevirtual #88
371: astore        39
373: aload         39
375: invokevirtual #89
378: istore        40
380: aconst_null
381: astore        41
383: aload         39
385: aload         41
387: invokevirtual #88
390: astore        42
392: invokestatic  #109
395: astore        43
397: invokestatic  #110
400: astore        44
402: aload         44
404: invokevirtual #111
407: astore        45
409: aload         44
411: invokevirtual #112
414: astore        46
416: aload         44
418: invokevirtual #113
421: astore        47
423: new           #46
426: dup
427: ldc2_w        #114
430: ldc2_w        #79
433: aload         43
435: aload         44
437: invokespecial #116
440: astore        48
442: aload         39
444: aload         43
446: invokevirtual #117
449: astore        49
451: aload         34
453: aload         49
455: invokevirtual #118
458: astore        50
460: aload         49
462: invokevirtual #119
465: astore        51
467: aload         16
469: aload         25
471: aload         51
473: invokevirtual #120
476: astore        52
478: aconst_null
479: astore        53
481: new           #46
484: dup
485: ldc2_w        #79
488: ldc2_w        #81
491: aload         53
493: invokespecial #83
496: astore        54
498: aload         54
500: invokevirtual #84
503: astore        55
505: aload         54
507: bipush        100
509: invokevirtual #85
512: astore        56
514: aload         54
516: invokevirtual #481
519: astore        57
521: aload         57
523: sipush        -894
526: invokevirtual #482
529: astore        58
531: aconst_null
532: astore        59
534: aload         16
536: aload         57
538: aload         59
540: invokevirtual #179
543: istore        60
545: aload_1
546: invokestatic  #10
549: aload_2
550: invokestatic  #10
553: aload         4
555: invokestatic  #10
558: new           #55
561: dup
562: invokespecial #56
565: ldc           #57
567: invokevirtual #58
570: iload         5
572: invokevirtual #97
575: ldc           #60
577: invokevirtual #58
580: iconst_1
581: invokevirtual #97
584: ldc           #57
586: invokevirtual #58
589: invokevirtual #61
592: iload         5
594: iconst_1
595: if_icmpne     602
598: iconst_1
599: goto          603
602: iconst_0
603: invokestatic  #62
606: aload         7
608: invokestatic  #10
611: aload         8
613: invokestatic  #10
616: aload         9
618: invokestatic  #10
621: new           #55
624: dup
625: invokespecial #56
628: ldc           #57
630: invokevirtual #58
633: aload         12
635: invokevirtual #58
638: ldc           #94
640: invokevirtual #58
643: invokevirtual #61
646: aload         12
648: ldc           #95
650: invokestatic  #96
653: aload         13
655: invokestatic  #10
658: new           #55
661: dup
662: invokespecial #56
665: ldc           #57
667: invokevirtual #58
670: iload         15
672: invokevirtual #59
675: ldc           #60
677: invokevirtual #58
680: iconst_0
681: invokevirtual #59
684: ldc           #57
686: invokevirtual #58
689: invokevirtual #61
692: iload         15
694: ifne          701
697: iconst_1
698: goto          702
701: iconst_0
702: invokestatic  #62
705: aload         17
707: invokestatic  #10
710: aload         18
712: invokestatic  #10
715: aload         20
717: invokestatic  #10
720: new           #55
723: dup
724: invokespecial #56
727: ldc           #57
729: invokevirtual #58
732: iload         21
734: invokevirtual #97
737: ldc           #60
739: invokevirtual #58
742: iconst_1
743: invokevirtual #97
746: ldc           #57
748: invokevirtual #58
751: invokevirtual #61
754: iload         21
756: iconst_1
757: if_icmpne     764
760: iconst_1
761: goto          765
764: iconst_0
765: invokestatic  #62
768: aload         23
770: invokestatic  #10
773: aload         24
775: invokestatic  #10
778: aload         25
780: invokestatic  #10
783: new           #55
786: dup
787: invokespecial #56
790: ldc           #57
792: invokevirtual #58
795: aload         28
797: invokevirtual #58
800: ldc           #94
802: invokevirtual #58
805: invokevirtual #61
808: aload         28
810: ldc           #95
812: invokestatic  #96
815: aload         29
817: invokestatic  #10
820: new           #55
823: dup
824: invokespecial #56
827: ldc           #57
829: invokevirtual #58
832: iload         31
834: invokevirtual #59
837: ldc           #60
839: invokevirtual #58
842: iconst_0
843: invokevirtual #59
846: ldc           #57
848: invokevirtual #58
851: invokevirtual #61
854: iload         31
856: ifne          863
859: iconst_1
860: goto          864
863: iconst_0
864: invokestatic  #62
867: aload         34
869: invokestatic  #10
872: aload         35
874: invokestatic  #10
877: aload         36
879: invokestatic  #10
882: aload         37
884: invokestatic  #10
887: aload         39
889: invokestatic  #10
892: new           #55
895: dup
896: invokespecial #56
899: ldc           #57
901: invokevirtual #58
904: iload         40
906: invokevirtual #97
909: ldc           #60
911: invokevirtual #58
914: iconst_1
915: invokevirtual #97
918: ldc           #57
920: invokevirtual #58
923: invokevirtual #61
926: iload         40
928: iconst_1
929: if_icmpne     936
932: iconst_1
933: goto          937
936: iconst_0
937: invokestatic  #62
940: aload         42
942: invokestatic  #10
945: aload         43
947: invokestatic  #10
950: aload         44
952: invokestatic  #10
955: aload         45
957: invokestatic  #10
960: aload         46
962: invokestatic  #10
965: aload         47
967: invokestatic  #10
970: aload         49
972: invokestatic  #10
975: aload         50
977: invokestatic  #10
980: aload         51
982: invokestatic  #10
985: aload         52
987: invokestatic  #10
990: new           #55
993: dup
994: invokespecial #56
997: ldc           #57
999: invokevirtual #58
1002: aload         55
1004: invokevirtual #58
1007: ldc           #94
1009: invokevirtual #58
1012: invokevirtual #61
1015: aload         55
1017: ldc           #95
1019: invokestatic  #96
1022: aload         56
1024: invokestatic  #10
1027: aload         57
1029: invokestatic  #10
1032: aload         58
1034: invokestatic  #10
1037: new           #55
1040: dup
1041: invokespecial #56
1044: ldc           #57
1046: invokevirtual #58
1049: iload         60
1051: invokevirtual #59
1054: ldc           #60
1056: invokevirtual #58
1059: bipush        25
1061: invokevirtual #59
1064: ldc           #57
1066: invokevirtual #58
1069: invokevirtual #61
1072: iload         60
1074: bipush        25
1076: if_icmpne     1083
1079: iconst_1
1080: goto          1084
1083: iconst_0
1084: invokestatic  #62
1087: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test115
Start line: 4615
End line: 4631
Method source code: 
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparator("DurationField[halfdays]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.printZeroRarelyFirst();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #483
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: ldc_w         #280
61: invokevirtual #37
64: astore        6
66: aload         6
68: invokevirtual #248
71: astore        7
73: aload_2
74: invokestatic  #10
77: aload_3
78: invokestatic  #10
81: aload         4
83: invokestatic  #10
86: aload         5
88: invokestatic  #10
91: aload         6
93: invokestatic  #10
96: aload         7
98: invokestatic  #10
101: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test116
Start line: 4634
End line: 4657
Method source code: 
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("DateTimeField[yearOfCentury]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendSeparator("TimeNoHoursNoMillis", "-894");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #484
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #185
66: astore        6
68: aload         5
70: ldc_w         #485
73: invokevirtual #37
76: astore        7
78: aload         7
80: ldc           #184
82: ldc_w         #486
85: invokevirtual #20
88: astore        8
90: ldc           #21
92: invokestatic  #22
95: goto          100
98: astore        8
100: aload_2
101: invokestatic  #10
104: aload_3
105: invokestatic  #10
108: aload         4
110: invokestatic  #10
113: aload         5
115: invokestatic  #10
118: aload         6
120: invokestatic  #10
123: aload         7
125: invokestatic  #10
128: return
Exception table:
from    to  target type
78    95    98   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test117
Start line: 4660
End line: 4680
Method source code: 
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatterBuilder7.toPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodPrinter9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #487
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #488
67: astore        7
69: aload         7
71: invokevirtual #25
74: astore        8
76: aload         7
78: invokevirtual #45
81: astore        9
83: aload_2
84: invokestatic  #10
87: aload_3
88: invokestatic  #10
91: aload         4
93: invokestatic  #10
96: aload         5
98: invokestatic  #10
101: aload         6
103: invokestatic  #10
106: aload         7
108: invokestatic  #10
111: aload         8
113: invokestatic  #10
116: aload         9
118: invokestatic  #10
121: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test118
Start line: 4683
End line: 4696
Method source code: 
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        periodFormatterBuilder3.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder3.rejectSignedValues(true);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #489
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: ldc           #34
48: ldc           #35
50: invokevirtual #20
53: astore        4
55: aload_3
56: invokevirtual #212
59: aload_3
60: iconst_1
61: invokevirtual #108
64: astore        5
66: aload_2
67: invokestatic  #10
70: aload_3
71: invokestatic  #10
74: aload         4
76: invokestatic  #10
79: aload         5
81: invokestatic  #10
84: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test119
Start line: 4699
End line: 4719
Method source code: 
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendLiteral("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendLiteral("DurationField[weeks]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.appendLiteral("");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #490
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: ldc           #74
66: invokevirtual #28
69: astore        7
71: aload         7
73: ldc_w         #491
76: invokevirtual #28
79: astore        8
81: aload         8
83: ldc           #74
85: invokevirtual #28
88: astore        9
90: aload_2
91: invokestatic  #10
94: aload_3
95: invokestatic  #10
98: aload         4
100: invokestatic  #10
103: aload         5
105: invokestatic  #10
108: aload         6
110: invokestatic  #10
113: aload         7
115: invokestatic  #10
118: aload         8
120: invokestatic  #10
123: aload         9
125: invokestatic  #10
128: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test120
Start line: 4722
End line: 4732
Method source code: 
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #492
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #72
49: astore        4
51: aload_2
52: invokestatic  #10
55: aload_3
56: invokestatic  #10
59: aload         4
61: invokestatic  #10
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test121
Start line: 4735
End line: 4751
Method source code: 
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodPrinter periodPrinter6 = periodFormatterBuilder5.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodPrinter6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #493
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload         5
59: invokevirtual #45
62: astore        6
64: aload         5
66: invokevirtual #25
69: astore        7
71: aload_2
72: invokestatic  #10
75: aload_3
76: invokestatic  #10
79: aload         4
81: invokestatic  #10
84: aload         5
86: invokestatic  #10
89: aload         6
91: invokestatic  #10
94: aload         7
96: invokestatic  #10
99: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test122
Start line: 4754
End line: 4774
Method source code: 
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatterBuilder6.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendSuffix("weekyearOfCentury", "-106");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder11.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodParser7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #494
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #71
56: astore        5
58: aload         5
60: invokevirtual #142
63: astore        6
65: aload         5
67: ldc_w         #495
70: ldc_w         #477
73: invokevirtual #30
76: astore        7
78: aload         7
80: invokevirtual #72
83: astore        8
85: aload         8
87: invokevirtual #149
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test123
Start line: 4777
End line: 4900
Method source code: 
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.minuteOfHour();
        org.joda.time.Period period3 = org.joda.time.Period.millis(1);
        int int4 = period3.getMonths();
        int int5 = period3.size();
        org.joda.time.Period period7 = period3.withDays((int) (byte) 100);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = period8.get(durationFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period8.withField(durationFieldType13, 8);
        java.lang.String str16 = durationFieldType13.getName();
        org.joda.time.Period period18 = period3.withField(durationFieldType13, 1);
        org.joda.time.Period period20 = period3.minusDays(10);
        long long23 = gregorianChronology0.add((org.joda.time.ReadablePeriod) period3, (long) (short) 100, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology0.halfdayOfDay();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder30 = periodFormatterBuilder28.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder28.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder28.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder32.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder32.appendSeconds();
        periodFormatterBuilder32.clear();
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatterBuilder32.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal39 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter40 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter40.withLocale(locale41);
        boolean boolean43 = periodFormatter42.isParser();
        org.joda.time.format.PeriodParser periodParser44 = periodFormatter42.getParser();
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        int int46 = period45.getHours();
        org.joda.time.Period period48 = period45.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod49 = period48.toMutablePeriod();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType53 = org.joda.time.DateTimeUtils.getPeriodType(periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period(100L, (long) (short) -1, periodType52);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.weeks();
        boolean boolean56 = periodType52.isSupported(durationFieldType55);
        mutablePeriod49.add(durationFieldType55, (int) (byte) 100);
        java.lang.String str59 = mutablePeriod49.toString();
        java.util.Locale locale62 = null;
        int int63 = periodParser44.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod49, "weekyear", (int) '#', locale62);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder64 = periodFormatterBuilder32.append((org.joda.time.format.PeriodPrinter) literal39, periodParser44);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        int int66 = period65.getHours();
        org.joda.time.Period period68 = period65.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod69 = period68.toMutablePeriod();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType73 = org.joda.time.DateTimeUtils.getPeriodType(periodType72);
        org.joda.time.Period period74 = new org.joda.time.Period(100L, (long) (short) -1, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.weeks();
        boolean boolean76 = periodType72.isSupported(durationFieldType75);
        mutablePeriod69.add(durationFieldType75, (int) (byte) 100);
        java.lang.String str79 = mutablePeriod69.toString();
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.years();
        mutablePeriod69.set(durationFieldType80, (int) (short) -1);
        mutablePeriod69.addYears((int) '4');
        mutablePeriod69.addMillis((-101));
        java.util.Locale locale89 = null;
        int int90 = literal39.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod69, "-106", 315532800, locale89);
        boolean boolean91 = gregorianChronology0.equals((java.lang.Object) "-106");
        org.joda.time.DateTimeField dateTimeField92 = gregorianChronology0.dayOfWeek();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "seconds" + "'", str16, "seconds");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder30);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(periodParser44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "P100W" + "'", str59, "P100W");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-36) + "'", int63 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "P100W" + "'", str79, "P100W");
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-315532801) + "'", int90 == (-315532801));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #496
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #110
28: astore_1
29: aload_1
30: invokevirtual #111
33: astore_2
34: iconst_1
35: invokestatic  #168
38: astore_3
39: aload_3
40: invokevirtual #169
43: istore        4
45: aload_3
46: invokevirtual #170
49: istore        5
51: aload_3
52: bipush        100
54: invokevirtual #200
57: astore        6
59: getstatic     #8
62: astore        7
64: aload         7
66: iconst_m1
67: invokevirtual #9
70: astore        8
72: aconst_null
73: astore        9
75: aload         7
77: aload         9
79: invokevirtual #201
82: istore        10
84: invokestatic  #202
87: astore        11
89: aload         7
91: aload         11
93: bipush        8
95: invokevirtual #203
98: astore        12
100: aload         11
102: invokevirtual #204
105: astore        13
107: aload_3
108: aload         11
110: iconst_1
111: invokevirtual #203
114: astore        14
116: aload_3
117: bipush        10
119: invokevirtual #85
122: astore        15
124: aload_1
125: aload_3
126: ldc2_w        #79
129: bipush        100
131: invokevirtual #227
134: lstore        16
136: aload_1
137: invokevirtual #382
140: astore        18
142: aload_1
143: invokevirtual #473
146: astore        19
148: aload_1
149: invokevirtual #383
152: astore        20
154: aload_1
155: invokevirtual #474
158: astore        21
160: new           #14
163: dup
164: invokespecial #15
167: astore        22
169: aload         22
171: ldc           #16
173: invokevirtual #17
176: astore        23
178: aload         22
180: invokevirtual #25
183: astore        24
185: aload         22
187: invokevirtual #39
190: astore        25
192: aload         25
194: ldc_w         #319
197: invokevirtual #196
200: astore        26
202: aload         25
204: invokevirtual #320
207: astore        27
209: aload         25
211: invokevirtual #212
214: aload         25
216: invokevirtual #161
219: astore        28
221: new           #392
224: dup
225: ldc           #74
227: invokespecial #393
230: astore        29
232: invokestatic  #12
235: astore        30
237: aconst_null
238: astore        31
240: aload         30
242: aload         31
244: invokevirtual #88
247: astore        32
249: aload         32
251: invokevirtual #89
254: istore        33
256: aload         32
258: invokevirtual #119
261: astore        34
263: getstatic     #8
266: astore        35
268: aload         35
270: invokevirtual #216
273: istore        36
275: aload         35
277: iconst_0
278: invokevirtual #200
281: astore        37
283: aload         37
285: invokevirtual #205
288: astore        38
290: invokestatic  #171
293: astore        39
295: aload         39
297: invokestatic  #172
300: astore        40
302: new           #46
305: dup
306: ldc2_w        #79
309: ldc2_w        #173
312: aload         39
314: invokespecial #175
317: astore        41
319: invokestatic  #176
322: astore        42
324: aload         39
326: aload         42
328: invokevirtual #177
331: istore        43
333: aload         38
335: aload         42
337: bipush        100
339: invokevirtual #226
342: aload         38
344: invokevirtual #235
347: astore        44
349: aconst_null
350: astore        45
352: aload         34
354: aload         38
356: ldc           #135
358: bipush        35
360: aload         45
362: invokeinterface #231,  5
367: istore        46
369: aload         25
371: aload         29
373: aload         34
375: invokevirtual #87
378: astore        47
380: getstatic     #8
383: astore        48
385: aload         48
387: invokevirtual #216
390: istore        49
392: aload         48
394: iconst_0
395: invokevirtual #200
398: astore        50
400: aload         50
402: invokevirtual #205
405: astore        51
407: invokestatic  #171
410: astore        52
412: aload         52
414: invokestatic  #172
417: astore        53
419: new           #46
422: dup
423: ldc2_w        #79
426: ldc2_w        #173
429: aload         52
431: invokespecial #175
434: astore        54
436: invokestatic  #176
439: astore        55
441: aload         52
443: aload         55
445: invokevirtual #177
448: istore        56
450: aload         51
452: aload         55
454: bipush        100
456: invokevirtual #226
459: aload         51
461: invokevirtual #235
464: astore        57
466: invokestatic  #300
469: astore        58
471: aload         51
473: aload         58
475: iconst_m1
476: invokevirtual #301
479: aload         51
481: bipush        52
483: invokevirtual #475
486: aload         51
488: bipush        -101
490: invokevirtual #476
493: aconst_null
494: astore        59
496: aload         29
498: aload         51
500: ldc_w         #477
503: ldc_w         #276
506: aload         59
508: invokevirtual #221
511: istore        60
513: aload_1
514: ldc_w         #477
517: invokevirtual #478
520: istore        61
522: aload_1
523: invokevirtual #223
526: astore        62
528: aload_1
529: invokestatic  #10
532: aload_2
533: invokestatic  #10
536: aload_3
537: invokestatic  #10
540: new           #55
543: dup
544: invokespecial #56
547: ldc           #57
549: invokevirtual #58
552: iload         4
554: invokevirtual #59
557: ldc           #60
559: invokevirtual #58
562: iconst_0
563: invokevirtual #59
566: ldc           #57
568: invokevirtual #58
571: invokevirtual #61
574: iload         4
576: ifne          583
579: iconst_1
580: goto          584
583: iconst_0
584: invokestatic  #62
587: new           #55
590: dup
591: invokespecial #56
594: ldc           #57
596: invokevirtual #58
599: iload         5
601: invokevirtual #59
604: ldc           #60
606: invokevirtual #58
609: bipush        8
611: invokevirtual #59
614: ldc           #57
616: invokevirtual #58
619: invokevirtual #61
622: iload         5
624: bipush        8
626: if_icmpne     633
629: iconst_1
630: goto          634
633: iconst_0
634: invokestatic  #62
637: aload         6
639: invokestatic  #10
642: aload         7
644: invokestatic  #10
647: aload         8
649: invokestatic  #10
652: new           #55
655: dup
656: invokespecial #56
659: ldc           #57
661: invokevirtual #58
664: iload         10
666: invokevirtual #59
669: ldc           #60
671: invokevirtual #58
674: iconst_0
675: invokevirtual #59
678: ldc           #57
680: invokevirtual #58
683: invokevirtual #61
686: iload         10
688: ifne          695
691: iconst_1
692: goto          696
695: iconst_0
696: invokestatic  #62
699: aload         11
701: invokestatic  #10
704: aload         12
706: invokestatic  #10
709: new           #55
712: dup
713: invokespecial #56
716: ldc           #57
718: invokevirtual #58
721: aload         13
723: invokevirtual #58
726: ldc           #209
728: invokevirtual #58
731: invokevirtual #61
734: aload         13
736: ldc           #210
738: invokestatic  #96
741: aload         14
743: invokestatic  #10
746: aload         15
748: invokestatic  #10
751: new           #55
754: dup
755: invokespecial #56
758: ldc           #57
760: invokevirtual #58
763: lload         16
765: invokevirtual #386
768: ldc           #60
770: invokevirtual #58
773: ldc2_w        #387
776: invokevirtual #386
779: ldc           #57
781: invokevirtual #58
784: invokevirtual #61
787: lload         16
789: ldc2_w        #387
792: lcmp
793: ifne          800
796: iconst_1
797: goto          801
800: iconst_0
801: invokestatic  #62
804: aload         18
806: invokestatic  #10
809: aload         19
811: invokestatic  #10
814: aload         20
816: invokestatic  #10
819: aload         21
821: invokestatic  #10
824: aload         23
826: invokestatic  #10
829: aload         24
831: invokestatic  #10
834: aload         25
836: invokestatic  #10
839: aload         26
841: invokestatic  #10
844: aload         27
846: invokestatic  #10
849: aload         28
851: invokestatic  #10
854: aload         30
856: invokestatic  #10
859: aload         32
861: invokestatic  #10
864: new           #55
867: dup
868: invokespecial #56
871: ldc           #57
873: invokevirtual #58
876: iload         33
878: invokevirtual #97
881: ldc           #60
883: invokevirtual #58
886: iconst_1
887: invokevirtual #97
890: ldc           #57
892: invokevirtual #58
895: invokevirtual #61
898: iload         33
900: iconst_1
901: if_icmpne     908
904: iconst_1
905: goto          909
908: iconst_0
909: invokestatic  #62
912: aload         34
914: invokestatic  #10
917: aload         35
919: invokestatic  #10
922: new           #55
925: dup
926: invokespecial #56
929: ldc           #57
931: invokevirtual #58
934: iload         36
936: invokevirtual #59
939: ldc           #60
941: invokevirtual #58
944: iconst_0
945: invokevirtual #59
948: ldc           #57
950: invokevirtual #58
953: invokevirtual #61
956: iload         36
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #62
969: aload         37
971: invokestatic  #10
974: aload         38
976: invokestatic  #10
979: aload         39
981: invokestatic  #10
984: aload         40
986: invokestatic  #10
989: aload         42
991: invokestatic  #10
994: new           #55
997: dup
998: invokespecial #56
1001: ldc           #57
1003: invokevirtual #58
1006: iload         43
1008: invokevirtual #97
1011: ldc           #60
1013: invokevirtual #58
1016: iconst_0
1017: invokevirtual #97
1020: ldc           #57
1022: invokevirtual #58
1025: invokevirtual #61
1028: iload         43
1030: ifne          1037
1033: iconst_1
1034: goto          1038
1037: iconst_0
1038: invokestatic  #62
1041: new           #55
1044: dup
1045: invokespecial #56
1048: ldc           #57
1050: invokevirtual #58
1053: aload         44
1055: invokevirtual #58
1058: ldc           #238
1060: invokevirtual #58
1063: invokevirtual #61
1066: aload         44
1068: ldc           #239
1070: invokestatic  #96
1073: new           #55
1076: dup
1077: invokespecial #56
1080: ldc           #57
1082: invokevirtual #58
1085: iload         46
1087: invokevirtual #59
1090: ldc           #60
1092: invokevirtual #58
1095: bipush        -36
1097: invokevirtual #59
1100: ldc           #57
1102: invokevirtual #58
1105: invokevirtual #61
1108: iload         46
1110: bipush        -36
1112: if_icmpne     1119
1115: iconst_1
1116: goto          1120
1119: iconst_0
1120: invokestatic  #62
1123: aload         47
1125: invokestatic  #10
1128: aload         48
1130: invokestatic  #10
1133: new           #55
1136: dup
1137: invokespecial #56
1140: ldc           #57
1142: invokevirtual #58
1145: iload         49
1147: invokevirtual #59
1150: ldc           #60
1152: invokevirtual #58
1155: iconst_0
1156: invokevirtual #59
1159: ldc           #57
1161: invokevirtual #58
1164: invokevirtual #61
1167: iload         49
1169: ifne          1176
1172: iconst_1
1173: goto          1177
1176: iconst_0
1177: invokestatic  #62
1180: aload         50
1182: invokestatic  #10
1185: aload         51
1187: invokestatic  #10
1190: aload         52
1192: invokestatic  #10
1195: aload         53
1197: invokestatic  #10
1200: aload         55
1202: invokestatic  #10
1205: new           #55
1208: dup
1209: invokespecial #56
1212: ldc           #57
1214: invokevirtual #58
1217: iload         56
1219: invokevirtual #97
1222: ldc           #60
1224: invokevirtual #58
1227: iconst_0
1228: invokevirtual #97
1231: ldc           #57
1233: invokevirtual #58
1236: invokevirtual #61
1239: iload         56
1241: ifne          1248
1244: iconst_1
1245: goto          1249
1248: iconst_0
1249: invokestatic  #62
1252: new           #55
1255: dup
1256: invokespecial #56
1259: ldc           #57
1261: invokevirtual #58
1264: aload         57
1266: invokevirtual #58
1269: ldc           #238
1271: invokevirtual #58
1274: invokevirtual #61
1277: aload         57
1279: ldc           #239
1281: invokestatic  #96
1284: aload         58
1286: invokestatic  #10
1289: new           #55
1292: dup
1293: invokespecial #56
1296: ldc           #57
1298: invokevirtual #58
1301: iload         60
1303: invokevirtual #59
1306: ldc           #60
1308: invokevirtual #58
1311: ldc_w         #479
1314: invokevirtual #59
1317: ldc           #57
1319: invokevirtual #58
1322: invokevirtual #61
1325: iload         60
1327: ldc_w         #479
1330: if_icmpne     1337
1333: iconst_1
1334: goto          1338
1337: iconst_0
1338: invokestatic  #62
1341: new           #55
1344: dup
1345: invokespecial #56
1348: ldc           #57
1350: invokevirtual #58
1353: iload         61
1355: invokevirtual #97
1358: ldc           #60
1360: invokevirtual #58
1363: iconst_0
1364: invokevirtual #97
1367: ldc           #57
1369: invokevirtual #58
1372: invokevirtual #61
1375: iload         61
1377: ifne          1384
1380: iconst_1
1381: goto          1385
1384: iconst_0
1385: invokestatic  #62
1388: aload         62
1390: invokestatic  #10
1393: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test124
Start line: 4903
End line: 4927
Method source code: 
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendSeparatorIfFieldsAfter("-1");
        org.joda.time.format.PeriodFormatter periodFormatter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder7.append(periodFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No formatter supplied");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #497
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #185
66: astore        6
68: aload         6
70: ldc_w         #498
73: invokevirtual #17
76: astore        7
78: aconst_null
79: astore        8
81: aload         6
83: aload         8
85: invokevirtual #118
88: astore        9
90: ldc_w         #325
93: invokestatic  #22
96: goto          101
99: astore        9
101: aload_2
102: invokestatic  #10
105: aload_3
106: invokestatic  #10
109: aload         4
111: invokestatic  #10
114: aload         5
116: invokestatic  #10
119: aload         6
121: invokestatic  #10
124: aload         7
126: invokestatic  #10
129: return
Exception table:
from    to  target type
81    96    99   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test125
Start line: 4930
End line: 4972
Method source code: 
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        java.lang.String[] strArray15 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter16 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale17 = null;
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatter16.withLocale(locale17);
        boolean boolean19 = periodFormatter16.isParser();
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter16.withLocale(locale20);
        org.joda.time.format.PeriodPrinter periodPrinter22 = periodFormatter21.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal23 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology26);
        java.lang.String str28 = period27.toString();
        org.joda.time.Period period30 = period27.minusDays((int) (byte) 100);
        java.util.Locale locale32 = null;
        int int33 = literal23.countFieldsToPrint((org.joda.time.ReadablePeriod) period30, 999, locale32);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator36 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray15, periodPrinter22, (org.joda.time.format.PeriodParser) literal23, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder37 = periodFormatterBuilder5.appendSeparator("76", "979", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder37.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatter16);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNotNull(periodPrinter22);
        org.junit.Assert.assertNotNull(literal23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT-0.090S" + "'", str28, "PT-0.090S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder37);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #499
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: iconst_5
58: anewarray     #99
61: dup
62: iconst_0
63: ldc           #100
65: aastore
66: dup
67: iconst_1
68: ldc           #101
70: aastore
71: dup
72: iconst_2
73: ldc           #102
75: aastore
76: dup
77: iconst_3
78: ldc           #103
80: aastore
81: dup
82: iconst_4
83: ldc           #104
85: aastore
86: astore        6
88: invokestatic  #12
91: astore        7
93: aconst_null
94: astore        8
96: aload         7
98: aload         8
100: invokevirtual #88
103: astore        9
105: aload         7
107: invokevirtual #89
110: istore        10
112: aconst_null
113: astore        11
115: aload         7
117: aload         11
119: invokevirtual #88
122: astore        12
124: aload         12
126: invokevirtual #90
129: astore        13
131: getstatic     #78
134: astore        14
136: aconst_null
137: astore        15
139: new           #46
142: dup
143: ldc2_w        #79
146: ldc2_w        #81
149: aload         15
151: invokespecial #83
154: astore        16
156: aload         16
158: invokevirtual #84
161: astore        17
163: aload         16
165: bipush        100
167: invokevirtual #85
170: astore        18
172: aconst_null
173: astore        19
175: aload         14
177: aload         18
179: sipush        999
182: aload         19
184: invokevirtual #86
187: istore        20
189: new           #105
192: dup
193: ldc           #106
195: ldc           #104
197: aload         6
199: aload         13
201: aload         14
203: iconst_0
204: iconst_0
205: invokespecial #107
208: astore        21
210: aload         5
212: ldc_w         #500
215: ldc_w         #444
218: aload         6
220: invokevirtual #137
223: astore        22
225: aload         22
227: invokevirtual #77
230: astore        23
232: aload_2
233: invokestatic  #10
236: aload_3
237: invokestatic  #10
240: aload         4
242: invokestatic  #10
245: aload         5
247: invokestatic  #10
250: aload         6
252: invokestatic  #10
255: aload         7
257: invokestatic  #10
260: aload         9
262: invokestatic  #10
265: new           #55
268: dup
269: invokespecial #56
272: ldc           #57
274: invokevirtual #58
277: iload         10
279: invokevirtual #97
282: ldc           #60
284: invokevirtual #58
287: iconst_1
288: invokevirtual #97
291: ldc           #57
293: invokevirtual #58
296: invokevirtual #61
299: iload         10
301: iconst_1
302: if_icmpne     309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #62
313: aload         12
315: invokestatic  #10
318: aload         13
320: invokestatic  #10
323: aload         14
325: invokestatic  #10
328: new           #55
331: dup
332: invokespecial #56
335: ldc           #57
337: invokevirtual #58
340: aload         17
342: invokevirtual #58
345: ldc           #94
347: invokevirtual #58
350: invokevirtual #61
353: aload         17
355: ldc           #95
357: invokestatic  #96
360: aload         18
362: invokestatic  #10
365: new           #55
368: dup
369: invokespecial #56
372: ldc           #57
374: invokevirtual #58
377: iload         20
379: invokevirtual #59
382: ldc           #60
384: invokevirtual #58
387: iconst_0
388: invokevirtual #59
391: ldc           #57
393: invokevirtual #58
396: invokevirtual #61
399: iload         20
401: ifne          408
404: iconst_1
405: goto          409
408: iconst_0
409: invokestatic  #62
412: aload         22
414: invokestatic  #10
417: aload         23
419: invokestatic  #10
422: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test126
Start line: 4975
End line: 4993
Method source code: 
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder0.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #501
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload_1
74: invokevirtual #26
77: astore        8
79: aload_2
80: invokestatic  #10
83: aload_3
84: invokestatic  #10
87: aload         4
89: invokestatic  #10
92: aload         5
94: invokestatic  #10
97: aload         6
99: invokestatic  #10
102: aload         7
104: invokestatic  #10
107: aload         8
109: invokestatic  #10
112: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test127
Start line: 4996
End line: 5036
Method source code: 
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter7 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType8 = periodFormatter7.getParseType();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = periodType11.isSupported(durationFieldType12);
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant9, readableInstant10, periodType11);
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter7.withParseType(periodType11);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.append(periodFormatter7);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType20 = org.joda.time.DateTimeUtils.getPeriodType(periodType19);
        org.joda.time.Period period21 = new org.joda.time.Period(100L, (long) (short) -1, periodType19);
        org.joda.time.PeriodType periodType22 = periodType19.withDaysRemoved();
        org.joda.time.PeriodType periodType23 = periodType19.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter7.withParseType(periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period(1715771847057L, periodType23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodType8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodFormatter24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #502
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: invokestatic  #171
129: astore        16
131: aload         16
133: invokestatic  #172
136: astore        17
138: new           #46
141: dup
142: ldc2_w        #79
145: ldc2_w        #173
148: aload         16
150: invokespecial #175
153: astore        18
155: aload         16
157: invokevirtual #352
160: astore        19
162: aload         16
164: invokevirtual #353
167: astore        20
169: aload         6
171: aload         20
173: invokevirtual #117
176: astore        21
178: new           #46
181: dup
182: ldc2_w        #503
185: aload         20
187: invokespecial #505
190: astore        22
192: aload_2
193: invokestatic  #10
196: aload_3
197: invokestatic  #10
200: aload         4
202: invokestatic  #10
205: aload         5
207: invokestatic  #10
210: aload         6
212: invokestatic  #10
215: aload         7
217: invokestatic  #354
220: aload         10
222: invokestatic  #10
225: new           #55
228: dup
229: invokespecial #56
232: ldc           #57
234: invokevirtual #58
237: iload         12
239: invokevirtual #97
242: ldc           #60
244: invokevirtual #58
247: iconst_0
248: invokevirtual #97
251: ldc           #57
253: invokevirtual #58
256: invokevirtual #61
259: iload         12
261: ifne          268
264: iconst_1
265: goto          269
268: iconst_0
269: invokestatic  #62
272: aload         14
274: invokestatic  #10
277: aload         15
279: invokestatic  #10
282: aload         16
284: invokestatic  #10
287: aload         17
289: invokestatic  #10
292: aload         19
294: invokestatic  #10
297: aload         20
299: invokestatic  #10
302: aload         21
304: invokestatic  #10
307: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test128
Start line: 5039
End line: 5057
Method source code: 
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("1338");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.printZeroAlways();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #506
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: ldc           #104
72: invokevirtual #17
75: astore        7
77: aload         7
79: invokevirtual #139
82: astore        8
84: aload_2
85: invokestatic  #10
88: aload_3
89: invokestatic  #10
92: aload         4
94: invokestatic  #10
97: aload         5
99: invokestatic  #10
102: aload         6
104: invokestatic  #10
107: aload         7
109: invokestatic  #10
112: aload         8
114: invokestatic  #10
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test129
Start line: 5060
End line: 5154
Method source code: 
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology50);
        java.lang.String str52 = period51.toString();
        org.joda.time.Period period54 = period51.minusDays((int) (byte) 100);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType58 = null;
        int int59 = period55.get(durationFieldType58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period62 = period55.withField(durationFieldType60, 8);
        org.joda.time.Period period64 = period54.withField(durationFieldType60, (-1));
        org.joda.time.Period period66 = period64.withWeeks((int) (short) 0);
        org.joda.time.Period period68 = period64.withDays(100);
        org.joda.time.MutablePeriod mutablePeriod69 = period64.toMutablePeriod();
        java.util.Locale locale71 = null;
        int int72 = separator28.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod69, (-1297), locale71);
        org.joda.time.Period period81 = new org.joda.time.Period(28799999, (-52), 979, (-1032976319), 1133, 576, (int) (byte) -1, (-315532801));
        java.util.Locale locale82 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int83 = separator28.calculatePrintedLength((org.joda.time.ReadablePeriod) period81, locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT-0.090S" + "'", str52, "PT-0.090S");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #507
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: new           #14
173: dup
174: invokespecial #15
177: astore        17
179: aload         17
181: ldc           #16
183: invokevirtual #17
186: astore        18
188: aload         17
190: invokevirtual #25
193: astore        19
195: aload         17
197: invokevirtual #76
200: astore        20
202: aload         17
204: invokevirtual #77
207: astore        21
209: aload         17
211: ldc           #16
213: invokevirtual #17
216: astore        22
218: aload         17
220: ldc           #141
222: invokevirtual #28
225: astore        23
227: invokestatic  #12
230: astore        24
232: aconst_null
233: astore        25
235: aload         24
237: aload         25
239: invokevirtual #88
242: astore        26
244: aload         26
246: invokevirtual #89
249: istore        27
251: aconst_null
252: astore        28
254: aload         26
256: aload         28
258: invokevirtual #88
261: astore        29
263: aload         23
265: aload         29
267: invokevirtual #118
270: astore        30
272: aload         30
274: invokevirtual #142
277: astore        31
279: new           #164
282: dup
283: aload         16
285: aload         31
287: invokespecial #165
290: astore        32
292: aconst_null
293: astore        33
295: new           #46
298: dup
299: ldc2_w        #79
302: ldc2_w        #81
305: aload         33
307: invokespecial #83
310: astore        34
312: aload         34
314: invokevirtual #84
317: astore        35
319: aload         34
321: bipush        100
323: invokevirtual #85
326: astore        36
328: getstatic     #8
331: astore        37
333: aload         37
335: iconst_m1
336: invokevirtual #9
339: astore        38
341: aconst_null
342: astore        39
344: aload         37
346: aload         39
348: invokevirtual #201
351: istore        40
353: invokestatic  #202
356: astore        41
358: aload         37
360: aload         41
362: bipush        8
364: invokevirtual #203
367: astore        42
369: aload         36
371: aload         41
373: iconst_m1
374: invokevirtual #203
377: astore        43
379: aload         43
381: iconst_0
382: invokevirtual #508
385: astore        44
387: aload         43
389: bipush        100
391: invokevirtual #200
394: astore        45
396: aload         43
398: invokevirtual #205
401: astore        46
403: aconst_null
404: astore        47
406: aload         16
408: aload         46
410: sipush        -1297
413: aload         47
415: invokevirtual #167
418: istore        48
420: new           #46
423: dup
424: ldc_w         #509
427: bipush        -52
429: sipush        979
432: ldc_w         #510
435: sipush        1133
438: sipush        576
441: iconst_m1
442: ldc_w         #479
445: invokespecial #511
448: astore        49
450: aconst_null
451: astore        50
453: aload         16
455: aload         49
457: aload         50
459: invokevirtual #179
462: istore        51
464: ldc           #53
466: invokestatic  #22
469: goto          474
472: astore        51
474: aload_1
475: invokestatic  #10
478: aload_2
479: invokestatic  #10
482: aload         4
484: invokestatic  #10
487: new           #55
490: dup
491: invokespecial #56
494: ldc           #57
496: invokevirtual #58
499: iload         5
501: invokevirtual #97
504: ldc           #60
506: invokevirtual #58
509: iconst_1
510: invokevirtual #97
513: ldc           #57
515: invokevirtual #58
518: invokevirtual #61
521: iload         5
523: iconst_1
524: if_icmpne     531
527: iconst_1
528: goto          532
531: iconst_0
532: invokestatic  #62
535: aload         7
537: invokestatic  #10
540: aload         8
542: invokestatic  #10
545: aload         9
547: invokestatic  #10
550: new           #55
553: dup
554: invokespecial #56
557: ldc           #57
559: invokevirtual #58
562: aload         12
564: invokevirtual #58
567: ldc           #94
569: invokevirtual #58
572: invokevirtual #61
575: aload         12
577: ldc           #95
579: invokestatic  #96
582: aload         13
584: invokestatic  #10
587: new           #55
590: dup
591: invokespecial #56
594: ldc           #57
596: invokevirtual #58
599: iload         15
601: invokevirtual #59
604: ldc           #60
606: invokevirtual #58
609: iconst_0
610: invokevirtual #59
613: ldc           #57
615: invokevirtual #58
618: invokevirtual #61
621: iload         15
623: ifne          630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #62
634: aload         18
636: invokestatic  #10
639: aload         19
641: invokestatic  #10
644: aload         20
646: invokestatic  #10
649: aload         21
651: invokestatic  #10
654: aload         22
656: invokestatic  #10
659: aload         23
661: invokestatic  #10
664: aload         24
666: invokestatic  #10
669: aload         26
671: invokestatic  #10
674: new           #55
677: dup
678: invokespecial #56
681: ldc           #57
683: invokevirtual #58
686: iload         27
688: invokevirtual #97
691: ldc           #60
693: invokevirtual #58
696: iconst_1
697: invokevirtual #97
700: ldc           #57
702: invokevirtual #58
705: invokevirtual #61
708: iload         27
710: iconst_1
711: if_icmpne     718
714: iconst_1
715: goto          719
718: iconst_0
719: invokestatic  #62
722: aload         29
724: invokestatic  #10
727: aload         30
729: invokestatic  #10
732: aload         31
734: invokestatic  #10
737: new           #55
740: dup
741: invokespecial #56
744: ldc           #57
746: invokevirtual #58
749: aload         35
751: invokevirtual #58
754: ldc           #94
756: invokevirtual #58
759: invokevirtual #61
762: aload         35
764: ldc           #95
766: invokestatic  #96
769: aload         36
771: invokestatic  #10
774: aload         37
776: invokestatic  #10
779: aload         38
781: invokestatic  #10
784: new           #55
787: dup
788: invokespecial #56
791: ldc           #57
793: invokevirtual #58
796: iload         40
798: invokevirtual #59
801: ldc           #60
803: invokevirtual #58
806: iconst_0
807: invokevirtual #59
810: ldc           #57
812: invokevirtual #58
815: invokevirtual #61
818: iload         40
820: ifne          827
823: iconst_1
824: goto          828
827: iconst_0
828: invokestatic  #62
831: aload         41
833: invokestatic  #10
836: aload         42
838: invokestatic  #10
841: aload         43
843: invokestatic  #10
846: aload         44
848: invokestatic  #10
851: aload         45
853: invokestatic  #10
856: aload         46
858: invokestatic  #10
861: new           #55
864: dup
865: invokespecial #56
868: ldc           #57
870: invokevirtual #58
873: iload         48
875: invokevirtual #59
878: ldc           #60
880: invokevirtual #58
883: iconst_0
884: invokevirtual #59
887: ldc           #57
889: invokevirtual #58
892: invokevirtual #61
895: iload         48
897: ifne          904
900: iconst_1
901: goto          905
904: iconst_0
905: invokestatic  #62
908: return
Exception table:
from    to  target type
453   469   472   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test130
Start line: 5157
End line: 5172
Method source code: 
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        periodFormatterBuilder0.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #512
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: invokevirtual #212
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: aload         4
79: invokestatic  #10
82: aload         5
84: invokestatic  #10
87: aload         6
89: invokestatic  #10
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test131
Start line: 5175
End line: 5199
Method source code: 
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder9.appendSuffix("1296");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder9.printZeroRarelyLast();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #513
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: invokevirtual #33
87: astore        9
89: aload         7
91: ldc_w         #514
94: invokevirtual #132
97: astore        10
99: aload         7
101: invokevirtual #488
104: astore        11
106: aload_2
107: invokestatic  #10
110: aload_3
111: invokestatic  #10
114: aload         4
116: invokestatic  #10
119: aload         5
121: invokestatic  #10
124: aload         6
126: invokestatic  #10
129: aload         7
131: invokestatic  #10
134: aload         8
136: invokestatic  #10
139: aload         9
141: invokestatic  #10
144: aload         10
146: invokestatic  #10
149: aload         11
151: invokestatic  #10
154: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test132
Start line: 5202
End line: 5218
Method source code: 
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #515
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #139
56: astore        5
58: aload         5
60: invokevirtual #33
63: astore        6
65: aload         6
67: invokevirtual #77
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test133
Start line: 5221
End line: 5245
Method source code: 
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatter periodFormatter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.append(periodFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No formatter supplied");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #516
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: invokevirtual #185
63: astore        6
65: aload         4
67: invokevirtual #139
70: astore        7
72: aconst_null
73: astore        8
75: aload         4
77: aload         8
79: invokevirtual #118
82: astore        9
84: ldc_w         #325
87: invokestatic  #22
90: goto          95
93: astore        9
95: aload_2
96: invokestatic  #10
99: aload_3
100: invokestatic  #10
103: aload         4
105: invokestatic  #10
108: aload         5
110: invokestatic  #10
113: aload         6
115: invokestatic  #10
118: aload         7
120: invokestatic  #10
123: return
Exception table:
from    to  target type
75    90    93   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test134
Start line: 5248
End line: 5270
Method source code: 
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder16.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder17.appendSuffix("PST", "P2D");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #517
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         8
118: invokevirtual #25
121: astore        9
123: aload         9
125: ldc_w         #266
128: ldc_w         #518
131: invokevirtual #30
134: astore        10
136: aload_2
137: invokestatic  #10
140: aload_3
141: invokestatic  #10
144: aload         4
146: invokestatic  #10
149: aload         5
151: invokestatic  #10
154: aload         6
156: invokestatic  #10
159: aload         7
161: invokestatic  #10
164: aload         8
166: invokestatic  #10
169: aload         9
171: invokestatic  #10
174: aload         10
176: invokestatic  #10
179: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test135
Start line: 5273
End line: 5289
Method source code: 
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #519
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #139
56: astore        5
58: aload         5
60: invokevirtual #134
63: astore        6
65: aload         5
67: invokevirtual #149
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test136
Start line: 5292
End line: 5411
Method source code: 
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        int int3 = period2.getWeeks();
        org.joda.time.Period period5 = period2.minusHours((int) '4');
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Period period8 = period5.minusMonths(0);
        int int9 = period5.getMillis();
        org.joda.time.Period period11 = period5.minusDays((-33075064));
        org.joda.time.Period period12 = new org.joda.time.Period((java.lang.Object) period5);
        org.joda.time.Period period14 = period5.minusMinutes(999);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        int int16 = period15.getHours();
        org.joda.time.Period period18 = period15.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        mutablePeriod19.setWeeks((-28800000));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology24);
        int int26 = period25.getMonths();
        java.lang.String str27 = period25.toString();
        org.joda.time.Period period29 = period25.plusHours(0);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period32 = period25.minusYears(0);
        org.joda.time.Period period34 = period25.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder37 = periodFormatterBuilder35.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter38 = periodFormatterBuilder37.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder40 = periodFormatterBuilder37.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter41 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter41.withLocale(locale42);
        boolean boolean44 = periodFormatter43.isParser();
        java.util.Locale locale45 = null;
        org.joda.time.format.PeriodFormatter periodFormatter46 = periodFormatter43.withLocale(locale45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology50 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField51 = gregorianChronology50.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone52 = gregorianChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField53 = gregorianChronology50.yearOfCentury();
        org.joda.time.Period period54 = new org.joda.time.Period((long) '4', 100L, periodType49, (org.joda.time.Chronology) gregorianChronology50);
        org.joda.time.format.PeriodFormatter periodFormatter55 = periodFormatter43.withParseType(periodType49);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder56 = periodFormatterBuilder37.append(periodFormatter55);
        org.joda.time.format.PeriodParser periodParser57 = periodFormatter55.getParser();
        java.lang.String str58 = period25.toString(periodFormatter55);
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        int int60 = period59.getHours();
        org.joda.time.Period period62 = period59.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod63 = period62.toMutablePeriod();
        mutablePeriod63.setWeeks((-28800000));
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology68);
        int int70 = period69.getMonths();
        java.lang.String str71 = period69.toString();
        org.joda.time.Period period73 = period69.plusHours(0);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) period69);
        mutablePeriod63.clear();
        int int78 = periodFormatter55.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod63, "", 787);
        org.joda.time.format.PeriodPrinter periodPrinter79 = periodFormatter55.getPrinter();
        org.joda.time.format.PeriodParser periodParser80 = null;
        org.joda.time.format.PeriodFormatter periodFormatter81 = new org.joda.time.format.PeriodFormatter(periodPrinter79, periodParser80);
        boolean boolean82 = periodFormatter81.isParser();
        org.joda.time.format.PeriodPrinter periodPrinter83 = periodFormatter81.getPrinter();
        java.lang.String str84 = period14.toString(periodFormatter81);
        org.joda.time.PeriodType periodType85 = periodFormatter81.getParseType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod87 = periodFormatter81.parseMutablePeriod("-98");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT-0.090S" + "'", str27, "PT-0.090S");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder37);
        org.junit.Assert.assertNotNull(periodPrinter38);
        org.junit.Assert.assertNotNull(periodFormatterBuilder40);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(periodFormatter46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(gregorianChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(periodFormatter55);
        org.junit.Assert.assertNotNull(periodFormatterBuilder56);
        org.junit.Assert.assertNotNull(periodParser57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str58, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT-0.090S" + "'", str71, "PT-0.090S");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-788) + "'", int78 == (-788));
        org.junit.Assert.assertNotNull(periodPrinter79);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(periodPrinter83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "P0000-W00-00T-52:-999:00" + "'", str84, "P0000-W00-00T-52:-999:00");
        org.junit.Assert.assertNull(periodType85);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #520
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aconst_null
28: astore_2
29: new           #46
32: dup
33: aload_1
34: aload_2
35: invokespecial #47
38: astore_3
39: aload_3
40: invokevirtual #48
43: istore        4
45: aload_3
46: bipush        52
48: invokevirtual #49
51: astore        5
53: aload         5
55: invokevirtual #50
58: astore        6
60: aload         5
62: iconst_0
63: invokevirtual #51
66: astore        7
68: aload         5
70: invokevirtual #417
73: istore        8
75: aload         5
77: ldc_w         #448
80: invokevirtual #85
83: astore        9
85: new           #46
88: dup
89: aload         5
91: invokespecial #521
94: astore        10
96: aload         5
98: sipush        999
101: invokevirtual #522
104: astore        11
106: getstatic     #8
109: astore        12
111: aload         12
113: invokevirtual #216
116: istore        13
118: aload         12
120: iconst_0
121: invokevirtual #200
124: astore        14
126: aload         14
128: invokevirtual #205
131: astore        15
133: aload         15
135: ldc           #217
137: invokevirtual #207
140: aconst_null
141: astore        16
143: new           #46
146: dup
147: ldc2_w        #79
150: ldc2_w        #81
153: aload         16
155: invokespecial #83
158: astore        17
160: aload         17
162: invokevirtual #169
165: istore        18
167: aload         17
169: invokevirtual #84
172: astore        19
174: aload         17
176: iconst_0
177: invokevirtual #218
180: astore        20
182: aload         15
184: aload         17
186: invokevirtual #219
189: aload         17
191: iconst_0
192: invokevirtual #282
195: astore        21
197: aload         17
199: bipush        100
201: invokevirtual #283
204: astore        22
206: new           #14
209: dup
210: invokespecial #15
213: astore        23
215: aload         23
217: ldc           #16
219: invokevirtual #17
222: astore        24
224: aload         24
226: invokevirtual #45
229: astore        25
231: aload         24
233: iconst_0
234: invokevirtual #108
237: astore        26
239: invokestatic  #12
242: astore        27
244: aconst_null
245: astore        28
247: aload         27
249: aload         28
251: invokevirtual #88
254: astore        29
256: aload         29
258: invokevirtual #89
261: istore        30
263: aconst_null
264: astore        31
266: aload         29
268: aload         31
270: invokevirtual #88
273: astore        32
275: invokestatic  #109
278: astore        33
280: invokestatic  #110
283: astore        34
285: aload         34
287: invokevirtual #111
290: astore        35
292: aload         34
294: invokevirtual #112
297: astore        36
299: aload         34
301: invokevirtual #113
304: astore        37
306: new           #46
309: dup
310: ldc2_w        #114
313: ldc2_w        #79
316: aload         33
318: aload         34
320: invokespecial #116
323: astore        38
325: aload         29
327: aload         33
329: invokevirtual #117
332: astore        39
334: aload         24
336: aload         39
338: invokevirtual #118
341: astore        40
343: aload         39
345: invokevirtual #119
348: astore        41
350: aload         17
352: aload         39
354: invokevirtual #284
357: astore        42
359: getstatic     #8
362: astore        43
364: aload         43
366: invokevirtual #216
369: istore        44
371: aload         43
373: iconst_0
374: invokevirtual #200
377: astore        45
379: aload         45
381: invokevirtual #205
384: astore        46
386: aload         46
388: ldc           #217
390: invokevirtual #207
393: aconst_null
394: astore        47
396: new           #46
399: dup
400: ldc2_w        #79
403: ldc2_w        #81
406: aload         47
408: invokespecial #83
411: astore        48
413: aload         48
415: invokevirtual #169
418: istore        49
420: aload         48
422: invokevirtual #84
425: astore        50
427: aload         48
429: iconst_0
430: invokevirtual #218
433: astore        51
435: aload         46
437: aload         48
439: invokevirtual #219
442: aload         46
444: invokevirtual #457
447: aload         39
449: aload         46
451: ldc           #74
453: sipush        787
456: invokevirtual #237
459: istore        52
461: aload         39
463: invokevirtual #90
466: astore        53
468: aconst_null
469: astore        54
471: new           #164
474: dup
475: aload         53
477: aload         54
479: invokespecial #165
482: astore        55
484: aload         55
486: invokevirtual #89
489: istore        56
491: aload         55
493: invokevirtual #90
496: astore        57
498: aload         11
500: aload         55
502: invokevirtual #284
505: astore        58
507: aload         55
509: invokevirtual #350
512: astore        59
514: aload         55
516: ldc_w         #523
519: invokevirtual #524
522: astore        60
524: ldc_w         #525
527: invokestatic  #22
530: goto          535
533: astore        60
535: new           #55
538: dup
539: invokespecial #56
542: ldc           #57
544: invokevirtual #58
547: iload         4
549: invokevirtual #59
552: ldc           #60
554: invokevirtual #58
557: iconst_0
558: invokevirtual #59
561: ldc           #57
563: invokevirtual #58
566: invokevirtual #61
569: iload         4
571: ifne          578
574: iconst_1
575: goto          579
578: iconst_0
579: invokestatic  #62
582: aload         5
584: invokestatic  #10
587: aload         6
589: invokestatic  #10
592: aload         7
594: invokestatic  #10
597: new           #55
600: dup
601: invokespecial #56
604: ldc           #57
606: invokevirtual #58
609: iload         8
611: invokevirtual #59
614: ldc           #60
616: invokevirtual #58
619: iconst_0
620: invokevirtual #59
623: ldc           #57
625: invokevirtual #58
628: invokevirtual #61
631: iload         8
633: ifne          640
636: iconst_1
637: goto          641
640: iconst_0
641: invokestatic  #62
644: aload         9
646: invokestatic  #10
649: aload         11
651: invokestatic  #10
654: aload         12
656: invokestatic  #10
659: new           #55
662: dup
663: invokespecial #56
666: ldc           #57
668: invokevirtual #58
671: iload         13
673: invokevirtual #59
676: ldc           #60
678: invokevirtual #58
681: iconst_0
682: invokevirtual #59
685: ldc           #57
687: invokevirtual #58
690: invokevirtual #61
693: iload         13
695: ifne          702
698: iconst_1
699: goto          703
702: iconst_0
703: invokestatic  #62
706: aload         14
708: invokestatic  #10
711: aload         15
713: invokestatic  #10
716: new           #55
719: dup
720: invokespecial #56
723: ldc           #57
725: invokevirtual #58
728: iload         18
730: invokevirtual #59
733: ldc           #60
735: invokevirtual #58
738: iconst_0
739: invokevirtual #59
742: ldc           #57
744: invokevirtual #58
747: invokevirtual #61
750: iload         18
752: ifne          759
755: iconst_1
756: goto          760
759: iconst_0
760: invokestatic  #62
763: new           #55
766: dup
767: invokespecial #56
770: ldc           #57
772: invokevirtual #58
775: aload         19
777: invokevirtual #58
780: ldc           #94
782: invokevirtual #58
785: invokevirtual #61
788: aload         19
790: ldc           #95
792: invokestatic  #96
795: aload         20
797: invokestatic  #10
800: aload         21
802: invokestatic  #10
805: aload         22
807: invokestatic  #10
810: aload         24
812: invokestatic  #10
815: aload         25
817: invokestatic  #10
820: aload         26
822: invokestatic  #10
825: aload         27
827: invokestatic  #10
830: aload         29
832: invokestatic  #10
835: new           #55
838: dup
839: invokespecial #56
842: ldc           #57
844: invokevirtual #58
847: iload         30
849: invokevirtual #97
852: ldc           #60
854: invokevirtual #58
857: iconst_1
858: invokevirtual #97
861: ldc           #57
863: invokevirtual #58
866: invokevirtual #61
869: iload         30
871: iconst_1
872: if_icmpne     879
875: iconst_1
876: goto          880
879: iconst_0
880: invokestatic  #62
883: aload         32
885: invokestatic  #10
888: aload         33
890: invokestatic  #10
893: aload         34
895: invokestatic  #10
898: aload         35
900: invokestatic  #10
903: aload         36
905: invokestatic  #10
908: aload         37
910: invokestatic  #10
913: aload         39
915: invokestatic  #10
918: aload         40
920: invokestatic  #10
923: aload         41
925: invokestatic  #10
928: new           #55
931: dup
932: invokespecial #56
935: ldc           #57
937: invokevirtual #58
940: aload         42
942: invokevirtual #58
945: ldc_w         #286
948: invokevirtual #58
951: invokevirtual #61
954: aload         42
956: ldc           #143
958: invokestatic  #96
961: aload         43
963: invokestatic  #10
966: new           #55
969: dup
970: invokespecial #56
973: ldc           #57
975: invokevirtual #58
978: iload         44
980: invokevirtual #59
983: ldc           #60
985: invokevirtual #58
988: iconst_0
989: invokevirtual #59
992: ldc           #57
994: invokevirtual #58
997: invokevirtual #61
1000: iload         44
1002: ifne          1009
1005: iconst_1
1006: goto          1010
1009: iconst_0
1010: invokestatic  #62
1013: aload         45
1015: invokestatic  #10
1018: aload         46
1020: invokestatic  #10
1023: new           #55
1026: dup
1027: invokespecial #56
1030: ldc           #57
1032: invokevirtual #58
1035: iload         49
1037: invokevirtual #59
1040: ldc           #60
1042: invokevirtual #58
1045: iconst_0
1046: invokevirtual #59
1049: ldc           #57
1051: invokevirtual #58
1054: invokevirtual #61
1057: iload         49
1059: ifne          1066
1062: iconst_1
1063: goto          1067
1066: iconst_0
1067: invokestatic  #62
1070: new           #55
1073: dup
1074: invokespecial #56
1077: ldc           #57
1079: invokevirtual #58
1082: aload         50
1084: invokevirtual #58
1087: ldc           #94
1089: invokevirtual #58
1092: invokevirtual #61
1095: aload         50
1097: ldc           #95
1099: invokestatic  #96
1102: aload         51
1104: invokestatic  #10
1107: new           #55
1110: dup
1111: invokespecial #56
1114: ldc           #57
1116: invokevirtual #58
1119: iload         52
1121: invokevirtual #59
1124: ldc           #60
1126: invokevirtual #58
1129: sipush        -788
1132: invokevirtual #59
1135: ldc           #57
1137: invokevirtual #58
1140: invokevirtual #61
1143: iload         52
1145: sipush        -788
1148: if_icmpne     1155
1151: iconst_1
1152: goto          1156
1155: iconst_0
1156: invokestatic  #62
1159: aload         53
1161: invokestatic  #10
1164: new           #55
1167: dup
1168: invokespecial #56
1171: ldc           #57
1173: invokevirtual #58
1176: iload         56
1178: invokevirtual #97
1181: ldc           #60
1183: invokevirtual #58
1186: iconst_0
1187: invokevirtual #97
1190: ldc           #57
1192: invokevirtual #58
1195: invokevirtual #61
1198: iload         56
1200: ifne          1207
1203: iconst_1
1204: goto          1208
1207: iconst_0
1208: invokestatic  #62
1211: aload         57
1213: invokestatic  #10
1216: new           #55
1219: dup
1220: invokespecial #56
1223: ldc           #57
1225: invokevirtual #58
1228: aload         58
1230: invokevirtual #58
1233: ldc_w         #527
1236: invokevirtual #58
1239: invokevirtual #61
1242: aload         58
1244: ldc_w         #528
1247: invokestatic  #96
1250: aload         59
1252: invokestatic  #354
1255: return
Exception table:
from    to  target type
514   530   533   Class java/lang/UnsupportedOperationException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test137
Start line: 5414
End line: 5436
Method source code: 
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSuffix("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #529
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: ldc           #74
68: invokevirtual #132
71: astore        7
73: aload         7
75: ldc           #192
77: invokevirtual #17
80: astore        8
82: aload         8
84: invokevirtual #320
87: astore        9
89: aload         8
91: invokevirtual #72
94: astore        10
96: aload_2
97: invokestatic  #10
100: aload_3
101: invokestatic  #10
104: aload         4
106: invokestatic  #10
109: aload         5
111: invokestatic  #10
114: aload         6
116: invokestatic  #10
119: aload         7
121: invokestatic  #10
124: aload         8
126: invokestatic  #10
129: aload         9
131: invokestatic  #10
134: aload         10
136: invokestatic  #10
139: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test138
Start line: 5439
End line: 5469
Method source code: 
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        org.joda.time.format.PeriodParser periodParser16 = periodFormatterBuilder15.toParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodParser16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #530
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: aload         15
128: invokevirtual #142
131: astore        16
133: aload_2
134: invokestatic  #10
137: aload_3
138: invokestatic  #10
141: aload         4
143: invokestatic  #10
146: aload         5
148: invokestatic  #10
151: aload         6
153: invokestatic  #10
156: aload         7
158: invokestatic  #354
161: aload         10
163: invokestatic  #10
166: new           #55
169: dup
170: invokespecial #56
173: ldc           #57
175: invokevirtual #58
178: iload         12
180: invokevirtual #97
183: ldc           #60
185: invokevirtual #58
188: iconst_0
189: invokevirtual #97
192: ldc           #57
194: invokevirtual #58
197: invokevirtual #61
200: iload         12
202: ifne          209
205: iconst_1
206: goto          210
209: iconst_0
210: invokestatic  #62
213: aload         14
215: invokestatic  #10
218: aload         15
220: invokestatic  #10
223: aload         16
225: invokestatic  #10
228: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test139
Start line: 5472
End line: 5488
Method source code: 
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #531
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #72
67: astore        7
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: aload         4
79: invokestatic  #10
82: aload         5
84: invokestatic  #10
87: aload         6
89: invokestatic  #10
92: aload         7
94: invokestatic  #10
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test140
Start line: 5491
End line: 5560
Method source code: 
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant21, readableInstant22);
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.Period period26 = new org.joda.time.Period(1L, (long) 1, chronology24);
        int[] intArray27 = period26.getValues();
        java.util.Locale locale29 = null;
        int int30 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period26, 2922790, locale29);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder31.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder31.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder31.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder31.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal37 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology40);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period44 = period41.minusDays((int) (byte) 100);
        java.util.Locale locale46 = null;
        int int47 = literal37.countFieldsToPrint((org.joda.time.ReadablePeriod) period44, 999, locale46);
        org.joda.time.format.PeriodParser periodParser48 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder49 = periodFormatterBuilder31.append((org.joda.time.format.PeriodPrinter) literal37, periodParser48);
        org.joda.time.format.PeriodFormatter periodFormatter50 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal6, (org.joda.time.format.PeriodParser) literal37);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        java.util.Locale locale52 = null;
        int int53 = literal6.calculatePrintedLength(readablePeriod51, locale52);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(literal37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT-0.090S" + "'", str42, "PT-0.090S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #532
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: aconst_null
132: astore        16
134: aload         15
136: aload         16
138: invokestatic  #358
141: astore        17
143: aload         17
145: invokevirtual #359
148: astore        18
150: aload         18
152: invokevirtual #360
155: astore        19
157: new           #46
160: dup
161: lconst_1
162: lconst_1
163: aload         18
165: invokespecial #83
168: astore        20
170: aload         20
172: invokevirtual #123
175: astore        21
177: aconst_null
178: astore        22
180: aload         6
182: aload         20
184: ldc_w         #361
187: aload         22
189: invokevirtual #86
192: istore        23
194: new           #14
197: dup
198: invokespecial #15
201: astore        24
203: aload         24
205: ldc           #16
207: invokevirtual #17
210: astore        25
212: aload         24
214: invokevirtual #25
217: astore        26
219: aload         24
221: invokevirtual #76
224: astore        27
226: aload         24
228: invokevirtual #77
231: astore        28
233: getstatic     #78
236: astore        29
238: aconst_null
239: astore        30
241: new           #46
244: dup
245: ldc2_w        #79
248: ldc2_w        #81
251: aload         30
253: invokespecial #83
256: astore        31
258: aload         31
260: invokevirtual #84
263: astore        32
265: aload         31
267: bipush        100
269: invokevirtual #85
272: astore        33
274: aconst_null
275: astore        34
277: aload         29
279: aload         33
281: sipush        999
284: aload         34
286: invokevirtual #86
289: istore        35
291: aconst_null
292: astore        36
294: aload         24
296: aload         29
298: aload         36
300: invokevirtual #87
303: astore        37
305: new           #164
308: dup
309: aload         6
311: aload         29
313: invokespecial #165
316: astore        38
318: aconst_null
319: astore        39
321: aconst_null
322: astore        40
324: aload         6
326: aload         39
328: aload         40
330: invokevirtual #365
333: istore        41
335: aload_2
336: invokestatic  #10
339: aload_3
340: invokestatic  #10
343: aload         4
345: invokestatic  #10
348: aload         5
350: invokestatic  #10
353: aload         6
355: invokestatic  #10
358: new           #55
361: dup
362: invokespecial #56
365: ldc           #57
367: invokevirtual #58
370: aload         9
372: invokevirtual #58
375: ldc           #94
377: invokevirtual #58
380: invokevirtual #61
383: aload         9
385: ldc           #95
387: invokestatic  #96
390: aload         10
392: invokestatic  #10
395: new           #55
398: dup
399: invokespecial #56
402: ldc           #57
404: invokevirtual #58
407: iload         12
409: invokevirtual #59
412: ldc           #60
414: invokevirtual #58
417: iconst_0
418: invokevirtual #59
421: ldc           #57
423: invokevirtual #58
426: invokevirtual #61
429: iload         12
431: ifne          438
434: iconst_1
435: goto          439
438: iconst_0
439: invokestatic  #62
442: aload         14
444: invokestatic  #10
447: aload         17
449: invokestatic  #10
452: aload         18
454: invokestatic  #10
457: aload         19
459: invokestatic  #10
462: aload         21
464: invokestatic  #10
467: aload         21
469: invokestatic  #127
472: ldc_w         #370
475: invokestatic  #129
478: new           #55
481: dup
482: invokespecial #56
485: ldc           #57
487: invokevirtual #58
490: iload         23
492: invokevirtual #59
495: ldc           #60
497: invokevirtual #58
500: iconst_0
501: invokevirtual #59
504: ldc           #57
506: invokevirtual #58
509: invokevirtual #61
512: iload         23
514: ifne          521
517: iconst_1
518: goto          522
521: iconst_0
522: invokestatic  #62
525: aload         25
527: invokestatic  #10
530: aload         26
532: invokestatic  #10
535: aload         27
537: invokestatic  #10
540: aload         28
542: invokestatic  #10
545: aload         29
547: invokestatic  #10
550: new           #55
553: dup
554: invokespecial #56
557: ldc           #57
559: invokevirtual #58
562: aload         32
564: invokevirtual #58
567: ldc           #94
569: invokevirtual #58
572: invokevirtual #61
575: aload         32
577: ldc           #95
579: invokestatic  #96
582: aload         33
584: invokestatic  #10
587: new           #55
590: dup
591: invokespecial #56
594: ldc           #57
596: invokevirtual #58
599: iload         35
601: invokevirtual #59
604: ldc           #60
606: invokevirtual #58
609: iconst_0
610: invokevirtual #59
613: ldc           #57
615: invokevirtual #58
618: invokevirtual #61
621: iload         35
623: ifne          630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #62
634: aload         37
636: invokestatic  #10
639: new           #55
642: dup
643: invokespecial #56
646: ldc           #57
648: invokevirtual #58
651: iload         41
653: invokevirtual #59
656: ldc           #60
658: invokevirtual #58
661: iconst_0
662: invokevirtual #59
665: ldc           #57
667: invokevirtual #58
670: invokevirtual #61
673: iload         41
675: ifne          682
678: iconst_1
679: goto          683
682: iconst_0
683: invokestatic  #62
686: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test141
Start line: 5563
End line: 5590
Method source code: 
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder6.appendSuffix("35313-01-15T11:38:44.842+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder19.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder20.appendMinutes();
        periodFormatterBuilder21.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #533
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         6
118: invokevirtual #185
121: astore        9
123: aload         6
125: ldc_w         #534
128: invokevirtual #132
131: astore        10
133: aload         10
135: invokevirtual #25
138: astore        11
140: aload         11
142: invokevirtual #134
145: astore        12
147: aload         12
149: invokevirtual #212
152: aload_2
153: invokestatic  #10
156: aload_3
157: invokestatic  #10
160: aload         4
162: invokestatic  #10
165: aload         5
167: invokestatic  #10
170: aload         6
172: invokestatic  #10
175: aload         7
177: invokestatic  #10
180: aload         8
182: invokestatic  #10
185: aload         9
187: invokestatic  #10
190: aload         10
192: invokestatic  #10
195: aload         11
197: invokestatic  #10
200: aload         12
202: invokestatic  #10
205: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test142
Start line: 5593
End line: 5611
Method source code: 
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("dayOfMonth", "-101");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.printZeroRarelyLast();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #535
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         6
66: ldc_w         #403
69: ldc           #40
71: invokevirtual #20
74: astore        7
76: aload         6
78: invokevirtual #488
81: astore        8
83: aload_2
84: invokestatic  #10
87: aload_3
88: invokestatic  #10
91: aload         4
93: invokestatic  #10
96: aload         5
98: invokestatic  #10
101: aload         6
103: invokestatic  #10
106: aload         7
108: invokestatic  #10
111: aload         8
113: invokestatic  #10
116: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test143
Start line: 5614
End line: 5628
Method source code: 
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #536
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: ldc           #34
48: ldc           #35
50: invokevirtual #20
53: astore        4
55: aload         4
57: invokevirtual #26
60: astore        5
62: aload         4
64: invokevirtual #71
67: astore        6
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: aload         4
79: invokestatic  #10
82: aload         5
84: invokestatic  #10
87: aload         6
89: invokestatic  #10
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test144
Start line: 5631
End line: 5739
Method source code: 
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.maximumParsedDigits((-24));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder11.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder11.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder11.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder11.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal17 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology20);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period24 = period21.minusDays((int) (byte) 100);
        java.util.Locale locale26 = null;
        int int27 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) period24, 999, locale26);
        org.joda.time.format.PeriodParser periodParser28 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder11.append((org.joda.time.format.PeriodPrinter) literal17, periodParser28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) ' ');
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        int int33 = period32.getHours();
        org.joda.time.Period period35 = period32.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod36 = period35.toMutablePeriod();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType40 = org.joda.time.DateTimeUtils.getPeriodType(periodType39);
        org.joda.time.Period period41 = new org.joda.time.Period(100L, (long) (short) -1, periodType39);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.weeks();
        boolean boolean43 = periodType39.isSupported(durationFieldType42);
        mutablePeriod36.add(durationFieldType42, (int) (byte) 100);
        java.lang.String str46 = mutablePeriod36.toString();
        mutablePeriod36.setHours((int) (short) 10);
        mutablePeriod36.setYears(0);
        org.joda.time.Period period51 = period31.withFields((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration52, readableInstant53);
        int int55 = period54.getWeeks();
        org.joda.time.Period period57 = period54.minusHours((int) '4');
        org.joda.time.Minutes minutes58 = period57.toStandardMinutes();
        org.joda.time.Period period60 = period57.minusMonths(0);
        int int61 = period57.getMillis();
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) period57);
        java.util.Locale locale64 = null;
        int int65 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod36, 3, locale64);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder66 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder68 = periodFormatterBuilder66.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder69 = periodFormatterBuilder66.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder70 = periodFormatterBuilder66.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder71 = periodFormatterBuilder66.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder74 = periodFormatterBuilder66.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder76 = periodFormatterBuilder74.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder77 = periodFormatterBuilder74.appendWeeks();
        org.joda.time.format.PeriodParser periodParser78 = periodFormatterBuilder74.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder7.append((org.joda.time.format.PeriodPrinter) literal17, periodParser78);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder80 = periodFormatterBuilder79.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder81 = periodFormatterBuilder80.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder82 = periodFormatterBuilder80.printZeroRarelyFirst();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(literal17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-0.090S" + "'", str22, "PT-0.090S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P100W" + "'", str46, "P100W");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder68);
        org.junit.Assert.assertNotNull(periodFormatterBuilder69);
        org.junit.Assert.assertNotNull(periodFormatterBuilder70);
        org.junit.Assert.assertNotNull(periodFormatterBuilder71);
        org.junit.Assert.assertNotNull(periodFormatterBuilder74);
        org.junit.Assert.assertNotNull(periodFormatterBuilder76);
        org.junit.Assert.assertNotNull(periodFormatterBuilder77);
        org.junit.Assert.assertNotNull(periodParser78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodFormatterBuilder80);
        org.junit.Assert.assertNotNull(periodFormatterBuilder81);
        org.junit.Assert.assertNotNull(periodFormatterBuilder82);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #537
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: ldc           #184
61: invokevirtual #28
64: astore        6
66: aload         6
68: invokevirtual #185
71: astore        7
73: aload         6
75: bipush        -24
77: invokevirtual #213
80: astore        8
82: new           #14
85: dup
86: invokespecial #15
89: astore        9
91: aload         9
93: ldc           #16
95: invokevirtual #17
98: astore        10
100: aload         9
102: invokevirtual #25
105: astore        11
107: aload         9
109: invokevirtual #76
112: astore        12
114: aload         9
116: invokevirtual #77
119: astore        13
121: getstatic     #78
124: astore        14
126: aconst_null
127: astore        15
129: new           #46
132: dup
133: ldc2_w        #79
136: ldc2_w        #81
139: aload         15
141: invokespecial #83
144: astore        16
146: aload         16
148: invokevirtual #84
151: astore        17
153: aload         16
155: bipush        100
157: invokevirtual #85
160: astore        18
162: aconst_null
163: astore        19
165: aload         14
167: aload         18
169: sipush        999
172: aload         19
174: invokevirtual #86
177: istore        20
179: aconst_null
180: astore        21
182: aload         9
184: aload         14
186: aload         21
188: invokevirtual #87
191: astore        22
193: new           #46
196: dup
197: ldc2_w        #121
200: invokespecial #91
203: astore        23
205: getstatic     #8
208: astore        24
210: aload         24
212: invokevirtual #216
215: istore        25
217: aload         24
219: iconst_0
220: invokevirtual #200
223: astore        26
225: aload         26
227: invokevirtual #205
230: astore        27
232: invokestatic  #171
235: astore        28
237: aload         28
239: invokestatic  #172
242: astore        29
244: new           #46
247: dup
248: ldc2_w        #79
251: ldc2_w        #173
254: aload         28
256: invokespecial #175
259: astore        30
261: invokestatic  #176
264: astore        31
266: aload         28
268: aload         31
270: invokevirtual #177
273: istore        32
275: aload         27
277: aload         31
279: bipush        100
281: invokevirtual #226
284: aload         27
286: invokevirtual #235
289: astore        33
291: aload         27
293: bipush        10
295: invokevirtual #416
298: aload         27
300: iconst_0
301: invokevirtual #236
304: aload         23
306: aload         27
308: invokevirtual #364
311: astore        34
313: aconst_null
314: astore        35
316: aconst_null
317: astore        36
319: new           #46
322: dup
323: aload         35
325: aload         36
327: invokespecial #47
330: astore        37
332: aload         37
334: invokevirtual #48
337: istore        38
339: aload         37
341: bipush        52
343: invokevirtual #49
346: astore        39
348: aload         39
350: invokevirtual #50
353: astore        40
355: aload         39
357: iconst_0
358: invokevirtual #51
361: astore        41
363: aload         39
365: invokevirtual #417
368: istore        42
370: aload         27
372: aload         39
374: invokevirtual #219
377: aconst_null
378: astore        43
380: aload         14
382: aload         27
384: iconst_3
385: aload         43
387: invokevirtual #86
390: istore        44
392: new           #14
395: dup
396: invokespecial #15
399: astore        45
401: aload         45
403: ldc           #16
405: invokevirtual #17
408: astore        46
410: aload         45
412: invokevirtual #25
415: astore        47
417: aload         45
419: invokevirtual #76
422: astore        48
424: aload         45
426: invokevirtual #77
429: astore        49
431: aload         45
433: ldc_w         #332
436: ldc_w         #333
439: invokevirtual #30
442: astore        50
444: aload         50
446: ldc           #146
448: invokevirtual #132
451: astore        51
453: aload         50
455: invokevirtual #26
458: astore        52
460: aload         50
462: invokevirtual #142
465: astore        53
467: aload         6
469: aload         14
471: aload         53
473: invokevirtual #87
476: astore        54
478: aload         54
480: invokevirtual #320
483: astore        55
485: aload         55
487: invokevirtual #39
490: astore        56
492: aload         55
494: invokevirtual #248
497: astore        57
499: aload_2
500: invokestatic  #10
503: aload_3
504: invokestatic  #10
507: aload         4
509: invokestatic  #10
512: aload         5
514: invokestatic  #10
517: aload         6
519: invokestatic  #10
522: aload         7
524: invokestatic  #10
527: aload         8
529: invokestatic  #10
532: aload         10
534: invokestatic  #10
537: aload         11
539: invokestatic  #10
542: aload         12
544: invokestatic  #10
547: aload         13
549: invokestatic  #10
552: aload         14
554: invokestatic  #10
557: new           #55
560: dup
561: invokespecial #56
564: ldc           #57
566: invokevirtual #58
569: aload         17
571: invokevirtual #58
574: ldc           #94
576: invokevirtual #58
579: invokevirtual #61
582: aload         17
584: ldc           #95
586: invokestatic  #96
589: aload         18
591: invokestatic  #10
594: new           #55
597: dup
598: invokespecial #56
601: ldc           #57
603: invokevirtual #58
606: iload         20
608: invokevirtual #59
611: ldc           #60
613: invokevirtual #58
616: iconst_0
617: invokevirtual #59
620: ldc           #57
622: invokevirtual #58
625: invokevirtual #61
628: iload         20
630: ifne          637
633: iconst_1
634: goto          638
637: iconst_0
638: invokestatic  #62
641: aload         22
643: invokestatic  #10
646: aload         24
648: invokestatic  #10
651: new           #55
654: dup
655: invokespecial #56
658: ldc           #57
660: invokevirtual #58
663: iload         25
665: invokevirtual #59
668: ldc           #60
670: invokevirtual #58
673: iconst_0
674: invokevirtual #59
677: ldc           #57
679: invokevirtual #58
682: invokevirtual #61
685: iload         25
687: ifne          694
690: iconst_1
691: goto          695
694: iconst_0
695: invokestatic  #62
698: aload         26
700: invokestatic  #10
703: aload         27
705: invokestatic  #10
708: aload         28
710: invokestatic  #10
713: aload         29
715: invokestatic  #10
718: aload         31
720: invokestatic  #10
723: new           #55
726: dup
727: invokespecial #56
730: ldc           #57
732: invokevirtual #58
735: iload         32
737: invokevirtual #97
740: ldc           #60
742: invokevirtual #58
745: iconst_0
746: invokevirtual #97
749: ldc           #57
751: invokevirtual #58
754: invokevirtual #61
757: iload         32
759: ifne          766
762: iconst_1
763: goto          767
766: iconst_0
767: invokestatic  #62
770: new           #55
773: dup
774: invokespecial #56
777: ldc           #57
779: invokevirtual #58
782: aload         33
784: invokevirtual #58
787: ldc           #238
789: invokevirtual #58
792: invokevirtual #61
795: aload         33
797: ldc           #239
799: invokestatic  #96
802: aload         34
804: invokestatic  #10
807: new           #55
810: dup
811: invokespecial #56
814: ldc           #57
816: invokevirtual #58
819: iload         38
821: invokevirtual #59
824: ldc           #60
826: invokevirtual #58
829: iconst_0
830: invokevirtual #59
833: ldc           #57
835: invokevirtual #58
838: invokevirtual #61
841: iload         38
843: ifne          850
846: iconst_1
847: goto          851
850: iconst_0
851: invokestatic  #62
854: aload         39
856: invokestatic  #10
859: aload         40
861: invokestatic  #10
864: aload         41
866: invokestatic  #10
869: new           #55
872: dup
873: invokespecial #56
876: ldc           #57
878: invokevirtual #58
881: iload         42
883: invokevirtual #59
886: ldc           #60
888: invokevirtual #58
891: iconst_0
892: invokevirtual #59
895: ldc           #57
897: invokevirtual #58
900: invokevirtual #61
903: iload         42
905: ifne          912
908: iconst_1
909: goto          913
912: iconst_0
913: invokestatic  #62
916: new           #55
919: dup
920: invokespecial #56
923: ldc           #57
925: invokevirtual #58
928: iload         44
930: invokevirtual #59
933: ldc           #60
935: invokevirtual #58
938: iconst_0
939: invokevirtual #59
942: ldc           #57
944: invokevirtual #58
947: invokevirtual #61
950: iload         44
952: ifne          959
955: iconst_1
956: goto          960
959: iconst_0
960: invokestatic  #62
963: aload         46
965: invokestatic  #10
968: aload         47
970: invokestatic  #10
973: aload         48
975: invokestatic  #10
978: aload         49
980: invokestatic  #10
983: aload         50
985: invokestatic  #10
988: aload         51
990: invokestatic  #10
993: aload         52
995: invokestatic  #10
998: aload         53
1000: invokestatic  #10
1003: aload         54
1005: invokestatic  #10
1008: aload         55
1010: invokestatic  #10
1013: aload         56
1015: invokestatic  #10
1018: aload         57
1020: invokestatic  #10
1023: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test145
Start line: 5742
End line: 5786
Method source code: 
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter4 = periodFormatterBuilder3.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter7 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale8 = null;
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatter7.withLocale(locale8);
        boolean boolean10 = periodFormatter9.isParser();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter9.withLocale(locale11);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology16 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField17 = gregorianChronology16.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone18 = gregorianChronology16.getZone();
        org.joda.time.DateTimeField dateTimeField19 = gregorianChronology16.yearOfCentury();
        org.joda.time.Period period20 = new org.joda.time.Period((long) '4', 100L, periodType15, (org.joda.time.Chronology) gregorianChronology16);
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter9.withParseType(periodType15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder3.append(periodFormatter21);
        org.joda.time.format.PeriodParser periodParser23 = periodFormatter21.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period24 = org.joda.time.Period.parse("1970-01-01T00:00:00.014+00:00:00.010/1970-01-01T00:00:00.014+00:00:00.010", periodFormatter21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1970-01-01T00:00:00.014+00:00:00...\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodPrinter4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(gregorianChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodParser23);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #538
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload         17
157: invokevirtual #119
160: astore        19
162: ldc_w         #539
165: aload         17
167: invokestatic  #540
170: astore        20
172: ldc_w         #541
175: invokestatic  #22
178: goto          183
181: astore        20
183: aload_2
184: invokestatic  #10
187: aload_3
188: invokestatic  #10
191: aload         4
193: invokestatic  #10
196: aload         5
198: invokestatic  #10
201: aload         7
203: invokestatic  #10
206: new           #55
209: dup
210: invokespecial #56
213: ldc           #57
215: invokevirtual #58
218: iload         8
220: invokevirtual #97
223: ldc           #60
225: invokevirtual #58
228: iconst_1
229: invokevirtual #97
232: ldc           #57
234: invokevirtual #58
237: invokevirtual #61
240: iload         8
242: iconst_1
243: if_icmpne     250
246: iconst_1
247: goto          251
250: iconst_0
251: invokestatic  #62
254: aload         10
256: invokestatic  #10
259: aload         11
261: invokestatic  #10
264: aload         12
266: invokestatic  #10
269: aload         13
271: invokestatic  #10
274: aload         14
276: invokestatic  #10
279: aload         15
281: invokestatic  #10
284: aload         17
286: invokestatic  #10
289: aload         18
291: invokestatic  #10
294: aload         19
296: invokestatic  #10
299: return
Exception table:
from    to  target type
162   178   181   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test146
Start line: 5789
End line: 5809
Method source code: 
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendSuffix("eras");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder0.appendSeparator("-36");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #542
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #488
67: astore        7
69: aload_1
70: ldc_w         #295
73: invokevirtual #132
76: astore        8
78: aload_1
79: ldc_w         #543
82: invokevirtual #37
85: astore        9
87: aload_2
88: invokestatic  #10
91: aload_3
92: invokestatic  #10
95: aload         4
97: invokestatic  #10
100: aload         5
102: invokestatic  #10
105: aload         6
107: invokestatic  #10
110: aload         7
112: invokestatic  #10
115: aload         8
117: invokestatic  #10
120: aload         9
122: invokestatic  #10
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test147
Start line: 5812
End line: 5880
Method source code: 
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod45 = periodFormatter40.parseMutablePeriod("DateTimeField[clockhourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[clockhourOfHalfday]\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #544
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: aload         28
274: ldc_w         #414
277: invokevirtual #524
280: astore        32
282: ldc_w         #545
285: invokestatic  #22
288: goto          293
291: astore        32
293: aload_1
294: invokestatic  #10
297: new           #55
300: dup
301: invokespecial #56
304: ldc           #57
306: invokevirtual #58
309: iload_2
310: invokevirtual #59
313: ldc           #60
315: invokevirtual #58
318: iconst_0
319: invokevirtual #59
322: ldc           #57
324: invokevirtual #58
327: invokevirtual #61
330: iload_2
331: ifne          338
334: iconst_1
335: goto          339
338: iconst_0
339: invokestatic  #62
342: aload_3
343: invokestatic  #10
346: aload         4
348: invokestatic  #10
351: new           #55
354: dup
355: invokespecial #56
358: ldc           #57
360: invokevirtual #58
363: iload         7
365: invokevirtual #59
368: ldc           #60
370: invokevirtual #58
373: iconst_0
374: invokevirtual #59
377: ldc           #57
379: invokevirtual #58
382: invokevirtual #61
385: iload         7
387: ifne          394
390: iconst_1
391: goto          395
394: iconst_0
395: invokestatic  #62
398: new           #55
401: dup
402: invokespecial #56
405: ldc           #57
407: invokevirtual #58
410: aload         8
412: invokevirtual #58
415: ldc           #94
417: invokevirtual #58
420: invokevirtual #61
423: aload         8
425: ldc           #95
427: invokestatic  #96
430: aload         9
432: invokestatic  #10
435: aload         10
437: invokestatic  #10
440: aload         11
442: invokestatic  #10
445: aload         13
447: invokestatic  #10
450: aload         14
452: invokestatic  #10
455: aload         15
457: invokestatic  #10
460: aload         16
462: invokestatic  #10
465: aload         18
467: invokestatic  #10
470: new           #55
473: dup
474: invokespecial #56
477: ldc           #57
479: invokevirtual #58
482: iload         19
484: invokevirtual #97
487: ldc           #60
489: invokevirtual #58
492: iconst_1
493: invokevirtual #97
496: ldc           #57
498: invokevirtual #58
501: invokevirtual #61
504: iload         19
506: iconst_1
507: if_icmpne     514
510: iconst_1
511: goto          515
514: iconst_0
515: invokestatic  #62
518: aload         21
520: invokestatic  #10
523: aload         22
525: invokestatic  #10
528: aload         23
530: invokestatic  #10
533: aload         24
535: invokestatic  #10
538: aload         25
540: invokestatic  #10
543: aload         26
545: invokestatic  #10
548: aload         28
550: invokestatic  #10
553: aload         29
555: invokestatic  #10
558: aload         30
560: invokestatic  #10
563: new           #55
566: dup
567: invokespecial #56
570: ldc           #57
572: invokevirtual #58
575: aload         31
577: invokevirtual #58
580: ldc_w         #286
583: invokevirtual #58
586: invokevirtual #61
589: aload         31
591: ldc           #143
593: invokestatic  #96
596: return
Exception table:
from    to  target type
272   288   291   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test148
Start line: 5883
End line: 5937
Method source code: 
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant21, readableInstant22);
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.Period period26 = new org.joda.time.Period(1L, (long) 1, chronology24);
        int[] intArray27 = period26.getValues();
        java.util.Locale locale29 = null;
        int int30 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period26, 2922790, locale29);
        java.io.Writer writer31 = null;
        org.joda.time.Period period33 = org.joda.time.Period.days((int) (byte) 0);
        int int34 = period33.getYears();
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            literal6.printTo(writer31, (org.joda.time.ReadablePeriod) period33, locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #546
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: aconst_null
132: astore        16
134: aload         15
136: aload         16
138: invokestatic  #358
141: astore        17
143: aload         17
145: invokevirtual #359
148: astore        18
150: aload         18
152: invokevirtual #360
155: astore        19
157: new           #46
160: dup
161: lconst_1
162: lconst_1
163: aload         18
165: invokespecial #83
168: astore        20
170: aload         20
172: invokevirtual #123
175: astore        21
177: aconst_null
178: astore        22
180: aload         6
182: aload         20
184: ldc_w         #361
187: aload         22
189: invokevirtual #86
192: istore        23
194: aconst_null
195: astore        24
197: iconst_0
198: invokestatic  #547
201: astore        25
203: aload         25
205: invokevirtual #285
208: istore        26
210: aconst_null
211: astore        27
213: aload         6
215: aload         24
217: aload         25
219: aload         27
221: invokevirtual #93
224: ldc           #53
226: invokestatic  #22
229: goto          234
232: astore        28
234: aload_2
235: invokestatic  #10
238: aload_3
239: invokestatic  #10
242: aload         4
244: invokestatic  #10
247: aload         5
249: invokestatic  #10
252: aload         6
254: invokestatic  #10
257: new           #55
260: dup
261: invokespecial #56
264: ldc           #57
266: invokevirtual #58
269: aload         9
271: invokevirtual #58
274: ldc           #94
276: invokevirtual #58
279: invokevirtual #61
282: aload         9
284: ldc           #95
286: invokestatic  #96
289: aload         10
291: invokestatic  #10
294: new           #55
297: dup
298: invokespecial #56
301: ldc           #57
303: invokevirtual #58
306: iload         12
308: invokevirtual #59
311: ldc           #60
313: invokevirtual #58
316: iconst_0
317: invokevirtual #59
320: ldc           #57
322: invokevirtual #58
325: invokevirtual #61
328: iload         12
330: ifne          337
333: iconst_1
334: goto          338
337: iconst_0
338: invokestatic  #62
341: aload         14
343: invokestatic  #10
346: aload         17
348: invokestatic  #10
351: aload         18
353: invokestatic  #10
356: aload         19
358: invokestatic  #10
361: aload         21
363: invokestatic  #10
366: aload         21
368: invokestatic  #127
371: ldc_w         #370
374: invokestatic  #129
377: new           #55
380: dup
381: invokespecial #56
384: ldc           #57
386: invokevirtual #58
389: iload         23
391: invokevirtual #59
394: ldc           #60
396: invokevirtual #58
399: iconst_0
400: invokevirtual #59
403: ldc           #57
405: invokevirtual #58
408: invokevirtual #61
411: iload         23
413: ifne          420
416: iconst_1
417: goto          421
420: iconst_0
421: invokestatic  #62
424: aload         25
426: invokestatic  #10
429: new           #55
432: dup
433: invokespecial #56
436: ldc           #57
438: invokevirtual #58
441: iload         26
443: invokevirtual #59
446: ldc           #60
448: invokevirtual #58
451: iconst_0
452: invokevirtual #59
455: ldc           #57
457: invokevirtual #58
460: invokevirtual #61
463: iload         26
465: ifne          472
468: iconst_1
469: goto          473
472: iconst_0
473: invokestatic  #62
476: return
Exception table:
from    to  target type
213   229   232   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test149
Start line: 5940
End line: 5959
Method source code: 
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendMillis();
        periodFormatterBuilder9.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #548
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: ldc           #184
61: invokevirtual #28
64: astore        6
66: aload         6
68: invokevirtual #185
71: astore        7
73: aload         6
75: invokevirtual #39
78: astore        8
80: aload         8
82: invokevirtual #212
85: aload_2
86: invokestatic  #10
89: aload_3
90: invokestatic  #10
93: aload         4
95: invokestatic  #10
98: aload         5
100: invokestatic  #10
103: aload         6
105: invokestatic  #10
108: aload         7
110: invokestatic  #10
113: aload         8
115: invokestatic  #10
118: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test150
Start line: 5962
End line: 5983
Method source code: 
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendPrefix("PST", "DateTimeField[clockhourOfHalfday]");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparator("millis");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #549
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: ldc_w         #266
61: ldc_w         #414
64: invokevirtual #41
67: astore        6
69: aload         6
71: ldc_w         #550
74: invokevirtual #37
77: astore        7
79: ldc           #43
81: invokestatic  #22
84: goto          89
87: astore        7
89: aload_2
90: invokestatic  #10
93: aload_3
94: invokestatic  #10
97: aload         4
99: invokestatic  #10
102: aload         5
104: invokestatic  #10
107: aload         6
109: invokestatic  #10
112: return
Exception table:
from    to  target type
69    84    87   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test151
Start line: 5986
End line: 6002
Method source code: 
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroRarelyFirst();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendPrefix("months");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #551
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         5
60: invokevirtual #248
63: astore        6
65: aload         6
67: ldc           #27
69: invokevirtual #196
72: astore        7
74: aload_2
75: invokestatic  #10
78: aload_3
79: invokestatic  #10
82: aload         4
84: invokestatic  #10
87: aload         5
89: invokestatic  #10
92: aload         6
94: invokestatic  #10
97: aload         7
99: invokestatic  #10
102: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test152
Start line: 6005
End line: 6021
Method source code: 
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatterBuilder0.toParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodParser7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #552
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: invokevirtual #142
67: astore        7
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: aload         4
79: invokestatic  #10
82: aload         5
84: invokestatic  #10
87: aload         6
89: invokestatic  #10
92: aload         7
94: invokestatic  #10
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test153
Start line: 6024
End line: 6051
Method source code: 
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        periodFormatterBuilder18.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #553
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aload         14
130: invokevirtual #212
133: aload_2
134: invokestatic  #10
137: aload_3
138: invokestatic  #10
141: aload         4
143: invokestatic  #10
146: aload         5
148: invokestatic  #10
151: aload         6
153: invokestatic  #10
156: new           #55
159: dup
160: invokespecial #56
163: ldc           #57
165: invokevirtual #58
168: aload         9
170: invokevirtual #58
173: ldc           #94
175: invokevirtual #58
178: invokevirtual #61
181: aload         9
183: ldc           #95
185: invokestatic  #96
188: aload         10
190: invokestatic  #10
193: new           #55
196: dup
197: invokespecial #56
200: ldc           #57
202: invokevirtual #58
205: iload         12
207: invokevirtual #59
210: ldc           #60
212: invokevirtual #58
215: iconst_0
216: invokevirtual #59
219: ldc           #57
221: invokevirtual #58
224: invokevirtual #61
227: iload         12
229: ifne          236
232: iconst_1
233: goto          237
236: iconst_0
237: invokestatic  #62
240: aload         14
242: invokestatic  #10
245: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test154
Start line: 6054
End line: 6076
Method source code: 
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSuffix("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("days");
        org.joda.time.format.PeriodPrinter periodPrinter11 = periodFormatterBuilder8.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder8.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodPrinter11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #554
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: ldc           #74
68: invokevirtual #132
71: astore        7
73: aload         7
75: ldc           #192
77: invokevirtual #17
80: astore        8
82: aload         7
84: invokevirtual #45
87: astore        9
89: aload         7
91: invokevirtual #77
94: astore        10
96: aload_2
97: invokestatic  #10
100: aload_3
101: invokestatic  #10
104: aload         4
106: invokestatic  #10
109: aload         5
111: invokestatic  #10
114: aload         6
116: invokestatic  #10
119: aload         7
121: invokestatic  #10
124: aload         8
126: invokestatic  #10
129: aload         9
131: invokestatic  #10
134: aload         10
136: invokestatic  #10
139: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test155
Start line: 6079
End line: 6102
Method source code: 
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.printZeroRarelyLast();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder4.appendSuffix("2024-05-15T11:17:25.652+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #555
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         4
71: invokevirtual #488
74: astore        7
76: aload         4
78: ldc           #230
80: invokevirtual #132
83: astore        8
85: ldc           #43
87: invokestatic  #22
90: goto          95
93: astore        8
95: aload_2
96: invokestatic  #10
99: aload_3
100: invokestatic  #10
103: aload         4
105: invokestatic  #10
108: aload         5
110: invokestatic  #10
113: aload         6
115: invokestatic  #10
118: aload         7
120: invokestatic  #10
123: return
Exception table:
from    to  target type
76    90    93   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test156
Start line: 6105
End line: 6138
Method source code: 
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder18.appendSuffix("1970");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #556
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aload         14
130: ldc           #131
132: invokevirtual #132
135: astore        15
137: ldc           #31
139: invokestatic  #22
142: goto          147
145: astore        15
147: aload_2
148: invokestatic  #10
151: aload_3
152: invokestatic  #10
155: aload         4
157: invokestatic  #10
160: aload         5
162: invokestatic  #10
165: aload         6
167: invokestatic  #10
170: new           #55
173: dup
174: invokespecial #56
177: ldc           #57
179: invokevirtual #58
182: aload         9
184: invokevirtual #58
187: ldc           #94
189: invokevirtual #58
192: invokevirtual #61
195: aload         9
197: ldc           #95
199: invokestatic  #96
202: aload         10
204: invokestatic  #10
207: new           #55
210: dup
211: invokespecial #56
214: ldc           #57
216: invokevirtual #58
219: iload         12
221: invokevirtual #59
224: ldc           #60
226: invokevirtual #58
229: iconst_0
230: invokevirtual #59
233: ldc           #57
235: invokevirtual #58
238: invokevirtual #61
241: iload         12
243: ifne          250
246: iconst_1
247: goto          251
250: iconst_0
251: invokestatic  #62
254: aload         14
256: invokestatic  #10
259: return
Exception table:
from    to  target type
128   142   145   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test157
Start line: 6141
End line: 6161
Method source code: 
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSuffix("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #557
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: ldc           #74
68: invokevirtual #132
71: astore        7
73: aload         7
75: invokevirtual #39
78: astore        8
80: aload         8
82: invokevirtual #39
85: astore        9
87: aload_2
88: invokestatic  #10
91: aload_3
92: invokestatic  #10
95: aload         4
97: invokestatic  #10
100: aload         5
102: invokestatic  #10
105: aload         6
107: invokestatic  #10
110: aload         7
112: invokestatic  #10
115: aload         8
117: invokestatic  #10
120: aload         9
122: invokestatic  #10
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test158
Start line: 6164
End line: 6178
Method source code: 
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder3.appendSeparator("P-90M", "-53");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendLiteral("-100");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #558
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #245
49: astore        4
51: aload_3
52: ldc_w         #559
55: ldc           #197
57: invokevirtual #20
60: astore        5
62: aload         5
64: ldc_w         #560
67: invokevirtual #28
70: astore        6
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test159
Start line: 6181
End line: 6201
Method source code: 
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder8.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #561
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: aload         6
87: invokevirtual #25
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test160
Start line: 6204
End line: 6281
Method source code: 
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendSeparator("2024-05-15T11:18:07.428+00:00:00.010/2024-05-15T11:18:07.428+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder11.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder11.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder11.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder11.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder11.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodParser periodParser18 = periodFormatterBuilder11.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder11.minimumPrintedDigits(292275053);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder23 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder23.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = periodFormatterBuilder23.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder23.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = periodFormatterBuilder23.appendMillis3Digit();
        java.lang.String[] strArray38 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter39.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter39.withLocale(locale43);
        org.joda.time.format.PeriodPrinter periodPrinter45 = periodFormatter44.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal46 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology49);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period53 = period50.minusDays((int) (byte) 100);
        java.util.Locale locale55 = null;
        int int56 = literal46.countFieldsToPrint((org.joda.time.ReadablePeriod) period53, 999, locale55);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator59 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray38, periodPrinter45, (org.joda.time.format.PeriodParser) literal46, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = periodFormatterBuilder28.appendSeparator("76", "979", strArray38);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder61 = periodFormatterBuilder20.appendSeparator("-07:00", "35313-01-15T11:38:44.842+00:00:00.010", strArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder62 = periodFormatterBuilder4.appendSeparator("65687846-06-10T16:37:59.242+00:00:00.010/65687846-06-10T16:37:59.242+00:00:00.010", "", strArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodParser18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatterBuilder26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder28);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodPrinter45);
        org.junit.Assert.assertNotNull(literal46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT-0.090S" + "'", str51, "PT-0.090S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder60);
        org.junit.Assert.assertNotNull(periodFormatterBuilder61);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #562
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         4
60: invokevirtual #320
63: astore        6
65: aload         4
67: ldc_w         #563
70: invokevirtual #37
73: astore        7
75: new           #14
78: dup
79: invokespecial #15
82: astore        8
84: aload         8
86: ldc           #16
88: invokevirtual #17
91: astore        9
93: aload         8
95: invokevirtual #25
98: astore        10
100: aload         8
102: invokevirtual #26
105: astore        11
107: aload         8
109: invokevirtual #76
112: astore        12
114: aload         8
116: invokevirtual #25
119: astore        13
121: aload         8
123: invokevirtual #142
126: astore        14
128: aload         8
130: ldc_w         #438
133: invokevirtual #151
136: astore        15
138: new           #14
141: dup
142: invokespecial #15
145: astore        16
147: aload         16
149: ldc           #16
151: invokevirtual #17
154: astore        17
156: aload         16
158: invokevirtual #25
161: astore        18
163: aload         16
165: invokevirtual #76
168: astore        19
170: aload         16
172: invokevirtual #77
175: astore        20
177: iconst_5
178: anewarray     #99
181: dup
182: iconst_0
183: ldc           #100
185: aastore
186: dup
187: iconst_1
188: ldc           #101
190: aastore
191: dup
192: iconst_2
193: ldc           #102
195: aastore
196: dup
197: iconst_3
198: ldc           #103
200: aastore
201: dup
202: iconst_4
203: ldc           #104
205: aastore
206: astore        21
208: invokestatic  #12
211: astore        22
213: aconst_null
214: astore        23
216: aload         22
218: aload         23
220: invokevirtual #88
223: astore        24
225: aload         22
227: invokevirtual #89
230: istore        25
232: aconst_null
233: astore        26
235: aload         22
237: aload         26
239: invokevirtual #88
242: astore        27
244: aload         27
246: invokevirtual #90
249: astore        28
251: getstatic     #78
254: astore        29
256: aconst_null
257: astore        30
259: new           #46
262: dup
263: ldc2_w        #79
266: ldc2_w        #81
269: aload         30
271: invokespecial #83
274: astore        31
276: aload         31
278: invokevirtual #84
281: astore        32
283: aload         31
285: bipush        100
287: invokevirtual #85
290: astore        33
292: aconst_null
293: astore        34
295: aload         29
297: aload         33
299: sipush        999
302: aload         34
304: invokevirtual #86
307: istore        35
309: new           #105
312: dup
313: ldc           #106
315: ldc           #104
317: aload         21
319: aload         28
321: aload         29
323: iconst_0
324: iconst_0
325: invokespecial #107
328: astore        36
330: aload         20
332: ldc_w         #500
335: ldc_w         #444
338: aload         21
340: invokevirtual #137
343: astore        37
345: aload         15
347: ldc           #35
349: ldc_w         #534
352: aload         21
354: invokevirtual #137
357: astore        38
359: aload         4
361: ldc_w         #564
364: ldc           #74
366: aload         21
368: invokevirtual #137
371: astore        39
373: ldc           #21
375: invokestatic  #22
378: goto          383
381: astore        39
383: aload_2
384: invokestatic  #10
387: aload_3
388: invokestatic  #10
391: aload         4
393: invokestatic  #10
396: aload         5
398: invokestatic  #10
401: aload         6
403: invokestatic  #10
406: aload         7
408: invokestatic  #10
411: aload         9
413: invokestatic  #10
416: aload         10
418: invokestatic  #10
421: aload         11
423: invokestatic  #10
426: aload         12
428: invokestatic  #10
431: aload         13
433: invokestatic  #10
436: aload         14
438: invokestatic  #10
441: aload         15
443: invokestatic  #10
446: aload         17
448: invokestatic  #10
451: aload         18
453: invokestatic  #10
456: aload         19
458: invokestatic  #10
461: aload         20
463: invokestatic  #10
466: aload         21
468: invokestatic  #10
471: aload         22
473: invokestatic  #10
476: aload         24
478: invokestatic  #10
481: new           #55
484: dup
485: invokespecial #56
488: ldc           #57
490: invokevirtual #58
493: iload         25
495: invokevirtual #97
498: ldc           #60
500: invokevirtual #58
503: iconst_1
504: invokevirtual #97
507: ldc           #57
509: invokevirtual #58
512: invokevirtual #61
515: iload         25
517: iconst_1
518: if_icmpne     525
521: iconst_1
522: goto          526
525: iconst_0
526: invokestatic  #62
529: aload         27
531: invokestatic  #10
534: aload         28
536: invokestatic  #10
539: aload         29
541: invokestatic  #10
544: new           #55
547: dup
548: invokespecial #56
551: ldc           #57
553: invokevirtual #58
556: aload         32
558: invokevirtual #58
561: ldc           #94
563: invokevirtual #58
566: invokevirtual #61
569: aload         32
571: ldc           #95
573: invokestatic  #96
576: aload         33
578: invokestatic  #10
581: new           #55
584: dup
585: invokespecial #56
588: ldc           #57
590: invokevirtual #58
593: iload         35
595: invokevirtual #59
598: ldc           #60
600: invokevirtual #58
603: iconst_0
604: invokevirtual #59
607: ldc           #57
609: invokevirtual #58
612: invokevirtual #61
615: iload         35
617: ifne          624
620: iconst_1
621: goto          625
624: iconst_0
625: invokestatic  #62
628: aload         37
630: invokestatic  #10
633: aload         38
635: invokestatic  #10
638: return
Exception table:
from    to  target type
359   378   381   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test161
Start line: 6284
End line: 6294
Method source code: 
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendHours();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #565
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: invokevirtual #77
42: astore_3
43: aload_3
44: invokevirtual #245
47: astore        4
49: aload_2
50: invokestatic  #10
53: aload_3
54: invokestatic  #10
57: aload         4
59: invokestatic  #10
62: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test162
Start line: 6297
End line: 6309
Method source code: 
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendPrefix("", "hi!");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #566
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: ldc           #74
54: ldc           #187
56: invokevirtual #41
59: astore        5
61: aload_2
62: invokestatic  #10
65: aload_3
66: invokestatic  #10
69: aload         4
71: invokestatic  #10
74: aload         5
76: invokestatic  #10
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test163
Start line: 6312
End line: 6420
Method source code: 
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        java.lang.StringBuffer stringBuffer19 = null;
        org.joda.time.Period period21 = org.joda.time.Period.millis(1);
        int int22 = period21.getMonths();
        int int23 = period21.size();
        org.joda.time.Period period25 = period21.withDays((int) (byte) 100);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType29 = null;
        int int30 = period26.get(durationFieldType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period33 = period26.withField(durationFieldType31, 8);
        java.lang.String str34 = durationFieldType31.getName();
        org.joda.time.Period period36 = period21.withField(durationFieldType31, 1);
        org.joda.time.Period period38 = period36.withWeeks((int) ' ');
        org.joda.time.Period period40 = period36.minusSeconds(292278993);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        int int42 = period41.getHours();
        org.joda.time.Period period44 = period41.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        mutablePeriod45.setDays((int) (short) -1);
        mutablePeriod45.addSeconds(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getRangeDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField53 = new org.joda.time.field.PreciseDurationField(durationFieldType51, (long) (short) 0);
        long long56 = preciseDurationField53.getMillis((int) (byte) 100, 864000000L);
        long long59 = preciseDurationField53.getMillis((int) (byte) -1, 515010L);
        org.joda.time.DurationFieldType durationFieldType60 = preciseDurationField53.getType();
        boolean boolean61 = mutablePeriod45.isSupported(durationFieldType60);
        mutablePeriod45.setDays((-292278994));
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.chrono.GregorianChronology gregorianChronology65 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField66 = gregorianChronology65.minuteOfHour();
        org.joda.time.DurationField durationField67 = gregorianChronology65.hours();
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField68 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType64, durationField67);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology71);
        java.lang.String str73 = period72.toString();
        org.joda.time.Period period75 = period72.minusDays((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType77 = period75.getFieldType(0);
        org.joda.time.field.ScaledDurationField scaledDurationField79 = new org.joda.time.field.ScaledDurationField(durationField67, durationFieldType77, 292278993);
        mutablePeriod45.add(durationFieldType77, 3655);
        org.joda.time.Period period83 = period40.withFieldAdded(durationFieldType77, 1052639);
        java.util.Locale locale84 = null;
        // The following exception was thrown during execution in test generation
        try {
            literal6.printTo(stringBuffer19, (org.joda.time.ReadablePeriod) period40, locale84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "seconds" + "'", str34, "seconds");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(gregorianChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField68);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT-0.090S" + "'", str73, "PT-0.090S");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(period83);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #567
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: iconst_1
132: invokestatic  #168
135: astore        16
137: aload         16
139: invokevirtual #169
142: istore        17
144: aload         16
146: invokevirtual #170
149: istore        18
151: aload         16
153: bipush        100
155: invokevirtual #200
158: astore        19
160: getstatic     #8
163: astore        20
165: aload         20
167: iconst_m1
168: invokevirtual #9
171: astore        21
173: aconst_null
174: astore        22
176: aload         20
178: aload         22
180: invokevirtual #201
183: istore        23
185: invokestatic  #202
188: astore        24
190: aload         20
192: aload         24
194: bipush        8
196: invokevirtual #203
199: astore        25
201: aload         24
203: invokevirtual #204
206: astore        26
208: aload         16
210: aload         24
212: iconst_1
213: invokevirtual #203
216: astore        27
218: aload         27
220: bipush        32
222: invokevirtual #508
225: astore        28
227: aload         27
229: ldc           #220
231: invokevirtual #283
234: astore        29
236: getstatic     #8
239: astore        30
241: aload         30
243: invokevirtual #216
246: istore        31
248: aload         30
250: iconst_0
251: invokevirtual #200
254: astore        32
256: aload         32
258: invokevirtual #205
261: astore        33
263: aload         33
265: iconst_m1
266: invokevirtual #313
269: aload         33
271: bipush        8
273: invokevirtual #311
276: invokestatic  #568
279: astore        34
281: aload         34
283: invokevirtual #569
286: astore        35
288: new           #570
291: dup
292: aload         35
294: lconst_0
295: invokespecial #571
298: astore        36
300: aload         36
302: bipush        100
304: ldc2_w        #572
307: invokevirtual #574
310: lstore        37
312: aload         36
314: iconst_m1
315: ldc2_w        #575
318: invokevirtual #574
321: lstore        39
323: aload         36
325: invokevirtual #577
328: astore        41
330: aload         33
332: aload         41
334: invokevirtual #578
337: istore        42
339: aload         33
341: ldc           #232
343: invokevirtual #313
346: invokestatic  #579
349: astore        43
351: invokestatic  #110
354: astore        44
356: aload         44
358: invokevirtual #111
361: astore        45
363: aload         44
365: invokevirtual #580
368: astore        46
370: aload         43
372: aload         46
374: invokestatic  #581
377: astore        47
379: aconst_null
380: astore        48
382: new           #46
385: dup
386: ldc2_w        #79
389: ldc2_w        #81
392: aload         48
394: invokespecial #83
397: astore        49
399: aload         49
401: invokevirtual #84
404: astore        50
406: aload         49
408: bipush        100
410: invokevirtual #85
413: astore        51
415: aload         51
417: iconst_0
418: invokevirtual #582
421: astore        52
423: new           #583
426: dup
427: aload         46
429: aload         52
431: ldc           #220
433: invokespecial #584
436: astore        53
438: aload         33
440: aload         52
442: sipush        3655
445: invokevirtual #226
448: aload         29
450: aload         52
452: ldc_w         #585
455: invokevirtual #586
458: astore        54
460: aconst_null
461: astore        55
463: aload         6
465: aload         15
467: aload         29
469: aload         55
471: invokevirtual #308
474: ldc           #53
476: invokestatic  #22
479: goto          484
482: astore        56
484: aload_2
485: invokestatic  #10
488: aload_3
489: invokestatic  #10
492: aload         4
494: invokestatic  #10
497: aload         5
499: invokestatic  #10
502: aload         6
504: invokestatic  #10
507: new           #55
510: dup
511: invokespecial #56
514: ldc           #57
516: invokevirtual #58
519: aload         9
521: invokevirtual #58
524: ldc           #94
526: invokevirtual #58
529: invokevirtual #61
532: aload         9
534: ldc           #95
536: invokestatic  #96
539: aload         10
541: invokestatic  #10
544: new           #55
547: dup
548: invokespecial #56
551: ldc           #57
553: invokevirtual #58
556: iload         12
558: invokevirtual #59
561: ldc           #60
563: invokevirtual #58
566: iconst_0
567: invokevirtual #59
570: ldc           #57
572: invokevirtual #58
575: invokevirtual #61
578: iload         12
580: ifne          587
583: iconst_1
584: goto          588
587: iconst_0
588: invokestatic  #62
591: aload         14
593: invokestatic  #10
596: aload         16
598: invokestatic  #10
601: new           #55
604: dup
605: invokespecial #56
608: ldc           #57
610: invokevirtual #58
613: iload         17
615: invokevirtual #59
618: ldc           #60
620: invokevirtual #58
623: iconst_0
624: invokevirtual #59
627: ldc           #57
629: invokevirtual #58
632: invokevirtual #61
635: iload         17
637: ifne          644
640: iconst_1
641: goto          645
644: iconst_0
645: invokestatic  #62
648: new           #55
651: dup
652: invokespecial #56
655: ldc           #57
657: invokevirtual #58
660: iload         18
662: invokevirtual #59
665: ldc           #60
667: invokevirtual #58
670: bipush        8
672: invokevirtual #59
675: ldc           #57
677: invokevirtual #58
680: invokevirtual #61
683: iload         18
685: bipush        8
687: if_icmpne     694
690: iconst_1
691: goto          695
694: iconst_0
695: invokestatic  #62
698: aload         19
700: invokestatic  #10
703: aload         20
705: invokestatic  #10
708: aload         21
710: invokestatic  #10
713: new           #55
716: dup
717: invokespecial #56
720: ldc           #57
722: invokevirtual #58
725: iload         23
727: invokevirtual #59
730: ldc           #60
732: invokevirtual #58
735: iconst_0
736: invokevirtual #59
739: ldc           #57
741: invokevirtual #58
744: invokevirtual #61
747: iload         23
749: ifne          756
752: iconst_1
753: goto          757
756: iconst_0
757: invokestatic  #62
760: aload         24
762: invokestatic  #10
765: aload         25
767: invokestatic  #10
770: new           #55
773: dup
774: invokespecial #56
777: ldc           #57
779: invokevirtual #58
782: aload         26
784: invokevirtual #58
787: ldc           #209
789: invokevirtual #58
792: invokevirtual #61
795: aload         26
797: ldc           #210
799: invokestatic  #96
802: aload         27
804: invokestatic  #10
807: aload         28
809: invokestatic  #10
812: aload         29
814: invokestatic  #10
817: aload         30
819: invokestatic  #10
822: new           #55
825: dup
826: invokespecial #56
829: ldc           #57
831: invokevirtual #58
834: iload         31
836: invokevirtual #59
839: ldc           #60
841: invokevirtual #58
844: iconst_0
845: invokevirtual #59
848: ldc           #57
850: invokevirtual #58
853: invokevirtual #61
856: iload         31
858: ifne          865
861: iconst_1
862: goto          866
865: iconst_0
866: invokestatic  #62
869: aload         32
871: invokestatic  #10
874: aload         33
876: invokestatic  #10
879: aload         34
881: invokestatic  #10
884: aload         35
886: invokestatic  #10
889: new           #55
892: dup
893: invokespecial #56
896: ldc           #57
898: invokevirtual #58
901: lload         37
903: invokevirtual #386
906: ldc           #60
908: invokevirtual #58
911: lconst_0
912: invokevirtual #386
915: ldc           #57
917: invokevirtual #58
920: invokevirtual #61
923: lload         37
925: lconst_0
926: lcmp
927: ifne          934
930: iconst_1
931: goto          935
934: iconst_0
935: invokestatic  #62
938: new           #55
941: dup
942: invokespecial #56
945: ldc           #57
947: invokevirtual #58
950: lload         39
952: invokevirtual #386
955: ldc           #60
957: invokevirtual #58
960: lconst_0
961: invokevirtual #386
964: ldc           #57
966: invokevirtual #58
969: invokevirtual #61
972: lload         39
974: lconst_0
975: lcmp
976: ifne          983
979: iconst_1
980: goto          984
983: iconst_0
984: invokestatic  #62
987: aload         41
989: invokestatic  #10
992: new           #55
995: dup
996: invokespecial #56
999: ldc           #57
1001: invokevirtual #58
1004: iload         42
1006: invokevirtual #97
1009: ldc           #60
1011: invokevirtual #58
1014: iconst_0
1015: invokevirtual #97
1018: ldc           #57
1020: invokevirtual #58
1023: invokevirtual #61
1026: iload         42
1028: ifne          1035
1031: iconst_1
1032: goto          1036
1035: iconst_0
1036: invokestatic  #62
1039: aload         43
1041: invokestatic  #10
1044: aload         44
1046: invokestatic  #10
1049: aload         45
1051: invokestatic  #10
1054: aload         46
1056: invokestatic  #10
1059: aload         47
1061: invokestatic  #10
1064: new           #55
1067: dup
1068: invokespecial #56
1071: ldc           #57
1073: invokevirtual #58
1076: aload         50
1078: invokevirtual #58
1081: ldc           #94
1083: invokevirtual #58
1086: invokevirtual #61
1089: aload         50
1091: ldc           #95
1093: invokestatic  #96
1096: aload         51
1098: invokestatic  #10
1101: aload         52
1103: invokestatic  #10
1106: aload         54
1108: invokestatic  #10
1111: return
Exception table:
from    to  target type
463   479   482   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test164
Start line: 6423
End line: 6441
Method source code: 
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.rejectSignedValues(true);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #587
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: iconst_1
81: invokevirtual #108
84: astore        8
86: aload_2
87: invokestatic  #10
90: aload_3
91: invokestatic  #10
94: aload         4
96: invokestatic  #10
99: aload         5
101: invokestatic  #10
104: aload         6
106: invokestatic  #10
109: aload         7
111: invokestatic  #10
114: aload         8
116: invokestatic  #10
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test165
Start line: 6444
End line: 6455
Method source code: 
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        periodFormatterBuilder0.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #588
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #212
49: aload_1
50: invokevirtual #25
53: astore        4
55: aload_2
56: invokestatic  #10
59: aload_3
60: invokestatic  #10
63: aload         4
65: invokestatic  #10
68: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test166
Start line: 6458
End line: 6483
Method source code: 
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.printZeroAlways();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder10.appendSeparator("-98");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #589
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #139
83: astore        8
85: aload         7
87: ldc_w         #523
90: invokevirtual #37
93: astore        9
95: ldc           #43
97: invokestatic  #22
100: goto          105
103: astore        9
105: aload_2
106: invokestatic  #10
109: aload_3
110: invokestatic  #10
113: aload         4
115: invokestatic  #10
118: aload         5
120: invokestatic  #10
123: aload         6
125: invokestatic  #10
128: aload         7
130: invokestatic  #10
133: aload         8
135: invokestatic  #10
138: return
Exception table:
from    to  target type
85   100   103   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test167
Start line: 6486
End line: 6494
Method source code: 
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #590
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #76
37: astore_2
38: aload_2
39: invokevirtual #139
42: astore_3
43: aload_2
44: invokestatic  #10
47: aload_3
48: invokestatic  #10
51: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test168
Start line: 6497
End line: 6518
Method source code: 
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder6.appendSuffix("19", "+10:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #591
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #71
56: astore        5
58: aload         5
60: ldc           #74
62: invokevirtual #67
65: astore        6
67: aload         5
69: ldc_w         #592
72: ldc           #186
74: invokevirtual #30
77: astore        7
79: ldc           #31
81: invokestatic  #22
84: goto          89
87: astore        7
89: aload_2
90: invokestatic  #10
93: aload_3
94: invokestatic  #10
97: aload         4
99: invokestatic  #10
102: aload         5
104: invokestatic  #10
107: aload         6
109: invokestatic  #10
112: return
Exception table:
from    to  target type
67    84    87   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test169
Start line: 6521
End line: 6545
Method source code: 
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatterBuilder9.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendSeparatorIfFieldsAfter("239");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodPrinter12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #593
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: invokevirtual #45
87: astore        9
89: aload         7
91: invokevirtual #320
94: astore        10
96: aload         10
98: ldc_w         #594
101: invokevirtual #17
104: astore        11
106: aload_2
107: invokestatic  #10
110: aload_3
111: invokestatic  #10
114: aload         4
116: invokestatic  #10
119: aload         5
121: invokestatic  #10
124: aload         6
126: invokestatic  #10
129: aload         7
131: invokestatic  #10
134: aload         8
136: invokestatic  #10
139: aload         9
141: invokestatic  #10
144: aload         10
146: invokestatic  #10
149: aload         11
151: invokestatic  #10
154: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test170
Start line: 6548
End line: 6624
Method source code: 
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatterBuilder22.toFormatter();
        java.lang.StringBuffer stringBuffer24 = null;
        org.joda.time.Period period26 = org.joda.time.Period.millis(1);
        int int27 = period26.getMonths();
        int int28 = period26.size();
        org.joda.time.Period period30 = period26.withDays((int) (byte) 100);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period33 = period31.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType34 = null;
        int int35 = period31.get(durationFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period38 = period31.withField(durationFieldType36, 8);
        java.lang.String str39 = durationFieldType36.getName();
        org.joda.time.Period period41 = period26.withField(durationFieldType36, 1);
        org.joda.time.Period period43 = period26.minusDays(10);
        org.joda.time.PeriodType periodType44 = period43.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod45 = period43.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter23.printTo(stringBuffer24, (org.joda.time.ReadablePeriod) mutablePeriod45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "seconds" + "'", str39, "seconds");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(mutablePeriod45);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #595
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload_2
156: invokevirtual #245
159: astore        19
161: aload         19
163: invokevirtual #161
166: astore        20
168: aconst_null
169: astore        21
171: iconst_1
172: invokestatic  #168
175: astore        22
177: aload         22
179: invokevirtual #169
182: istore        23
184: aload         22
186: invokevirtual #170
189: istore        24
191: aload         22
193: bipush        100
195: invokevirtual #200
198: astore        25
200: getstatic     #8
203: astore        26
205: aload         26
207: iconst_m1
208: invokevirtual #9
211: astore        27
213: aconst_null
214: astore        28
216: aload         26
218: aload         28
220: invokevirtual #201
223: istore        29
225: invokestatic  #202
228: astore        30
230: aload         26
232: aload         30
234: bipush        8
236: invokevirtual #203
239: astore        31
241: aload         30
243: invokevirtual #204
246: astore        32
248: aload         22
250: aload         30
252: iconst_1
253: invokevirtual #203
256: astore        33
258: aload         22
260: bipush        10
262: invokevirtual #85
265: astore        34
267: aload         34
269: invokevirtual #596
272: astore        35
274: aload         34
276: invokevirtual #205
279: astore        36
281: aload         20
283: aload         21
285: aload         36
287: invokevirtual #314
290: ldc           #53
292: invokestatic  #22
295: goto          300
298: astore        37
300: aload_2
301: invokestatic  #10
304: aload_3
305: invokestatic  #10
308: aload         4
310: invokestatic  #10
313: aload         5
315: invokestatic  #10
318: aload         7
320: invokestatic  #10
323: new           #55
326: dup
327: invokespecial #56
330: ldc           #57
332: invokevirtual #58
335: iload         8
337: invokevirtual #97
340: ldc           #60
342: invokevirtual #58
345: iconst_1
346: invokevirtual #97
349: ldc           #57
351: invokevirtual #58
354: invokevirtual #61
357: iload         8
359: iconst_1
360: if_icmpne     367
363: iconst_1
364: goto          368
367: iconst_0
368: invokestatic  #62
371: aload         10
373: invokestatic  #10
376: aload         11
378: invokestatic  #10
381: aload         12
383: invokestatic  #10
386: aload         13
388: invokestatic  #10
391: aload         14
393: invokestatic  #10
396: aload         15
398: invokestatic  #10
401: aload         17
403: invokestatic  #10
406: aload         18
408: invokestatic  #10
411: aload         19
413: invokestatic  #10
416: aload         20
418: invokestatic  #10
421: aload         22
423: invokestatic  #10
426: new           #55
429: dup
430: invokespecial #56
433: ldc           #57
435: invokevirtual #58
438: iload         23
440: invokevirtual #59
443: ldc           #60
445: invokevirtual #58
448: iconst_0
449: invokevirtual #59
452: ldc           #57
454: invokevirtual #58
457: invokevirtual #61
460: iload         23
462: ifne          469
465: iconst_1
466: goto          470
469: iconst_0
470: invokestatic  #62
473: new           #55
476: dup
477: invokespecial #56
480: ldc           #57
482: invokevirtual #58
485: iload         24
487: invokevirtual #59
490: ldc           #60
492: invokevirtual #58
495: bipush        8
497: invokevirtual #59
500: ldc           #57
502: invokevirtual #58
505: invokevirtual #61
508: iload         24
510: bipush        8
512: if_icmpne     519
515: iconst_1
516: goto          520
519: iconst_0
520: invokestatic  #62
523: aload         25
525: invokestatic  #10
528: aload         26
530: invokestatic  #10
533: aload         27
535: invokestatic  #10
538: new           #55
541: dup
542: invokespecial #56
545: ldc           #57
547: invokevirtual #58
550: iload         29
552: invokevirtual #59
555: ldc           #60
557: invokevirtual #58
560: iconst_0
561: invokevirtual #59
564: ldc           #57
566: invokevirtual #58
569: invokevirtual #61
572: iload         29
574: ifne          581
577: iconst_1
578: goto          582
581: iconst_0
582: invokestatic  #62
585: aload         30
587: invokestatic  #10
590: aload         31
592: invokestatic  #10
595: new           #55
598: dup
599: invokespecial #56
602: ldc           #57
604: invokevirtual #58
607: aload         32
609: invokevirtual #58
612: ldc           #209
614: invokevirtual #58
617: invokevirtual #61
620: aload         32
622: ldc           #210
624: invokestatic  #96
627: aload         33
629: invokestatic  #10
632: aload         34
634: invokestatic  #10
637: aload         35
639: invokestatic  #10
642: aload         36
644: invokestatic  #10
647: return
Exception table:
from    to  target type
281   295   298   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test171
Start line: 6627
End line: 6642
Method source code: 
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        periodFormatterBuilder3.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.appendSecondsWithMillis();
        org.joda.time.format.PeriodPrinter periodPrinter9 = periodFormatterBuilder3.toPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodPrinter9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #597
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: ldc           #34
48: ldc           #35
50: invokevirtual #20
53: astore        4
55: aload_3
56: invokevirtual #212
59: aload_3
60: invokevirtual #185
63: astore        5
65: aload_3
66: invokevirtual #45
69: astore        6
71: aload_2
72: invokestatic  #10
75: aload_3
76: invokestatic  #10
79: aload         4
81: invokestatic  #10
84: aload         5
86: invokestatic  #10
89: aload         6
91: invokestatic  #10
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test172
Start line: 6645
End line: 6687
Method source code: 
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter10.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter10.withLocale(locale14);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter10.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal17 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        java.util.Locale locale22 = null;
        int int23 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) period20, (-101), locale22);
        org.joda.time.format.PeriodFormatter periodFormatter24 = new org.joda.time.format.PeriodFormatter(periodPrinter16, (org.joda.time.format.PeriodParser) literal17);
        org.joda.time.format.PeriodParser periodParser25 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = periodFormatterBuilder4.append((org.joda.time.format.PeriodPrinter) literal17, periodParser25);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder26.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodPrinter16);
        org.junit.Assert.assertNotNull(literal17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #598
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         4
71: invokevirtual #185
74: astore        7
76: invokestatic  #12
79: astore        8
81: aconst_null
82: astore        9
84: aload         8
86: aload         9
88: invokevirtual #88
91: astore        10
93: aload         8
95: invokevirtual #89
98: istore        11
100: aconst_null
101: astore        12
103: aload         8
105: aload         12
107: invokevirtual #88
110: astore        13
112: aload         8
114: invokevirtual #90
117: astore        14
119: getstatic     #78
122: astore        15
124: aconst_null
125: astore        16
127: aconst_null
128: astore        17
130: new           #46
133: dup
134: aload         16
136: aload         17
138: invokespecial #47
141: astore        18
143: aconst_null
144: astore        19
146: aload         15
148: aload         18
150: bipush        -101
152: aload         19
154: invokevirtual #86
157: istore        20
159: new           #164
162: dup
163: aload         14
165: aload         15
167: invokespecial #165
170: astore        21
172: aconst_null
173: astore        22
175: aload         4
177: aload         15
179: aload         22
181: invokevirtual #87
184: astore        23
186: aload         23
188: invokevirtual #185
191: astore        24
193: aload_2
194: invokestatic  #10
197: aload_3
198: invokestatic  #10
201: aload         4
203: invokestatic  #10
206: aload         5
208: invokestatic  #10
211: aload         6
213: invokestatic  #10
216: aload         7
218: invokestatic  #10
221: aload         8
223: invokestatic  #10
226: aload         10
228: invokestatic  #10
231: new           #55
234: dup
235: invokespecial #56
238: ldc           #57
240: invokevirtual #58
243: iload         11
245: invokevirtual #97
248: ldc           #60
250: invokevirtual #58
253: iconst_1
254: invokevirtual #97
257: ldc           #57
259: invokevirtual #58
262: invokevirtual #61
265: iload         11
267: iconst_1
268: if_icmpne     275
271: iconst_1
272: goto          276
275: iconst_0
276: invokestatic  #62
279: aload         13
281: invokestatic  #10
284: aload         14
286: invokestatic  #10
289: aload         15
291: invokestatic  #10
294: new           #55
297: dup
298: invokespecial #56
301: ldc           #57
303: invokevirtual #58
306: iload         20
308: invokevirtual #59
311: ldc           #60
313: invokevirtual #58
316: iconst_0
317: invokevirtual #59
320: ldc           #57
322: invokevirtual #58
325: invokevirtual #61
328: iload         20
330: ifne          337
333: iconst_1
334: goto          338
337: iconst_0
338: invokestatic  #62
341: aload         23
343: invokestatic  #10
346: aload         24
348: invokestatic  #10
351: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test173
Start line: 6690
End line: 6720
Method source code: 
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        java.util.Locale locale20 = null;
        int int21 = literal6.calculatePrintedLength(readablePeriod19, locale20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #599
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: aconst_null
132: astore        16
134: aload         6
136: aload         15
138: aload         16
140: invokevirtual #365
143: istore        17
145: aload_2
146: invokestatic  #10
149: aload_3
150: invokestatic  #10
153: aload         4
155: invokestatic  #10
158: aload         5
160: invokestatic  #10
163: aload         6
165: invokestatic  #10
168: new           #55
171: dup
172: invokespecial #56
175: ldc           #57
177: invokevirtual #58
180: aload         9
182: invokevirtual #58
185: ldc           #94
187: invokevirtual #58
190: invokevirtual #61
193: aload         9
195: ldc           #95
197: invokestatic  #96
200: aload         10
202: invokestatic  #10
205: new           #55
208: dup
209: invokespecial #56
212: ldc           #57
214: invokevirtual #58
217: iload         12
219: invokevirtual #59
222: ldc           #60
224: invokevirtual #58
227: iconst_0
228: invokevirtual #59
231: ldc           #57
233: invokevirtual #58
236: invokevirtual #61
239: iload         12
241: ifne          248
244: iconst_1
245: goto          249
248: iconst_0
249: invokestatic  #62
252: aload         14
254: invokestatic  #10
257: new           #55
260: dup
261: invokespecial #56
264: ldc           #57
266: invokevirtual #58
269: iload         17
271: invokevirtual #59
274: ldc           #60
276: invokevirtual #58
279: iconst_0
280: invokevirtual #59
283: ldc           #57
285: invokevirtual #58
288: invokevirtual #61
291: iload         17
293: ifne          300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #62
304: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test174
Start line: 6723
End line: 6741
Method source code: 
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("480");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder6.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #600
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: ldc           #34
48: ldc           #35
50: invokevirtual #20
53: astore        4
55: aload         4
57: invokevirtual #26
60: astore        5
62: aload         4
64: invokevirtual #72
67: astore        6
69: aload         4
71: ldc_w         #601
74: invokevirtual #67
77: astore        7
79: aload         4
81: invokevirtual #26
84: astore        8
86: aload_2
87: invokestatic  #10
90: aload_3
91: invokestatic  #10
94: aload         4
96: invokestatic  #10
99: aload         5
101: invokestatic  #10
104: aload         6
106: invokestatic  #10
109: aload         7
111: invokestatic  #10
114: aload         8
116: invokestatic  #10
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test175
Start line: 6744
End line: 6758
Method source code: 
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder2.appendLiteral("halfdayOfDay");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #602
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #71
56: astore        5
58: aload_2
59: ldc_w         #435
62: invokevirtual #28
65: astore        6
67: aload_2
68: invokestatic  #10
71: aload_3
72: invokestatic  #10
75: aload         4
77: invokestatic  #10
80: aload         5
82: invokestatic  #10
85: aload         6
87: invokestatic  #10
90: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test176
Start line: 6761
End line: 6779
Method source code: 
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.minimumPrintedDigits(36000000);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.appendYears();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #603
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #39
56: astore        5
58: aload         5
60: invokevirtual #134
63: astore        6
65: aload         6
67: ldc_w         #604
70: invokevirtual #151
73: astore        7
75: aload         6
77: invokevirtual #33
80: astore        8
82: aload_2
83: invokestatic  #10
86: aload_3
87: invokestatic  #10
90: aload         4
92: invokestatic  #10
95: aload         5
97: invokestatic  #10
100: aload         6
102: invokestatic  #10
105: aload         7
107: invokestatic  #10
110: aload         8
112: invokestatic  #10
115: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test177
Start line: 6782
End line: 6794
Method source code: 
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatter periodFormatter3 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.append(periodFormatter3);
        org.joda.time.format.PeriodParser periodParser5 = periodFormatter3.getParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodParser5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #605
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: invokestatic  #349
43: astore_3
44: aload_2
45: aload_3
46: invokevirtual #118
49: astore        4
51: aload_3
52: invokevirtual #119
55: astore        5
57: aload_2
58: invokestatic  #10
61: aload_3
62: invokestatic  #10
65: aload         4
67: invokestatic  #10
70: aload         5
72: invokestatic  #10
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test178
Start line: 6797
End line: 6829
Method source code: 
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder5.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder16.appendSuffix("33075063");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #606
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: aload         5
128: invokevirtual #134
131: astore        16
133: aload         16
135: ldc_w         #409
138: invokevirtual #132
141: astore        17
143: aload_2
144: invokestatic  #10
147: aload_3
148: invokestatic  #10
151: aload         4
153: invokestatic  #10
156: aload         5
158: invokestatic  #10
161: aload         6
163: invokestatic  #10
166: aload         7
168: invokestatic  #354
171: aload         10
173: invokestatic  #10
176: new           #55
179: dup
180: invokespecial #56
183: ldc           #57
185: invokevirtual #58
188: iload         12
190: invokevirtual #97
193: ldc           #60
195: invokevirtual #58
198: iconst_0
199: invokevirtual #97
202: ldc           #57
204: invokevirtual #58
207: invokevirtual #61
210: iload         12
212: ifne          219
215: iconst_1
216: goto          220
219: iconst_0
220: invokestatic  #62
223: aload         14
225: invokestatic  #10
228: aload         15
230: invokestatic  #10
233: aload         16
235: invokestatic  #10
238: aload         17
240: invokestatic  #10
243: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test179
Start line: 6832
End line: 6899
Method source code: 
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        java.io.Writer writer16 = null;
        org.joda.time.Period period18 = org.joda.time.Period.millis(1);
        int int19 = period18.getMonths();
        int int20 = period18.size();
        org.joda.time.Period period22 = period18.withDays((int) (byte) 100);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period23.get(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period30 = period23.withField(durationFieldType28, 8);
        java.lang.String str31 = durationFieldType28.getName();
        org.joda.time.Period period33 = period18.withField(durationFieldType28, 1);
        org.joda.time.Period period35 = period18.minusDays(10);
        org.joda.time.Period period37 = period18.plusWeeks((int) (short) 100);
        org.joda.time.Period period39 = period37.plusWeeks(0);
        int int40 = period37.size();
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter6.printTo(writer16, (org.joda.time.ReadablePeriod) period37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "seconds" + "'", str31, "seconds");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #607
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: aconst_null
127: astore        16
129: iconst_1
130: invokestatic  #168
133: astore        17
135: aload         17
137: invokevirtual #169
140: istore        18
142: aload         17
144: invokevirtual #170
147: istore        19
149: aload         17
151: bipush        100
153: invokevirtual #200
156: astore        20
158: getstatic     #8
161: astore        21
163: aload         21
165: iconst_m1
166: invokevirtual #9
169: astore        22
171: aconst_null
172: astore        23
174: aload         21
176: aload         23
178: invokevirtual #201
181: istore        24
183: invokestatic  #202
186: astore        25
188: aload         21
190: aload         25
192: bipush        8
194: invokevirtual #203
197: astore        26
199: aload         25
201: invokevirtual #204
204: astore        27
206: aload         17
208: aload         25
210: iconst_1
211: invokevirtual #203
214: astore        28
216: aload         17
218: bipush        10
220: invokevirtual #85
223: astore        29
225: aload         17
227: bipush        100
229: invokevirtual #334
232: astore        30
234: aload         30
236: iconst_0
237: invokevirtual #334
240: astore        31
242: aload         30
244: invokevirtual #170
247: istore        32
249: aload         6
251: aload         16
253: aload         30
255: invokevirtual #278
258: ldc           #53
260: invokestatic  #22
263: goto          268
266: astore        33
268: aload_2
269: invokestatic  #10
272: aload_3
273: invokestatic  #10
276: aload         4
278: invokestatic  #10
281: aload         5
283: invokestatic  #10
286: aload         6
288: invokestatic  #10
291: aload         7
293: invokestatic  #354
296: aload         10
298: invokestatic  #10
301: new           #55
304: dup
305: invokespecial #56
308: ldc           #57
310: invokevirtual #58
313: iload         12
315: invokevirtual #97
318: ldc           #60
320: invokevirtual #58
323: iconst_0
324: invokevirtual #97
327: ldc           #57
329: invokevirtual #58
332: invokevirtual #61
335: iload         12
337: ifne          344
340: iconst_1
341: goto          345
344: iconst_0
345: invokestatic  #62
348: aload         14
350: invokestatic  #10
353: aload         15
355: invokestatic  #10
358: aload         17
360: invokestatic  #10
363: new           #55
366: dup
367: invokespecial #56
370: ldc           #57
372: invokevirtual #58
375: iload         18
377: invokevirtual #59
380: ldc           #60
382: invokevirtual #58
385: iconst_0
386: invokevirtual #59
389: ldc           #57
391: invokevirtual #58
394: invokevirtual #61
397: iload         18
399: ifne          406
402: iconst_1
403: goto          407
406: iconst_0
407: invokestatic  #62
410: new           #55
413: dup
414: invokespecial #56
417: ldc           #57
419: invokevirtual #58
422: iload         19
424: invokevirtual #59
427: ldc           #60
429: invokevirtual #58
432: bipush        8
434: invokevirtual #59
437: ldc           #57
439: invokevirtual #58
442: invokevirtual #61
445: iload         19
447: bipush        8
449: if_icmpne     456
452: iconst_1
453: goto          457
456: iconst_0
457: invokestatic  #62
460: aload         20
462: invokestatic  #10
465: aload         21
467: invokestatic  #10
470: aload         22
472: invokestatic  #10
475: new           #55
478: dup
479: invokespecial #56
482: ldc           #57
484: invokevirtual #58
487: iload         24
489: invokevirtual #59
492: ldc           #60
494: invokevirtual #58
497: iconst_0
498: invokevirtual #59
501: ldc           #57
503: invokevirtual #58
506: invokevirtual #61
509: iload         24
511: ifne          518
514: iconst_1
515: goto          519
518: iconst_0
519: invokestatic  #62
522: aload         25
524: invokestatic  #10
527: aload         26
529: invokestatic  #10
532: new           #55
535: dup
536: invokespecial #56
539: ldc           #57
541: invokevirtual #58
544: aload         27
546: invokevirtual #58
549: ldc           #209
551: invokevirtual #58
554: invokevirtual #61
557: aload         27
559: ldc           #210
561: invokestatic  #96
564: aload         28
566: invokestatic  #10
569: aload         29
571: invokestatic  #10
574: aload         30
576: invokestatic  #10
579: aload         31
581: invokestatic  #10
584: new           #55
587: dup
588: invokespecial #56
591: ldc           #57
593: invokevirtual #58
596: iload         32
598: invokevirtual #59
601: ldc           #60
603: invokevirtual #58
606: bipush        8
608: invokevirtual #59
611: ldc           #57
613: invokevirtual #58
616: invokevirtual #61
619: iload         32
621: bipush        8
623: if_icmpne     630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #62
634: return
Exception table:
from    to  target type
249   263   266   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test180
Start line: 6902
End line: 6914
Method source code: 
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatterBuilder4.toFormatter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatter5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #608
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: ldc           #42
41: invokevirtual #67
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #161
56: astore        5
58: aload_2
59: invokestatic  #10
62: aload_3
63: invokestatic  #10
66: aload         4
68: invokestatic  #10
71: aload         5
73: invokestatic  #10
76: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test181
Start line: 6917
End line: 6947
Method source code: 
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter12.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.append(periodFormatter15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder9.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #609
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: invokestatic  #12
76: astore        8
78: aconst_null
79: astore        9
81: aload         8
83: aload         9
85: invokevirtual #88
88: astore        10
90: aload         10
92: invokevirtual #89
95: istore        11
97: aconst_null
98: astore        12
100: aload         10
102: aload         12
104: invokevirtual #88
107: astore        13
109: aload         7
111: aload         13
113: invokevirtual #118
116: astore        14
118: aload         7
120: invokevirtual #25
123: astore        15
125: aload_2
126: invokestatic  #10
129: aload_3
130: invokestatic  #10
133: aload         4
135: invokestatic  #10
138: aload         5
140: invokestatic  #10
143: aload         6
145: invokestatic  #10
148: aload         7
150: invokestatic  #10
153: aload         8
155: invokestatic  #10
158: aload         10
160: invokestatic  #10
163: new           #55
166: dup
167: invokespecial #56
170: ldc           #57
172: invokevirtual #58
175: iload         11
177: invokevirtual #97
180: ldc           #60
182: invokevirtual #58
185: iconst_1
186: invokevirtual #97
189: ldc           #57
191: invokevirtual #58
194: invokevirtual #61
197: iload         11
199: iconst_1
200: if_icmpne     207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #62
211: aload         13
213: invokestatic  #10
216: aload         14
218: invokestatic  #10
221: aload         15
223: invokestatic  #10
226: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test182
Start line: 6950
End line: 7050
Method source code: 
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder13.appendSeconds();
        periodFormatterBuilder13.clear();
        org.joda.time.format.PeriodFormatter periodFormatter18 = periodFormatterBuilder13.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal20 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter21 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale22 = null;
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter21.withLocale(locale22);
        boolean boolean24 = periodFormatter23.isParser();
        org.joda.time.format.PeriodParser periodParser25 = periodFormatter23.getParser();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        int int27 = period26.getHours();
        org.joda.time.Period period29 = period26.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType34 = org.joda.time.DateTimeUtils.getPeriodType(periodType33);
        org.joda.time.Period period35 = new org.joda.time.Period(100L, (long) (short) -1, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.weeks();
        boolean boolean37 = periodType33.isSupported(durationFieldType36);
        mutablePeriod30.add(durationFieldType36, (int) (byte) 100);
        java.lang.String str40 = mutablePeriod30.toString();
        java.util.Locale locale43 = null;
        int int44 = periodParser25.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod30, "weekyear", (int) '#', locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder13.append((org.joda.time.format.PeriodPrinter) literal20, periodParser25);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        int int47 = period46.getHours();
        org.joda.time.Period period49 = period46.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType54 = org.joda.time.DateTimeUtils.getPeriodType(periodType53);
        org.joda.time.Period period55 = new org.joda.time.Period(100L, (long) (short) -1, periodType53);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.weeks();
        boolean boolean57 = periodType53.isSupported(durationFieldType56);
        mutablePeriod50.add(durationFieldType56, (int) (byte) 100);
        java.lang.String str60 = mutablePeriod50.toString();
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.years();
        mutablePeriod50.set(durationFieldType61, (int) (short) -1);
        mutablePeriod50.addYears((int) '4');
        mutablePeriod50.addMillis((-101));
        java.util.Locale locale70 = null;
        int int71 = literal20.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod50, "-106", 315532800, locale70);
        org.joda.time.format.PeriodParser periodParser72 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder73 = periodFormatterBuilder8.append((org.joda.time.format.PeriodPrinter) literal20, periodParser72);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder75 = periodFormatterBuilder8.appendLiteral("-36");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(periodParser25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "P100W" + "'", str40, "P100W");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-36) + "'", int44 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "P100W" + "'", str60, "P100W");
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-315532801) + "'", int71 == (-315532801));
        org.junit.Assert.assertNotNull(periodFormatterBuilder73);
        org.junit.Assert.assertNotNull(periodFormatterBuilder75);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #610
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #33
62: astore        6
64: aload         6
66: invokevirtual #39
69: astore        7
71: aload         7
73: invokevirtual #25
76: astore        8
78: new           #14
81: dup
82: invokespecial #15
85: astore        9
87: aload         9
89: ldc           #16
91: invokevirtual #17
94: astore        10
96: aload         9
98: invokevirtual #25
101: astore        11
103: aload         9
105: invokevirtual #39
108: astore        12
110: aload         12
112: ldc_w         #319
115: invokevirtual #196
118: astore        13
120: aload         12
122: invokevirtual #320
125: astore        14
127: aload         12
129: invokevirtual #212
132: aload         12
134: invokevirtual #161
137: astore        15
139: new           #392
142: dup
143: ldc           #74
145: invokespecial #393
148: astore        16
150: invokestatic  #12
153: astore        17
155: aconst_null
156: astore        18
158: aload         17
160: aload         18
162: invokevirtual #88
165: astore        19
167: aload         19
169: invokevirtual #89
172: istore        20
174: aload         19
176: invokevirtual #119
179: astore        21
181: getstatic     #8
184: astore        22
186: aload         22
188: invokevirtual #216
191: istore        23
193: aload         22
195: iconst_0
196: invokevirtual #200
199: astore        24
201: aload         24
203: invokevirtual #205
206: astore        25
208: invokestatic  #171
211: astore        26
213: aload         26
215: invokestatic  #172
218: astore        27
220: new           #46
223: dup
224: ldc2_w        #79
227: ldc2_w        #173
230: aload         26
232: invokespecial #175
235: astore        28
237: invokestatic  #176
240: astore        29
242: aload         26
244: aload         29
246: invokevirtual #177
249: istore        30
251: aload         25
253: aload         29
255: bipush        100
257: invokevirtual #226
260: aload         25
262: invokevirtual #235
265: astore        31
267: aconst_null
268: astore        32
270: aload         21
272: aload         25
274: ldc           #135
276: bipush        35
278: aload         32
280: invokeinterface #231,  5
285: istore        33
287: aload         12
289: aload         16
291: aload         21
293: invokevirtual #87
296: astore        34
298: getstatic     #8
301: astore        35
303: aload         35
305: invokevirtual #216
308: istore        36
310: aload         35
312: iconst_0
313: invokevirtual #200
316: astore        37
318: aload         37
320: invokevirtual #205
323: astore        38
325: invokestatic  #171
328: astore        39
330: aload         39
332: invokestatic  #172
335: astore        40
337: new           #46
340: dup
341: ldc2_w        #79
344: ldc2_w        #173
347: aload         39
349: invokespecial #175
352: astore        41
354: invokestatic  #176
357: astore        42
359: aload         39
361: aload         42
363: invokevirtual #177
366: istore        43
368: aload         38
370: aload         42
372: bipush        100
374: invokevirtual #226
377: aload         38
379: invokevirtual #235
382: astore        44
384: invokestatic  #300
387: astore        45
389: aload         38
391: aload         45
393: iconst_m1
394: invokevirtual #301
397: aload         38
399: bipush        52
401: invokevirtual #475
404: aload         38
406: bipush        -101
408: invokevirtual #476
411: aconst_null
412: astore        46
414: aload         16
416: aload         38
418: ldc_w         #477
421: ldc_w         #276
424: aload         46
426: invokevirtual #221
429: istore        47
431: aconst_null
432: astore        48
434: aload         8
436: aload         16
438: aload         48
440: invokevirtual #87
443: astore        49
445: aload         8
447: ldc_w         #543
450: invokevirtual #28
453: astore        50
455: aload_2
456: invokestatic  #10
459: aload_3
460: invokestatic  #10
463: aload         4
465: invokestatic  #10
468: aload         5
470: invokestatic  #10
473: aload         6
475: invokestatic  #10
478: aload         7
480: invokestatic  #10
483: aload         8
485: invokestatic  #10
488: aload         10
490: invokestatic  #10
493: aload         11
495: invokestatic  #10
498: aload         12
500: invokestatic  #10
503: aload         13
505: invokestatic  #10
508: aload         14
510: invokestatic  #10
513: aload         15
515: invokestatic  #10
518: aload         17
520: invokestatic  #10
523: aload         19
525: invokestatic  #10
528: new           #55
531: dup
532: invokespecial #56
535: ldc           #57
537: invokevirtual #58
540: iload         20
542: invokevirtual #97
545: ldc           #60
547: invokevirtual #58
550: iconst_1
551: invokevirtual #97
554: ldc           #57
556: invokevirtual #58
559: invokevirtual #61
562: iload         20
564: iconst_1
565: if_icmpne     572
568: iconst_1
569: goto          573
572: iconst_0
573: invokestatic  #62
576: aload         21
578: invokestatic  #10
581: aload         22
583: invokestatic  #10
586: new           #55
589: dup
590: invokespecial #56
593: ldc           #57
595: invokevirtual #58
598: iload         23
600: invokevirtual #59
603: ldc           #60
605: invokevirtual #58
608: iconst_0
609: invokevirtual #59
612: ldc           #57
614: invokevirtual #58
617: invokevirtual #61
620: iload         23
622: ifne          629
625: iconst_1
626: goto          630
629: iconst_0
630: invokestatic  #62
633: aload         24
635: invokestatic  #10
638: aload         25
640: invokestatic  #10
643: aload         26
645: invokestatic  #10
648: aload         27
650: invokestatic  #10
653: aload         29
655: invokestatic  #10
658: new           #55
661: dup
662: invokespecial #56
665: ldc           #57
667: invokevirtual #58
670: iload         30
672: invokevirtual #97
675: ldc           #60
677: invokevirtual #58
680: iconst_0
681: invokevirtual #97
684: ldc           #57
686: invokevirtual #58
689: invokevirtual #61
692: iload         30
694: ifne          701
697: iconst_1
698: goto          702
701: iconst_0
702: invokestatic  #62
705: new           #55
708: dup
709: invokespecial #56
712: ldc           #57
714: invokevirtual #58
717: aload         31
719: invokevirtual #58
722: ldc           #238
724: invokevirtual #58
727: invokevirtual #61
730: aload         31
732: ldc           #239
734: invokestatic  #96
737: new           #55
740: dup
741: invokespecial #56
744: ldc           #57
746: invokevirtual #58
749: iload         33
751: invokevirtual #59
754: ldc           #60
756: invokevirtual #58
759: bipush        -36
761: invokevirtual #59
764: ldc           #57
766: invokevirtual #58
769: invokevirtual #61
772: iload         33
774: bipush        -36
776: if_icmpne     783
779: iconst_1
780: goto          784
783: iconst_0
784: invokestatic  #62
787: aload         34
789: invokestatic  #10
792: aload         35
794: invokestatic  #10
797: new           #55
800: dup
801: invokespecial #56
804: ldc           #57
806: invokevirtual #58
809: iload         36
811: invokevirtual #59
814: ldc           #60
816: invokevirtual #58
819: iconst_0
820: invokevirtual #59
823: ldc           #57
825: invokevirtual #58
828: invokevirtual #61
831: iload         36
833: ifne          840
836: iconst_1
837: goto          841
840: iconst_0
841: invokestatic  #62
844: aload         37
846: invokestatic  #10
849: aload         38
851: invokestatic  #10
854: aload         39
856: invokestatic  #10
859: aload         40
861: invokestatic  #10
864: aload         42
866: invokestatic  #10
869: new           #55
872: dup
873: invokespecial #56
876: ldc           #57
878: invokevirtual #58
881: iload         43
883: invokevirtual #97
886: ldc           #60
888: invokevirtual #58
891: iconst_0
892: invokevirtual #97
895: ldc           #57
897: invokevirtual #58
900: invokevirtual #61
903: iload         43
905: ifne          912
908: iconst_1
909: goto          913
912: iconst_0
913: invokestatic  #62
916: new           #55
919: dup
920: invokespecial #56
923: ldc           #57
925: invokevirtual #58
928: aload         44
930: invokevirtual #58
933: ldc           #238
935: invokevirtual #58
938: invokevirtual #61
941: aload         44
943: ldc           #239
945: invokestatic  #96
948: aload         45
950: invokestatic  #10
953: new           #55
956: dup
957: invokespecial #56
960: ldc           #57
962: invokevirtual #58
965: iload         47
967: invokevirtual #59
970: ldc           #60
972: invokevirtual #58
975: ldc_w         #479
978: invokevirtual #59
981: ldc           #57
983: invokevirtual #58
986: invokevirtual #61
989: iload         47
991: ldc_w         #479
994: if_icmpne     1001
997: iconst_1
998: goto          1002
1001: iconst_0
1002: invokestatic  #62
1005: aload         49
1007: invokestatic  #10
1010: aload         50
1012: invokestatic  #10
1015: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test183
Start line: 7053
End line: 7081
Method source code: 
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSeparatorIfFieldsAfter("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder9.minimumPrintedDigits((-286));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.minimumPrintedDigits((-2837));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder9.appendSeparator("-81");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #611
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: ldc           #184
61: invokevirtual #28
64: astore        6
66: aload         6
68: invokevirtual #185
71: astore        7
73: aload         6
75: invokevirtual #26
78: astore        8
80: aload         8
82: ldc           #74
84: invokevirtual #17
87: astore        9
89: aload         8
91: invokevirtual #77
94: astore        10
96: aload         8
98: sipush        -286
101: invokevirtual #151
104: astore        11
106: aload         8
108: sipush        -2837
111: invokevirtual #151
114: astore        12
116: aload         8
118: ldc_w         #612
121: invokevirtual #37
124: astore        13
126: aload_2
127: invokestatic  #10
130: aload_3
131: invokestatic  #10
134: aload         4
136: invokestatic  #10
139: aload         5
141: invokestatic  #10
144: aload         6
146: invokestatic  #10
149: aload         7
151: invokestatic  #10
154: aload         8
156: invokestatic  #10
159: aload         9
161: invokestatic  #10
164: aload         10
166: invokestatic  #10
169: aload         11
171: invokestatic  #10
174: aload         12
176: invokestatic  #10
179: aload         13
181: invokestatic  #10
184: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test184
Start line: 7084
End line: 7108
Method source code: 
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder7.appendSeparator("PT0.001S", "65687846-06-10T16:38:13.748+00:00:00.024/65687846-06-10T16:38:13.748+00:00:00.024");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #613
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #33
62: astore        6
64: aload         6
66: invokevirtual #39
69: astore        7
71: aload         7
73: invokevirtual #25
76: astore        8
78: aload         7
80: invokevirtual #320
83: astore        9
85: aload         7
87: invokevirtual #139
90: astore        10
92: aload         7
94: ldc_w         #614
97: ldc_w         #615
100: invokevirtual #20
103: astore        11
105: aload_2
106: invokestatic  #10
109: aload_3
110: invokestatic  #10
113: aload         4
115: invokestatic  #10
118: aload         5
120: invokestatic  #10
123: aload         6
125: invokestatic  #10
128: aload         7
130: invokestatic  #10
133: aload         8
135: invokestatic  #10
138: aload         9
140: invokestatic  #10
143: aload         10
145: invokestatic  #10
148: aload         11
150: invokestatic  #10
153: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test185
Start line: 7111
End line: 7232
Method source code: 
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter6.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter6.withLocale(locale10);
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatter11.getPrinter();
        java.lang.String[] strArray17 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal18 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology21);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period25 = period22.minusDays((int) (byte) 100);
        java.util.Locale locale27 = null;
        int int28 = literal18.countFieldsToPrint((org.joda.time.ReadablePeriod) period25, 999, locale27);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = period29.get(durationFieldType32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period36 = period29.withField(durationFieldType34, 8);
        org.joda.time.Period period38 = period36.plusMonths((int) (short) 1);
        java.util.Locale locale40 = null;
        int int41 = literal18.countFieldsToPrint((org.joda.time.ReadablePeriod) period36, (-292275054), locale40);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal42 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology45);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period49 = period46.minusDays((int) (byte) 100);
        java.util.Locale locale51 = null;
        int int52 = literal42.countFieldsToPrint((org.joda.time.ReadablePeriod) period49, 999, locale51);
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period53.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType56 = null;
        int int57 = period53.get(durationFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period60 = period53.withField(durationFieldType58, 8);
        org.joda.time.Period period62 = period60.plusMonths((int) (short) 1);
        java.util.Locale locale64 = null;
        int int65 = literal42.countFieldsToPrint((org.joda.time.ReadablePeriod) period60, (-292275054), locale64);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator68 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray17, (org.joda.time.format.PeriodPrinter) literal18, (org.joda.time.format.PeriodParser) literal42, true, true);
        org.joda.time.format.PeriodFormatter periodFormatter69 = new org.joda.time.format.PeriodFormatter(periodPrinter12, (org.joda.time.format.PeriodParser) literal42);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder70 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder72 = periodFormatterBuilder70.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder73 = periodFormatterBuilder70.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder74 = periodFormatterBuilder70.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder75 = periodFormatterBuilder74.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder78 = periodFormatterBuilder74.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder74.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatter periodFormatter80 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale81 = null;
        org.joda.time.format.PeriodFormatter periodFormatter82 = periodFormatter80.withLocale(locale81);
        boolean boolean83 = periodFormatter80.isParser();
        java.util.Locale locale84 = null;
        org.joda.time.format.PeriodFormatter periodFormatter85 = periodFormatter80.withLocale(locale84);
        org.joda.time.format.PeriodPrinter periodPrinter86 = periodFormatter80.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal87 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Period period90 = new org.joda.time.Period(readableDuration88, readableInstant89);
        java.util.Locale locale92 = null;
        int int93 = literal87.countFieldsToPrint((org.joda.time.ReadablePeriod) period90, (-101), locale92);
        org.joda.time.format.PeriodFormatter periodFormatter94 = new org.joda.time.format.PeriodFormatter(periodPrinter86, (org.joda.time.format.PeriodParser) literal87);
        org.joda.time.format.PeriodParser periodParser95 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder96 = periodFormatterBuilder74.append((org.joda.time.format.PeriodPrinter) literal87, periodParser95);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder97 = periodFormatterBuilder4.append((org.joda.time.format.PeriodPrinter) literal42, (org.joda.time.format.PeriodParser) literal87);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodPrinter12);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(literal18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT-0.090S" + "'", str23, "PT-0.090S");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(literal42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT-0.090S" + "'", str47, "PT-0.090S");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder72);
        org.junit.Assert.assertNotNull(periodFormatterBuilder73);
        org.junit.Assert.assertNotNull(periodFormatterBuilder74);
        org.junit.Assert.assertNotNull(periodFormatterBuilder75);
        org.junit.Assert.assertNotNull(periodFormatterBuilder78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNotNull(periodFormatter82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(periodFormatter85);
        org.junit.Assert.assertNotNull(periodPrinter86);
        org.junit.Assert.assertNotNull(literal87);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder96);
        org.junit.Assert.assertNotNull(periodFormatterBuilder97);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #616
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #185
56: astore        5
58: invokestatic  #12
61: astore        6
63: aconst_null
64: astore        7
66: aload         6
68: aload         7
70: invokevirtual #88
73: astore        8
75: aload         6
77: invokevirtual #89
80: istore        9
82: aconst_null
83: astore        10
85: aload         6
87: aload         10
89: invokevirtual #88
92: astore        11
94: aload         11
96: invokevirtual #90
99: astore        12
101: iconst_2
102: anewarray     #99
105: dup
106: iconst_0
107: ldc           #141
109: aastore
110: dup
111: iconst_1
112: ldc           #250
114: aastore
115: astore        13
117: getstatic     #78
120: astore        14
122: aconst_null
123: astore        15
125: new           #46
128: dup
129: ldc2_w        #79
132: ldc2_w        #81
135: aload         15
137: invokespecial #83
140: astore        16
142: aload         16
144: invokevirtual #84
147: astore        17
149: aload         16
151: bipush        100
153: invokevirtual #85
156: astore        18
158: aconst_null
159: astore        19
161: aload         14
163: aload         18
165: sipush        999
168: aload         19
170: invokevirtual #86
173: istore        20
175: getstatic     #8
178: astore        21
180: aload         21
182: iconst_m1
183: invokevirtual #9
186: astore        22
188: aconst_null
189: astore        23
191: aload         21
193: aload         23
195: invokevirtual #201
198: istore        24
200: invokestatic  #202
203: astore        25
205: aload         21
207: aload         25
209: bipush        8
211: invokevirtual #203
214: astore        26
216: aload         26
218: iconst_1
219: invokevirtual #251
222: astore        27
224: aconst_null
225: astore        28
227: aload         14
229: aload         26
231: ldc           #252
233: aload         28
235: invokevirtual #86
238: istore        29
240: getstatic     #78
243: astore        30
245: aconst_null
246: astore        31
248: new           #46
251: dup
252: ldc2_w        #79
255: ldc2_w        #81
258: aload         31
260: invokespecial #83
263: astore        32
265: aload         32
267: invokevirtual #84
270: astore        33
272: aload         32
274: bipush        100
276: invokevirtual #85
279: astore        34
281: aconst_null
282: astore        35
284: aload         30
286: aload         34
288: sipush        999
291: aload         35
293: invokevirtual #86
296: istore        36
298: getstatic     #8
301: astore        37
303: aload         37
305: iconst_m1
306: invokevirtual #9
309: astore        38
311: aconst_null
312: astore        39
314: aload         37
316: aload         39
318: invokevirtual #201
321: istore        40
323: invokestatic  #202
326: astore        41
328: aload         37
330: aload         41
332: bipush        8
334: invokevirtual #203
337: astore        42
339: aload         42
341: iconst_1
342: invokevirtual #251
345: astore        43
347: aconst_null
348: astore        44
350: aload         30
352: aload         42
354: ldc           #252
356: aload         44
358: invokevirtual #86
361: istore        45
363: new           #105
366: dup
367: ldc           #131
369: ldc           #253
371: aload         13
373: aload         14
375: aload         30
377: iconst_1
378: iconst_1
379: invokespecial #107
382: astore        46
384: new           #164
387: dup
388: aload         12
390: aload         30
392: invokespecial #165
395: astore        47
397: new           #14
400: dup
401: invokespecial #15
404: astore        48
406: aload         48
408: ldc           #16
410: invokevirtual #17
413: astore        49
415: aload         48
417: invokevirtual #25
420: astore        50
422: aload         48
424: invokevirtual #26
427: astore        51
429: aload         51
431: invokevirtual #33
434: astore        52
436: aload         51
438: ldc           #29
440: ldc           #192
442: invokevirtual #41
445: astore        53
447: aload         51
449: invokevirtual #185
452: astore        54
454: invokestatic  #12
457: astore        55
459: aconst_null
460: astore        56
462: aload         55
464: aload         56
466: invokevirtual #88
469: astore        57
471: aload         55
473: invokevirtual #89
476: istore        58
478: aconst_null
479: astore        59
481: aload         55
483: aload         59
485: invokevirtual #88
488: astore        60
490: aload         55
492: invokevirtual #90
495: astore        61
497: getstatic     #78
500: astore        62
502: aconst_null
503: astore        63
505: aconst_null
506: astore        64
508: new           #46
511: dup
512: aload         63
514: aload         64
516: invokespecial #47
519: astore        65
521: aconst_null
522: astore        66
524: aload         62
526: aload         65
528: bipush        -101
530: aload         66
532: invokevirtual #86
535: istore        67
537: new           #164
540: dup
541: aload         61
543: aload         62
545: invokespecial #165
548: astore        68
550: aconst_null
551: astore        69
553: aload         51
555: aload         62
557: aload         69
559: invokevirtual #87
562: astore        70
564: aload         4
566: aload         30
568: aload         62
570: invokevirtual #87
573: astore        71
575: aload_2
576: invokestatic  #10
579: aload_3
580: invokestatic  #10
583: aload         4
585: invokestatic  #10
588: aload         5
590: invokestatic  #10
593: aload         6
595: invokestatic  #10
598: aload         8
600: invokestatic  #10
603: new           #55
606: dup
607: invokespecial #56
610: ldc           #57
612: invokevirtual #58
615: iload         9
617: invokevirtual #97
620: ldc           #60
622: invokevirtual #58
625: iconst_1
626: invokevirtual #97
629: ldc           #57
631: invokevirtual #58
634: invokevirtual #61
637: iload         9
639: iconst_1
640: if_icmpne     647
643: iconst_1
644: goto          648
647: iconst_0
648: invokestatic  #62
651: aload         11
653: invokestatic  #10
656: aload         12
658: invokestatic  #10
661: aload         13
663: invokestatic  #10
666: aload         14
668: invokestatic  #10
671: new           #55
674: dup
675: invokespecial #56
678: ldc           #57
680: invokevirtual #58
683: aload         17
685: invokevirtual #58
688: ldc           #94
690: invokevirtual #58
693: invokevirtual #61
696: aload         17
698: ldc           #95
700: invokestatic  #96
703: aload         18
705: invokestatic  #10
708: new           #55
711: dup
712: invokespecial #56
715: ldc           #57
717: invokevirtual #58
720: iload         20
722: invokevirtual #59
725: ldc           #60
727: invokevirtual #58
730: iconst_0
731: invokevirtual #59
734: ldc           #57
736: invokevirtual #58
739: invokevirtual #61
742: iload         20
744: ifne          751
747: iconst_1
748: goto          752
751: iconst_0
752: invokestatic  #62
755: aload         21
757: invokestatic  #10
760: aload         22
762: invokestatic  #10
765: new           #55
768: dup
769: invokespecial #56
772: ldc           #57
774: invokevirtual #58
777: iload         24
779: invokevirtual #59
782: ldc           #60
784: invokevirtual #58
787: iconst_0
788: invokevirtual #59
791: ldc           #57
793: invokevirtual #58
796: invokevirtual #61
799: iload         24
801: ifne          808
804: iconst_1
805: goto          809
808: iconst_0
809: invokestatic  #62
812: aload         25
814: invokestatic  #10
817: aload         26
819: invokestatic  #10
822: aload         27
824: invokestatic  #10
827: new           #55
830: dup
831: invokespecial #56
834: ldc           #57
836: invokevirtual #58
839: iload         29
841: invokevirtual #59
844: ldc           #60
846: invokevirtual #58
849: iconst_0
850: invokevirtual #59
853: ldc           #57
855: invokevirtual #58
858: invokevirtual #61
861: iload         29
863: ifne          870
866: iconst_1
867: goto          871
870: iconst_0
871: invokestatic  #62
874: aload         30
876: invokestatic  #10
879: new           #55
882: dup
883: invokespecial #56
886: ldc           #57
888: invokevirtual #58
891: aload         33
893: invokevirtual #58
896: ldc           #94
898: invokevirtual #58
901: invokevirtual #61
904: aload         33
906: ldc           #95
908: invokestatic  #96
911: aload         34
913: invokestatic  #10
916: new           #55
919: dup
920: invokespecial #56
923: ldc           #57
925: invokevirtual #58
928: iload         36
930: invokevirtual #59
933: ldc           #60
935: invokevirtual #58
938: iconst_0
939: invokevirtual #59
942: ldc           #57
944: invokevirtual #58
947: invokevirtual #61
950: iload         36
952: ifne          959
955: iconst_1
956: goto          960
959: iconst_0
960: invokestatic  #62
963: aload         37
965: invokestatic  #10
968: aload         38
970: invokestatic  #10
973: new           #55
976: dup
977: invokespecial #56
980: ldc           #57
982: invokevirtual #58
985: iload         40
987: invokevirtual #59
990: ldc           #60
992: invokevirtual #58
995: iconst_0
996: invokevirtual #59
999: ldc           #57
1001: invokevirtual #58
1004: invokevirtual #61
1007: iload         40
1009: ifne          1016
1012: iconst_1
1013: goto          1017
1016: iconst_0
1017: invokestatic  #62
1020: aload         41
1022: invokestatic  #10
1025: aload         42
1027: invokestatic  #10
1030: aload         43
1032: invokestatic  #10
1035: new           #55
1038: dup
1039: invokespecial #56
1042: ldc           #57
1044: invokevirtual #58
1047: iload         45
1049: invokevirtual #59
1052: ldc           #60
1054: invokevirtual #58
1057: iconst_0
1058: invokevirtual #59
1061: ldc           #57
1063: invokevirtual #58
1066: invokevirtual #61
1069: iload         45
1071: ifne          1078
1074: iconst_1
1075: goto          1079
1078: iconst_0
1079: invokestatic  #62
1082: aload         49
1084: invokestatic  #10
1087: aload         50
1089: invokestatic  #10
1092: aload         51
1094: invokestatic  #10
1097: aload         52
1099: invokestatic  #10
1102: aload         53
1104: invokestatic  #10
1107: aload         54
1109: invokestatic  #10
1112: aload         55
1114: invokestatic  #10
1117: aload         57
1119: invokestatic  #10
1122: new           #55
1125: dup
1126: invokespecial #56
1129: ldc           #57
1131: invokevirtual #58
1134: iload         58
1136: invokevirtual #97
1139: ldc           #60
1141: invokevirtual #58
1144: iconst_1
1145: invokevirtual #97
1148: ldc           #57
1150: invokevirtual #58
1153: invokevirtual #61
1156: iload         58
1158: iconst_1
1159: if_icmpne     1166
1162: iconst_1
1163: goto          1167
1166: iconst_0
1167: invokestatic  #62
1170: aload         60
1172: invokestatic  #10
1175: aload         61
1177: invokestatic  #10
1180: aload         62
1182: invokestatic  #10
1185: new           #55
1188: dup
1189: invokespecial #56
1192: ldc           #57
1194: invokevirtual #58
1197: iload         67
1199: invokevirtual #59
1202: ldc           #60
1204: invokevirtual #58
1207: iconst_0
1208: invokevirtual #59
1211: ldc           #57
1213: invokevirtual #58
1216: invokevirtual #61
1219: iload         67
1221: ifne          1228
1224: iconst_1
1225: goto          1229
1228: iconst_0
1229: invokestatic  #62
1232: aload         70
1234: invokestatic  #10
1237: aload         71
1239: invokestatic  #10
1242: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test186
Start line: 7235
End line: 7255
Method source code: 
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatterBuilder10.toFormatter();
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatter11.getPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodPrinter12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #617
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #161
83: astore        8
85: aload         8
87: invokevirtual #90
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test187
Start line: 7258
End line: 7272
Method source code: 
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.rejectSignedValues(true);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #618
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: iconst_1
59: invokevirtual #108
62: astore        6
64: aload_2
65: invokestatic  #10
68: aload_3
69: invokestatic  #10
72: aload         4
74: invokestatic  #10
77: aload         5
79: invokestatic  #10
82: aload         6
84: invokestatic  #10
87: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test188
Start line: 7275
End line: 7331
Method source code: 
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        periodFormatterBuilder4.clear();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatterBuilder4.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal11 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter14.isParser();
        org.joda.time.format.PeriodParser periodParser16 = periodFormatter14.getParser();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType25 = org.joda.time.DateTimeUtils.getPeriodType(periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period(100L, (long) (short) -1, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        boolean boolean28 = periodType24.isSupported(durationFieldType27);
        mutablePeriod21.add(durationFieldType27, (int) (byte) 100);
        java.lang.String str31 = mutablePeriod21.toString();
        java.util.Locale locale34 = null;
        int int35 = periodParser16.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod21, "weekyear", (int) '#', locale34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder4.append((org.joda.time.format.PeriodPrinter) literal11, periodParser16);
        org.joda.time.format.PeriodParser periodParser37 = periodFormatterBuilder36.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder39 = periodFormatterBuilder36.rejectSignedValues(false);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodParser16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P100W" + "'", str31, "P100W");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-36) + "'", int35 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodParser37);
        org.junit.Assert.assertNotNull(periodFormatterBuilder39);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #619
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: invokevirtual #212
73: aload         4
75: invokevirtual #161
78: astore        7
80: new           #392
83: dup
84: ldc           #74
86: invokespecial #393
89: astore        8
91: invokestatic  #12
94: astore        9
96: aconst_null
97: astore        10
99: aload         9
101: aload         10
103: invokevirtual #88
106: astore        11
108: aload         11
110: invokevirtual #89
113: istore        12
115: aload         11
117: invokevirtual #119
120: astore        13
122: getstatic     #8
125: astore        14
127: aload         14
129: invokevirtual #216
132: istore        15
134: aload         14
136: iconst_0
137: invokevirtual #200
140: astore        16
142: aload         16
144: invokevirtual #205
147: astore        17
149: invokestatic  #171
152: astore        18
154: aload         18
156: invokestatic  #172
159: astore        19
161: new           #46
164: dup
165: ldc2_w        #79
168: ldc2_w        #173
171: aload         18
173: invokespecial #175
176: astore        20
178: invokestatic  #176
181: astore        21
183: aload         18
185: aload         21
187: invokevirtual #177
190: istore        22
192: aload         17
194: aload         21
196: bipush        100
198: invokevirtual #226
201: aload         17
203: invokevirtual #235
206: astore        23
208: aconst_null
209: astore        24
211: aload         13
213: aload         17
215: ldc           #135
217: bipush        35
219: aload         24
221: invokeinterface #231,  5
226: istore        25
228: aload         4
230: aload         8
232: aload         13
234: invokevirtual #87
237: astore        26
239: aload         26
241: invokevirtual #142
244: astore        27
246: aload         26
248: iconst_0
249: invokevirtual #108
252: astore        28
254: aload_2
255: invokestatic  #10
258: aload_3
259: invokestatic  #10
262: aload         4
264: invokestatic  #10
267: aload         5
269: invokestatic  #10
272: aload         6
274: invokestatic  #10
277: aload         7
279: invokestatic  #10
282: aload         9
284: invokestatic  #10
287: aload         11
289: invokestatic  #10
292: new           #55
295: dup
296: invokespecial #56
299: ldc           #57
301: invokevirtual #58
304: iload         12
306: invokevirtual #97
309: ldc           #60
311: invokevirtual #58
314: iconst_1
315: invokevirtual #97
318: ldc           #57
320: invokevirtual #58
323: invokevirtual #61
326: iload         12
328: iconst_1
329: if_icmpne     336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #62
340: aload         13
342: invokestatic  #10
345: aload         14
347: invokestatic  #10
350: new           #55
353: dup
354: invokespecial #56
357: ldc           #57
359: invokevirtual #58
362: iload         15
364: invokevirtual #59
367: ldc           #60
369: invokevirtual #58
372: iconst_0
373: invokevirtual #59
376: ldc           #57
378: invokevirtual #58
381: invokevirtual #61
384: iload         15
386: ifne          393
389: iconst_1
390: goto          394
393: iconst_0
394: invokestatic  #62
397: aload         16
399: invokestatic  #10
402: aload         17
404: invokestatic  #10
407: aload         18
409: invokestatic  #10
412: aload         19
414: invokestatic  #10
417: aload         21
419: invokestatic  #10
422: new           #55
425: dup
426: invokespecial #56
429: ldc           #57
431: invokevirtual #58
434: iload         22
436: invokevirtual #97
439: ldc           #60
441: invokevirtual #58
444: iconst_0
445: invokevirtual #97
448: ldc           #57
450: invokevirtual #58
453: invokevirtual #61
456: iload         22
458: ifne          465
461: iconst_1
462: goto          466
465: iconst_0
466: invokestatic  #62
469: new           #55
472: dup
473: invokespecial #56
476: ldc           #57
478: invokevirtual #58
481: aload         23
483: invokevirtual #58
486: ldc           #238
488: invokevirtual #58
491: invokevirtual #61
494: aload         23
496: ldc           #239
498: invokestatic  #96
501: new           #55
504: dup
505: invokespecial #56
508: ldc           #57
510: invokevirtual #58
513: iload         25
515: invokevirtual #59
518: ldc           #60
520: invokevirtual #58
523: bipush        -36
525: invokevirtual #59
528: ldc           #57
530: invokevirtual #58
533: invokevirtual #61
536: iload         25
538: bipush        -36
540: if_icmpne     547
543: iconst_1
544: goto          548
547: iconst_0
548: invokestatic  #62
551: aload         26
553: invokestatic  #10
556: aload         27
558: invokestatic  #10
561: aload         28
563: invokestatic  #10
566: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test189
Start line: 7334
End line: 7390
Method source code: 
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.chrono.ZonedChronology zonedChronology8 = org.joda.time.chrono.ZonedChronology.getInstance(chronology3, dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology8.secondOfDay();
        java.lang.String str10 = zonedChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology8.millisOfSecond();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType18 = periodType17.withMonthsRemoved();
        boolean boolean19 = cachedDateTimeZone16.equals((java.lang.Object) periodType18);
        java.lang.String str21 = cachedDateTimeZone16.getNameKey((long) (short) 1);
        int int23 = cachedDateTimeZone16.getStandardOffset(32284799990L);
        long long25 = cachedDateTimeZone16.previousTransition(0L);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder26.appendSeconds();
        boolean boolean28 = cachedDateTimeZone16.equals((java.lang.Object) periodFormatterBuilder26);
        boolean boolean29 = cachedDateTimeZone16.isFixed();
        org.joda.time.Chronology chronology30 = zonedChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        org.joda.time.DurationField durationField31 = zonedChronology8.seconds();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(zonedChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZonedChronology[ISOChronology[UTC], +10:52]" + "'", str10, "ZonedChronology[ISOChronology[UTC], +10:52]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertNull(str21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 39120000 + "'", int23 == 39120000);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #620
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aconst_null
28: astore_2
29: aload_1
30: aload_2
31: invokestatic  #358
34: astore_3
35: aload_3
36: invokevirtual #359
39: astore        4
41: aload         4
43: invokevirtual #621
46: astore        5
48: aconst_null
49: astore        6
51: aload         6
53: invokestatic  #460
56: astore        7
58: aload         7
60: invokestatic  #461
63: astore        8
65: aload         4
67: aload         8
69: invokestatic  #622
72: astore        9
74: aload         9
76: invokevirtual #623
79: astore        10
81: aload         9
83: invokevirtual #624
86: astore        11
88: aload         9
90: invokevirtual #625
93: astore        12
95: aload         9
97: invokevirtual #626
100: astore        13
102: aconst_null
103: astore        14
105: aload         14
107: invokestatic  #460
110: astore        15
112: aload         15
114: invokestatic  #461
117: astore        16
119: aload         16
121: invokestatic  #462
124: astore        17
126: invokestatic  #463
129: astore        18
131: aload         18
133: invokevirtual #464
136: astore        19
138: aload         17
140: aload         19
142: invokevirtual #465
145: istore        20
147: aload         17
149: lconst_1
150: invokevirtual #466
153: astore        21
155: aload         17
157: ldc2_w        #467
160: invokevirtual #469
163: istore        22
165: aload         17
167: lconst_0
168: invokevirtual #470
171: lstore        23
173: new           #14
176: dup
177: invokespecial #15
180: astore        25
182: aload         25
184: invokevirtual #320
187: astore        26
189: aload         17
191: aload         25
193: invokevirtual #465
196: istore        27
198: aload         17
200: invokevirtual #627
203: istore        28
205: aload         9
207: aload         17
209: invokevirtual #628
212: astore        29
214: aload         9
216: invokevirtual #629
219: astore        30
221: aload_3
222: invokestatic  #10
225: aload         4
227: invokestatic  #10
230: aload         5
232: invokestatic  #10
235: aload         7
237: invokestatic  #10
240: aload         8
242: invokestatic  #10
245: aload         9
247: invokestatic  #10
250: aload         10
252: invokestatic  #10
255: aload         12
257: invokestatic  #10
260: aload         13
262: invokestatic  #10
265: aload         15
267: invokestatic  #10
270: aload         16
272: invokestatic  #10
275: aload         17
277: invokestatic  #10
280: aload         18
282: invokestatic  #10
285: aload         19
287: invokestatic  #10
290: new           #55
293: dup
294: invokespecial #56
297: ldc           #57
299: invokevirtual #58
302: iload         20
304: invokevirtual #97
307: ldc           #60
309: invokevirtual #58
312: iconst_0
313: invokevirtual #97
316: ldc           #57
318: invokevirtual #58
321: invokevirtual #61
324: iload         20
326: ifne          333
329: iconst_1
330: goto          334
333: iconst_0
334: invokestatic  #62
337: aload         26
339: invokestatic  #10
342: new           #55
345: dup
346: invokespecial #56
349: ldc           #57
351: invokevirtual #58
354: iload         27
356: invokevirtual #97
359: ldc           #60
361: invokevirtual #58
364: iconst_0
365: invokevirtual #97
368: ldc           #57
370: invokevirtual #58
373: invokevirtual #61
376: iload         27
378: ifne          385
381: iconst_1
382: goto          386
385: iconst_0
386: invokestatic  #62
389: aload         29
391: invokestatic  #10
394: aload         30
396: invokestatic  #10
399: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test190
Start line: 7393
End line: 7415
Method source code: 
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.maximumParsedDigits(0);
        java.lang.String[] strArray17 = new java.lang.String[] { "6", "TimeNoHoursNoMinutes", "2024-05-15T22:13:24.785+10:52", "-677", "65687846-06-10T16:37:58.151+00:00:00.010" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder9.appendSeparator("", "-81", strArray17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #630
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload         6
65: invokevirtual #26
68: astore        7
70: aload         7
72: iconst_0
73: invokevirtual #213
76: astore        8
78: iconst_5
79: anewarray     #99
82: dup
83: iconst_0
84: ldc_w         #631
87: aastore
88: dup
89: iconst_1
90: ldc_w         #632
93: aastore
94: dup
95: iconst_2
96: ldc_w         #633
99: aastore
100: dup
101: iconst_3
102: ldc_w         #634
105: aastore
106: dup
107: iconst_4
108: ldc_w         #635
111: aastore
112: astore        9
114: aload         8
116: ldc           #74
118: ldc_w         #612
121: aload         9
123: invokevirtual #137
126: astore        10
128: aload_2
129: invokestatic  #10
132: aload_3
133: invokestatic  #10
136: aload         4
138: invokestatic  #10
141: aload         5
143: invokestatic  #10
146: aload         6
148: invokestatic  #10
151: aload         7
153: invokestatic  #10
156: aload         8
158: invokestatic  #10
161: aload         9
163: invokestatic  #10
166: aload         10
168: invokestatic  #10
171: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test191
Start line: 7418
End line: 7434
Method source code: 
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendMinutes();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #636
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #39
56: astore        5
58: aload         5
60: invokevirtual #134
63: astore        6
65: aload         6
67: invokevirtual #134
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test192
Start line: 7437
End line: 7458
Method source code: 
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("7968");
        org.joda.time.JodaTimePermission jodaTimePermission3 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSeconds();
        jodaTimePermission3.checkGuard((java.lang.Object) periodFormatterBuilder8);
        boolean boolean13 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission3);
        java.lang.Class<?> wildcardClass14 = jodaTimePermission1.getClass();
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #637
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #379
32: invokespecial #318
35: astore_1
36: new           #316
39: dup
40: ldc_w         #317
43: invokespecial #318
46: astore_2
47: new           #14
50: dup
51: invokespecial #15
54: astore_3
55: aload_3
56: ldc           #16
58: invokevirtual #17
61: astore        4
63: aload_3
64: invokevirtual #25
67: astore        5
69: aload_3
70: invokevirtual #39
73: astore        6
75: aload         6
77: ldc_w         #319
80: invokevirtual #196
83: astore        7
85: aload         6
87: invokevirtual #320
90: astore        8
92: aload_2
93: aload         6
95: invokevirtual #321
98: aload_1
99: aload_2
100: invokevirtual #380
103: istore        9
105: aload_1
106: invokevirtual #259
109: astore        10
111: aload         4
113: invokestatic  #10
116: aload         5
118: invokestatic  #10
121: aload         6
123: invokestatic  #10
126: aload         7
128: invokestatic  #10
131: aload         8
133: invokestatic  #10
136: new           #55
139: dup
140: invokespecial #56
143: ldc           #57
145: invokevirtual #58
148: iload         9
150: invokevirtual #97
153: ldc           #60
155: invokevirtual #58
158: iconst_0
159: invokevirtual #97
162: ldc           #57
164: invokevirtual #58
167: invokevirtual #61
170: iload         9
172: ifne          179
175: iconst_1
176: goto          180
179: iconst_0
180: invokestatic  #62
183: aload         10
185: invokestatic  #10
188: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test193
Start line: 7461
End line: 7479
Method source code: 
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.printZeroRarelyFirst();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #638
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: invokevirtual #185
63: astore        6
65: aload         4
67: invokevirtual #139
70: astore        7
72: aload         4
74: invokevirtual #248
77: astore        8
79: aload_2
80: invokestatic  #10
83: aload_3
84: invokestatic  #10
87: aload         4
89: invokestatic  #10
92: aload         5
94: invokestatic  #10
97: aload         6
99: invokestatic  #10
102: aload         7
104: invokestatic  #10
107: aload         8
109: invokestatic  #10
112: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test194
Start line: 7482
End line: 7593
Method source code: 
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        java.lang.String[] strArray36 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter37 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter37.withLocale(locale38);
        boolean boolean40 = periodFormatter37.isParser();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter37.withLocale(locale41);
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter42.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal44 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology47);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period51 = period48.minusDays((int) (byte) 100);
        java.util.Locale locale53 = null;
        int int54 = literal44.countFieldsToPrint((org.joda.time.ReadablePeriod) period51, 999, locale53);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator57 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray36, periodPrinter43, (org.joda.time.format.PeriodParser) literal44, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder58 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = periodFormatterBuilder58.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter61 = periodFormatterBuilder60.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = periodFormatterBuilder60.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter64 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter64.withLocale(locale65);
        boolean boolean67 = periodFormatter66.isParser();
        java.util.Locale locale68 = null;
        org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter66.withLocale(locale68);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone75 = gregorianChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.yearOfCentury();
        org.joda.time.Period period77 = new org.joda.time.Period((long) '4', 100L, periodType72, (org.joda.time.Chronology) gregorianChronology73);
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter66.withParseType(periodType72);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder60.append(periodFormatter78);
        org.joda.time.format.PeriodParser periodParser80 = periodFormatter78.getParser();
        org.joda.time.format.PeriodFormatterBuilder.Separator separator81 = separator28.finish((org.joda.time.format.PeriodPrinter) literal44, periodParser80);
        java.lang.StringBuffer stringBuffer82 = null;
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology86 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField87 = gregorianChronology86.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone88 = gregorianChronology86.getZone();
        org.joda.time.DateTimeField dateTimeField89 = gregorianChronology86.yearOfCentury();
        org.joda.time.Period period90 = new org.joda.time.Period((long) '4', 100L, periodType85, (org.joda.time.Chronology) gregorianChronology86);
        java.util.Locale locale91 = null;
        // The following exception was thrown during execution in test generation
        try {
            separator81.printTo(stringBuffer82, (org.joda.time.ReadablePeriod) period90, locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodPrinter43);
        org.junit.Assert.assertNotNull(literal44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT-0.090S" + "'", str49, "PT-0.090S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder60);
        org.junit.Assert.assertNotNull(periodPrinter61);
        org.junit.Assert.assertNotNull(periodFormatterBuilder63);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodParser80);
        org.junit.Assert.assertNotNull(separator81);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(gregorianChronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #639
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: iconst_5
171: anewarray     #99
174: dup
175: iconst_0
176: ldc           #100
178: aastore
179: dup
180: iconst_1
181: ldc           #101
183: aastore
184: dup
185: iconst_2
186: ldc           #102
188: aastore
189: dup
190: iconst_3
191: ldc           #103
193: aastore
194: dup
195: iconst_4
196: ldc           #104
198: aastore
199: astore        17
201: invokestatic  #12
204: astore        18
206: aconst_null
207: astore        19
209: aload         18
211: aload         19
213: invokevirtual #88
216: astore        20
218: aload         18
220: invokevirtual #89
223: istore        21
225: aconst_null
226: astore        22
228: aload         18
230: aload         22
232: invokevirtual #88
235: astore        23
237: aload         23
239: invokevirtual #90
242: astore        24
244: getstatic     #78
247: astore        25
249: aconst_null
250: astore        26
252: new           #46
255: dup
256: ldc2_w        #79
259: ldc2_w        #81
262: aload         26
264: invokespecial #83
267: astore        27
269: aload         27
271: invokevirtual #84
274: astore        28
276: aload         27
278: bipush        100
280: invokevirtual #85
283: astore        29
285: aconst_null
286: astore        30
288: aload         25
290: aload         29
292: sipush        999
295: aload         30
297: invokevirtual #86
300: istore        31
302: new           #105
305: dup
306: ldc           #106
308: ldc           #104
310: aload         17
312: aload         24
314: aload         25
316: iconst_0
317: iconst_0
318: invokespecial #107
321: astore        32
323: new           #14
326: dup
327: invokespecial #15
330: astore        33
332: aload         33
334: ldc           #16
336: invokevirtual #17
339: astore        34
341: aload         34
343: invokevirtual #45
346: astore        35
348: aload         34
350: iconst_0
351: invokevirtual #108
354: astore        36
356: invokestatic  #12
359: astore        37
361: aconst_null
362: astore        38
364: aload         37
366: aload         38
368: invokevirtual #88
371: astore        39
373: aload         39
375: invokevirtual #89
378: istore        40
380: aconst_null
381: astore        41
383: aload         39
385: aload         41
387: invokevirtual #88
390: astore        42
392: invokestatic  #109
395: astore        43
397: invokestatic  #110
400: astore        44
402: aload         44
404: invokevirtual #111
407: astore        45
409: aload         44
411: invokevirtual #112
414: astore        46
416: aload         44
418: invokevirtual #113
421: astore        47
423: new           #46
426: dup
427: ldc2_w        #114
430: ldc2_w        #79
433: aload         43
435: aload         44
437: invokespecial #116
440: astore        48
442: aload         39
444: aload         43
446: invokevirtual #117
449: astore        49
451: aload         34
453: aload         49
455: invokevirtual #118
458: astore        50
460: aload         49
462: invokevirtual #119
465: astore        51
467: aload         16
469: aload         25
471: aload         51
473: invokevirtual #120
476: astore        52
478: aconst_null
479: astore        53
481: invokestatic  #109
484: astore        54
486: invokestatic  #110
489: astore        55
491: aload         55
493: invokevirtual #111
496: astore        56
498: aload         55
500: invokevirtual #112
503: astore        57
505: aload         55
507: invokevirtual #113
510: astore        58
512: new           #46
515: dup
516: ldc2_w        #114
519: ldc2_w        #79
522: aload         54
524: aload         55
526: invokespecial #116
529: astore        59
531: aconst_null
532: astore        60
534: aload         52
536: aload         53
538: aload         59
540: aload         60
542: invokevirtual #190
545: ldc           #53
547: invokestatic  #22
550: goto          555
553: astore        61
555: aload_1
556: invokestatic  #10
559: aload_2
560: invokestatic  #10
563: aload         4
565: invokestatic  #10
568: new           #55
571: dup
572: invokespecial #56
575: ldc           #57
577: invokevirtual #58
580: iload         5
582: invokevirtual #97
585: ldc           #60
587: invokevirtual #58
590: iconst_1
591: invokevirtual #97
594: ldc           #57
596: invokevirtual #58
599: invokevirtual #61
602: iload         5
604: iconst_1
605: if_icmpne     612
608: iconst_1
609: goto          613
612: iconst_0
613: invokestatic  #62
616: aload         7
618: invokestatic  #10
621: aload         8
623: invokestatic  #10
626: aload         9
628: invokestatic  #10
631: new           #55
634: dup
635: invokespecial #56
638: ldc           #57
640: invokevirtual #58
643: aload         12
645: invokevirtual #58
648: ldc           #94
650: invokevirtual #58
653: invokevirtual #61
656: aload         12
658: ldc           #95
660: invokestatic  #96
663: aload         13
665: invokestatic  #10
668: new           #55
671: dup
672: invokespecial #56
675: ldc           #57
677: invokevirtual #58
680: iload         15
682: invokevirtual #59
685: ldc           #60
687: invokevirtual #58
690: iconst_0
691: invokevirtual #59
694: ldc           #57
696: invokevirtual #58
699: invokevirtual #61
702: iload         15
704: ifne          711
707: iconst_1
708: goto          712
711: iconst_0
712: invokestatic  #62
715: aload         17
717: invokestatic  #10
720: aload         18
722: invokestatic  #10
725: aload         20
727: invokestatic  #10
730: new           #55
733: dup
734: invokespecial #56
737: ldc           #57
739: invokevirtual #58
742: iload         21
744: invokevirtual #97
747: ldc           #60
749: invokevirtual #58
752: iconst_1
753: invokevirtual #97
756: ldc           #57
758: invokevirtual #58
761: invokevirtual #61
764: iload         21
766: iconst_1
767: if_icmpne     774
770: iconst_1
771: goto          775
774: iconst_0
775: invokestatic  #62
778: aload         23
780: invokestatic  #10
783: aload         24
785: invokestatic  #10
788: aload         25
790: invokestatic  #10
793: new           #55
796: dup
797: invokespecial #56
800: ldc           #57
802: invokevirtual #58
805: aload         28
807: invokevirtual #58
810: ldc           #94
812: invokevirtual #58
815: invokevirtual #61
818: aload         28
820: ldc           #95
822: invokestatic  #96
825: aload         29
827: invokestatic  #10
830: new           #55
833: dup
834: invokespecial #56
837: ldc           #57
839: invokevirtual #58
842: iload         31
844: invokevirtual #59
847: ldc           #60
849: invokevirtual #58
852: iconst_0
853: invokevirtual #59
856: ldc           #57
858: invokevirtual #58
861: invokevirtual #61
864: iload         31
866: ifne          873
869: iconst_1
870: goto          874
873: iconst_0
874: invokestatic  #62
877: aload         34
879: invokestatic  #10
882: aload         35
884: invokestatic  #10
887: aload         36
889: invokestatic  #10
892: aload         37
894: invokestatic  #10
897: aload         39
899: invokestatic  #10
902: new           #55
905: dup
906: invokespecial #56
909: ldc           #57
911: invokevirtual #58
914: iload         40
916: invokevirtual #97
919: ldc           #60
921: invokevirtual #58
924: iconst_1
925: invokevirtual #97
928: ldc           #57
930: invokevirtual #58
933: invokevirtual #61
936: iload         40
938: iconst_1
939: if_icmpne     946
942: iconst_1
943: goto          947
946: iconst_0
947: invokestatic  #62
950: aload         42
952: invokestatic  #10
955: aload         43
957: invokestatic  #10
960: aload         44
962: invokestatic  #10
965: aload         45
967: invokestatic  #10
970: aload         46
972: invokestatic  #10
975: aload         47
977: invokestatic  #10
980: aload         49
982: invokestatic  #10
985: aload         50
987: invokestatic  #10
990: aload         51
992: invokestatic  #10
995: aload         52
997: invokestatic  #10
1000: aload         54
1002: invokestatic  #10
1005: aload         55
1007: invokestatic  #10
1010: aload         56
1012: invokestatic  #10
1015: aload         57
1017: invokestatic  #10
1020: aload         58
1022: invokestatic  #10
1025: return
Exception table:
from    to  target type
534   550   553   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test195
Start line: 7596
End line: 7612
Method source code: 
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #640
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: iconst_0
59: invokevirtual #108
62: astore        6
64: aload         6
66: invokevirtual #77
69: astore        7
71: aload_2
72: invokestatic  #10
75: aload_3
76: invokestatic  #10
79: aload         4
81: invokestatic  #10
84: aload         5
86: invokestatic  #10
89: aload         6
91: invokestatic  #10
94: aload         7
96: invokestatic  #10
99: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test196
Start line: 7615
End line: 7631
Method source code: 
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #641
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         5
60: invokevirtual #134
63: astore        6
65: aload         6
67: invokevirtual #39
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test197
Start line: 7634
End line: 7676
Method source code: 
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodParser periodParser22 = periodFormatter20.getParser();
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter20.withLocale(locale23);
        boolean boolean25 = periodFormatter24.isPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodParser22);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #642
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload         17
157: invokevirtual #119
160: astore        19
162: aconst_null
163: astore        20
165: aload         17
167: aload         20
169: invokevirtual #88
172: astore        21
174: aload         21
176: invokevirtual #234
179: istore        22
181: aload_2
182: invokestatic  #10
185: aload_3
186: invokestatic  #10
189: aload         4
191: invokestatic  #10
194: aload         5
196: invokestatic  #10
199: aload         7
201: invokestatic  #10
204: new           #55
207: dup
208: invokespecial #56
211: ldc           #57
213: invokevirtual #58
216: iload         8
218: invokevirtual #97
221: ldc           #60
223: invokevirtual #58
226: iconst_1
227: invokevirtual #97
230: ldc           #57
232: invokevirtual #58
235: invokevirtual #61
238: iload         8
240: iconst_1
241: if_icmpne     248
244: iconst_1
245: goto          249
248: iconst_0
249: invokestatic  #62
252: aload         10
254: invokestatic  #10
257: aload         11
259: invokestatic  #10
262: aload         12
264: invokestatic  #10
267: aload         13
269: invokestatic  #10
272: aload         14
274: invokestatic  #10
277: aload         15
279: invokestatic  #10
282: aload         17
284: invokestatic  #10
287: aload         18
289: invokestatic  #10
292: aload         19
294: invokestatic  #10
297: aload         21
299: invokestatic  #10
302: new           #55
305: dup
306: invokespecial #56
309: ldc           #57
311: invokevirtual #58
314: iload         22
316: invokevirtual #97
319: ldc           #60
321: invokevirtual #58
324: iconst_1
325: invokevirtual #97
328: ldc           #57
330: invokevirtual #58
333: invokevirtual #61
336: iload         22
338: iconst_1
339: if_icmpne     346
342: iconst_1
343: goto          347
346: iconst_0
347: invokestatic  #62
350: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test198
Start line: 7679
End line: 7699
Method source code: 
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.appendMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #643
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #26
83: astore        8
85: aload         7
87: invokevirtual #39
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test199
Start line: 7702
End line: 7728
Method source code: 
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendPrefix("2777", "DateTimeField[secondOfDay]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType13 = periodFormatter12.getParseType();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder10.append(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNull(periodType13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #644
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         6
74: ldc_w         #288
77: ldc_w         #289
80: invokevirtual #41
83: astore        8
85: aload         8
87: invokevirtual #26
90: astore        9
92: invokestatic  #349
95: astore        10
97: aload         10
99: invokevirtual #350
102: astore        11
104: aload         8
106: aload         10
108: invokevirtual #118
111: astore        12
113: aload_2
114: invokestatic  #10
117: aload_3
118: invokestatic  #10
121: aload         4
123: invokestatic  #10
126: aload         5
128: invokestatic  #10
131: aload         6
133: invokestatic  #10
136: aload         7
138: invokestatic  #10
141: aload         8
143: invokestatic  #10
146: aload         9
148: invokestatic  #10
151: aload         10
153: invokestatic  #10
156: aload         11
158: invokestatic  #354
161: aload         12
163: invokestatic  #10
166: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test200
Start line: 7731
End line: 7759
Method source code: 
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder6.appendSuffix("35313-01-15T11:38:44.842+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder19.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder20.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder21.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #645
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         6
118: invokevirtual #185
121: astore        9
123: aload         6
125: ldc_w         #534
128: invokevirtual #132
131: astore        10
133: aload         10
135: invokevirtual #25
138: astore        11
140: aload         11
142: invokevirtual #149
145: astore        12
147: aload         12
149: invokevirtual #26
152: astore        13
154: aload_2
155: invokestatic  #10
158: aload_3
159: invokestatic  #10
162: aload         4
164: invokestatic  #10
167: aload         5
169: invokestatic  #10
172: aload         6
174: invokestatic  #10
177: aload         7
179: invokestatic  #10
182: aload         8
184: invokestatic  #10
187: aload         9
189: invokestatic  #10
192: aload         10
194: invokestatic  #10
197: aload         11
199: invokestatic  #10
202: aload         12
204: invokestatic  #10
207: aload         13
209: invokestatic  #10
212: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test201
Start line: 7762
End line: 7789
Method source code: 
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("3354");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder8.appendSeparator("-894", "PT0S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #646
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         7
74: invokevirtual #245
77: astore        8
79: aload         8
81: ldc_w         #647
84: invokevirtual #17
87: astore        9
89: aload         8
91: ldc_w         #486
94: ldc_w         #648
97: invokevirtual #20
100: astore        10
102: ldc           #21
104: invokestatic  #22
107: goto          112
110: astore        10
112: aload_2
113: invokestatic  #10
116: aload_3
117: invokestatic  #10
120: aload         4
122: invokestatic  #10
125: aload         5
127: invokestatic  #10
130: aload         6
132: invokestatic  #10
135: aload         7
137: invokestatic  #10
140: aload         8
142: invokestatic  #10
145: aload         9
147: invokestatic  #10
150: return
Exception table:
from    to  target type
89   107   110   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test202
Start line: 7792
End line: 7895
Method source code: 
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.joda.time.format.PeriodFormatterBuilder.Literal literal1 = new org.joda.time.format.PeriodFormatterBuilder.Literal("2024-05-15T12:20:04.872+00:00:00.010/2024-05-15T12:20:04.872+00:00:00.010");
        java.lang.String[] strArray9 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter10.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter10.withLocale(locale14);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter15.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal17 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology20);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period24 = period21.minusDays((int) (byte) 100);
        java.util.Locale locale26 = null;
        int int27 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) period24, 999, locale26);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator30 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray9, periodPrinter16, (org.joda.time.format.PeriodParser) literal17, false, false);
        java.lang.String[] strArray38 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter39.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter39.withLocale(locale43);
        org.joda.time.format.PeriodPrinter periodPrinter45 = periodFormatter44.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal46 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology49);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period53 = period50.minusDays((int) (byte) 100);
        java.util.Locale locale55 = null;
        int int56 = literal46.countFieldsToPrint((org.joda.time.ReadablePeriod) period53, 999, locale55);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator59 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray38, periodPrinter45, (org.joda.time.format.PeriodParser) literal46, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder62 = periodFormatterBuilder60.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter63 = periodFormatterBuilder62.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder65 = periodFormatterBuilder62.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter66 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale67 = null;
        org.joda.time.format.PeriodFormatter periodFormatter68 = periodFormatter66.withLocale(locale67);
        boolean boolean69 = periodFormatter68.isParser();
        java.util.Locale locale70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter68.withLocale(locale70);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology75 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology75.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone77 = gregorianChronology75.getZone();
        org.joda.time.DateTimeField dateTimeField78 = gregorianChronology75.yearOfCentury();
        org.joda.time.Period period79 = new org.joda.time.Period((long) '4', 100L, periodType74, (org.joda.time.Chronology) gregorianChronology75);
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter68.withParseType(periodType74);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder81 = periodFormatterBuilder62.append(periodFormatter80);
        org.joda.time.format.PeriodParser periodParser82 = periodFormatter80.getParser();
        org.joda.time.format.PeriodFormatterBuilder.Separator separator83 = separator30.finish((org.joda.time.format.PeriodPrinter) literal46, periodParser82);
        org.joda.time.format.PeriodFormatter periodFormatter84 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal1, (org.joda.time.format.PeriodParser) separator30);
        java.lang.StringBuffer stringBuffer85 = null;
        org.joda.time.ReadablePeriod readablePeriod86 = null;
        java.util.Locale locale87 = null;
        // The following exception was thrown during execution in test generation
        try {
            separator30.printTo(stringBuffer85, readablePeriod86, locale87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodPrinter16);
        org.junit.Assert.assertNotNull(literal17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-0.090S" + "'", str22, "PT-0.090S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodPrinter45);
        org.junit.Assert.assertNotNull(literal46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT-0.090S" + "'", str51, "PT-0.090S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder62);
        org.junit.Assert.assertNotNull(periodPrinter63);
        org.junit.Assert.assertNotNull(periodFormatterBuilder65);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertNotNull(periodFormatter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(gregorianChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNotNull(periodFormatterBuilder81);
        org.junit.Assert.assertNotNull(periodParser82);
        org.junit.Assert.assertNotNull(separator83);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #649
20: aastore
21: invokevirtual #7
24: pop
25: new           #392
28: dup
29: ldc_w         #650
32: invokespecial #393
35: astore_1
36: iconst_5
37: anewarray     #99
40: dup
41: iconst_0
42: ldc           #100
44: aastore
45: dup
46: iconst_1
47: ldc           #101
49: aastore
50: dup
51: iconst_2
52: ldc           #102
54: aastore
55: dup
56: iconst_3
57: ldc           #103
59: aastore
60: dup
61: iconst_4
62: ldc           #104
64: aastore
65: astore_2
66: invokestatic  #12
69: astore_3
70: aconst_null
71: astore        4
73: aload_3
74: aload         4
76: invokevirtual #88
79: astore        5
81: aload_3
82: invokevirtual #89
85: istore        6
87: aconst_null
88: astore        7
90: aload_3
91: aload         7
93: invokevirtual #88
96: astore        8
98: aload         8
100: invokevirtual #90
103: astore        9
105: getstatic     #78
108: astore        10
110: aconst_null
111: astore        11
113: new           #46
116: dup
117: ldc2_w        #79
120: ldc2_w        #81
123: aload         11
125: invokespecial #83
128: astore        12
130: aload         12
132: invokevirtual #84
135: astore        13
137: aload         12
139: bipush        100
141: invokevirtual #85
144: astore        14
146: aconst_null
147: astore        15
149: aload         10
151: aload         14
153: sipush        999
156: aload         15
158: invokevirtual #86
161: istore        16
163: new           #105
166: dup
167: ldc           #106
169: ldc           #104
171: aload_2
172: aload         9
174: aload         10
176: iconst_0
177: iconst_0
178: invokespecial #107
181: astore        17
183: iconst_5
184: anewarray     #99
187: dup
188: iconst_0
189: ldc           #100
191: aastore
192: dup
193: iconst_1
194: ldc           #101
196: aastore
197: dup
198: iconst_2
199: ldc           #102
201: aastore
202: dup
203: iconst_3
204: ldc           #103
206: aastore
207: dup
208: iconst_4
209: ldc           #104
211: aastore
212: astore        18
214: invokestatic  #12
217: astore        19
219: aconst_null
220: astore        20
222: aload         19
224: aload         20
226: invokevirtual #88
229: astore        21
231: aload         19
233: invokevirtual #89
236: istore        22
238: aconst_null
239: astore        23
241: aload         19
243: aload         23
245: invokevirtual #88
248: astore        24
250: aload         24
252: invokevirtual #90
255: astore        25
257: getstatic     #78
260: astore        26
262: aconst_null
263: astore        27
265: new           #46
268: dup
269: ldc2_w        #79
272: ldc2_w        #81
275: aload         27
277: invokespecial #83
280: astore        28
282: aload         28
284: invokevirtual #84
287: astore        29
289: aload         28
291: bipush        100
293: invokevirtual #85
296: astore        30
298: aconst_null
299: astore        31
301: aload         26
303: aload         30
305: sipush        999
308: aload         31
310: invokevirtual #86
313: istore        32
315: new           #105
318: dup
319: ldc           #106
321: ldc           #104
323: aload         18
325: aload         25
327: aload         26
329: iconst_0
330: iconst_0
331: invokespecial #107
334: astore        33
336: new           #14
339: dup
340: invokespecial #15
343: astore        34
345: aload         34
347: ldc           #16
349: invokevirtual #17
352: astore        35
354: aload         35
356: invokevirtual #45
359: astore        36
361: aload         35
363: iconst_0
364: invokevirtual #108
367: astore        37
369: invokestatic  #12
372: astore        38
374: aconst_null
375: astore        39
377: aload         38
379: aload         39
381: invokevirtual #88
384: astore        40
386: aload         40
388: invokevirtual #89
391: istore        41
393: aconst_null
394: astore        42
396: aload         40
398: aload         42
400: invokevirtual #88
403: astore        43
405: invokestatic  #109
408: astore        44
410: invokestatic  #110
413: astore        45
415: aload         45
417: invokevirtual #111
420: astore        46
422: aload         45
424: invokevirtual #112
427: astore        47
429: aload         45
431: invokevirtual #113
434: astore        48
436: new           #46
439: dup
440: ldc2_w        #114
443: ldc2_w        #79
446: aload         44
448: aload         45
450: invokespecial #116
453: astore        49
455: aload         40
457: aload         44
459: invokevirtual #117
462: astore        50
464: aload         35
466: aload         50
468: invokevirtual #118
471: astore        51
473: aload         50
475: invokevirtual #119
478: astore        52
480: aload         17
482: aload         26
484: aload         52
486: invokevirtual #120
489: astore        53
491: new           #164
494: dup
495: aload_1
496: aload         17
498: invokespecial #165
501: astore        54
503: aconst_null
504: astore        55
506: aconst_null
507: astore        56
509: aconst_null
510: astore        57
512: aload         17
514: aload         55
516: aload         56
518: aload         57
520: invokevirtual #190
523: ldc           #53
525: invokestatic  #22
528: goto          533
531: astore        58
533: aload_2
534: invokestatic  #10
537: aload_3
538: invokestatic  #10
541: aload         5
543: invokestatic  #10
546: new           #55
549: dup
550: invokespecial #56
553: ldc           #57
555: invokevirtual #58
558: iload         6
560: invokevirtual #97
563: ldc           #60
565: invokevirtual #58
568: iconst_1
569: invokevirtual #97
572: ldc           #57
574: invokevirtual #58
577: invokevirtual #61
580: iload         6
582: iconst_1
583: if_icmpne     590
586: iconst_1
587: goto          591
590: iconst_0
591: invokestatic  #62
594: aload         8
596: invokestatic  #10
599: aload         9
601: invokestatic  #10
604: aload         10
606: invokestatic  #10
609: new           #55
612: dup
613: invokespecial #56
616: ldc           #57
618: invokevirtual #58
621: aload         13
623: invokevirtual #58
626: ldc           #94
628: invokevirtual #58
631: invokevirtual #61
634: aload         13
636: ldc           #95
638: invokestatic  #96
641: aload         14
643: invokestatic  #10
646: new           #55
649: dup
650: invokespecial #56
653: ldc           #57
655: invokevirtual #58
658: iload         16
660: invokevirtual #59
663: ldc           #60
665: invokevirtual #58
668: iconst_0
669: invokevirtual #59
672: ldc           #57
674: invokevirtual #58
677: invokevirtual #61
680: iload         16
682: ifne          689
685: iconst_1
686: goto          690
689: iconst_0
690: invokestatic  #62
693: aload         18
695: invokestatic  #10
698: aload         19
700: invokestatic  #10
703: aload         21
705: invokestatic  #10
708: new           #55
711: dup
712: invokespecial #56
715: ldc           #57
717: invokevirtual #58
720: iload         22
722: invokevirtual #97
725: ldc           #60
727: invokevirtual #58
730: iconst_1
731: invokevirtual #97
734: ldc           #57
736: invokevirtual #58
739: invokevirtual #61
742: iload         22
744: iconst_1
745: if_icmpne     752
748: iconst_1
749: goto          753
752: iconst_0
753: invokestatic  #62
756: aload         24
758: invokestatic  #10
761: aload         25
763: invokestatic  #10
766: aload         26
768: invokestatic  #10
771: new           #55
774: dup
775: invokespecial #56
778: ldc           #57
780: invokevirtual #58
783: aload         29
785: invokevirtual #58
788: ldc           #94
790: invokevirtual #58
793: invokevirtual #61
796: aload         29
798: ldc           #95
800: invokestatic  #96
803: aload         30
805: invokestatic  #10
808: new           #55
811: dup
812: invokespecial #56
815: ldc           #57
817: invokevirtual #58
820: iload         32
822: invokevirtual #59
825: ldc           #60
827: invokevirtual #58
830: iconst_0
831: invokevirtual #59
834: ldc           #57
836: invokevirtual #58
839: invokevirtual #61
842: iload         32
844: ifne          851
847: iconst_1
848: goto          852
851: iconst_0
852: invokestatic  #62
855: aload         35
857: invokestatic  #10
860: aload         36
862: invokestatic  #10
865: aload         37
867: invokestatic  #10
870: aload         38
872: invokestatic  #10
875: aload         40
877: invokestatic  #10
880: new           #55
883: dup
884: invokespecial #56
887: ldc           #57
889: invokevirtual #58
892: iload         41
894: invokevirtual #97
897: ldc           #60
899: invokevirtual #58
902: iconst_1
903: invokevirtual #97
906: ldc           #57
908: invokevirtual #58
911: invokevirtual #61
914: iload         41
916: iconst_1
917: if_icmpne     924
920: iconst_1
921: goto          925
924: iconst_0
925: invokestatic  #62
928: aload         43
930: invokestatic  #10
933: aload         44
935: invokestatic  #10
938: aload         45
940: invokestatic  #10
943: aload         46
945: invokestatic  #10
948: aload         47
950: invokestatic  #10
953: aload         48
955: invokestatic  #10
958: aload         50
960: invokestatic  #10
963: aload         51
965: invokestatic  #10
968: aload         52
970: invokestatic  #10
973: aload         53
975: invokestatic  #10
978: return
Exception table:
from    to  target type
512   528   531   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test203
Start line: 7898
End line: 7991
Method source code: 
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.maximumParsedDigits((-24));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder7.appendPrefix("350");
        org.joda.time.format.PeriodPrinter periodPrinter13 = periodFormatterBuilder7.toPrinter();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology16);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period20 = period17.minusDays((int) (byte) 100);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = period21.get(durationFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period28 = period21.withField(durationFieldType26, 8);
        org.joda.time.Period period30 = period20.withField(durationFieldType26, (-1));
        int int31 = period30.getMillis();
        org.joda.time.Period period33 = org.joda.time.Period.weeks((int) '#');
        org.joda.time.Period period35 = org.joda.time.Period.millis(1);
        int int36 = period35.getMonths();
        int int37 = period35.size();
        org.joda.time.Period period39 = period35.withDays((int) (byte) 100);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType43 = null;
        int int44 = period40.get(durationFieldType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period47 = period40.withField(durationFieldType45, 8);
        java.lang.String str48 = durationFieldType45.getName();
        org.joda.time.Period period50 = period35.withField(durationFieldType45, 1);
        org.joda.time.Period period52 = period35.minusDays(10);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Chronology chronology56 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant54, readableInstant55);
        org.joda.time.Chronology chronology57 = chronology56.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology56.weekyear();
        boolean boolean59 = durationFieldType53.isSupported(chronology56);
        boolean boolean60 = period52.isSupported(durationFieldType53);
        org.joda.time.Period period62 = period33.withFieldAdded(durationFieldType53, 0);
        org.joda.time.Period period63 = period30.minus((org.joda.time.ReadablePeriod) period33);
        java.util.Locale locale64 = null;
        int int65 = periodPrinter13.calculatePrintedLength((org.joda.time.ReadablePeriod) period30, locale64);
        org.joda.time.Period period67 = period30.minusMillis(0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodPrinter13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT-0.090S" + "'", str18, "PT-0.090S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-90) + "'", int31 == (-90));
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "seconds" + "'", str48, "seconds");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 87 + "'", int65 == 87);
        org.junit.Assert.assertNotNull(period67);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #651
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: ldc           #184
61: invokevirtual #28
64: astore        6
66: aload         6
68: invokevirtual #185
71: astore        7
73: aload         6
75: bipush        -24
77: invokevirtual #213
80: astore        8
82: aload         6
84: ldc_w         #652
87: invokevirtual #196
90: astore        9
92: aload         6
94: invokevirtual #45
97: astore        10
99: aconst_null
100: astore        11
102: new           #46
105: dup
106: ldc2_w        #79
109: ldc2_w        #81
112: aload         11
114: invokespecial #83
117: astore        12
119: aload         12
121: invokevirtual #84
124: astore        13
126: aload         12
128: bipush        100
130: invokevirtual #85
133: astore        14
135: getstatic     #8
138: astore        15
140: aload         15
142: iconst_m1
143: invokevirtual #9
146: astore        16
148: aconst_null
149: astore        17
151: aload         15
153: aload         17
155: invokevirtual #201
158: istore        18
160: invokestatic  #202
163: astore        19
165: aload         15
167: aload         19
169: bipush        8
171: invokevirtual #203
174: astore        20
176: aload         14
178: aload         19
180: iconst_m1
181: invokevirtual #203
184: astore        21
186: aload         21
188: invokevirtual #417
191: istore        22
193: bipush        35
195: invokestatic  #653
198: astore        23
200: iconst_1
201: invokestatic  #168
204: astore        24
206: aload         24
208: invokevirtual #169
211: istore        25
213: aload         24
215: invokevirtual #170
218: istore        26
220: aload         24
222: bipush        100
224: invokevirtual #200
227: astore        27
229: getstatic     #8
232: astore        28
234: aload         28
236: iconst_m1
237: invokevirtual #9
240: astore        29
242: aconst_null
243: astore        30
245: aload         28
247: aload         30
249: invokevirtual #201
252: istore        31
254: invokestatic  #202
257: astore        32
259: aload         28
261: aload         32
263: bipush        8
265: invokevirtual #203
268: astore        33
270: aload         32
272: invokevirtual #204
275: astore        34
277: aload         24
279: aload         32
281: iconst_1
282: invokevirtual #203
285: astore        35
287: aload         24
289: bipush        10
291: invokevirtual #85
294: astore        36
296: invokestatic  #202
299: astore        37
301: aconst_null
302: astore        38
304: aconst_null
305: astore        39
307: aload         38
309: aload         39
311: invokestatic  #358
314: astore        40
316: aload         40
318: invokevirtual #359
321: astore        41
323: aload         40
325: invokevirtual #654
328: astore        42
330: aload         37
332: aload         40
334: invokevirtual #655
337: istore        43
339: aload         36
341: aload         37
343: invokevirtual #656
346: istore        44
348: aload         23
350: aload         37
352: iconst_0
353: invokevirtual #586
356: astore        45
358: aload         21
360: aload         23
362: invokevirtual #657
365: astore        46
367: aconst_null
368: astore        47
370: aload         10
372: aload         21
374: aload         47
376: invokeinterface #92,  3
381: istore        48
383: aload         21
385: iconst_0
386: invokevirtual #658
389: astore        49
391: aload_2
392: invokestatic  #10
395: aload_3
396: invokestatic  #10
399: aload         4
401: invokestatic  #10
404: aload         5
406: invokestatic  #10
409: aload         6
411: invokestatic  #10
414: aload         7
416: invokestatic  #10
419: aload         8
421: invokestatic  #10
424: aload         9
426: invokestatic  #10
429: aload         10
431: invokestatic  #10
434: new           #55
437: dup
438: invokespecial #56
441: ldc           #57
443: invokevirtual #58
446: aload         13
448: invokevirtual #58
451: ldc           #94
453: invokevirtual #58
456: invokevirtual #61
459: aload         13
461: ldc           #95
463: invokestatic  #96
466: aload         14
468: invokestatic  #10
471: aload         15
473: invokestatic  #10
476: aload         16
478: invokestatic  #10
481: new           #55
484: dup
485: invokespecial #56
488: ldc           #57
490: invokevirtual #58
493: iload         18
495: invokevirtual #59
498: ldc           #60
500: invokevirtual #58
503: iconst_0
504: invokevirtual #59
507: ldc           #57
509: invokevirtual #58
512: invokevirtual #61
515: iload         18
517: ifne          524
520: iconst_1
521: goto          525
524: iconst_0
525: invokestatic  #62
528: aload         19
530: invokestatic  #10
533: aload         20
535: invokestatic  #10
538: aload         21
540: invokestatic  #10
543: new           #55
546: dup
547: invokespecial #56
550: ldc           #57
552: invokevirtual #58
555: iload         22
557: invokevirtual #59
560: ldc           #60
562: invokevirtual #58
565: bipush        -90
567: invokevirtual #59
570: ldc           #57
572: invokevirtual #58
575: invokevirtual #61
578: iload         22
580: bipush        -90
582: if_icmpne     589
585: iconst_1
586: goto          590
589: iconst_0
590: invokestatic  #62
593: aload         23
595: invokestatic  #10
598: aload         24
600: invokestatic  #10
603: new           #55
606: dup
607: invokespecial #56
610: ldc           #57
612: invokevirtual #58
615: iload         25
617: invokevirtual #59
620: ldc           #60
622: invokevirtual #58
625: iconst_0
626: invokevirtual #59
629: ldc           #57
631: invokevirtual #58
634: invokevirtual #61
637: iload         25
639: ifne          646
642: iconst_1
643: goto          647
646: iconst_0
647: invokestatic  #62
650: new           #55
653: dup
654: invokespecial #56
657: ldc           #57
659: invokevirtual #58
662: iload         26
664: invokevirtual #59
667: ldc           #60
669: invokevirtual #58
672: bipush        8
674: invokevirtual #59
677: ldc           #57
679: invokevirtual #58
682: invokevirtual #61
685: iload         26
687: bipush        8
689: if_icmpne     696
692: iconst_1
693: goto          697
696: iconst_0
697: invokestatic  #62
700: aload         27
702: invokestatic  #10
705: aload         28
707: invokestatic  #10
710: aload         29
712: invokestatic  #10
715: new           #55
718: dup
719: invokespecial #56
722: ldc           #57
724: invokevirtual #58
727: iload         31
729: invokevirtual #59
732: ldc           #60
734: invokevirtual #58
737: iconst_0
738: invokevirtual #59
741: ldc           #57
743: invokevirtual #58
746: invokevirtual #61
749: iload         31
751: ifne          758
754: iconst_1
755: goto          759
758: iconst_0
759: invokestatic  #62
762: aload         32
764: invokestatic  #10
767: aload         33
769: invokestatic  #10
772: new           #55
775: dup
776: invokespecial #56
779: ldc           #57
781: invokevirtual #58
784: aload         34
786: invokevirtual #58
789: ldc           #209
791: invokevirtual #58
794: invokevirtual #61
797: aload         34
799: ldc           #210
801: invokestatic  #96
804: aload         35
806: invokestatic  #10
809: aload         36
811: invokestatic  #10
814: aload         37
816: invokestatic  #10
819: aload         40
821: invokestatic  #10
824: aload         41
826: invokestatic  #10
829: aload         42
831: invokestatic  #10
834: new           #55
837: dup
838: invokespecial #56
841: ldc           #57
843: invokevirtual #58
846: iload         43
848: invokevirtual #97
851: ldc           #60
853: invokevirtual #58
856: iconst_1
857: invokevirtual #97
860: ldc           #57
862: invokevirtual #58
865: invokevirtual #61
868: iload         43
870: iconst_1
871: if_icmpne     878
874: iconst_1
875: goto          879
878: iconst_0
879: invokestatic  #62
882: new           #55
885: dup
886: invokespecial #56
889: ldc           #57
891: invokevirtual #58
894: iload         44
896: invokevirtual #97
899: ldc           #60
901: invokevirtual #58
904: iconst_1
905: invokevirtual #97
908: ldc           #57
910: invokevirtual #58
913: invokevirtual #61
916: iload         44
918: iconst_1
919: if_icmpne     926
922: iconst_1
923: goto          927
926: iconst_0
927: invokestatic  #62
930: aload         45
932: invokestatic  #10
935: aload         46
937: invokestatic  #10
940: new           #55
943: dup
944: invokespecial #56
947: ldc           #57
949: invokevirtual #58
952: iload         48
954: invokevirtual #59
957: ldc           #60
959: invokevirtual #58
962: bipush        87
964: invokevirtual #59
967: ldc           #57
969: invokevirtual #58
972: invokevirtual #61
975: iload         48
977: bipush        87
979: if_icmpne     986
982: iconst_1
983: goto          987
986: iconst_0
987: invokestatic  #62
990: aload         49
992: invokestatic  #10
995: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test204
Start line: 7994
End line: 8080
Method source code: 
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter12.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.append(periodFormatter15);
        java.util.Locale locale17 = periodFormatter15.getLocale();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = period18.get(durationFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period25 = period18.withField(durationFieldType23, 8);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period25.toDurationTo(readableInstant26);
        org.joda.time.Period period29 = period25.minusYears((int) (short) 10);
        org.joda.time.Period period31 = period29.minusSeconds(2922790);
        java.lang.String str32 = periodFormatter15.print((org.joda.time.ReadablePeriod) period31);
        org.joda.time.format.PeriodFormatter periodFormatter33 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale34 = null;
        org.joda.time.format.PeriodFormatter periodFormatter35 = periodFormatter33.withLocale(locale34);
        boolean boolean36 = periodFormatter35.isParser();
        java.util.Locale locale37 = null;
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter35.withLocale(locale37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology42 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField43 = gregorianChronology42.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone44 = gregorianChronology42.getZone();
        org.joda.time.DateTimeField dateTimeField45 = gregorianChronology42.yearOfCentury();
        org.joda.time.Period period46 = new org.joda.time.Period((long) '4', 100L, periodType41, (org.joda.time.Chronology) gregorianChronology42);
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter35.withParseType(periodType41);
        org.joda.time.PeriodType periodType48 = periodType41.withMinutesRemoved();
        org.joda.time.PeriodType periodType49 = periodType41.withDaysRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter50 = periodFormatter15.withParseType(periodType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period52 = periodFormatter15.parsePeriod("2777");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2777\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "P-0010-W00-00T00:00:-2922782" + "'", str32, "P-0010-W00-00T00:00:-2922782");
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(periodFormatter35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(gregorianChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodFormatter50);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #659
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: invokestatic  #12
76: astore        8
78: aconst_null
79: astore        9
81: aload         8
83: aload         9
85: invokevirtual #88
88: astore        10
90: aload         10
92: invokevirtual #89
95: istore        11
97: aconst_null
98: astore        12
100: aload         10
102: aload         12
104: invokevirtual #88
107: astore        13
109: aload         7
111: aload         13
113: invokevirtual #118
116: astore        14
118: aload         13
120: invokevirtual #660
123: astore        15
125: getstatic     #8
128: astore        16
130: aload         16
132: iconst_m1
133: invokevirtual #9
136: astore        17
138: aconst_null
139: astore        18
141: aload         16
143: aload         18
145: invokevirtual #201
148: istore        19
150: invokestatic  #202
153: astore        20
155: aload         16
157: aload         20
159: bipush        8
161: invokevirtual #203
164: astore        21
166: aconst_null
167: astore        22
169: aload         21
171: aload         22
173: invokevirtual #661
176: astore        23
178: aload         21
180: bipush        10
182: invokevirtual #282
185: astore        24
187: aload         24
189: ldc_w         #361
192: invokevirtual #283
195: astore        25
197: aload         13
199: aload         25
201: invokevirtual #181
204: astore        26
206: invokestatic  #12
209: astore        27
211: aconst_null
212: astore        28
214: aload         27
216: aload         28
218: invokevirtual #88
221: astore        29
223: aload         29
225: invokevirtual #89
228: istore        30
230: aconst_null
231: astore        31
233: aload         29
235: aload         31
237: invokevirtual #88
240: astore        32
242: invokestatic  #109
245: astore        33
247: invokestatic  #110
250: astore        34
252: aload         34
254: invokevirtual #111
257: astore        35
259: aload         34
261: invokevirtual #112
264: astore        36
266: aload         34
268: invokevirtual #113
271: astore        37
273: new           #46
276: dup
277: ldc2_w        #114
280: ldc2_w        #79
283: aload         33
285: aload         34
287: invokespecial #116
290: astore        38
292: aload         29
294: aload         33
296: invokevirtual #117
299: astore        39
301: aload         33
303: invokevirtual #662
306: astore        40
308: aload         33
310: invokevirtual #352
313: astore        41
315: aload         13
317: aload         33
319: invokevirtual #117
322: astore        42
324: aload         13
326: ldc_w         #288
329: invokevirtual #155
332: astore        43
334: ldc_w         #663
337: invokestatic  #22
340: goto          345
343: astore        43
345: aload_2
346: invokestatic  #10
349: aload_3
350: invokestatic  #10
353: aload         4
355: invokestatic  #10
358: aload         5
360: invokestatic  #10
363: aload         6
365: invokestatic  #10
368: aload         7
370: invokestatic  #10
373: aload         8
375: invokestatic  #10
378: aload         10
380: invokestatic  #10
383: new           #55
386: dup
387: invokespecial #56
390: ldc           #57
392: invokevirtual #58
395: iload         11
397: invokevirtual #97
400: ldc           #60
402: invokevirtual #58
405: iconst_1
406: invokevirtual #97
409: ldc           #57
411: invokevirtual #58
414: invokevirtual #61
417: iload         11
419: iconst_1
420: if_icmpne     427
423: iconst_1
424: goto          428
427: iconst_0
428: invokestatic  #62
431: aload         13
433: invokestatic  #10
436: aload         14
438: invokestatic  #10
441: aload         15
443: invokestatic  #354
446: aload         16
448: invokestatic  #10
451: aload         17
453: invokestatic  #10
456: new           #55
459: dup
460: invokespecial #56
463: ldc           #57
465: invokevirtual #58
468: iload         19
470: invokevirtual #59
473: ldc           #60
475: invokevirtual #58
478: iconst_0
479: invokevirtual #59
482: ldc           #57
484: invokevirtual #58
487: invokevirtual #61
490: iload         19
492: ifne          499
495: iconst_1
496: goto          500
499: iconst_0
500: invokestatic  #62
503: aload         20
505: invokestatic  #10
508: aload         21
510: invokestatic  #10
513: aload         23
515: invokestatic  #10
518: aload         24
520: invokestatic  #10
523: aload         25
525: invokestatic  #10
528: new           #55
531: dup
532: invokespecial #56
535: ldc           #57
537: invokevirtual #58
540: aload         26
542: invokevirtual #58
545: ldc_w         #664
548: invokevirtual #58
551: invokevirtual #61
554: aload         26
556: ldc_w         #665
559: invokestatic  #96
562: aload         27
564: invokestatic  #10
567: aload         29
569: invokestatic  #10
572: new           #55
575: dup
576: invokespecial #56
579: ldc           #57
581: invokevirtual #58
584: iload         30
586: invokevirtual #97
589: ldc           #60
591: invokevirtual #58
594: iconst_1
595: invokevirtual #97
598: ldc           #57
600: invokevirtual #58
603: invokevirtual #61
606: iload         30
608: iconst_1
609: if_icmpne     616
612: iconst_1
613: goto          617
616: iconst_0
617: invokestatic  #62
620: aload         32
622: invokestatic  #10
625: aload         33
627: invokestatic  #10
630: aload         34
632: invokestatic  #10
635: aload         35
637: invokestatic  #10
640: aload         36
642: invokestatic  #10
645: aload         37
647: invokestatic  #10
650: aload         39
652: invokestatic  #10
655: aload         40
657: invokestatic  #10
660: aload         41
662: invokestatic  #10
665: aload         42
667: invokestatic  #10
670: return
Exception table:
from    to  target type
324   340   343   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test205
Start line: 8083
End line: 8095
Method source code: 
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #666
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #25
56: astore        5
58: aload_2
59: invokestatic  #10
62: aload_3
63: invokestatic  #10
66: aload         4
68: invokestatic  #10
71: aload         5
73: invokestatic  #10
76: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test206
Start line: 8098
End line: 8122
Method source code: 
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder6.appendSuffix("35313-01-15T11:38:44.842+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder19.appendSuffix("P100W", "ISOChronology[hi!]");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #667
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         6
118: invokevirtual #185
121: astore        9
123: aload         6
125: ldc_w         #534
128: invokevirtual #132
131: astore        10
133: aload         10
135: ldc           #239
137: ldc_w         #319
140: invokevirtual #30
143: astore        11
145: aload_2
146: invokestatic  #10
149: aload_3
150: invokestatic  #10
153: aload         4
155: invokestatic  #10
158: aload         5
160: invokestatic  #10
163: aload         6
165: invokestatic  #10
168: aload         7
170: invokestatic  #10
173: aload         8
175: invokestatic  #10
178: aload         9
180: invokestatic  #10
183: aload         10
185: invokestatic  #10
188: aload         11
190: invokestatic  #10
193: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test207
Start line: 8125
End line: 8189
Method source code: 
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.Period period20 = org.joda.time.Period.millis(1);
        int int21 = period20.getMonths();
        int int22 = period20.size();
        org.joda.time.Period period24 = period20.withDays((int) (byte) 100);
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period25.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = period25.get(durationFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period32 = period25.withField(durationFieldType30, 8);
        java.lang.String str33 = durationFieldType30.getName();
        org.joda.time.Period period35 = period20.withField(durationFieldType30, 1);
        org.joda.time.Period period37 = period35.withWeeks((int) ' ');
        org.joda.time.Period period39 = period35.minusSeconds(292278993);
        org.joda.time.Period period41 = period35.minusMinutes(3);
        org.joda.time.Period period43 = period35.plusWeeks(5);
        org.joda.time.MutablePeriod mutablePeriod44 = period35.toMutablePeriod();
        java.util.Locale locale45 = null;
        int int46 = literal6.calculatePrintedLength((org.joda.time.ReadablePeriod) mutablePeriod44, locale45);
        java.lang.String str47 = mutablePeriod44.toString();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "seconds" + "'", str33, "seconds");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1.001S" + "'", str47, "PT1.001S");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #668
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: iconst_1
129: invokestatic  #168
132: astore        15
134: aload         15
136: invokevirtual #169
139: istore        16
141: aload         15
143: invokevirtual #170
146: istore        17
148: aload         15
150: bipush        100
152: invokevirtual #200
155: astore        18
157: getstatic     #8
160: astore        19
162: aload         19
164: iconst_m1
165: invokevirtual #9
168: astore        20
170: aconst_null
171: astore        21
173: aload         19
175: aload         21
177: invokevirtual #201
180: istore        22
182: invokestatic  #202
185: astore        23
187: aload         19
189: aload         23
191: bipush        8
193: invokevirtual #203
196: astore        24
198: aload         23
200: invokevirtual #204
203: astore        25
205: aload         15
207: aload         23
209: iconst_1
210: invokevirtual #203
213: astore        26
215: aload         26
217: bipush        32
219: invokevirtual #508
222: astore        27
224: aload         26
226: ldc           #220
228: invokevirtual #283
231: astore        28
233: aload         26
235: iconst_3
236: invokevirtual #522
239: astore        29
241: aload         26
243: iconst_5
244: invokevirtual #334
247: astore        30
249: aload         26
251: invokevirtual #205
254: astore        31
256: aconst_null
257: astore        32
259: aload         6
261: aload         31
263: aload         32
265: invokevirtual #365
268: istore        33
270: aload         31
272: invokevirtual #235
275: astore        34
277: aload_2
278: invokestatic  #10
281: aload_3
282: invokestatic  #10
285: aload         4
287: invokestatic  #10
290: aload         5
292: invokestatic  #10
295: aload         6
297: invokestatic  #10
300: new           #55
303: dup
304: invokespecial #56
307: ldc           #57
309: invokevirtual #58
312: aload         9
314: invokevirtual #58
317: ldc           #94
319: invokevirtual #58
322: invokevirtual #61
325: aload         9
327: ldc           #95
329: invokestatic  #96
332: aload         10
334: invokestatic  #10
337: new           #55
340: dup
341: invokespecial #56
344: ldc           #57
346: invokevirtual #58
349: iload         12
351: invokevirtual #59
354: ldc           #60
356: invokevirtual #58
359: iconst_0
360: invokevirtual #59
363: ldc           #57
365: invokevirtual #58
368: invokevirtual #61
371: iload         12
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #62
384: aload         14
386: invokestatic  #10
389: aload         15
391: invokestatic  #10
394: new           #55
397: dup
398: invokespecial #56
401: ldc           #57
403: invokevirtual #58
406: iload         16
408: invokevirtual #59
411: ldc           #60
413: invokevirtual #58
416: iconst_0
417: invokevirtual #59
420: ldc           #57
422: invokevirtual #58
425: invokevirtual #61
428: iload         16
430: ifne          437
433: iconst_1
434: goto          438
437: iconst_0
438: invokestatic  #62
441: new           #55
444: dup
445: invokespecial #56
448: ldc           #57
450: invokevirtual #58
453: iload         17
455: invokevirtual #59
458: ldc           #60
460: invokevirtual #58
463: bipush        8
465: invokevirtual #59
468: ldc           #57
470: invokevirtual #58
473: invokevirtual #61
476: iload         17
478: bipush        8
480: if_icmpne     487
483: iconst_1
484: goto          488
487: iconst_0
488: invokestatic  #62
491: aload         18
493: invokestatic  #10
496: aload         19
498: invokestatic  #10
501: aload         20
503: invokestatic  #10
506: new           #55
509: dup
510: invokespecial #56
513: ldc           #57
515: invokevirtual #58
518: iload         22
520: invokevirtual #59
523: ldc           #60
525: invokevirtual #58
528: iconst_0
529: invokevirtual #59
532: ldc           #57
534: invokevirtual #58
537: invokevirtual #61
540: iload         22
542: ifne          549
545: iconst_1
546: goto          550
549: iconst_0
550: invokestatic  #62
553: aload         23
555: invokestatic  #10
558: aload         24
560: invokestatic  #10
563: new           #55
566: dup
567: invokespecial #56
570: ldc           #57
572: invokevirtual #58
575: aload         25
577: invokevirtual #58
580: ldc           #209
582: invokevirtual #58
585: invokevirtual #61
588: aload         25
590: ldc           #210
592: invokestatic  #96
595: aload         26
597: invokestatic  #10
600: aload         27
602: invokestatic  #10
605: aload         28
607: invokestatic  #10
610: aload         29
612: invokestatic  #10
615: aload         30
617: invokestatic  #10
620: aload         31
622: invokestatic  #10
625: new           #55
628: dup
629: invokespecial #56
632: ldc           #57
634: invokevirtual #58
637: iload         33
639: invokevirtual #59
642: ldc           #60
644: invokevirtual #58
647: iconst_0
648: invokevirtual #59
651: ldc           #57
653: invokevirtual #58
656: invokevirtual #61
659: iload         33
661: ifne          668
664: iconst_1
665: goto          669
668: iconst_0
669: invokestatic  #62
672: new           #55
675: dup
676: invokespecial #56
679: ldc           #57
681: invokevirtual #58
684: aload         34
686: invokevirtual #58
689: ldc_w         #669
692: invokevirtual #58
695: invokevirtual #61
698: aload         34
700: ldc_w         #670
703: invokestatic  #96
706: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test208
Start line: 8192
End line: 8210
Method source code: 
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("2024-05-19T12:57:03.415+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendYears();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #671
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: ldc_w         #672
67: invokevirtual #132
70: astore        7
72: aload_1
73: invokevirtual #33
76: astore        8
78: aload_2
79: invokestatic  #10
82: aload_3
83: invokestatic  #10
86: aload         4
88: invokestatic  #10
91: aload         5
93: invokestatic  #10
96: aload         6
98: invokestatic  #10
101: aload         7
103: invokestatic  #10
106: aload         8
108: invokestatic  #10
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test209
Start line: 8213
End line: 8319
Method source code: 
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.joda.time.format.PeriodFormatterBuilder.Literal literal1 = new org.joda.time.format.PeriodFormatterBuilder.Literal("2024-05-15T12:20:04.872+00:00:00.010/2024-05-15T12:20:04.872+00:00:00.010");
        java.lang.String[] strArray9 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter10.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter10.withLocale(locale14);
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatter15.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal17 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology20);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period24 = period21.minusDays((int) (byte) 100);
        java.util.Locale locale26 = null;
        int int27 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) period24, 999, locale26);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator30 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray9, periodPrinter16, (org.joda.time.format.PeriodParser) literal17, false, false);
        java.lang.String[] strArray38 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter39.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter39.withLocale(locale43);
        org.joda.time.format.PeriodPrinter periodPrinter45 = periodFormatter44.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal46 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology49);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period53 = period50.minusDays((int) (byte) 100);
        java.util.Locale locale55 = null;
        int int56 = literal46.countFieldsToPrint((org.joda.time.ReadablePeriod) period53, 999, locale55);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator59 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray38, periodPrinter45, (org.joda.time.format.PeriodParser) literal46, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder62 = periodFormatterBuilder60.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter63 = periodFormatterBuilder62.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder65 = periodFormatterBuilder62.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter66 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale67 = null;
        org.joda.time.format.PeriodFormatter periodFormatter68 = periodFormatter66.withLocale(locale67);
        boolean boolean69 = periodFormatter68.isParser();
        java.util.Locale locale70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter68.withLocale(locale70);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology75 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology75.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone77 = gregorianChronology75.getZone();
        org.joda.time.DateTimeField dateTimeField78 = gregorianChronology75.yearOfCentury();
        org.joda.time.Period period79 = new org.joda.time.Period((long) '4', 100L, periodType74, (org.joda.time.Chronology) gregorianChronology75);
        org.joda.time.format.PeriodFormatter periodFormatter80 = periodFormatter68.withParseType(periodType74);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder81 = periodFormatterBuilder62.append(periodFormatter80);
        org.joda.time.format.PeriodParser periodParser82 = periodFormatter80.getParser();
        org.joda.time.format.PeriodFormatterBuilder.Separator separator83 = separator30.finish((org.joda.time.format.PeriodPrinter) literal46, periodParser82);
        org.joda.time.format.PeriodFormatter periodFormatter84 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal1, (org.joda.time.format.PeriodParser) separator30);
        org.joda.time.Period period85 = org.joda.time.Period.ZERO;
        int int86 = period85.getHours();
        org.joda.time.Period period88 = period85.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod89 = period88.toMutablePeriod();
        mutablePeriod89.setDays((int) (short) -1);
        mutablePeriod89.addSeconds(8);
        java.util.Locale locale96 = null;
        int int97 = literal1.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod89, "", (-11), locale96);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodPrinter16);
        org.junit.Assert.assertNotNull(literal17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-0.090S" + "'", str22, "PT-0.090S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodPrinter45);
        org.junit.Assert.assertNotNull(literal46);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT-0.090S" + "'", str51, "PT-0.090S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder62);
        org.junit.Assert.assertNotNull(periodPrinter63);
        org.junit.Assert.assertNotNull(periodFormatterBuilder65);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertNotNull(periodFormatter68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(gregorianChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(periodFormatter80);
        org.junit.Assert.assertNotNull(periodFormatterBuilder81);
        org.junit.Assert.assertNotNull(periodParser82);
        org.junit.Assert.assertNotNull(separator83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(mutablePeriod89);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 10 + "'", int97 == 10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #673
20: aastore
21: invokevirtual #7
24: pop
25: new           #392
28: dup
29: ldc_w         #650
32: invokespecial #393
35: astore_1
36: iconst_5
37: anewarray     #99
40: dup
41: iconst_0
42: ldc           #100
44: aastore
45: dup
46: iconst_1
47: ldc           #101
49: aastore
50: dup
51: iconst_2
52: ldc           #102
54: aastore
55: dup
56: iconst_3
57: ldc           #103
59: aastore
60: dup
61: iconst_4
62: ldc           #104
64: aastore
65: astore_2
66: invokestatic  #12
69: astore_3
70: aconst_null
71: astore        4
73: aload_3
74: aload         4
76: invokevirtual #88
79: astore        5
81: aload_3
82: invokevirtual #89
85: istore        6
87: aconst_null
88: astore        7
90: aload_3
91: aload         7
93: invokevirtual #88
96: astore        8
98: aload         8
100: invokevirtual #90
103: astore        9
105: getstatic     #78
108: astore        10
110: aconst_null
111: astore        11
113: new           #46
116: dup
117: ldc2_w        #79
120: ldc2_w        #81
123: aload         11
125: invokespecial #83
128: astore        12
130: aload         12
132: invokevirtual #84
135: astore        13
137: aload         12
139: bipush        100
141: invokevirtual #85
144: astore        14
146: aconst_null
147: astore        15
149: aload         10
151: aload         14
153: sipush        999
156: aload         15
158: invokevirtual #86
161: istore        16
163: new           #105
166: dup
167: ldc           #106
169: ldc           #104
171: aload_2
172: aload         9
174: aload         10
176: iconst_0
177: iconst_0
178: invokespecial #107
181: astore        17
183: iconst_5
184: anewarray     #99
187: dup
188: iconst_0
189: ldc           #100
191: aastore
192: dup
193: iconst_1
194: ldc           #101
196: aastore
197: dup
198: iconst_2
199: ldc           #102
201: aastore
202: dup
203: iconst_3
204: ldc           #103
206: aastore
207: dup
208: iconst_4
209: ldc           #104
211: aastore
212: astore        18
214: invokestatic  #12
217: astore        19
219: aconst_null
220: astore        20
222: aload         19
224: aload         20
226: invokevirtual #88
229: astore        21
231: aload         19
233: invokevirtual #89
236: istore        22
238: aconst_null
239: astore        23
241: aload         19
243: aload         23
245: invokevirtual #88
248: astore        24
250: aload         24
252: invokevirtual #90
255: astore        25
257: getstatic     #78
260: astore        26
262: aconst_null
263: astore        27
265: new           #46
268: dup
269: ldc2_w        #79
272: ldc2_w        #81
275: aload         27
277: invokespecial #83
280: astore        28
282: aload         28
284: invokevirtual #84
287: astore        29
289: aload         28
291: bipush        100
293: invokevirtual #85
296: astore        30
298: aconst_null
299: astore        31
301: aload         26
303: aload         30
305: sipush        999
308: aload         31
310: invokevirtual #86
313: istore        32
315: new           #105
318: dup
319: ldc           #106
321: ldc           #104
323: aload         18
325: aload         25
327: aload         26
329: iconst_0
330: iconst_0
331: invokespecial #107
334: astore        33
336: new           #14
339: dup
340: invokespecial #15
343: astore        34
345: aload         34
347: ldc           #16
349: invokevirtual #17
352: astore        35
354: aload         35
356: invokevirtual #45
359: astore        36
361: aload         35
363: iconst_0
364: invokevirtual #108
367: astore        37
369: invokestatic  #12
372: astore        38
374: aconst_null
375: astore        39
377: aload         38
379: aload         39
381: invokevirtual #88
384: astore        40
386: aload         40
388: invokevirtual #89
391: istore        41
393: aconst_null
394: astore        42
396: aload         40
398: aload         42
400: invokevirtual #88
403: astore        43
405: invokestatic  #109
408: astore        44
410: invokestatic  #110
413: astore        45
415: aload         45
417: invokevirtual #111
420: astore        46
422: aload         45
424: invokevirtual #112
427: astore        47
429: aload         45
431: invokevirtual #113
434: astore        48
436: new           #46
439: dup
440: ldc2_w        #114
443: ldc2_w        #79
446: aload         44
448: aload         45
450: invokespecial #116
453: astore        49
455: aload         40
457: aload         44
459: invokevirtual #117
462: astore        50
464: aload         35
466: aload         50
468: invokevirtual #118
471: astore        51
473: aload         50
475: invokevirtual #119
478: astore        52
480: aload         17
482: aload         26
484: aload         52
486: invokevirtual #120
489: astore        53
491: new           #164
494: dup
495: aload_1
496: aload         17
498: invokespecial #165
501: astore        54
503: getstatic     #8
506: astore        55
508: aload         55
510: invokevirtual #216
513: istore        56
515: aload         55
517: iconst_0
518: invokevirtual #200
521: astore        57
523: aload         57
525: invokevirtual #205
528: astore        58
530: aload         58
532: iconst_m1
533: invokevirtual #313
536: aload         58
538: bipush        8
540: invokevirtual #311
543: aconst_null
544: astore        59
546: aload_1
547: aload         58
549: ldc           #74
551: bipush        -11
553: aload         59
555: invokevirtual #221
558: istore        60
560: aload_2
561: invokestatic  #10
564: aload_3
565: invokestatic  #10
568: aload         5
570: invokestatic  #10
573: new           #55
576: dup
577: invokespecial #56
580: ldc           #57
582: invokevirtual #58
585: iload         6
587: invokevirtual #97
590: ldc           #60
592: invokevirtual #58
595: iconst_1
596: invokevirtual #97
599: ldc           #57
601: invokevirtual #58
604: invokevirtual #61
607: iload         6
609: iconst_1
610: if_icmpne     617
613: iconst_1
614: goto          618
617: iconst_0
618: invokestatic  #62
621: aload         8
623: invokestatic  #10
626: aload         9
628: invokestatic  #10
631: aload         10
633: invokestatic  #10
636: new           #55
639: dup
640: invokespecial #56
643: ldc           #57
645: invokevirtual #58
648: aload         13
650: invokevirtual #58
653: ldc           #94
655: invokevirtual #58
658: invokevirtual #61
661: aload         13
663: ldc           #95
665: invokestatic  #96
668: aload         14
670: invokestatic  #10
673: new           #55
676: dup
677: invokespecial #56
680: ldc           #57
682: invokevirtual #58
685: iload         16
687: invokevirtual #59
690: ldc           #60
692: invokevirtual #58
695: iconst_0
696: invokevirtual #59
699: ldc           #57
701: invokevirtual #58
704: invokevirtual #61
707: iload         16
709: ifne          716
712: iconst_1
713: goto          717
716: iconst_0
717: invokestatic  #62
720: aload         18
722: invokestatic  #10
725: aload         19
727: invokestatic  #10
730: aload         21
732: invokestatic  #10
735: new           #55
738: dup
739: invokespecial #56
742: ldc           #57
744: invokevirtual #58
747: iload         22
749: invokevirtual #97
752: ldc           #60
754: invokevirtual #58
757: iconst_1
758: invokevirtual #97
761: ldc           #57
763: invokevirtual #58
766: invokevirtual #61
769: iload         22
771: iconst_1
772: if_icmpne     779
775: iconst_1
776: goto          780
779: iconst_0
780: invokestatic  #62
783: aload         24
785: invokestatic  #10
788: aload         25
790: invokestatic  #10
793: aload         26
795: invokestatic  #10
798: new           #55
801: dup
802: invokespecial #56
805: ldc           #57
807: invokevirtual #58
810: aload         29
812: invokevirtual #58
815: ldc           #94
817: invokevirtual #58
820: invokevirtual #61
823: aload         29
825: ldc           #95
827: invokestatic  #96
830: aload         30
832: invokestatic  #10
835: new           #55
838: dup
839: invokespecial #56
842: ldc           #57
844: invokevirtual #58
847: iload         32
849: invokevirtual #59
852: ldc           #60
854: invokevirtual #58
857: iconst_0
858: invokevirtual #59
861: ldc           #57
863: invokevirtual #58
866: invokevirtual #61
869: iload         32
871: ifne          878
874: iconst_1
875: goto          879
878: iconst_0
879: invokestatic  #62
882: aload         35
884: invokestatic  #10
887: aload         36
889: invokestatic  #10
892: aload         37
894: invokestatic  #10
897: aload         38
899: invokestatic  #10
902: aload         40
904: invokestatic  #10
907: new           #55
910: dup
911: invokespecial #56
914: ldc           #57
916: invokevirtual #58
919: iload         41
921: invokevirtual #97
924: ldc           #60
926: invokevirtual #58
929: iconst_1
930: invokevirtual #97
933: ldc           #57
935: invokevirtual #58
938: invokevirtual #61
941: iload         41
943: iconst_1
944: if_icmpne     951
947: iconst_1
948: goto          952
951: iconst_0
952: invokestatic  #62
955: aload         43
957: invokestatic  #10
960: aload         44
962: invokestatic  #10
965: aload         45
967: invokestatic  #10
970: aload         46
972: invokestatic  #10
975: aload         47
977: invokestatic  #10
980: aload         48
982: invokestatic  #10
985: aload         50
987: invokestatic  #10
990: aload         51
992: invokestatic  #10
995: aload         52
997: invokestatic  #10
1000: aload         53
1002: invokestatic  #10
1005: aload         55
1007: invokestatic  #10
1010: new           #55
1013: dup
1014: invokespecial #56
1017: ldc           #57
1019: invokevirtual #58
1022: iload         56
1024: invokevirtual #59
1027: ldc           #60
1029: invokevirtual #58
1032: iconst_0
1033: invokevirtual #59
1036: ldc           #57
1038: invokevirtual #58
1041: invokevirtual #61
1044: iload         56
1046: ifne          1053
1049: iconst_1
1050: goto          1054
1053: iconst_0
1054: invokestatic  #62
1057: aload         57
1059: invokestatic  #10
1062: aload         58
1064: invokestatic  #10
1067: new           #55
1070: dup
1071: invokespecial #56
1074: ldc           #57
1076: invokevirtual #58
1079: iload         60
1081: invokevirtual #59
1084: ldc           #60
1086: invokevirtual #58
1089: bipush        10
1091: invokevirtual #59
1094: ldc           #57
1096: invokevirtual #58
1099: invokevirtual #61
1102: iload         60
1104: bipush        10
1106: if_icmpne     1113
1109: iconst_1
1110: goto          1114
1113: iconst_0
1114: invokestatic  #62
1117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test210
Start line: 8322
End line: 8338
Method source code: 
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSuffix("7968", "Invalid format: \"\" is too short");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #674
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         5
60: invokevirtual #245
63: astore        6
65: aload         6
67: ldc_w         #379
70: ldc_w         #675
73: invokevirtual #30
76: astore        7
78: aload_2
79: invokestatic  #10
82: aload_3
83: invokestatic  #10
86: aload         4
88: invokestatic  #10
91: aload         5
93: invokestatic  #10
96: aload         6
98: invokestatic  #10
101: aload         7
103: invokestatic  #10
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test211
Start line: 8341
End line: 8425
Method source code: 
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        int int45 = period44.getHours();
        org.joda.time.Period period47 = period44.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        mutablePeriod48.setWeeks((-28800000));
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology53);
        int int55 = period54.getMonths();
        java.lang.String str56 = period54.toString();
        org.joda.time.Period period58 = period54.plusHours(0);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) period54);
        mutablePeriod48.clear();
        int int63 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod48, "", 787);
        java.lang.String str64 = mutablePeriod48.toString();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT-0.090S" + "'", str56, "PT-0.090S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-788) + "'", int63 == (-788));
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0S" + "'", str64, "PT0S");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #676
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: getstatic     #8
275: astore        32
277: aload         32
279: invokevirtual #216
282: istore        33
284: aload         32
286: iconst_0
287: invokevirtual #200
290: astore        34
292: aload         34
294: invokevirtual #205
297: astore        35
299: aload         35
301: ldc           #217
303: invokevirtual #207
306: aconst_null
307: astore        36
309: new           #46
312: dup
313: ldc2_w        #79
316: ldc2_w        #81
319: aload         36
321: invokespecial #83
324: astore        37
326: aload         37
328: invokevirtual #169
331: istore        38
333: aload         37
335: invokevirtual #84
338: astore        39
340: aload         37
342: iconst_0
343: invokevirtual #218
346: astore        40
348: aload         35
350: aload         37
352: invokevirtual #219
355: aload         35
357: invokevirtual #457
360: aload         28
362: aload         35
364: ldc           #74
366: sipush        787
369: invokevirtual #237
372: istore        41
374: aload         35
376: invokevirtual #235
379: astore        42
381: aload_1
382: invokestatic  #10
385: new           #55
388: dup
389: invokespecial #56
392: ldc           #57
394: invokevirtual #58
397: iload_2
398: invokevirtual #59
401: ldc           #60
403: invokevirtual #58
406: iconst_0
407: invokevirtual #59
410: ldc           #57
412: invokevirtual #58
415: invokevirtual #61
418: iload_2
419: ifne          426
422: iconst_1
423: goto          427
426: iconst_0
427: invokestatic  #62
430: aload_3
431: invokestatic  #10
434: aload         4
436: invokestatic  #10
439: new           #55
442: dup
443: invokespecial #56
446: ldc           #57
448: invokevirtual #58
451: iload         7
453: invokevirtual #59
456: ldc           #60
458: invokevirtual #58
461: iconst_0
462: invokevirtual #59
465: ldc           #57
467: invokevirtual #58
470: invokevirtual #61
473: iload         7
475: ifne          482
478: iconst_1
479: goto          483
482: iconst_0
483: invokestatic  #62
486: new           #55
489: dup
490: invokespecial #56
493: ldc           #57
495: invokevirtual #58
498: aload         8
500: invokevirtual #58
503: ldc           #94
505: invokevirtual #58
508: invokevirtual #61
511: aload         8
513: ldc           #95
515: invokestatic  #96
518: aload         9
520: invokestatic  #10
523: aload         10
525: invokestatic  #10
528: aload         11
530: invokestatic  #10
533: aload         13
535: invokestatic  #10
538: aload         14
540: invokestatic  #10
543: aload         15
545: invokestatic  #10
548: aload         16
550: invokestatic  #10
553: aload         18
555: invokestatic  #10
558: new           #55
561: dup
562: invokespecial #56
565: ldc           #57
567: invokevirtual #58
570: iload         19
572: invokevirtual #97
575: ldc           #60
577: invokevirtual #58
580: iconst_1
581: invokevirtual #97
584: ldc           #57
586: invokevirtual #58
589: invokevirtual #61
592: iload         19
594: iconst_1
595: if_icmpne     602
598: iconst_1
599: goto          603
602: iconst_0
603: invokestatic  #62
606: aload         21
608: invokestatic  #10
611: aload         22
613: invokestatic  #10
616: aload         23
618: invokestatic  #10
621: aload         24
623: invokestatic  #10
626: aload         25
628: invokestatic  #10
631: aload         26
633: invokestatic  #10
636: aload         28
638: invokestatic  #10
641: aload         29
643: invokestatic  #10
646: aload         30
648: invokestatic  #10
651: new           #55
654: dup
655: invokespecial #56
658: ldc           #57
660: invokevirtual #58
663: aload         31
665: invokevirtual #58
668: ldc_w         #286
671: invokevirtual #58
674: invokevirtual #61
677: aload         31
679: ldc           #143
681: invokestatic  #96
684: aload         32
686: invokestatic  #10
689: new           #55
692: dup
693: invokespecial #56
696: ldc           #57
698: invokevirtual #58
701: iload         33
703: invokevirtual #59
706: ldc           #60
708: invokevirtual #58
711: iconst_0
712: invokevirtual #59
715: ldc           #57
717: invokevirtual #58
720: invokevirtual #61
723: iload         33
725: ifne          732
728: iconst_1
729: goto          733
732: iconst_0
733: invokestatic  #62
736: aload         34
738: invokestatic  #10
741: aload         35
743: invokestatic  #10
746: new           #55
749: dup
750: invokespecial #56
753: ldc           #57
755: invokevirtual #58
758: iload         38
760: invokevirtual #59
763: ldc           #60
765: invokevirtual #58
768: iconst_0
769: invokevirtual #59
772: ldc           #57
774: invokevirtual #58
777: invokevirtual #61
780: iload         38
782: ifne          789
785: iconst_1
786: goto          790
789: iconst_0
790: invokestatic  #62
793: new           #55
796: dup
797: invokespecial #56
800: ldc           #57
802: invokevirtual #58
805: aload         39
807: invokevirtual #58
810: ldc           #94
812: invokevirtual #58
815: invokevirtual #61
818: aload         39
820: ldc           #95
822: invokestatic  #96
825: aload         40
827: invokestatic  #10
830: new           #55
833: dup
834: invokespecial #56
837: ldc           #57
839: invokevirtual #58
842: iload         41
844: invokevirtual #59
847: ldc           #60
849: invokevirtual #58
852: sipush        -788
855: invokevirtual #59
858: ldc           #57
860: invokevirtual #58
863: invokevirtual #61
866: iload         41
868: sipush        -788
871: if_icmpne     878
874: iconst_1
875: goto          879
878: iconst_0
879: invokestatic  #62
882: new           #55
885: dup
886: invokespecial #56
889: ldc           #57
891: invokevirtual #58
894: aload         42
896: invokevirtual #58
899: ldc_w         #677
902: invokevirtual #58
905: invokevirtual #61
908: aload         42
910: ldc_w         #648
913: invokestatic  #96
916: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test212
Start line: 8428
End line: 8444
Method source code: 
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendLiteral("8");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder4.appendPrefix("P-36W-292279004DT0.001S", "P10Y100W");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #678
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         4
60: ldc_w         #294
63: invokevirtual #28
66: astore        6
68: aload         4
70: ldc_w         #679
73: ldc_w         #356
76: invokevirtual #41
79: astore        7
81: aload_2
82: invokestatic  #10
85: aload_3
86: invokestatic  #10
89: aload         4
91: invokestatic  #10
94: aload         5
96: invokestatic  #10
99: aload         6
101: invokestatic  #10
104: aload         7
106: invokestatic  #10
109: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test213
Start line: 8447
End line: 8463
Method source code: 
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatterBuilder6.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendLiteral("0");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodParser7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #680
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #71
56: astore        5
58: aload         5
60: invokevirtual #142
63: astore        6
65: aload         5
67: ldc_w         #681
70: invokevirtual #28
73: astore        7
75: aload_2
76: invokestatic  #10
79: aload_3
80: invokestatic  #10
83: aload         4
85: invokestatic  #10
88: aload         5
90: invokestatic  #10
93: aload         6
95: invokestatic  #10
98: aload         7
100: invokestatic  #10
103: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test214
Start line: 8466
End line: 8480
Method source code: 
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("P-1Y3D");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.minimumPrintedDigits((-1032976319));
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #682
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #245
49: astore        4
51: aload         4
53: ldc_w         #683
56: invokevirtual #196
59: astore        5
61: aload         4
63: ldc_w         #510
66: invokevirtual #151
69: astore        6
71: aload_2
72: invokestatic  #10
75: aload_3
76: invokestatic  #10
79: aload         4
81: invokestatic  #10
84: aload         5
86: invokestatic  #10
89: aload         6
91: invokestatic  #10
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test215
Start line: 8483
End line: 8501
Method source code: 
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroRarelyFirst();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatterBuilder6.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparatorIfFieldsAfter("Standard");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodParser7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #684
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         5
60: invokevirtual #248
63: astore        6
65: aload         6
67: invokevirtual #142
70: astore        7
72: aload         6
74: ldc           #29
76: invokevirtual #17
79: astore        8
81: aload_2
82: invokestatic  #10
85: aload_3
86: invokestatic  #10
89: aload         4
91: invokestatic  #10
94: aload         5
96: invokestatic  #10
99: aload         6
101: invokestatic  #10
104: aload         7
106: invokestatic  #10
109: aload         8
111: invokestatic  #10
114: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test216
Start line: 8504
End line: 8534
Method source code: 
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter10.withLocale(locale12);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder7.append(periodFormatter10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder7.appendHours();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #685
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #77
67: astore        7
69: invokestatic  #12
72: astore        8
74: aconst_null
75: astore        9
77: aload         8
79: aload         9
81: invokevirtual #88
84: astore        10
86: aload         10
88: invokevirtual #89
91: istore        11
93: aconst_null
94: astore        12
96: aload         10
98: aload         12
100: invokevirtual #88
103: astore        13
105: aload         7
107: aload         10
109: invokevirtual #118
112: astore        14
114: aload         7
116: invokevirtual #245
119: astore        15
121: aload_2
122: invokestatic  #10
125: aload_3
126: invokestatic  #10
129: aload         4
131: invokestatic  #10
134: aload         5
136: invokestatic  #10
139: aload         6
141: invokestatic  #10
144: aload         7
146: invokestatic  #10
149: aload         8
151: invokestatic  #10
154: aload         10
156: invokestatic  #10
159: new           #55
162: dup
163: invokespecial #56
166: ldc           #57
168: invokevirtual #58
171: iload         11
173: invokevirtual #97
176: ldc           #60
178: invokevirtual #58
181: iconst_1
182: invokevirtual #97
185: ldc           #57
187: invokevirtual #58
190: invokevirtual #61
193: iload         11
195: iconst_1
196: if_icmpne     203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #62
207: aload         13
209: invokestatic  #10
212: aload         14
214: invokestatic  #10
217: aload         15
219: invokestatic  #10
222: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test217
Start line: 8537
End line: 8554
Method source code: 
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        periodFormatterBuilder4.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.printZeroAlways();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #686
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: invokevirtual #212
73: aload         4
75: invokevirtual #139
78: astore        7
80: aload_2
81: invokestatic  #10
84: aload_3
85: invokestatic  #10
88: aload         4
90: invokestatic  #10
93: aload         5
95: invokestatic  #10
98: aload         6
100: invokestatic  #10
103: aload         7
105: invokestatic  #10
108: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test218
Start line: 8557
End line: 8586
Method source code: 
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        boolean boolean6 = cachedDateTimeZone3.equals((java.lang.Object) periodType5);
        java.lang.String str8 = cachedDateTimeZone3.getNameKey((long) (short) 1);
        int int10 = cachedDateTimeZone3.getStandardOffset(32284799990L);
        long long12 = cachedDateTimeZone3.previousTransition(0L);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder13.appendSeconds();
        boolean boolean15 = cachedDateTimeZone3.equals((java.lang.Object) periodFormatterBuilder13);
        long long17 = cachedDateTimeZone3.convertUTCToLocal(6176778617323739990L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertNull(str8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 39120000 + "'", int10 == 39120000);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6176778617362859990L + "'", long17 == 6176778617362859990L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #687
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #460
31: astore_2
32: aload_2
33: invokestatic  #461
36: astore_3
37: aload_3
38: invokestatic  #462
41: astore        4
43: invokestatic  #463
46: astore        5
48: aload         5
50: invokevirtual #464
53: astore        6
55: aload         4
57: aload         6
59: invokevirtual #465
62: istore        7
64: aload         4
66: lconst_1
67: invokevirtual #466
70: astore        8
72: aload         4
74: ldc2_w        #467
77: invokevirtual #469
80: istore        9
82: aload         4
84: lconst_0
85: invokevirtual #470
88: lstore        10
90: new           #14
93: dup
94: invokespecial #15
97: astore        12
99: aload         12
101: invokevirtual #320
104: astore        13
106: aload         4
108: aload         12
110: invokevirtual #465
113: istore        14
115: aload         4
117: ldc2_w        #688
120: invokevirtual #690
123: lstore        15
125: aload_2
126: invokestatic  #10
129: aload_3
130: invokestatic  #10
133: aload         4
135: invokestatic  #10
138: aload         5
140: invokestatic  #10
143: aload         6
145: invokestatic  #10
148: new           #55
151: dup
152: invokespecial #56
155: ldc           #57
157: invokevirtual #58
160: iload         7
162: invokevirtual #97
165: ldc           #60
167: invokevirtual #58
170: iconst_0
171: invokevirtual #97
174: ldc           #57
176: invokevirtual #58
179: invokevirtual #61
182: iload         7
184: ifne          191
187: iconst_1
188: goto          192
191: iconst_0
192: invokestatic  #62
195: aload         13
197: invokestatic  #10
200: new           #55
203: dup
204: invokespecial #56
207: ldc           #57
209: invokevirtual #58
212: iload         14
214: invokevirtual #97
217: ldc           #60
219: invokevirtual #58
222: iconst_0
223: invokevirtual #97
226: ldc           #57
228: invokevirtual #58
231: invokevirtual #61
234: iload         14
236: ifne          243
239: iconst_1
240: goto          244
243: iconst_0
244: invokestatic  #62
247: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test219
Start line: 8589
End line: 8599
Method source code: 
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #691
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: invokevirtual #77
42: astore_3
43: aload_2
44: invokevirtual #71
47: astore        4
49: aload_2
50: invokestatic  #10
53: aload_3
54: invokestatic  #10
57: aload         4
59: invokestatic  #10
62: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test220
Start line: 8602
End line: 8620
Method source code: 
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendPrefix("-101", "PeriodType[YearDay]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits((-28800000));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #692
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc           #40
55: ldc           #36
57: invokevirtual #41
60: astore        5
62: aload         4
64: invokevirtual #33
67: astore        6
69: aload         6
71: ldc           #217
73: invokevirtual #213
76: astore        7
78: aload         6
80: invokevirtual #149
83: astore        8
85: aload_2
86: invokestatic  #10
89: aload_3
90: invokestatic  #10
93: aload         4
95: invokestatic  #10
98: aload         5
100: invokestatic  #10
103: aload         6
105: invokestatic  #10
108: aload         7
110: invokestatic  #10
113: aload         8
115: invokestatic  #10
118: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test221
Start line: 8623
End line: 8641
Method source code: 
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendPrefix("-101", "PeriodType[YearDay]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits((-28800000));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #693
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc           #40
55: ldc           #36
57: invokevirtual #41
60: astore        5
62: aload         4
64: invokevirtual #33
67: astore        6
69: aload         6
71: ldc           #217
73: invokevirtual #213
76: astore        7
78: aload         6
80: invokevirtual #71
83: astore        8
85: aload_2
86: invokestatic  #10
89: aload_3
90: invokestatic  #10
93: aload         4
95: invokestatic  #10
98: aload         5
100: invokestatic  #10
103: aload         6
105: invokestatic  #10
108: aload         7
110: invokestatic  #10
113: aload         8
115: invokestatic  #10
118: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test222
Start line: 8644
End line: 8654
Method source code: 
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.rejectSignedValues(true);
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #694
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: ldc           #42
41: invokevirtual #67
44: astore_3
45: aload_2
46: iconst_1
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokestatic  #10
56: aload_3
57: invokestatic  #10
60: aload         4
62: invokestatic  #10
65: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test223
Start line: 8657
End line: 8675
Method source code: 
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatterBuilder5.toFormatter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #695
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: invokevirtual #33
69: astore        7
71: aload         5
73: invokevirtual #161
76: astore        8
78: aload_2
79: invokestatic  #10
82: aload_3
83: invokestatic  #10
86: aload         4
88: invokestatic  #10
91: aload         5
93: invokestatic  #10
96: aload         6
98: invokestatic  #10
101: aload         7
103: invokestatic  #10
106: aload         8
108: invokestatic  #10
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test224
Start line: 8678
End line: 8694
Method source code: 
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatterBuilder6.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendPrefix("-00:00:00.024");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodPrinter7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #696
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #45
66: astore        6
68: aload         5
70: ldc_w         #697
73: invokevirtual #196
76: astore        7
78: aload_2
79: invokestatic  #10
82: aload_3
83: invokestatic  #10
86: aload         4
88: invokestatic  #10
91: aload         5
93: invokestatic  #10
96: aload         6
98: invokestatic  #10
101: aload         7
103: invokestatic  #10
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test225
Start line: 8697
End line: 8715
Method source code: 
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendSeparatorIfFieldsBefore("2024-05-15T11:18:09.344+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #698
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         6
70: ldc_w         #327
73: invokevirtual #67
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: aload_2
86: invokestatic  #10
89: aload_3
90: invokestatic  #10
93: aload         4
95: invokestatic  #10
98: aload         5
100: invokestatic  #10
103: aload         6
105: invokestatic  #10
108: aload         7
110: invokestatic  #10
113: aload         8
115: invokestatic  #10
118: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test226
Start line: 8718
End line: 8741
Method source code: 
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        periodFormatterBuilder4.clear();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatterBuilder4.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder4.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder10.appendSeparator("677", "2024-05-15T12:19:55.224+00:00:00.010/2024-05-15T12:19:55.224+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder10.appendSeparator("-1", "PT1.001S");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #699
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: invokevirtual #212
73: aload         4
75: invokevirtual #161
78: astore        7
80: aload         4
82: invokevirtual #488
85: astore        8
87: aload         8
89: ldc_w         #700
92: ldc_w         #701
95: invokevirtual #20
98: astore        9
100: aload         8
102: ldc_w         #498
105: ldc_w         #670
108: invokevirtual #20
111: astore        10
113: aload_2
114: invokestatic  #10
117: aload_3
118: invokestatic  #10
121: aload         4
123: invokestatic  #10
126: aload         5
128: invokestatic  #10
131: aload         6
133: invokestatic  #10
136: aload         7
138: invokestatic  #10
141: aload         8
143: invokestatic  #10
146: aload         9
148: invokestatic  #10
151: aload         10
153: invokestatic  #10
156: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test227
Start line: 8744
End line: 8762
Method source code: 
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSeparator("DurationField[minutes]");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #702
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #71
56: astore        5
58: aload         5
60: ldc           #74
62: invokevirtual #67
65: astore        6
67: aload         5
69: invokevirtual #134
72: astore        7
74: aload         7
76: ldc_w         #703
79: invokevirtual #37
82: astore        8
84: aload_2
85: invokestatic  #10
88: aload_3
89: invokestatic  #10
92: aload         4
94: invokestatic  #10
97: aload         5
99: invokestatic  #10
102: aload         6
104: invokestatic  #10
107: aload         7
109: invokestatic  #10
112: aload         8
114: invokestatic  #10
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test228
Start line: 8765
End line: 8785
Method source code: 
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendSeconds();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #704
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: invokevirtual #25
67: astore        7
69: aload_1
70: invokevirtual #185
73: astore        8
75: aload_1
76: invokevirtual #320
79: astore        9
81: aload_2
82: invokestatic  #10
85: aload_3
86: invokestatic  #10
89: aload         4
91: invokestatic  #10
94: aload         5
96: invokestatic  #10
99: aload         6
101: invokestatic  #10
104: aload         7
106: invokestatic  #10
109: aload         8
111: invokestatic  #10
114: aload         9
116: invokestatic  #10
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test229
Start line: 8788
End line: 8804
Method source code: 
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendYears();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #705
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #71
66: astore        6
68: aload         5
70: invokevirtual #33
73: astore        7
75: aload_2
76: invokestatic  #10
79: aload_3
80: invokestatic  #10
83: aload         4
85: invokestatic  #10
88: aload         5
90: invokestatic  #10
93: aload         6
95: invokestatic  #10
98: aload         7
100: invokestatic  #10
103: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test230
Start line: 8807
End line: 8840
Method source code: 
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder18.appendSuffix("0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #706
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aload         14
130: ldc_w         #681
133: invokevirtual #132
136: astore        15
138: ldc           #31
140: invokestatic  #22
143: goto          148
146: astore        15
148: aload_2
149: invokestatic  #10
152: aload_3
153: invokestatic  #10
156: aload         4
158: invokestatic  #10
161: aload         5
163: invokestatic  #10
166: aload         6
168: invokestatic  #10
171: new           #55
174: dup
175: invokespecial #56
178: ldc           #57
180: invokevirtual #58
183: aload         9
185: invokevirtual #58
188: ldc           #94
190: invokevirtual #58
193: invokevirtual #61
196: aload         9
198: ldc           #95
200: invokestatic  #96
203: aload         10
205: invokestatic  #10
208: new           #55
211: dup
212: invokespecial #56
215: ldc           #57
217: invokevirtual #58
220: iload         12
222: invokevirtual #59
225: ldc           #60
227: invokevirtual #58
230: iconst_0
231: invokevirtual #59
234: ldc           #57
236: invokevirtual #58
239: invokevirtual #61
242: iload         12
244: ifne          251
247: iconst_1
248: goto          252
251: iconst_0
252: invokestatic  #62
255: aload         14
257: invokestatic  #10
260: return
Exception table:
from    to  target type
128   143   146   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test231
Start line: 8843
End line: 8897
Method source code: 
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal8 = new org.joda.time.format.PeriodFormatterBuilder.Literal("clockhourOfHalfday");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder9.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder9.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter19 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter19.withLocale(locale20);
        boolean boolean22 = periodFormatter21.isParser();
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter21.withLocale(locale23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder18.append(periodFormatter24);
        org.joda.time.format.PeriodParser periodParser26 = periodFormatterBuilder25.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder6.append((org.joda.time.format.PeriodPrinter) literal8, periodParser26);
        java.lang.StringBuffer stringBuffer28 = null;
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            literal8.printTo(stringBuffer28, readablePeriod29, locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodParser26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #707
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: new           #392
66: dup
67: ldc_w         #708
70: invokespecial #393
73: astore        7
75: new           #14
78: dup
79: invokespecial #15
82: astore        8
84: aload         8
86: ldc           #16
88: invokevirtual #17
91: astore        9
93: aload         8
95: invokevirtual #25
98: astore        10
100: aload         8
102: invokevirtual #76
105: astore        11
107: aload         8
109: invokevirtual #77
112: astore        12
114: aload         8
116: ldc           #16
118: invokevirtual #17
121: astore        13
123: aload         8
125: ldc           #141
127: invokevirtual #28
130: astore        14
132: invokestatic  #12
135: astore        15
137: aconst_null
138: astore        16
140: aload         15
142: aload         16
144: invokevirtual #88
147: astore        17
149: aload         17
151: invokevirtual #89
154: istore        18
156: aconst_null
157: astore        19
159: aload         17
161: aload         19
163: invokevirtual #88
166: astore        20
168: aload         14
170: aload         20
172: invokevirtual #118
175: astore        21
177: aload         21
179: invokevirtual #142
182: astore        22
184: aload         6
186: aload         7
188: aload         22
190: invokevirtual #87
193: astore        23
195: aconst_null
196: astore        24
198: aconst_null
199: astore        25
201: aconst_null
202: astore        26
204: aload         7
206: aload         24
208: aload         25
210: aload         26
212: invokevirtual #308
215: ldc           #53
217: invokestatic  #22
220: goto          225
223: astore        27
225: aload_2
226: invokestatic  #10
229: aload_3
230: invokestatic  #10
233: aload         4
235: invokestatic  #10
238: aload         5
240: invokestatic  #10
243: aload         6
245: invokestatic  #10
248: aload         9
250: invokestatic  #10
253: aload         10
255: invokestatic  #10
258: aload         11
260: invokestatic  #10
263: aload         12
265: invokestatic  #10
268: aload         13
270: invokestatic  #10
273: aload         14
275: invokestatic  #10
278: aload         15
280: invokestatic  #10
283: aload         17
285: invokestatic  #10
288: new           #55
291: dup
292: invokespecial #56
295: ldc           #57
297: invokevirtual #58
300: iload         18
302: invokevirtual #97
305: ldc           #60
307: invokevirtual #58
310: iconst_1
311: invokevirtual #97
314: ldc           #57
316: invokevirtual #58
319: invokevirtual #61
322: iload         18
324: iconst_1
325: if_icmpne     332
328: iconst_1
329: goto          333
332: iconst_0
333: invokestatic  #62
336: aload         20
338: invokestatic  #10
341: aload         21
343: invokestatic  #10
346: aload         22
348: invokestatic  #10
351: aload         23
353: invokestatic  #10
356: return
Exception table:
from    to  target type
204   220   223   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test232
Start line: 8900
End line: 8956
Method source code: 
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        periodFormatterBuilder4.clear();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatterBuilder4.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal11 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter14.isParser();
        org.joda.time.format.PeriodParser periodParser16 = periodFormatter14.getParser();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType25 = org.joda.time.DateTimeUtils.getPeriodType(periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period(100L, (long) (short) -1, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        boolean boolean28 = periodType24.isSupported(durationFieldType27);
        mutablePeriod21.add(durationFieldType27, (int) (byte) 100);
        java.lang.String str31 = mutablePeriod21.toString();
        java.util.Locale locale34 = null;
        int int35 = periodParser16.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod21, "weekyear", (int) '#', locale34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder4.append((org.joda.time.format.PeriodPrinter) literal11, periodParser16);
        org.joda.time.format.PeriodParser periodParser37 = periodFormatterBuilder36.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder36.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodParser16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P100W" + "'", str31, "P100W");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-36) + "'", int35 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodParser37);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #709
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: invokevirtual #212
73: aload         4
75: invokevirtual #161
78: astore        7
80: new           #392
83: dup
84: ldc           #74
86: invokespecial #393
89: astore        8
91: invokestatic  #12
94: astore        9
96: aconst_null
97: astore        10
99: aload         9
101: aload         10
103: invokevirtual #88
106: astore        11
108: aload         11
110: invokevirtual #89
113: istore        12
115: aload         11
117: invokevirtual #119
120: astore        13
122: getstatic     #8
125: astore        14
127: aload         14
129: invokevirtual #216
132: istore        15
134: aload         14
136: iconst_0
137: invokevirtual #200
140: astore        16
142: aload         16
144: invokevirtual #205
147: astore        17
149: invokestatic  #171
152: astore        18
154: aload         18
156: invokestatic  #172
159: astore        19
161: new           #46
164: dup
165: ldc2_w        #79
168: ldc2_w        #173
171: aload         18
173: invokespecial #175
176: astore        20
178: invokestatic  #176
181: astore        21
183: aload         18
185: aload         21
187: invokevirtual #177
190: istore        22
192: aload         17
194: aload         21
196: bipush        100
198: invokevirtual #226
201: aload         17
203: invokevirtual #235
206: astore        23
208: aconst_null
209: astore        24
211: aload         13
213: aload         17
215: ldc           #135
217: bipush        35
219: aload         24
221: invokeinterface #231,  5
226: istore        25
228: aload         4
230: aload         8
232: aload         13
234: invokevirtual #87
237: astore        26
239: aload         26
241: invokevirtual #142
244: astore        27
246: aload         26
248: invokevirtual #77
251: astore        28
253: aload_2
254: invokestatic  #10
257: aload_3
258: invokestatic  #10
261: aload         4
263: invokestatic  #10
266: aload         5
268: invokestatic  #10
271: aload         6
273: invokestatic  #10
276: aload         7
278: invokestatic  #10
281: aload         9
283: invokestatic  #10
286: aload         11
288: invokestatic  #10
291: new           #55
294: dup
295: invokespecial #56
298: ldc           #57
300: invokevirtual #58
303: iload         12
305: invokevirtual #97
308: ldc           #60
310: invokevirtual #58
313: iconst_1
314: invokevirtual #97
317: ldc           #57
319: invokevirtual #58
322: invokevirtual #61
325: iload         12
327: iconst_1
328: if_icmpne     335
331: iconst_1
332: goto          336
335: iconst_0
336: invokestatic  #62
339: aload         13
341: invokestatic  #10
344: aload         14
346: invokestatic  #10
349: new           #55
352: dup
353: invokespecial #56
356: ldc           #57
358: invokevirtual #58
361: iload         15
363: invokevirtual #59
366: ldc           #60
368: invokevirtual #58
371: iconst_0
372: invokevirtual #59
375: ldc           #57
377: invokevirtual #58
380: invokevirtual #61
383: iload         15
385: ifne          392
388: iconst_1
389: goto          393
392: iconst_0
393: invokestatic  #62
396: aload         16
398: invokestatic  #10
401: aload         17
403: invokestatic  #10
406: aload         18
408: invokestatic  #10
411: aload         19
413: invokestatic  #10
416: aload         21
418: invokestatic  #10
421: new           #55
424: dup
425: invokespecial #56
428: ldc           #57
430: invokevirtual #58
433: iload         22
435: invokevirtual #97
438: ldc           #60
440: invokevirtual #58
443: iconst_0
444: invokevirtual #97
447: ldc           #57
449: invokevirtual #58
452: invokevirtual #61
455: iload         22
457: ifne          464
460: iconst_1
461: goto          465
464: iconst_0
465: invokestatic  #62
468: new           #55
471: dup
472: invokespecial #56
475: ldc           #57
477: invokevirtual #58
480: aload         23
482: invokevirtual #58
485: ldc           #238
487: invokevirtual #58
490: invokevirtual #61
493: aload         23
495: ldc           #239
497: invokestatic  #96
500: new           #55
503: dup
504: invokespecial #56
507: ldc           #57
509: invokevirtual #58
512: iload         25
514: invokevirtual #59
517: ldc           #60
519: invokevirtual #58
522: bipush        -36
524: invokevirtual #59
527: ldc           #57
529: invokevirtual #58
532: invokevirtual #61
535: iload         25
537: bipush        -36
539: if_icmpne     546
542: iconst_1
543: goto          547
546: iconst_0
547: invokestatic  #62
550: aload         26
552: invokestatic  #10
555: aload         27
557: invokestatic  #10
560: aload         28
562: invokestatic  #10
565: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test233
Start line: 8959
End line: 9003
Method source code: 
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("7968");
        org.joda.time.JodaTimePermission jodaTimePermission3 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSeconds();
        jodaTimePermission3.checkGuard((java.lang.Object) periodFormatterBuilder8);
        boolean boolean13 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission3);
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.DurationField durationField15 = gregorianChronology14.seconds();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.clockhourOfHalfday();
        jodaTimePermission1.checkGuard((java.lang.Object) gregorianChronology14);
        org.joda.time.JodaTimePermission jodaTimePermission19 = new org.joda.time.JodaTimePermission("7968");
        org.joda.time.JodaTimePermission jodaTimePermission21 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder24 = periodFormatterBuilder22.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = periodFormatterBuilder22.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = periodFormatterBuilder26.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder26.appendSeconds();
        jodaTimePermission21.checkGuard((java.lang.Object) periodFormatterBuilder26);
        boolean boolean31 = jodaTimePermission19.implies((java.security.Permission) jodaTimePermission21);
        boolean boolean32 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder24);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatterBuilder26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder28);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #710
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #379
32: invokespecial #318
35: astore_1
36: new           #316
39: dup
40: ldc_w         #317
43: invokespecial #318
46: astore_2
47: new           #14
50: dup
51: invokespecial #15
54: astore_3
55: aload_3
56: ldc           #16
58: invokevirtual #17
61: astore        4
63: aload_3
64: invokevirtual #25
67: astore        5
69: aload_3
70: invokevirtual #39
73: astore        6
75: aload         6
77: ldc_w         #319
80: invokevirtual #196
83: astore        7
85: aload         6
87: invokevirtual #320
90: astore        8
92: aload_2
93: aload         6
95: invokevirtual #321
98: aload_1
99: aload_2
100: invokevirtual #380
103: istore        9
105: invokestatic  #222
108: astore        10
110: aload         10
112: invokevirtual #224
115: astore        11
117: aload         10
119: invokevirtual #711
122: astore        12
124: aload_1
125: aload         10
127: invokevirtual #321
130: new           #316
133: dup
134: ldc_w         #379
137: invokespecial #318
140: astore        13
142: new           #316
145: dup
146: ldc_w         #317
149: invokespecial #318
152: astore        14
154: new           #14
157: dup
158: invokespecial #15
161: astore        15
163: aload         15
165: ldc           #16
167: invokevirtual #17
170: astore        16
172: aload         15
174: invokevirtual #25
177: astore        17
179: aload         15
181: invokevirtual #39
184: astore        18
186: aload         18
188: ldc_w         #319
191: invokevirtual #196
194: astore        19
196: aload         18
198: invokevirtual #320
201: astore        20
203: aload         14
205: aload         18
207: invokevirtual #321
210: aload         13
212: aload         14
214: invokevirtual #380
217: istore        21
219: aload_1
220: aload         13
222: invokevirtual #380
225: istore        22
227: aload         4
229: invokestatic  #10
232: aload         5
234: invokestatic  #10
237: aload         6
239: invokestatic  #10
242: aload         7
244: invokestatic  #10
247: aload         8
249: invokestatic  #10
252: new           #55
255: dup
256: invokespecial #56
259: ldc           #57
261: invokevirtual #58
264: iload         9
266: invokevirtual #97
269: ldc           #60
271: invokevirtual #58
274: iconst_0
275: invokevirtual #97
278: ldc           #57
280: invokevirtual #58
283: invokevirtual #61
286: iload         9
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #62
299: aload         10
301: invokestatic  #10
304: aload         11
306: invokestatic  #10
309: aload         12
311: invokestatic  #10
314: aload         16
316: invokestatic  #10
319: aload         17
321: invokestatic  #10
324: aload         18
326: invokestatic  #10
329: aload         19
331: invokestatic  #10
334: aload         20
336: invokestatic  #10
339: new           #55
342: dup
343: invokespecial #56
346: ldc           #57
348: invokevirtual #58
351: iload         21
353: invokevirtual #97
356: ldc           #60
358: invokevirtual #58
361: iconst_0
362: invokevirtual #97
365: ldc           #57
367: invokevirtual #58
370: invokevirtual #61
373: iload         21
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #62
386: new           #55
389: dup
390: invokespecial #56
393: ldc           #57
395: invokevirtual #58
398: iload         22
400: invokevirtual #97
403: ldc           #60
405: invokevirtual #58
408: iconst_1
409: invokevirtual #97
412: ldc           #57
414: invokevirtual #58
417: invokevirtual #61
420: iload         22
422: iconst_1
423: if_icmpne     430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #62
434: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test234
Start line: 9006
End line: 9026
Method source code: 
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #712
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #33
62: astore        6
64: aload         6
66: invokevirtual #39
69: astore        7
71: aload         7
73: invokevirtual #33
76: astore        8
78: aload         8
80: invokevirtual #71
83: astore        9
85: aload_2
86: invokestatic  #10
89: aload_3
90: invokestatic  #10
93: aload         4
95: invokestatic  #10
98: aload         5
100: invokestatic  #10
103: aload         6
105: invokestatic  #10
108: aload         7
110: invokestatic  #10
113: aload         8
115: invokestatic  #10
118: aload         9
120: invokestatic  #10
123: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test235
Start line: 9029
End line: 9051
Method source code: 
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendSeparator("2922790", "P-10DT0.001S");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #713
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         7
74: invokevirtual #245
77: astore        8
79: aload         8
81: invokevirtual #245
84: astore        9
86: aload         9
88: ldc_w         #714
91: ldc_w         #715
94: invokevirtual #20
97: astore        10
99: aload_2
100: invokestatic  #10
103: aload_3
104: invokestatic  #10
107: aload         4
109: invokestatic  #10
112: aload         5
114: invokestatic  #10
117: aload         6
119: invokestatic  #10
122: aload         7
124: invokestatic  #10
127: aload         8
129: invokestatic  #10
132: aload         9
134: invokestatic  #10
137: aload         10
139: invokestatic  #10
142: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test236
Start line: 9054
End line: 9145
Method source code: 
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("secondOfDay");
        org.joda.time.Period period3 = org.joda.time.Period.months((-90));
        org.joda.time.Period period5 = period3.minusSeconds(52);
        jodaTimePermission1.checkGuard((java.lang.Object) 52);
        java.security.PermissionCollection permissionCollection7 = jodaTimePermission1.newPermissionCollection();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter11 = periodFormatterBuilder10.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder10.rejectSignedValues(false);
        boolean boolean14 = jodaTimePermission1.equals((java.lang.Object) false);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Chronology chronology17 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant15, readableInstant16);
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeUtils.getZone(dateTimeZone21);
        org.joda.time.chrono.ZonedChronology zonedChronology23 = org.joda.time.chrono.ZonedChronology.getInstance(chronology18, dateTimeZone22);
        long long28 = zonedChronology23.getDateTimeMillis((-28800000), 8, (int) (byte) 10, 1);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology23.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.field.OffsetDateTimeField offsetDateTimeField34 = new org.joda.time.field.OffsetDateTimeField(dateTimeField29, dateTimeFieldType30, (-101), (int) '4', (-90));
        long long37 = offsetDateTimeField34.getDifferenceAsLong((-5756400001L), 515010L);
        org.joda.time.DateTimeField dateTimeField38 = offsetDateTimeField34.getWrappedField();
        int int41 = dateTimeField38.getDifference((long) ' ', (long) (-36));
        org.joda.time.ReadableInterval readableInterval42 = null;
        org.joda.time.ReadableInterval readableInterval43 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval42);
        org.joda.time.MutableInterval mutableInterval44 = readableInterval43.toMutableInterval();
        org.joda.time.DateTime dateTime45 = readableInterval43.getStart();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology48);
        java.lang.String str50 = period49.toString();
        org.joda.time.Period period52 = period49.minusDays((int) (byte) 100);
        int int53 = period49.getMillis();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = period49.toDurationTo(readableInstant54);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean58 = dateTime45.isSupported(dateTimeFieldType57);
        org.joda.time.field.ZeroIsMaxDateTimeField zeroIsMaxDateTimeField59 = new org.joda.time.field.ZeroIsMaxDateTimeField(dateTimeField38, dateTimeFieldType57);
        int int61 = zeroIsMaxDateTimeField59.getMaximumValue((long) (short) 1);
        long long64 = zeroIsMaxDateTimeField59.set(94667280000L, 13);
        long long66 = zeroIsMaxDateTimeField59.roundHalfEven(1715771848000L);
        long long68 = zeroIsMaxDateTimeField59.roundHalfEven((long) 51);
        org.joda.time.ReadablePartial readablePartial69 = null;
        java.util.Locale locale71 = null;
        java.lang.String str72 = zeroIsMaxDateTimeField59.getAsText(readablePartial69, (-106), locale71);
        long long75 = zeroIsMaxDateTimeField59.add(351533000L, 2024);
        org.joda.time.ReadablePartial readablePartial76 = null;
        int int77 = zeroIsMaxDateTimeField59.getMinimumValue(readablePartial76);
        boolean boolean78 = jodaTimePermission1.equals((java.lang.Object) readablePartial76);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(permissionCollection7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodPrinter11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(zonedChronology23);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-908902365677519999L) + "'", long28 == (-908902365677519999L));
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-95948L) + "'", long37 == (-95948L));
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(readableInterval43);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT-0.090S" + "'", str50, "PT-0.090S");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-90) + "'", int53 == (-90));
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1440 + "'", int61 == 1440);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 94656060000L + "'", long64 == 94656060000L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1715771820000L + "'", long66 == 1715771820000L);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-106" + "'", str72, "-106");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 472973000L + "'", long75 == 472973000L);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #716
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc           #18
31: invokespecial #318
34: astore_1
35: bipush        -90
37: invokestatic  #189
40: astore_2
41: aload_2
42: bipush        52
44: invokevirtual #283
47: astore_3
48: aload_1
49: bipush        52
51: invokestatic  #717
54: invokevirtual #321
57: aload_1
58: invokevirtual #718
61: astore        4
63: new           #14
66: dup
67: invokespecial #15
70: astore        5
72: aload         5
74: ldc           #16
76: invokevirtual #17
79: astore        6
81: aload         6
83: invokevirtual #45
86: astore        7
88: aload         6
90: iconst_0
91: invokevirtual #108
94: astore        8
96: aload_1
97: iconst_0
98: invokestatic  #719
101: invokevirtual #384
104: istore        9
106: aconst_null
107: astore        10
109: aconst_null
110: astore        11
112: aload         10
114: aload         11
116: invokestatic  #358
119: astore        12
121: aload         12
123: invokevirtual #359
126: astore        13
128: aload         13
130: invokevirtual #621
133: astore        14
135: aconst_null
136: astore        15
138: aload         15
140: invokestatic  #460
143: astore        16
145: aload         16
147: invokestatic  #461
150: astore        17
152: aload         13
154: aload         17
156: invokestatic  #622
159: astore        18
161: aload         18
163: ldc           #217
165: bipush        8
167: bipush        10
169: iconst_1
170: invokevirtual #720
173: lstore        19
175: aload         18
177: invokevirtual #721
180: astore        21
182: invokestatic  #722
185: astore        22
187: new           #723
190: dup
191: aload         21
193: aload         22
195: bipush        -101
197: bipush        52
199: bipush        -90
201: invokespecial #724
204: astore        23
206: aload         23
208: ldc2_w        #725
211: ldc2_w        #575
214: invokevirtual #727
217: lstore        24
219: aload         23
221: invokevirtual #728
224: astore        26
226: aload         26
228: ldc2_w        #121
231: ldc2_w        #729
234: invokevirtual #731
237: istore        27
239: aconst_null
240: astore        28
242: aload         28
244: invokestatic  #261
247: astore        29
249: aload         29
251: invokeinterface #262,  1
256: astore        30
258: aload         29
260: invokeinterface #732,  1
265: astore        31
267: aconst_null
268: astore        32
270: new           #46
273: dup
274: ldc2_w        #79
277: ldc2_w        #81
280: aload         32
282: invokespecial #83
285: astore        33
287: aload         33
289: invokevirtual #84
292: astore        34
294: aload         33
296: bipush        100
298: invokevirtual #85
301: astore        35
303: aload         33
305: invokevirtual #417
308: istore        36
310: aconst_null
311: astore        37
313: aload         33
315: aload         37
317: invokevirtual #661
320: astore        38
322: new           #46
325: dup
326: aload         31
328: aload         38
330: invokespecial #733
333: astore        39
335: invokestatic  #734
338: astore        40
340: aload         31
342: aload         40
344: invokevirtual #735
347: istore        41
349: new           #736
352: dup
353: aload         26
355: aload         40
357: invokespecial #737
360: astore        42
362: aload         42
364: lconst_1
365: invokevirtual #738
368: istore        43
370: aload         42
372: ldc2_w        #739
375: bipush        13
377: invokevirtual #741
380: lstore        44
382: aload         42
384: ldc2_w        #742
387: invokevirtual #744
390: lstore        46
392: aload         42
394: ldc2_w        #745
397: invokevirtual #744
400: lstore        48
402: aconst_null
403: astore        50
405: aconst_null
406: astore        51
408: aload         42
410: aload         50
412: bipush        -106
414: aload         51
416: invokevirtual #747
419: astore        52
421: aload         42
423: ldc2_w        #748
426: sipush        2024
429: invokevirtual #750
432: lstore        53
434: aconst_null
435: astore        55
437: aload         42
439: aload         55
441: invokevirtual #751
444: istore        56
446: aload_1
447: aload         55
449: invokevirtual #384
452: istore        57
454: aload_2
455: invokestatic  #10
458: aload_3
459: invokestatic  #10
462: aload         4
464: invokestatic  #10
467: aload         6
469: invokestatic  #10
472: aload         7
474: invokestatic  #10
477: aload         8
479: invokestatic  #10
482: new           #55
485: dup
486: invokespecial #56
489: ldc           #57
491: invokevirtual #58
494: iload         9
496: invokevirtual #97
499: ldc           #60
501: invokevirtual #58
504: iconst_0
505: invokevirtual #97
508: ldc           #57
510: invokevirtual #58
513: invokevirtual #61
516: iload         9
518: ifne          525
521: iconst_1
522: goto          526
525: iconst_0
526: invokestatic  #62
529: aload         12
531: invokestatic  #10
534: aload         13
536: invokestatic  #10
539: aload         14
541: invokestatic  #10
544: aload         16
546: invokestatic  #10
549: aload         17
551: invokestatic  #10
554: aload         18
556: invokestatic  #10
559: aload         21
561: invokestatic  #10
564: aload         22
566: invokestatic  #10
569: new           #55
572: dup
573: invokespecial #56
576: ldc           #57
578: invokevirtual #58
581: lload         24
583: invokevirtual #386
586: ldc           #60
588: invokevirtual #58
591: ldc2_w        #752
594: invokevirtual #386
597: ldc           #57
599: invokevirtual #58
602: invokevirtual #61
605: lload         24
607: ldc2_w        #752
610: lcmp
611: ifne          618
614: iconst_1
615: goto          619
618: iconst_0
619: invokestatic  #62
622: aload         26
624: invokestatic  #10
627: new           #55
630: dup
631: invokespecial #56
634: ldc           #57
636: invokevirtual #58
639: iload         27
641: invokevirtual #59
644: ldc           #60
646: invokevirtual #58
649: iconst_0
650: invokevirtual #59
653: ldc           #57
655: invokevirtual #58
658: invokevirtual #61
661: iload         27
663: ifne          670
666: iconst_1
667: goto          671
670: iconst_0
671: invokestatic  #62
674: aload         29
676: invokestatic  #10
679: aload         30
681: invokestatic  #10
684: aload         31
686: invokestatic  #10
689: new           #55
692: dup
693: invokespecial #56
696: ldc           #57
698: invokevirtual #58
701: aload         34
703: invokevirtual #58
706: ldc           #94
708: invokevirtual #58
711: invokevirtual #61
714: aload         34
716: ldc           #95
718: invokestatic  #96
721: aload         35
723: invokestatic  #10
726: new           #55
729: dup
730: invokespecial #56
733: ldc           #57
735: invokevirtual #58
738: iload         36
740: invokevirtual #59
743: ldc           #60
745: invokevirtual #58
748: bipush        -90
750: invokevirtual #59
753: ldc           #57
755: invokevirtual #58
758: invokevirtual #61
761: iload         36
763: bipush        -90
765: if_icmpne     772
768: iconst_1
769: goto          773
772: iconst_0
773: invokestatic  #62
776: aload         38
778: invokestatic  #10
781: aload         40
783: invokestatic  #10
786: new           #55
789: dup
790: invokespecial #56
793: ldc           #57
795: invokevirtual #58
798: iload         41
800: invokevirtual #97
803: ldc           #60
805: invokevirtual #58
808: iconst_1
809: invokevirtual #97
812: ldc           #57
814: invokevirtual #58
817: invokevirtual #61
820: iload         41
822: iconst_1
823: if_icmpne     830
826: iconst_1
827: goto          831
830: iconst_0
831: invokestatic  #62
834: new           #55
837: dup
838: invokespecial #56
841: ldc           #57
843: invokevirtual #58
846: iload         43
848: invokevirtual #59
851: ldc           #60
853: invokevirtual #58
856: sipush        1440
859: invokevirtual #59
862: ldc           #57
864: invokevirtual #58
867: invokevirtual #61
870: iload         43
872: sipush        1440
875: if_icmpne     882
878: iconst_1
879: goto          883
882: iconst_0
883: invokestatic  #62
886: new           #55
889: dup
890: invokespecial #56
893: ldc           #57
895: invokevirtual #58
898: lload         46
900: invokevirtual #386
903: ldc           #60
905: invokevirtual #58
908: ldc2_w        #754
911: invokevirtual #386
914: ldc           #57
916: invokevirtual #58
919: invokevirtual #61
922: lload         46
924: ldc2_w        #754
927: lcmp
928: ifne          935
931: iconst_1
932: goto          936
935: iconst_0
936: invokestatic  #62
939: new           #55
942: dup
943: invokespecial #56
946: ldc           #57
948: invokevirtual #58
951: lload         48
953: invokevirtual #386
956: ldc           #60
958: invokevirtual #58
961: lconst_0
962: invokevirtual #386
965: ldc           #57
967: invokevirtual #58
970: invokevirtual #61
973: lload         48
975: lconst_0
976: lcmp
977: ifne          984
980: iconst_1
981: goto          985
984: iconst_0
985: invokestatic  #62
988: new           #55
991: dup
992: invokespecial #56
995: ldc           #57
997: invokevirtual #58
1000: aload         52
1002: invokevirtual #58
1005: ldc_w         #756
1008: invokevirtual #58
1011: invokevirtual #61
1014: aload         52
1016: ldc_w         #477
1019: invokestatic  #96
1022: new           #55
1025: dup
1026: invokespecial #56
1029: ldc           #57
1031: invokevirtual #58
1034: lload         53
1036: invokevirtual #386
1039: ldc           #60
1041: invokevirtual #58
1044: ldc2_w        #757
1047: invokevirtual #386
1050: ldc           #57
1052: invokevirtual #58
1055: invokevirtual #61
1058: lload         53
1060: ldc2_w        #757
1063: lcmp
1064: ifne          1071
1067: iconst_1
1068: goto          1072
1071: iconst_0
1072: invokestatic  #62
1075: new           #55
1078: dup
1079: invokespecial #56
1082: ldc           #57
1084: invokevirtual #58
1087: iload         56
1089: invokevirtual #59
1092: ldc           #60
1094: invokevirtual #58
1097: iconst_1
1098: invokevirtual #59
1101: ldc           #57
1103: invokevirtual #58
1106: invokevirtual #61
1109: iload         56
1111: iconst_1
1112: if_icmpne     1119
1115: iconst_1
1116: goto          1120
1119: iconst_0
1120: invokestatic  #62
1123: new           #55
1126: dup
1127: invokespecial #56
1130: ldc           #57
1132: invokevirtual #58
1135: iload         57
1137: invokevirtual #97
1140: ldc           #60
1142: invokevirtual #58
1145: iconst_0
1146: invokevirtual #97
1149: ldc           #57
1151: invokevirtual #58
1154: invokevirtual #61
1157: iload         57
1159: ifne          1166
1162: iconst_1
1163: goto          1167
1166: iconst_0
1167: invokestatic  #62
1170: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test237
Start line: 9148
End line: 9208
Method source code: 
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.joda.time.format.PeriodFormatterBuilder.Literal literal0 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology3);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period7 = period4.minusDays((int) (byte) 100);
        java.util.Locale locale9 = null;
        int int10 = literal0.countFieldsToPrint((org.joda.time.ReadablePeriod) period7, 999, locale9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType14 = null;
        int int15 = period11.get(durationFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period18 = period11.withField(durationFieldType16, 8);
        org.joda.time.Period period20 = period18.plusMonths((int) (short) 1);
        java.util.Locale locale22 = null;
        int int23 = literal0.countFieldsToPrint((org.joda.time.ReadablePeriod) period18, (-292275054), locale22);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder24 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = periodFormatterBuilder24.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder24.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = periodFormatterBuilder24.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder24.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder24.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder24.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter34 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale35 = null;
        org.joda.time.format.PeriodFormatter periodFormatter36 = periodFormatter34.withLocale(locale35);
        boolean boolean37 = periodFormatter36.isParser();
        java.util.Locale locale38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter36.withLocale(locale38);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder40 = periodFormatterBuilder33.append(periodFormatter39);
        org.joda.time.format.PeriodParser periodParser41 = periodFormatterBuilder40.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter42 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal0, periodParser41);
        java.util.Locale locale43 = periodFormatter42.getLocale();
        org.junit.Assert.assertNotNull(literal0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT-0.090S" + "'", str5, "PT-0.090S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder28);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatter34);
        org.junit.Assert.assertNotNull(periodFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatterBuilder40);
        org.junit.Assert.assertNotNull(periodParser41);
        org.junit.Assert.assertNull(locale43);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #759
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #78
28: astore_1
29: aconst_null
30: astore_2
31: new           #46
34: dup
35: ldc2_w        #79
38: ldc2_w        #81
41: aload_2
42: invokespecial #83
45: astore_3
46: aload_3
47: invokevirtual #84
50: astore        4
52: aload_3
53: bipush        100
55: invokevirtual #85
58: astore        5
60: aconst_null
61: astore        6
63: aload_1
64: aload         5
66: sipush        999
69: aload         6
71: invokevirtual #86
74: istore        7
76: getstatic     #8
79: astore        8
81: aload         8
83: iconst_m1
84: invokevirtual #9
87: astore        9
89: aconst_null
90: astore        10
92: aload         8
94: aload         10
96: invokevirtual #201
99: istore        11
101: invokestatic  #202
104: astore        12
106: aload         8
108: aload         12
110: bipush        8
112: invokevirtual #203
115: astore        13
117: aload         13
119: iconst_1
120: invokevirtual #251
123: astore        14
125: aconst_null
126: astore        15
128: aload_1
129: aload         13
131: ldc           #252
133: aload         15
135: invokevirtual #86
138: istore        16
140: new           #14
143: dup
144: invokespecial #15
147: astore        17
149: aload         17
151: ldc           #16
153: invokevirtual #17
156: astore        18
158: aload         17
160: invokevirtual #25
163: astore        19
165: aload         17
167: invokevirtual #76
170: astore        20
172: aload         17
174: invokevirtual #77
177: astore        21
179: aload         17
181: ldc           #16
183: invokevirtual #17
186: astore        22
188: aload         17
190: ldc           #141
192: invokevirtual #28
195: astore        23
197: invokestatic  #12
200: astore        24
202: aconst_null
203: astore        25
205: aload         24
207: aload         25
209: invokevirtual #88
212: astore        26
214: aload         26
216: invokevirtual #89
219: istore        27
221: aconst_null
222: astore        28
224: aload         26
226: aload         28
228: invokevirtual #88
231: astore        29
233: aload         23
235: aload         29
237: invokevirtual #118
240: astore        30
242: aload         30
244: invokevirtual #142
247: astore        31
249: new           #164
252: dup
253: aload_1
254: aload         31
256: invokespecial #165
259: astore        32
261: aload         32
263: invokevirtual #660
266: astore        33
268: aload_1
269: invokestatic  #10
272: new           #55
275: dup
276: invokespecial #56
279: ldc           #57
281: invokevirtual #58
284: aload         4
286: invokevirtual #58
289: ldc           #94
291: invokevirtual #58
294: invokevirtual #61
297: aload         4
299: ldc           #95
301: invokestatic  #96
304: aload         5
306: invokestatic  #10
309: new           #55
312: dup
313: invokespecial #56
316: ldc           #57
318: invokevirtual #58
321: iload         7
323: invokevirtual #59
326: ldc           #60
328: invokevirtual #58
331: iconst_0
332: invokevirtual #59
335: ldc           #57
337: invokevirtual #58
340: invokevirtual #61
343: iload         7
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #62
356: aload         8
358: invokestatic  #10
361: aload         9
363: invokestatic  #10
366: new           #55
369: dup
370: invokespecial #56
373: ldc           #57
375: invokevirtual #58
378: iload         11
380: invokevirtual #59
383: ldc           #60
385: invokevirtual #58
388: iconst_0
389: invokevirtual #59
392: ldc           #57
394: invokevirtual #58
397: invokevirtual #61
400: iload         11
402: ifne          409
405: iconst_1
406: goto          410
409: iconst_0
410: invokestatic  #62
413: aload         12
415: invokestatic  #10
418: aload         13
420: invokestatic  #10
423: aload         14
425: invokestatic  #10
428: new           #55
431: dup
432: invokespecial #56
435: ldc           #57
437: invokevirtual #58
440: iload         16
442: invokevirtual #59
445: ldc           #60
447: invokevirtual #58
450: iconst_0
451: invokevirtual #59
454: ldc           #57
456: invokevirtual #58
459: invokevirtual #61
462: iload         16
464: ifne          471
467: iconst_1
468: goto          472
471: iconst_0
472: invokestatic  #62
475: aload         18
477: invokestatic  #10
480: aload         19
482: invokestatic  #10
485: aload         20
487: invokestatic  #10
490: aload         21
492: invokestatic  #10
495: aload         22
497: invokestatic  #10
500: aload         23
502: invokestatic  #10
505: aload         24
507: invokestatic  #10
510: aload         26
512: invokestatic  #10
515: new           #55
518: dup
519: invokespecial #56
522: ldc           #57
524: invokevirtual #58
527: iload         27
529: invokevirtual #97
532: ldc           #60
534: invokevirtual #58
537: iconst_1
538: invokevirtual #97
541: ldc           #57
543: invokevirtual #58
546: invokevirtual #61
549: iload         27
551: iconst_1
552: if_icmpne     559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #62
563: aload         29
565: invokestatic  #10
568: aload         30
570: invokestatic  #10
573: aload         31
575: invokestatic  #10
578: aload         33
580: invokestatic  #354
583: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test238
Start line: 9211
End line: 9231
Method source code: 
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder6.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #760
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         6
118: invokevirtual #71
121: astore        9
123: aload_2
124: invokestatic  #10
127: aload_3
128: invokestatic  #10
131: aload         4
133: invokestatic  #10
136: aload         5
138: invokestatic  #10
141: aload         6
143: invokestatic  #10
146: aload         7
148: invokestatic  #10
151: aload         8
153: invokestatic  #10
156: aload         9
158: invokestatic  #10
161: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test239
Start line: 9234
End line: 9252
Method source code: 
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder0.appendSeparator("GregorianChronology[+10:52]");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #761
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: invokevirtual #185
69: astore        7
71: aload_1
72: ldc_w         #762
75: invokevirtual #37
78: astore        8
80: aload_2
81: invokestatic  #10
84: aload_3
85: invokestatic  #10
88: aload         4
90: invokestatic  #10
93: aload         5
95: invokestatic  #10
98: aload         6
100: invokestatic  #10
103: aload         7
105: invokestatic  #10
108: aload         8
110: invokestatic  #10
113: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test240
Start line: 9255
End line: 9336
Method source code: 
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        periodFormatterBuilder4.clear();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatterBuilder4.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal11 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter14.isParser();
        org.joda.time.format.PeriodParser periodParser16 = periodFormatter14.getParser();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType25 = org.joda.time.DateTimeUtils.getPeriodType(periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period(100L, (long) (short) -1, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        boolean boolean28 = periodType24.isSupported(durationFieldType27);
        mutablePeriod21.add(durationFieldType27, (int) (byte) 100);
        java.lang.String str31 = mutablePeriod21.toString();
        java.util.Locale locale34 = null;
        int int35 = periodParser16.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod21, "weekyear", (int) '#', locale34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder4.append((org.joda.time.format.PeriodPrinter) literal11, periodParser16);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        int int38 = period37.getHours();
        org.joda.time.Period period40 = period37.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod41 = period40.toMutablePeriod();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType45 = org.joda.time.DateTimeUtils.getPeriodType(periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period(100L, (long) (short) -1, periodType44);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.weeks();
        boolean boolean48 = periodType44.isSupported(durationFieldType47);
        mutablePeriod41.add(durationFieldType47, (int) (byte) 100);
        java.lang.String str51 = mutablePeriod41.toString();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.years();
        mutablePeriod41.set(durationFieldType52, (int) (short) -1);
        mutablePeriod41.addYears((int) '4');
        mutablePeriod41.addMillis((-101));
        java.util.Locale locale61 = null;
        int int62 = literal11.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod41, "-106", 315532800, locale61);
        mutablePeriod41.addYears((-100));
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodParser16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P100W" + "'", str31, "P100W");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-36) + "'", int35 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "P100W" + "'", str51, "P100W");
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-315532801) + "'", int62 == (-315532801));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #763
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: invokevirtual #212
73: aload         4
75: invokevirtual #161
78: astore        7
80: new           #392
83: dup
84: ldc           #74
86: invokespecial #393
89: astore        8
91: invokestatic  #12
94: astore        9
96: aconst_null
97: astore        10
99: aload         9
101: aload         10
103: invokevirtual #88
106: astore        11
108: aload         11
110: invokevirtual #89
113: istore        12
115: aload         11
117: invokevirtual #119
120: astore        13
122: getstatic     #8
125: astore        14
127: aload         14
129: invokevirtual #216
132: istore        15
134: aload         14
136: iconst_0
137: invokevirtual #200
140: astore        16
142: aload         16
144: invokevirtual #205
147: astore        17
149: invokestatic  #171
152: astore        18
154: aload         18
156: invokestatic  #172
159: astore        19
161: new           #46
164: dup
165: ldc2_w        #79
168: ldc2_w        #173
171: aload         18
173: invokespecial #175
176: astore        20
178: invokestatic  #176
181: astore        21
183: aload         18
185: aload         21
187: invokevirtual #177
190: istore        22
192: aload         17
194: aload         21
196: bipush        100
198: invokevirtual #226
201: aload         17
203: invokevirtual #235
206: astore        23
208: aconst_null
209: astore        24
211: aload         13
213: aload         17
215: ldc           #135
217: bipush        35
219: aload         24
221: invokeinterface #231,  5
226: istore        25
228: aload         4
230: aload         8
232: aload         13
234: invokevirtual #87
237: astore        26
239: getstatic     #8
242: astore        27
244: aload         27
246: invokevirtual #216
249: istore        28
251: aload         27
253: iconst_0
254: invokevirtual #200
257: astore        29
259: aload         29
261: invokevirtual #205
264: astore        30
266: invokestatic  #171
269: astore        31
271: aload         31
273: invokestatic  #172
276: astore        32
278: new           #46
281: dup
282: ldc2_w        #79
285: ldc2_w        #173
288: aload         31
290: invokespecial #175
293: astore        33
295: invokestatic  #176
298: astore        34
300: aload         31
302: aload         34
304: invokevirtual #177
307: istore        35
309: aload         30
311: aload         34
313: bipush        100
315: invokevirtual #226
318: aload         30
320: invokevirtual #235
323: astore        36
325: invokestatic  #300
328: astore        37
330: aload         30
332: aload         37
334: iconst_m1
335: invokevirtual #301
338: aload         30
340: bipush        52
342: invokevirtual #475
345: aload         30
347: bipush        -101
349: invokevirtual #476
352: aconst_null
353: astore        38
355: aload         8
357: aload         30
359: ldc_w         #477
362: ldc_w         #276
365: aload         38
367: invokevirtual #221
370: istore        39
372: aload         30
374: bipush        -100
376: invokevirtual #475
379: aload_2
380: invokestatic  #10
383: aload_3
384: invokestatic  #10
387: aload         4
389: invokestatic  #10
392: aload         5
394: invokestatic  #10
397: aload         6
399: invokestatic  #10
402: aload         7
404: invokestatic  #10
407: aload         9
409: invokestatic  #10
412: aload         11
414: invokestatic  #10
417: new           #55
420: dup
421: invokespecial #56
424: ldc           #57
426: invokevirtual #58
429: iload         12
431: invokevirtual #97
434: ldc           #60
436: invokevirtual #58
439: iconst_1
440: invokevirtual #97
443: ldc           #57
445: invokevirtual #58
448: invokevirtual #61
451: iload         12
453: iconst_1
454: if_icmpne     461
457: iconst_1
458: goto          462
461: iconst_0
462: invokestatic  #62
465: aload         13
467: invokestatic  #10
470: aload         14
472: invokestatic  #10
475: new           #55
478: dup
479: invokespecial #56
482: ldc           #57
484: invokevirtual #58
487: iload         15
489: invokevirtual #59
492: ldc           #60
494: invokevirtual #58
497: iconst_0
498: invokevirtual #59
501: ldc           #57
503: invokevirtual #58
506: invokevirtual #61
509: iload         15
511: ifne          518
514: iconst_1
515: goto          519
518: iconst_0
519: invokestatic  #62
522: aload         16
524: invokestatic  #10
527: aload         17
529: invokestatic  #10
532: aload         18
534: invokestatic  #10
537: aload         19
539: invokestatic  #10
542: aload         21
544: invokestatic  #10
547: new           #55
550: dup
551: invokespecial #56
554: ldc           #57
556: invokevirtual #58
559: iload         22
561: invokevirtual #97
564: ldc           #60
566: invokevirtual #58
569: iconst_0
570: invokevirtual #97
573: ldc           #57
575: invokevirtual #58
578: invokevirtual #61
581: iload         22
583: ifne          590
586: iconst_1
587: goto          591
590: iconst_0
591: invokestatic  #62
594: new           #55
597: dup
598: invokespecial #56
601: ldc           #57
603: invokevirtual #58
606: aload         23
608: invokevirtual #58
611: ldc           #238
613: invokevirtual #58
616: invokevirtual #61
619: aload         23
621: ldc           #239
623: invokestatic  #96
626: new           #55
629: dup
630: invokespecial #56
633: ldc           #57
635: invokevirtual #58
638: iload         25
640: invokevirtual #59
643: ldc           #60
645: invokevirtual #58
648: bipush        -36
650: invokevirtual #59
653: ldc           #57
655: invokevirtual #58
658: invokevirtual #61
661: iload         25
663: bipush        -36
665: if_icmpne     672
668: iconst_1
669: goto          673
672: iconst_0
673: invokestatic  #62
676: aload         26
678: invokestatic  #10
681: aload         27
683: invokestatic  #10
686: new           #55
689: dup
690: invokespecial #56
693: ldc           #57
695: invokevirtual #58
698: iload         28
700: invokevirtual #59
703: ldc           #60
705: invokevirtual #58
708: iconst_0
709: invokevirtual #59
712: ldc           #57
714: invokevirtual #58
717: invokevirtual #61
720: iload         28
722: ifne          729
725: iconst_1
726: goto          730
729: iconst_0
730: invokestatic  #62
733: aload         29
735: invokestatic  #10
738: aload         30
740: invokestatic  #10
743: aload         31
745: invokestatic  #10
748: aload         32
750: invokestatic  #10
753: aload         34
755: invokestatic  #10
758: new           #55
761: dup
762: invokespecial #56
765: ldc           #57
767: invokevirtual #58
770: iload         35
772: invokevirtual #97
775: ldc           #60
777: invokevirtual #58
780: iconst_0
781: invokevirtual #97
784: ldc           #57
786: invokevirtual #58
789: invokevirtual #61
792: iload         35
794: ifne          801
797: iconst_1
798: goto          802
801: iconst_0
802: invokestatic  #62
805: new           #55
808: dup
809: invokespecial #56
812: ldc           #57
814: invokevirtual #58
817: aload         36
819: invokevirtual #58
822: ldc           #238
824: invokevirtual #58
827: invokevirtual #61
830: aload         36
832: ldc           #239
834: invokestatic  #96
837: aload         37
839: invokestatic  #10
842: new           #55
845: dup
846: invokespecial #56
849: ldc           #57
851: invokevirtual #58
854: iload         39
856: invokevirtual #59
859: ldc           #60
861: invokevirtual #58
864: ldc_w         #479
867: invokevirtual #59
870: ldc           #57
872: invokevirtual #58
875: invokevirtual #61
878: iload         39
880: ldc_w         #479
883: if_icmpne     890
886: iconst_1
887: goto          891
890: iconst_0
891: invokestatic  #62
894: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test241
Start line: 9339
End line: 9361
Method source code: 
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodParser periodParser10 = periodFormatterBuilder0.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder0.appendPrefix("5258880", "1202");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodParser10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #764
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload_1
74: invokevirtual #142
77: astore        8
79: aload_1
80: invokevirtual #76
83: astore        9
85: aload_1
86: ldc_w         #765
89: ldc_w         #766
92: invokevirtual #41
95: astore        10
97: aload_2
98: invokestatic  #10
101: aload_3
102: invokestatic  #10
105: aload         4
107: invokestatic  #10
110: aload         5
112: invokestatic  #10
115: aload         6
117: invokestatic  #10
120: aload         7
122: invokestatic  #10
125: aload         8
127: invokestatic  #10
130: aload         9
132: invokestatic  #10
135: aload         10
137: invokestatic  #10
140: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test242
Start line: 9364
End line: 9457
Method source code: 
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.printZeroIfSupported();
        org.joda.time.format.PeriodPrinter periodPrinter10 = periodFormatterBuilder4.toPrinter();
        org.joda.time.format.PeriodFormatter periodFormatter11 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter11.withLocale(locale12);
        boolean boolean14 = periodFormatter11.isParser();
        java.util.Locale locale15 = null;
        org.joda.time.format.PeriodFormatter periodFormatter16 = periodFormatter11.withLocale(locale15);
        org.joda.time.format.PeriodPrinter periodPrinter17 = periodFormatter16.getPrinter();
        java.lang.String[] strArray22 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal23 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology26);
        java.lang.String str28 = period27.toString();
        org.joda.time.Period period30 = period27.minusDays((int) (byte) 100);
        java.util.Locale locale32 = null;
        int int33 = literal23.countFieldsToPrint((org.joda.time.ReadablePeriod) period30, 999, locale32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = period34.get(durationFieldType37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period41 = period34.withField(durationFieldType39, 8);
        org.joda.time.Period period43 = period41.plusMonths((int) (short) 1);
        java.util.Locale locale45 = null;
        int int46 = literal23.countFieldsToPrint((org.joda.time.ReadablePeriod) period41, (-292275054), locale45);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal47 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology50);
        java.lang.String str52 = period51.toString();
        org.joda.time.Period period54 = period51.minusDays((int) (byte) 100);
        java.util.Locale locale56 = null;
        int int57 = literal47.countFieldsToPrint((org.joda.time.ReadablePeriod) period54, 999, locale56);
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period58.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType61 = null;
        int int62 = period58.get(durationFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period65 = period58.withField(durationFieldType63, 8);
        org.joda.time.Period period67 = period65.plusMonths((int) (short) 1);
        java.util.Locale locale69 = null;
        int int70 = literal47.countFieldsToPrint((org.joda.time.ReadablePeriod) period65, (-292275054), locale69);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator73 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray22, (org.joda.time.format.PeriodPrinter) literal23, (org.joda.time.format.PeriodParser) literal47, true, true);
        org.joda.time.format.PeriodFormatter periodFormatter74 = new org.joda.time.format.PeriodFormatter(periodPrinter17, (org.joda.time.format.PeriodParser) literal47);
        org.joda.time.format.PeriodFormatter periodFormatter75 = new org.joda.time.format.PeriodFormatter(periodPrinter10, (org.joda.time.format.PeriodParser) literal47);
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        java.util.Locale locale78 = null;
        int int79 = literal47.countFieldsToPrint(readablePeriod76, (-90), locale78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodPrinter10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(periodFormatter16);
        org.junit.Assert.assertNotNull(periodPrinter17);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(literal23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT-0.090S" + "'", str28, "PT-0.090S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(literal47);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT-0.090S" + "'", str52, "PT-0.090S");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #767
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         4
71: invokevirtual #149
74: astore        7
76: aload         4
78: invokevirtual #45
81: astore        8
83: invokestatic  #12
86: astore        9
88: aconst_null
89: astore        10
91: aload         9
93: aload         10
95: invokevirtual #88
98: astore        11
100: aload         9
102: invokevirtual #89
105: istore        12
107: aconst_null
108: astore        13
110: aload         9
112: aload         13
114: invokevirtual #88
117: astore        14
119: aload         14
121: invokevirtual #90
124: astore        15
126: iconst_2
127: anewarray     #99
130: dup
131: iconst_0
132: ldc           #141
134: aastore
135: dup
136: iconst_1
137: ldc           #250
139: aastore
140: astore        16
142: getstatic     #78
145: astore        17
147: aconst_null
148: astore        18
150: new           #46
153: dup
154: ldc2_w        #79
157: ldc2_w        #81
160: aload         18
162: invokespecial #83
165: astore        19
167: aload         19
169: invokevirtual #84
172: astore        20
174: aload         19
176: bipush        100
178: invokevirtual #85
181: astore        21
183: aconst_null
184: astore        22
186: aload         17
188: aload         21
190: sipush        999
193: aload         22
195: invokevirtual #86
198: istore        23
200: getstatic     #8
203: astore        24
205: aload         24
207: iconst_m1
208: invokevirtual #9
211: astore        25
213: aconst_null
214: astore        26
216: aload         24
218: aload         26
220: invokevirtual #201
223: istore        27
225: invokestatic  #202
228: astore        28
230: aload         24
232: aload         28
234: bipush        8
236: invokevirtual #203
239: astore        29
241: aload         29
243: iconst_1
244: invokevirtual #251
247: astore        30
249: aconst_null
250: astore        31
252: aload         17
254: aload         29
256: ldc           #252
258: aload         31
260: invokevirtual #86
263: istore        32
265: getstatic     #78
268: astore        33
270: aconst_null
271: astore        34
273: new           #46
276: dup
277: ldc2_w        #79
280: ldc2_w        #81
283: aload         34
285: invokespecial #83
288: astore        35
290: aload         35
292: invokevirtual #84
295: astore        36
297: aload         35
299: bipush        100
301: invokevirtual #85
304: astore        37
306: aconst_null
307: astore        38
309: aload         33
311: aload         37
313: sipush        999
316: aload         38
318: invokevirtual #86
321: istore        39
323: getstatic     #8
326: astore        40
328: aload         40
330: iconst_m1
331: invokevirtual #9
334: astore        41
336: aconst_null
337: astore        42
339: aload         40
341: aload         42
343: invokevirtual #201
346: istore        43
348: invokestatic  #202
351: astore        44
353: aload         40
355: aload         44
357: bipush        8
359: invokevirtual #203
362: astore        45
364: aload         45
366: iconst_1
367: invokevirtual #251
370: astore        46
372: aconst_null
373: astore        47
375: aload         33
377: aload         45
379: ldc           #252
381: aload         47
383: invokevirtual #86
386: istore        48
388: new           #105
391: dup
392: ldc           #131
394: ldc           #253
396: aload         16
398: aload         17
400: aload         33
402: iconst_1
403: iconst_1
404: invokespecial #107
407: astore        49
409: new           #164
412: dup
413: aload         15
415: aload         33
417: invokespecial #165
420: astore        50
422: new           #164
425: dup
426: aload         8
428: aload         33
430: invokespecial #165
433: astore        51
435: aconst_null
436: astore        52
438: aconst_null
439: astore        53
441: aload         33
443: aload         52
445: bipush        -90
447: aload         53
449: invokevirtual #86
452: istore        54
454: aload_2
455: invokestatic  #10
458: aload_3
459: invokestatic  #10
462: aload         4
464: invokestatic  #10
467: aload         5
469: invokestatic  #10
472: aload         6
474: invokestatic  #10
477: aload         7
479: invokestatic  #10
482: aload         8
484: invokestatic  #10
487: aload         9
489: invokestatic  #10
492: aload         11
494: invokestatic  #10
497: new           #55
500: dup
501: invokespecial #56
504: ldc           #57
506: invokevirtual #58
509: iload         12
511: invokevirtual #97
514: ldc           #60
516: invokevirtual #58
519: iconst_1
520: invokevirtual #97
523: ldc           #57
525: invokevirtual #58
528: invokevirtual #61
531: iload         12
533: iconst_1
534: if_icmpne     541
537: iconst_1
538: goto          542
541: iconst_0
542: invokestatic  #62
545: aload         14
547: invokestatic  #10
550: aload         15
552: invokestatic  #10
555: aload         16
557: invokestatic  #10
560: aload         17
562: invokestatic  #10
565: new           #55
568: dup
569: invokespecial #56
572: ldc           #57
574: invokevirtual #58
577: aload         20
579: invokevirtual #58
582: ldc           #94
584: invokevirtual #58
587: invokevirtual #61
590: aload         20
592: ldc           #95
594: invokestatic  #96
597: aload         21
599: invokestatic  #10
602: new           #55
605: dup
606: invokespecial #56
609: ldc           #57
611: invokevirtual #58
614: iload         23
616: invokevirtual #59
619: ldc           #60
621: invokevirtual #58
624: iconst_0
625: invokevirtual #59
628: ldc           #57
630: invokevirtual #58
633: invokevirtual #61
636: iload         23
638: ifne          645
641: iconst_1
642: goto          646
645: iconst_0
646: invokestatic  #62
649: aload         24
651: invokestatic  #10
654: aload         25
656: invokestatic  #10
659: new           #55
662: dup
663: invokespecial #56
666: ldc           #57
668: invokevirtual #58
671: iload         27
673: invokevirtual #59
676: ldc           #60
678: invokevirtual #58
681: iconst_0
682: invokevirtual #59
685: ldc           #57
687: invokevirtual #58
690: invokevirtual #61
693: iload         27
695: ifne          702
698: iconst_1
699: goto          703
702: iconst_0
703: invokestatic  #62
706: aload         28
708: invokestatic  #10
711: aload         29
713: invokestatic  #10
716: aload         30
718: invokestatic  #10
721: new           #55
724: dup
725: invokespecial #56
728: ldc           #57
730: invokevirtual #58
733: iload         32
735: invokevirtual #59
738: ldc           #60
740: invokevirtual #58
743: iconst_0
744: invokevirtual #59
747: ldc           #57
749: invokevirtual #58
752: invokevirtual #61
755: iload         32
757: ifne          764
760: iconst_1
761: goto          765
764: iconst_0
765: invokestatic  #62
768: aload         33
770: invokestatic  #10
773: new           #55
776: dup
777: invokespecial #56
780: ldc           #57
782: invokevirtual #58
785: aload         36
787: invokevirtual #58
790: ldc           #94
792: invokevirtual #58
795: invokevirtual #61
798: aload         36
800: ldc           #95
802: invokestatic  #96
805: aload         37
807: invokestatic  #10
810: new           #55
813: dup
814: invokespecial #56
817: ldc           #57
819: invokevirtual #58
822: iload         39
824: invokevirtual #59
827: ldc           #60
829: invokevirtual #58
832: iconst_0
833: invokevirtual #59
836: ldc           #57
838: invokevirtual #58
841: invokevirtual #61
844: iload         39
846: ifne          853
849: iconst_1
850: goto          854
853: iconst_0
854: invokestatic  #62
857: aload         40
859: invokestatic  #10
862: aload         41
864: invokestatic  #10
867: new           #55
870: dup
871: invokespecial #56
874: ldc           #57
876: invokevirtual #58
879: iload         43
881: invokevirtual #59
884: ldc           #60
886: invokevirtual #58
889: iconst_0
890: invokevirtual #59
893: ldc           #57
895: invokevirtual #58
898: invokevirtual #61
901: iload         43
903: ifne          910
906: iconst_1
907: goto          911
910: iconst_0
911: invokestatic  #62
914: aload         44
916: invokestatic  #10
919: aload         45
921: invokestatic  #10
924: aload         46
926: invokestatic  #10
929: new           #55
932: dup
933: invokespecial #56
936: ldc           #57
938: invokevirtual #58
941: iload         48
943: invokevirtual #59
946: ldc           #60
948: invokevirtual #58
951: iconst_0
952: invokevirtual #59
955: ldc           #57
957: invokevirtual #58
960: invokevirtual #61
963: iload         48
965: ifne          972
968: iconst_1
969: goto          973
972: iconst_0
973: invokestatic  #62
976: new           #55
979: dup
980: invokespecial #56
983: ldc           #57
985: invokevirtual #58
988: iload         54
990: invokevirtual #59
993: ldc           #60
995: invokevirtual #58
998: iconst_0
999: invokevirtual #59
1002: ldc           #57
1004: invokevirtual #58
1007: invokevirtual #61
1010: iload         54
1012: ifne          1019
1015: iconst_1
1016: goto          1020
1019: iconst_0
1020: invokestatic  #62
1023: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test243
Start line: 9460
End line: 9481
Method source code: 
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        periodFormatterBuilder3.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder3.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.printZeroRarelyLast();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #768
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: ldc           #34
48: ldc           #35
50: invokevirtual #20
53: astore        4
55: aload_3
56: invokevirtual #212
59: aload_3
60: invokevirtual #185
63: astore        5
65: aload_3
66: invokevirtual #185
69: astore        6
71: aload         6
73: invokevirtual #139
76: astore        7
78: aload         7
80: invokevirtual #72
83: astore        8
85: aload         7
87: invokevirtual #488
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test244
Start line: 9484
End line: 9580
Method source code: 
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant21, readableInstant22);
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.Period period26 = new org.joda.time.Period(1L, (long) 1, chronology24);
        int[] intArray27 = period26.getValues();
        java.util.Locale locale29 = null;
        int int30 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period26, 2922790, locale29);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder31.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder31.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder31.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder31.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal37 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology40);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period44 = period41.minusDays((int) (byte) 100);
        java.util.Locale locale46 = null;
        int int47 = literal37.countFieldsToPrint((org.joda.time.ReadablePeriod) period44, 999, locale46);
        org.joda.time.format.PeriodParser periodParser48 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder49 = periodFormatterBuilder31.append((org.joda.time.format.PeriodPrinter) literal37, periodParser48);
        org.joda.time.format.PeriodFormatter periodFormatter50 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal6, (org.joda.time.format.PeriodParser) literal37);
        org.joda.time.Period period52 = org.joda.time.Period.millis(1);
        int int53 = period52.getMonths();
        int int54 = period52.size();
        org.joda.time.Period period56 = period52.withDays((int) (byte) 100);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType60 = null;
        int int61 = period57.get(durationFieldType60);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period64 = period57.withField(durationFieldType62, 8);
        java.lang.String str65 = durationFieldType62.getName();
        org.joda.time.Period period67 = period52.withField(durationFieldType62, 1);
        org.joda.time.Period period69 = period52.minusDays(10);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        mutablePeriod70.setMonths((-315532801));
        java.util.Locale locale75 = null;
        int int76 = literal6.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod70, "P0000-W00-36T00:00:292275.053", 0, locale75);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(literal37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT-0.090S" + "'", str42, "PT-0.090S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "seconds" + "'", str65, "seconds");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #769
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: aconst_null
132: astore        16
134: aload         15
136: aload         16
138: invokestatic  #358
141: astore        17
143: aload         17
145: invokevirtual #359
148: astore        18
150: aload         18
152: invokevirtual #360
155: astore        19
157: new           #46
160: dup
161: lconst_1
162: lconst_1
163: aload         18
165: invokespecial #83
168: astore        20
170: aload         20
172: invokevirtual #123
175: astore        21
177: aconst_null
178: astore        22
180: aload         6
182: aload         20
184: ldc_w         #361
187: aload         22
189: invokevirtual #86
192: istore        23
194: new           #14
197: dup
198: invokespecial #15
201: astore        24
203: aload         24
205: ldc           #16
207: invokevirtual #17
210: astore        25
212: aload         24
214: invokevirtual #25
217: astore        26
219: aload         24
221: invokevirtual #76
224: astore        27
226: aload         24
228: invokevirtual #77
231: astore        28
233: getstatic     #78
236: astore        29
238: aconst_null
239: astore        30
241: new           #46
244: dup
245: ldc2_w        #79
248: ldc2_w        #81
251: aload         30
253: invokespecial #83
256: astore        31
258: aload         31
260: invokevirtual #84
263: astore        32
265: aload         31
267: bipush        100
269: invokevirtual #85
272: astore        33
274: aconst_null
275: astore        34
277: aload         29
279: aload         33
281: sipush        999
284: aload         34
286: invokevirtual #86
289: istore        35
291: aconst_null
292: astore        36
294: aload         24
296: aload         29
298: aload         36
300: invokevirtual #87
303: astore        37
305: new           #164
308: dup
309: aload         6
311: aload         29
313: invokespecial #165
316: astore        38
318: iconst_1
319: invokestatic  #168
322: astore        39
324: aload         39
326: invokevirtual #169
329: istore        40
331: aload         39
333: invokevirtual #170
336: istore        41
338: aload         39
340: bipush        100
342: invokevirtual #200
345: astore        42
347: getstatic     #8
350: astore        43
352: aload         43
354: iconst_m1
355: invokevirtual #9
358: astore        44
360: aconst_null
361: astore        45
363: aload         43
365: aload         45
367: invokevirtual #201
370: istore        46
372: invokestatic  #202
375: astore        47
377: aload         43
379: aload         47
381: bipush        8
383: invokevirtual #203
386: astore        48
388: aload         47
390: invokevirtual #204
393: astore        49
395: aload         39
397: aload         47
399: iconst_1
400: invokevirtual #203
403: astore        50
405: aload         39
407: bipush        10
409: invokevirtual #85
412: astore        51
414: aload         51
416: invokevirtual #205
419: astore        52
421: aload         52
423: ldc_w         #479
426: invokevirtual #770
429: aconst_null
430: astore        53
432: aload         6
434: aload         52
436: ldc_w         #273
439: iconst_0
440: aload         53
442: invokevirtual #221
445: istore        54
447: aload_2
448: invokestatic  #10
451: aload_3
452: invokestatic  #10
455: aload         4
457: invokestatic  #10
460: aload         5
462: invokestatic  #10
465: aload         6
467: invokestatic  #10
470: new           #55
473: dup
474: invokespecial #56
477: ldc           #57
479: invokevirtual #58
482: aload         9
484: invokevirtual #58
487: ldc           #94
489: invokevirtual #58
492: invokevirtual #61
495: aload         9
497: ldc           #95
499: invokestatic  #96
502: aload         10
504: invokestatic  #10
507: new           #55
510: dup
511: invokespecial #56
514: ldc           #57
516: invokevirtual #58
519: iload         12
521: invokevirtual #59
524: ldc           #60
526: invokevirtual #58
529: iconst_0
530: invokevirtual #59
533: ldc           #57
535: invokevirtual #58
538: invokevirtual #61
541: iload         12
543: ifne          550
546: iconst_1
547: goto          551
550: iconst_0
551: invokestatic  #62
554: aload         14
556: invokestatic  #10
559: aload         17
561: invokestatic  #10
564: aload         18
566: invokestatic  #10
569: aload         19
571: invokestatic  #10
574: aload         21
576: invokestatic  #10
579: aload         21
581: invokestatic  #127
584: ldc_w         #370
587: invokestatic  #129
590: new           #55
593: dup
594: invokespecial #56
597: ldc           #57
599: invokevirtual #58
602: iload         23
604: invokevirtual #59
607: ldc           #60
609: invokevirtual #58
612: iconst_0
613: invokevirtual #59
616: ldc           #57
618: invokevirtual #58
621: invokevirtual #61
624: iload         23
626: ifne          633
629: iconst_1
630: goto          634
633: iconst_0
634: invokestatic  #62
637: aload         25
639: invokestatic  #10
642: aload         26
644: invokestatic  #10
647: aload         27
649: invokestatic  #10
652: aload         28
654: invokestatic  #10
657: aload         29
659: invokestatic  #10
662: new           #55
665: dup
666: invokespecial #56
669: ldc           #57
671: invokevirtual #58
674: aload         32
676: invokevirtual #58
679: ldc           #94
681: invokevirtual #58
684: invokevirtual #61
687: aload         32
689: ldc           #95
691: invokestatic  #96
694: aload         33
696: invokestatic  #10
699: new           #55
702: dup
703: invokespecial #56
706: ldc           #57
708: invokevirtual #58
711: iload         35
713: invokevirtual #59
716: ldc           #60
718: invokevirtual #58
721: iconst_0
722: invokevirtual #59
725: ldc           #57
727: invokevirtual #58
730: invokevirtual #61
733: iload         35
735: ifne          742
738: iconst_1
739: goto          743
742: iconst_0
743: invokestatic  #62
746: aload         37
748: invokestatic  #10
751: aload         39
753: invokestatic  #10
756: new           #55
759: dup
760: invokespecial #56
763: ldc           #57
765: invokevirtual #58
768: iload         40
770: invokevirtual #59
773: ldc           #60
775: invokevirtual #58
778: iconst_0
779: invokevirtual #59
782: ldc           #57
784: invokevirtual #58
787: invokevirtual #61
790: iload         40
792: ifne          799
795: iconst_1
796: goto          800
799: iconst_0
800: invokestatic  #62
803: new           #55
806: dup
807: invokespecial #56
810: ldc           #57
812: invokevirtual #58
815: iload         41
817: invokevirtual #59
820: ldc           #60
822: invokevirtual #58
825: bipush        8
827: invokevirtual #59
830: ldc           #57
832: invokevirtual #58
835: invokevirtual #61
838: iload         41
840: bipush        8
842: if_icmpne     849
845: iconst_1
846: goto          850
849: iconst_0
850: invokestatic  #62
853: aload         42
855: invokestatic  #10
858: aload         43
860: invokestatic  #10
863: aload         44
865: invokestatic  #10
868: new           #55
871: dup
872: invokespecial #56
875: ldc           #57
877: invokevirtual #58
880: iload         46
882: invokevirtual #59
885: ldc           #60
887: invokevirtual #58
890: iconst_0
891: invokevirtual #59
894: ldc           #57
896: invokevirtual #58
899: invokevirtual #61
902: iload         46
904: ifne          911
907: iconst_1
908: goto          912
911: iconst_0
912: invokestatic  #62
915: aload         47
917: invokestatic  #10
920: aload         48
922: invokestatic  #10
925: new           #55
928: dup
929: invokespecial #56
932: ldc           #57
934: invokevirtual #58
937: aload         49
939: invokevirtual #58
942: ldc           #209
944: invokevirtual #58
947: invokevirtual #61
950: aload         49
952: ldc           #210
954: invokestatic  #96
957: aload         50
959: invokestatic  #10
962: aload         51
964: invokestatic  #10
967: aload         52
969: invokestatic  #10
972: new           #55
975: dup
976: invokespecial #56
979: ldc           #57
981: invokevirtual #58
984: iload         54
986: invokevirtual #59
989: ldc           #60
991: invokevirtual #58
994: iconst_0
995: invokevirtual #59
998: ldc           #57
1000: invokevirtual #58
1003: invokevirtual #61
1006: iload         54
1008: ifne          1015
1011: iconst_1
1012: goto          1016
1015: iconst_0
1016: invokestatic  #62
1019: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test245
Start line: 9583
End line: 9626
Method source code: 
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatterBuilder22.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder24 = periodFormatterBuilder22.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder24.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder24);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #771
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload_2
156: invokevirtual #245
159: astore        19
161: aload         19
163: invokevirtual #161
166: astore        20
168: aload         19
170: invokevirtual #149
173: astore        21
175: aload         21
177: invokevirtual #25
180: astore        22
182: aload_2
183: invokestatic  #10
186: aload_3
187: invokestatic  #10
190: aload         4
192: invokestatic  #10
195: aload         5
197: invokestatic  #10
200: aload         7
202: invokestatic  #10
205: new           #55
208: dup
209: invokespecial #56
212: ldc           #57
214: invokevirtual #58
217: iload         8
219: invokevirtual #97
222: ldc           #60
224: invokevirtual #58
227: iconst_1
228: invokevirtual #97
231: ldc           #57
233: invokevirtual #58
236: invokevirtual #61
239: iload         8
241: iconst_1
242: if_icmpne     249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #62
253: aload         10
255: invokestatic  #10
258: aload         11
260: invokestatic  #10
263: aload         12
265: invokestatic  #10
268: aload         13
270: invokestatic  #10
273: aload         14
275: invokestatic  #10
278: aload         15
280: invokestatic  #10
283: aload         17
285: invokestatic  #10
288: aload         18
290: invokestatic  #10
293: aload         19
295: invokestatic  #10
298: aload         20
300: invokestatic  #10
303: aload         21
305: invokestatic  #10
308: aload         22
310: invokestatic  #10
313: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test246
Start line: 9629
End line: 9643
Method source code: 
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #772
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #245
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         4
60: invokevirtual #72
63: astore        6
65: aload_2
66: invokestatic  #10
69: aload_3
70: invokestatic  #10
73: aload         4
75: invokestatic  #10
78: aload         5
80: invokestatic  #10
83: aload         6
85: invokestatic  #10
88: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test247
Start line: 9646
End line: 9740
Method source code: 
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        int int45 = period44.getHours();
        org.joda.time.Period period47 = period44.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        mutablePeriod48.setWeeks((-28800000));
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology53);
        int int55 = period54.getMonths();
        java.lang.String str56 = period54.toString();
        org.joda.time.Period period58 = period54.plusHours(0);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) period54);
        mutablePeriod48.clear();
        int int63 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod48, "", 787);
        org.joda.time.format.PeriodPrinter periodPrinter64 = periodFormatter40.getPrinter();
        org.joda.time.format.PeriodParser periodParser65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = new org.joda.time.format.PeriodFormatter(periodPrinter64, periodParser65);
        org.joda.time.Period period75 = new org.joda.time.Period((int) (byte) -1, (-100), 0, (-36), (-1), (-81), (int) (byte) 100, (int) (byte) 0);
        org.joda.time.Period period76 = period75.toPeriod();
        int int77 = period75.getMinutes();
        java.util.Locale locale79 = null;
        int int80 = periodPrinter64.countFieldsToPrint((org.joda.time.ReadablePeriod) period75, 315532800, locale79);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT-0.090S" + "'", str56, "PT-0.090S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-788) + "'", int63 == (-788));
        org.junit.Assert.assertNotNull(periodPrinter64);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-81) + "'", int77 == (-81));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 6 + "'", int80 == 6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #773
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: getstatic     #8
275: astore        32
277: aload         32
279: invokevirtual #216
282: istore        33
284: aload         32
286: iconst_0
287: invokevirtual #200
290: astore        34
292: aload         34
294: invokevirtual #205
297: astore        35
299: aload         35
301: ldc           #217
303: invokevirtual #207
306: aconst_null
307: astore        36
309: new           #46
312: dup
313: ldc2_w        #79
316: ldc2_w        #81
319: aload         36
321: invokespecial #83
324: astore        37
326: aload         37
328: invokevirtual #169
331: istore        38
333: aload         37
335: invokevirtual #84
338: astore        39
340: aload         37
342: iconst_0
343: invokevirtual #218
346: astore        40
348: aload         35
350: aload         37
352: invokevirtual #219
355: aload         35
357: invokevirtual #457
360: aload         28
362: aload         35
364: ldc           #74
366: sipush        787
369: invokevirtual #237
372: istore        41
374: aload         28
376: invokevirtual #90
379: astore        42
381: aconst_null
382: astore        43
384: new           #164
387: dup
388: aload         42
390: aload         43
392: invokespecial #165
395: astore        44
397: new           #46
400: dup
401: iconst_m1
402: bipush        -100
404: iconst_0
405: bipush        -36
407: iconst_m1
408: bipush        -81
410: bipush        100
412: iconst_0
413: invokespecial #511
416: astore        45
418: aload         45
420: invokevirtual #481
423: astore        46
425: aload         45
427: invokevirtual #774
430: istore        47
432: aconst_null
433: astore        48
435: aload         42
437: aload         45
439: ldc_w         #276
442: aload         48
444: invokeinterface #775,  4
449: istore        49
451: aload_1
452: invokestatic  #10
455: new           #55
458: dup
459: invokespecial #56
462: ldc           #57
464: invokevirtual #58
467: iload_2
468: invokevirtual #59
471: ldc           #60
473: invokevirtual #58
476: iconst_0
477: invokevirtual #59
480: ldc           #57
482: invokevirtual #58
485: invokevirtual #61
488: iload_2
489: ifne          496
492: iconst_1
493: goto          497
496: iconst_0
497: invokestatic  #62
500: aload_3
501: invokestatic  #10
504: aload         4
506: invokestatic  #10
509: new           #55
512: dup
513: invokespecial #56
516: ldc           #57
518: invokevirtual #58
521: iload         7
523: invokevirtual #59
526: ldc           #60
528: invokevirtual #58
531: iconst_0
532: invokevirtual #59
535: ldc           #57
537: invokevirtual #58
540: invokevirtual #61
543: iload         7
545: ifne          552
548: iconst_1
549: goto          553
552: iconst_0
553: invokestatic  #62
556: new           #55
559: dup
560: invokespecial #56
563: ldc           #57
565: invokevirtual #58
568: aload         8
570: invokevirtual #58
573: ldc           #94
575: invokevirtual #58
578: invokevirtual #61
581: aload         8
583: ldc           #95
585: invokestatic  #96
588: aload         9
590: invokestatic  #10
593: aload         10
595: invokestatic  #10
598: aload         11
600: invokestatic  #10
603: aload         13
605: invokestatic  #10
608: aload         14
610: invokestatic  #10
613: aload         15
615: invokestatic  #10
618: aload         16
620: invokestatic  #10
623: aload         18
625: invokestatic  #10
628: new           #55
631: dup
632: invokespecial #56
635: ldc           #57
637: invokevirtual #58
640: iload         19
642: invokevirtual #97
645: ldc           #60
647: invokevirtual #58
650: iconst_1
651: invokevirtual #97
654: ldc           #57
656: invokevirtual #58
659: invokevirtual #61
662: iload         19
664: iconst_1
665: if_icmpne     672
668: iconst_1
669: goto          673
672: iconst_0
673: invokestatic  #62
676: aload         21
678: invokestatic  #10
681: aload         22
683: invokestatic  #10
686: aload         23
688: invokestatic  #10
691: aload         24
693: invokestatic  #10
696: aload         25
698: invokestatic  #10
701: aload         26
703: invokestatic  #10
706: aload         28
708: invokestatic  #10
711: aload         29
713: invokestatic  #10
716: aload         30
718: invokestatic  #10
721: new           #55
724: dup
725: invokespecial #56
728: ldc           #57
730: invokevirtual #58
733: aload         31
735: invokevirtual #58
738: ldc_w         #286
741: invokevirtual #58
744: invokevirtual #61
747: aload         31
749: ldc           #143
751: invokestatic  #96
754: aload         32
756: invokestatic  #10
759: new           #55
762: dup
763: invokespecial #56
766: ldc           #57
768: invokevirtual #58
771: iload         33
773: invokevirtual #59
776: ldc           #60
778: invokevirtual #58
781: iconst_0
782: invokevirtual #59
785: ldc           #57
787: invokevirtual #58
790: invokevirtual #61
793: iload         33
795: ifne          802
798: iconst_1
799: goto          803
802: iconst_0
803: invokestatic  #62
806: aload         34
808: invokestatic  #10
811: aload         35
813: invokestatic  #10
816: new           #55
819: dup
820: invokespecial #56
823: ldc           #57
825: invokevirtual #58
828: iload         38
830: invokevirtual #59
833: ldc           #60
835: invokevirtual #58
838: iconst_0
839: invokevirtual #59
842: ldc           #57
844: invokevirtual #58
847: invokevirtual #61
850: iload         38
852: ifne          859
855: iconst_1
856: goto          860
859: iconst_0
860: invokestatic  #62
863: new           #55
866: dup
867: invokespecial #56
870: ldc           #57
872: invokevirtual #58
875: aload         39
877: invokevirtual #58
880: ldc           #94
882: invokevirtual #58
885: invokevirtual #61
888: aload         39
890: ldc           #95
892: invokestatic  #96
895: aload         40
897: invokestatic  #10
900: new           #55
903: dup
904: invokespecial #56
907: ldc           #57
909: invokevirtual #58
912: iload         41
914: invokevirtual #59
917: ldc           #60
919: invokevirtual #58
922: sipush        -788
925: invokevirtual #59
928: ldc           #57
930: invokevirtual #58
933: invokevirtual #61
936: iload         41
938: sipush        -788
941: if_icmpne     948
944: iconst_1
945: goto          949
948: iconst_0
949: invokestatic  #62
952: aload         42
954: invokestatic  #10
957: aload         46
959: invokestatic  #10
962: new           #55
965: dup
966: invokespecial #56
969: ldc           #57
971: invokevirtual #58
974: iload         47
976: invokevirtual #59
979: ldc           #60
981: invokevirtual #58
984: bipush        -81
986: invokevirtual #59
989: ldc           #57
991: invokevirtual #58
994: invokevirtual #61
997: iload         47
999: bipush        -81
1001: if_icmpne     1008
1004: iconst_1
1005: goto          1009
1008: iconst_0
1009: invokestatic  #62
1012: new           #55
1015: dup
1016: invokespecial #56
1019: ldc           #57
1021: invokevirtual #58
1024: iload         49
1026: invokevirtual #59
1029: ldc           #60
1031: invokevirtual #58
1034: bipush        6
1036: invokevirtual #59
1039: ldc           #57
1041: invokevirtual #58
1044: invokevirtual #61
1047: iload         49
1049: bipush        6
1051: if_icmpne     1058
1054: iconst_1
1055: goto          1059
1058: iconst_0
1059: invokestatic  #62
1062: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test248
Start line: 9743
End line: 9766
Method source code: 
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder5.appendPrefix("576", "+10:52");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder5.appendSuffix("DurationField[years]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #776
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: ldc_w         #777
69: ldc_w         #290
72: invokevirtual #41
75: astore        7
77: aload         5
79: ldc_w         #778
82: invokevirtual #132
85: astore        8
87: ldc           #43
89: invokestatic  #22
92: goto          97
95: astore        8
97: aload_2
98: invokestatic  #10
101: aload_3
102: invokestatic  #10
105: aload         4
107: invokestatic  #10
110: aload         5
112: invokestatic  #10
115: aload         6
117: invokestatic  #10
120: aload         7
122: invokestatic  #10
125: return
Exception table:
from    to  target type
77    92    95   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test249
Start line: 9769
End line: 9785
Method source code: 
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #779
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload_1
52: ldc           #66
54: invokevirtual #67
57: astore        5
59: aload         5
61: invokevirtual #488
64: astore        6
66: aload         6
68: invokevirtual #26
71: astore        7
73: aload_2
74: invokestatic  #10
77: aload_3
78: invokestatic  #10
81: aload         4
83: invokestatic  #10
86: aload         5
88: invokestatic  #10
91: aload         6
93: invokestatic  #10
96: aload         7
98: invokestatic  #10
101: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test250
Start line: 9788
End line: 9810
Method source code: 
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodParser periodParser10 = periodFormatterBuilder0.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder0.appendSeparator("2024-05-15T11:17:31.179+00:00:00.010/2024-05-15T11:17:31.179+00:00:00.010");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodParser10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #780
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload_1
74: invokevirtual #142
77: astore        8
79: aload_1
80: invokevirtual #76
83: astore        9
85: aload_1
86: ldc_w         #781
89: invokevirtual #37
92: astore        10
94: aload_2
95: invokestatic  #10
98: aload_3
99: invokestatic  #10
102: aload         4
104: invokestatic  #10
107: aload         5
109: invokestatic  #10
112: aload         6
114: invokestatic  #10
117: aload         7
119: invokestatic  #10
122: aload         8
124: invokestatic  #10
127: aload         9
129: invokestatic  #10
132: aload         10
134: invokestatic  #10
137: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test251
Start line: 9813
End line: 9855
Method source code: 
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        boolean boolean6 = cachedDateTimeZone3.equals((java.lang.Object) periodType5);
        long long8 = cachedDateTimeZone3.nextTransition((long) 24);
        org.joda.time.DateTimeZone dateTimeZone9 = cachedDateTimeZone3.getUncachedZone();
        java.util.Locale locale11 = null;
        java.lang.String str12 = cachedDateTimeZone3.getName((-470696220010L), locale11);
        long long14 = cachedDateTimeZone3.nextTransition((long) (-90));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder15.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder15.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder15.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder15.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder20.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder23 = periodFormatterBuilder21.maximumParsedDigits(979);
        boolean boolean24 = cachedDateTimeZone3.equals((java.lang.Object) periodFormatterBuilder21);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = periodFormatterBuilder21.minimumPrintedDigits(1310);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 24L + "'", long8 == 24L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:52" + "'", str12, "+10:52");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-90L) + "'", long14 == (-90L));
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodFormatterBuilder26);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #782
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #460
31: astore_2
32: aload_2
33: invokestatic  #461
36: astore_3
37: aload_3
38: invokestatic  #462
41: astore        4
43: invokestatic  #463
46: astore        5
48: aload         5
50: invokevirtual #464
53: astore        6
55: aload         4
57: aload         6
59: invokevirtual #465
62: istore        7
64: aload         4
66: ldc2_w        #783
69: invokevirtual #785
72: lstore        8
74: aload         4
76: invokevirtual #786
79: astore        10
81: aconst_null
82: astore        11
84: aload         4
86: ldc2_w        #787
89: aload         11
91: invokevirtual #789
94: astore        12
96: aload         4
98: ldc2_w        #790
101: invokevirtual #785
104: lstore        13
106: new           #14
109: dup
110: invokespecial #15
113: astore        15
115: aload         15
117: ldc           #16
119: invokevirtual #17
122: astore        16
124: aload         15
126: invokevirtual #25
129: astore        17
131: aload         15
133: invokevirtual #26
136: astore        18
138: aload         15
140: invokevirtual #76
143: astore        19
145: aload         19
147: invokevirtual #76
150: astore        20
152: aload         20
154: sipush        979
157: invokevirtual #213
160: astore        21
162: aload         4
164: aload         20
166: invokevirtual #465
169: istore        22
171: aload         20
173: sipush        1310
176: invokevirtual #151
179: astore        23
181: aload_2
182: invokestatic  #10
185: aload_3
186: invokestatic  #10
189: aload         4
191: invokestatic  #10
194: aload         5
196: invokestatic  #10
199: aload         6
201: invokestatic  #10
204: new           #55
207: dup
208: invokespecial #56
211: ldc           #57
213: invokevirtual #58
216: iload         7
218: invokevirtual #97
221: ldc           #60
223: invokevirtual #58
226: iconst_0
227: invokevirtual #97
230: ldc           #57
232: invokevirtual #58
235: invokevirtual #61
238: iload         7
240: ifne          247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #62
251: aload         10
253: invokestatic  #10
256: aload         16
258: invokestatic  #10
261: aload         17
263: invokestatic  #10
266: aload         18
268: invokestatic  #10
271: aload         19
273: invokestatic  #10
276: aload         20
278: invokestatic  #10
281: aload         21
283: invokestatic  #10
286: new           #55
289: dup
290: invokespecial #56
293: ldc           #57
295: invokevirtual #58
298: iload         22
300: invokevirtual #97
303: ldc           #60
305: invokevirtual #58
308: iconst_0
309: invokevirtual #97
312: ldc           #57
314: invokevirtual #58
317: invokevirtual #61
320: iload         22
322: ifne          329
325: iconst_1
326: goto          330
329: iconst_0
330: invokestatic  #62
333: aload         23
335: invokestatic  #10
338: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test252
Start line: 9858
End line: 9990
Method source code: 
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.ReadableInterval readableInterval1 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval0);
        org.joda.time.MutableInterval mutableInterval2 = readableInterval1.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval3 = null;
        org.joda.time.ReadableInterval readableInterval4 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval3);
        org.joda.time.MutableInterval mutableInterval5 = readableInterval4.toMutableInterval();
        boolean boolean6 = mutableInterval2.contains((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.Interval interval7 = mutableInterval2.toInterval();
        org.joda.time.ReadableInterval readableInterval8 = null;
        org.joda.time.ReadableInterval readableInterval9 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval8);
        org.joda.time.MutableInterval mutableInterval10 = readableInterval9.toMutableInterval();
        org.joda.time.ReadableInterval readableInterval11 = null;
        org.joda.time.ReadableInterval readableInterval12 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval11);
        org.joda.time.MutableInterval mutableInterval13 = readableInterval12.toMutableInterval();
        boolean boolean14 = mutableInterval10.contains((org.joda.time.ReadableInterval) mutableInterval13);
        boolean boolean15 = interval7.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.DateTime dateTime16 = mutableInterval13.getStart();
        org.joda.time.Instant instant17 = dateTime16.toInstant();
        long long18 = instant17.getMillis();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period21 = org.joda.time.Period.millis(1);
        int int22 = period21.getMonths();
        int int23 = period21.size();
        org.joda.time.Period period25 = period21.withDays((int) (byte) 100);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType29 = null;
        int int30 = period26.get(durationFieldType29);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period33 = period26.withField(durationFieldType31, 8);
        java.lang.String str34 = durationFieldType31.getName();
        org.joda.time.Period period36 = period21.withField(durationFieldType31, 1);
        org.joda.time.Period period38 = period36.withWeeks((int) ' ');
        org.joda.time.Period period40 = period36.plusWeeks(3);
        org.joda.time.ReadableInterval readableInterval41 = null;
        org.joda.time.ReadableInterval readableInterval42 = org.joda.time.DateTimeUtils.getReadableInterval(readableInterval41);
        org.joda.time.MutableInterval mutableInterval43 = readableInterval42.toMutableInterval();
        org.joda.time.DateTime dateTime44 = readableInterval42.getStart();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology47);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period51 = period48.minusDays((int) (byte) 100);
        int int52 = period48.getMillis();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Duration duration54 = period48.toDurationTo(readableInstant53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean57 = dateTime44.isSupported(dateTimeFieldType56);
        org.joda.time.Duration duration58 = period40.toDurationFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Period period59 = new org.joda.time.Period(readableInstant19, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType64 = org.joda.time.DateTimeUtils.getPeriodType(periodType63);
        org.joda.time.Period period65 = new org.joda.time.Period(100L, (long) (short) -1, periodType63);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.weeks();
        boolean boolean67 = periodType63.isSupported(durationFieldType66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (short) 1, periodType63, chronology68);
        org.joda.time.PeriodType periodType70 = periodType63.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.minutes();
        boolean boolean72 = periodType63.isSupported(durationFieldType71);
        org.joda.time.PeriodType periodType73 = periodType63.withMonthsRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant17, (org.joda.time.ReadableDuration) duration58, periodType63);
        org.joda.time.DateTimeZone dateTimeZone75 = instant17.getZone();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder76 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder78 = periodFormatterBuilder76.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder76.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder80 = periodFormatterBuilder79.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder81 = periodFormatterBuilder80.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder82 = periodFormatterBuilder81.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder83 = periodFormatterBuilder82.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder84 = periodFormatterBuilder83.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder85 = periodFormatterBuilder84.appendMinutes();
        boolean boolean86 = instant17.equals((java.lang.Object) periodFormatterBuilder85);
        org.junit.Assert.assertNotNull(readableInterval1);
        org.junit.Assert.assertNotNull(mutableInterval2);
        org.junit.Assert.assertNotNull(readableInterval4);
        org.junit.Assert.assertNotNull(mutableInterval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(readableInterval9);
        org.junit.Assert.assertNotNull(mutableInterval10);
        org.junit.Assert.assertNotNull(readableInterval12);
        org.junit.Assert.assertNotNull(mutableInterval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1050474422277204L) + "'", long18 == (-1050474422277204L));
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "seconds" + "'", str34, "seconds");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(readableInterval42);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT-0.090S" + "'", str49, "PT-0.090S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-90) + "'", int52 == (-90));
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(periodFormatterBuilder78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodFormatterBuilder80);
        org.junit.Assert.assertNotNull(periodFormatterBuilder81);
        org.junit.Assert.assertNotNull(periodFormatterBuilder82);
        org.junit.Assert.assertNotNull(periodFormatterBuilder83);
        org.junit.Assert.assertNotNull(periodFormatterBuilder84);
        org.junit.Assert.assertNotNull(periodFormatterBuilder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #792
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #261
31: astore_2
32: aload_2
33: invokeinterface #262,  1
38: astore_3
39: aconst_null
40: astore        4
42: aload         4
44: invokestatic  #261
47: astore        5
49: aload         5
51: invokeinterface #262,  1
56: astore        6
58: aload_3
59: aload         6
61: invokevirtual #263
64: istore        7
66: aload_3
67: invokevirtual #793
70: astore        8
72: aconst_null
73: astore        9
75: aload         9
77: invokestatic  #261
80: astore        10
82: aload         10
84: invokeinterface #262,  1
89: astore        11
91: aconst_null
92: astore        12
94: aload         12
96: invokestatic  #261
99: astore        13
101: aload         13
103: invokeinterface #262,  1
108: astore        14
110: aload         11
112: aload         14
114: invokevirtual #263
117: istore        15
119: aload         8
121: aload         14
123: invokevirtual #794
126: istore        16
128: aload         14
130: invokevirtual #269
133: astore        17
135: aload         17
137: invokevirtual #795
140: astore        18
142: aload         18
144: invokevirtual #796
147: lstore        19
149: aconst_null
150: astore        21
152: iconst_1
153: invokestatic  #168
156: astore        22
158: aload         22
160: invokevirtual #169
163: istore        23
165: aload         22
167: invokevirtual #170
170: istore        24
172: aload         22
174: bipush        100
176: invokevirtual #200
179: astore        25
181: getstatic     #8
184: astore        26
186: aload         26
188: iconst_m1
189: invokevirtual #9
192: astore        27
194: aconst_null
195: astore        28
197: aload         26
199: aload         28
201: invokevirtual #201
204: istore        29
206: invokestatic  #202
209: astore        30
211: aload         26
213: aload         30
215: bipush        8
217: invokevirtual #203
220: astore        31
222: aload         30
224: invokevirtual #204
227: astore        32
229: aload         22
231: aload         30
233: iconst_1
234: invokevirtual #203
237: astore        33
239: aload         33
241: bipush        32
243: invokevirtual #508
246: astore        34
248: aload         33
250: iconst_3
251: invokevirtual #334
254: astore        35
256: aconst_null
257: astore        36
259: aload         36
261: invokestatic  #261
264: astore        37
266: aload         37
268: invokeinterface #262,  1
273: astore        38
275: aload         37
277: invokeinterface #732,  1
282: astore        39
284: aconst_null
285: astore        40
287: new           #46
290: dup
291: ldc2_w        #79
294: ldc2_w        #81
297: aload         40
299: invokespecial #83
302: astore        41
304: aload         41
306: invokevirtual #84
309: astore        42
311: aload         41
313: bipush        100
315: invokevirtual #85
318: astore        43
320: aload         41
322: invokevirtual #417
325: istore        44
327: aconst_null
328: astore        45
330: aload         41
332: aload         45
334: invokevirtual #661
337: astore        46
339: new           #46
342: dup
343: aload         39
345: aload         46
347: invokespecial #733
350: astore        47
352: invokestatic  #797
355: astore        48
357: aload         39
359: aload         48
361: invokevirtual #735
364: istore        49
366: aload         35
368: aload         39
370: invokevirtual #798
373: astore        50
375: new           #46
378: dup
379: aload         21
381: aload         50
383: invokespecial #733
386: astore        51
388: invokestatic  #171
391: astore        52
393: aload         52
395: invokestatic  #172
398: astore        53
400: new           #46
403: dup
404: ldc2_w        #79
407: ldc2_w        #173
410: aload         52
412: invokespecial #175
415: astore        54
417: invokestatic  #176
420: astore        55
422: aload         52
424: aload         55
426: invokevirtual #177
429: istore        56
431: aconst_null
432: astore        57
434: new           #46
437: dup
438: lconst_1
439: aload         52
441: aload         57
443: invokespecial #799
446: astore        58
448: aload         52
450: invokevirtual #800
453: astore        59
455: invokestatic  #801
458: astore        60
460: aload         52
462: aload         60
464: invokevirtual #177
467: istore        61
469: aload         52
471: invokevirtual #464
474: astore        62
476: new           #46
479: dup
480: aload         18
482: aload         50
484: aload         52
486: invokespecial #802
489: astore        63
491: aload         18
493: invokevirtual #803
496: astore        64
498: new           #14
501: dup
502: invokespecial #15
505: astore        65
507: aload         65
509: ldc           #16
511: invokevirtual #17
514: astore        66
516: aload         65
518: invokevirtual #25
521: astore        67
523: aload         67
525: invokevirtual #71
528: astore        68
530: aload         68
532: invokevirtual #76
535: astore        69
537: aload         69
539: invokevirtual #149
542: astore        70
544: aload         70
546: invokevirtual #25
549: astore        71
551: aload         71
553: invokevirtual #245
556: astore        72
558: aload         72
560: invokevirtual #134
563: astore        73
565: aload         18
567: aload         73
569: invokevirtual #804
572: istore        74
574: aload_2
575: invokestatic  #10
578: aload_3
579: invokestatic  #10
582: aload         5
584: invokestatic  #10
587: aload         6
589: invokestatic  #10
592: new           #55
595: dup
596: invokespecial #56
599: ldc           #57
601: invokevirtual #58
604: iload         7
606: invokevirtual #97
609: ldc           #60
611: invokevirtual #58
614: iconst_0
615: invokevirtual #97
618: ldc           #57
620: invokevirtual #58
623: invokevirtual #61
626: iload         7
628: ifne          635
631: iconst_1
632: goto          636
635: iconst_0
636: invokestatic  #62
639: aload         8
641: invokestatic  #10
644: aload         10
646: invokestatic  #10
649: aload         11
651: invokestatic  #10
654: aload         13
656: invokestatic  #10
659: aload         14
661: invokestatic  #10
664: new           #55
667: dup
668: invokespecial #56
671: ldc           #57
673: invokevirtual #58
676: iload         15
678: invokevirtual #97
681: ldc           #60
683: invokevirtual #58
686: iconst_0
687: invokevirtual #97
690: ldc           #57
692: invokevirtual #58
695: invokevirtual #61
698: iload         15
700: ifne          707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #62
711: new           #55
714: dup
715: invokespecial #56
718: ldc           #57
720: invokevirtual #58
723: iload         16
725: invokevirtual #97
728: ldc           #60
730: invokevirtual #58
733: iconst_0
734: invokevirtual #97
737: ldc           #57
739: invokevirtual #58
742: invokevirtual #61
745: iload         16
747: ifne          754
750: iconst_1
751: goto          755
754: iconst_0
755: invokestatic  #62
758: aload         17
760: invokestatic  #10
763: aload         18
765: invokestatic  #10
768: aload         22
770: invokestatic  #10
773: new           #55
776: dup
777: invokespecial #56
780: ldc           #57
782: invokevirtual #58
785: iload         23
787: invokevirtual #59
790: ldc           #60
792: invokevirtual #58
795: iconst_0
796: invokevirtual #59
799: ldc           #57
801: invokevirtual #58
804: invokevirtual #61
807: iload         23
809: ifne          816
812: iconst_1
813: goto          817
816: iconst_0
817: invokestatic  #62
820: new           #55
823: dup
824: invokespecial #56
827: ldc           #57
829: invokevirtual #58
832: iload         24
834: invokevirtual #59
837: ldc           #60
839: invokevirtual #58
842: bipush        8
844: invokevirtual #59
847: ldc           #57
849: invokevirtual #58
852: invokevirtual #61
855: iload         24
857: bipush        8
859: if_icmpne     866
862: iconst_1
863: goto          867
866: iconst_0
867: invokestatic  #62
870: aload         25
872: invokestatic  #10
875: aload         26
877: invokestatic  #10
880: aload         27
882: invokestatic  #10
885: new           #55
888: dup
889: invokespecial #56
892: ldc           #57
894: invokevirtual #58
897: iload         29
899: invokevirtual #59
902: ldc           #60
904: invokevirtual #58
907: iconst_0
908: invokevirtual #59
911: ldc           #57
913: invokevirtual #58
916: invokevirtual #61
919: iload         29
921: ifne          928
924: iconst_1
925: goto          929
928: iconst_0
929: invokestatic  #62
932: aload         30
934: invokestatic  #10
937: aload         31
939: invokestatic  #10
942: new           #55
945: dup
946: invokespecial #56
949: ldc           #57
951: invokevirtual #58
954: aload         32
956: invokevirtual #58
959: ldc           #209
961: invokevirtual #58
964: invokevirtual #61
967: aload         32
969: ldc           #210
971: invokestatic  #96
974: aload         33
976: invokestatic  #10
979: aload         34
981: invokestatic  #10
984: aload         35
986: invokestatic  #10
989: aload         37
991: invokestatic  #10
994: aload         38
996: invokestatic  #10
999: aload         39
1001: invokestatic  #10
1004: new           #55
1007: dup
1008: invokespecial #56
1011: ldc           #57
1013: invokevirtual #58
1016: aload         42
1018: invokevirtual #58
1021: ldc           #94
1023: invokevirtual #58
1026: invokevirtual #61
1029: aload         42
1031: ldc           #95
1033: invokestatic  #96
1036: aload         43
1038: invokestatic  #10
1041: new           #55
1044: dup
1045: invokespecial #56
1048: ldc           #57
1050: invokevirtual #58
1053: iload         44
1055: invokevirtual #59
1058: ldc           #60
1060: invokevirtual #58
1063: bipush        -90
1065: invokevirtual #59
1068: ldc           #57
1070: invokevirtual #58
1073: invokevirtual #61
1076: iload         44
1078: bipush        -90
1080: if_icmpne     1087
1083: iconst_1
1084: goto          1088
1087: iconst_0
1088: invokestatic  #62
1091: aload         46
1093: invokestatic  #10
1096: aload         48
1098: invokestatic  #10
1101: new           #55
1104: dup
1105: invokespecial #56
1108: ldc           #57
1110: invokevirtual #58
1113: iload         49
1115: invokevirtual #97
1118: ldc           #60
1120: invokevirtual #58
1123: iconst_1
1124: invokevirtual #97
1127: ldc           #57
1129: invokevirtual #58
1132: invokevirtual #61
1135: iload         49
1137: iconst_1
1138: if_icmpne     1145
1141: iconst_1
1142: goto          1146
1145: iconst_0
1146: invokestatic  #62
1149: aload         50
1151: invokestatic  #10
1154: aload         52
1156: invokestatic  #10
1159: aload         53
1161: invokestatic  #10
1164: aload         55
1166: invokestatic  #10
1169: new           #55
1172: dup
1173: invokespecial #56
1176: ldc           #57
1178: invokevirtual #58
1181: iload         56
1183: invokevirtual #97
1186: ldc           #60
1188: invokevirtual #58
1191: iconst_0
1192: invokevirtual #97
1195: ldc           #57
1197: invokevirtual #58
1200: invokevirtual #61
1203: iload         56
1205: ifne          1212
1208: iconst_1
1209: goto          1213
1212: iconst_0
1213: invokestatic  #62
1216: aload         59
1218: invokestatic  #10
1221: aload         60
1223: invokestatic  #10
1226: new           #55
1229: dup
1230: invokespecial #56
1233: ldc           #57
1235: invokevirtual #58
1238: iload         61
1240: invokevirtual #97
1243: ldc           #60
1245: invokevirtual #58
1248: iconst_1
1249: invokevirtual #97
1252: ldc           #57
1254: invokevirtual #58
1257: invokevirtual #61
1260: iload         61
1262: iconst_1
1263: if_icmpne     1270
1266: iconst_1
1267: goto          1271
1270: iconst_0
1271: invokestatic  #62
1274: aload         62
1276: invokestatic  #10
1279: aload         64
1281: invokestatic  #10
1284: aload         66
1286: invokestatic  #10
1289: aload         67
1291: invokestatic  #10
1294: aload         68
1296: invokestatic  #10
1299: aload         69
1301: invokestatic  #10
1304: aload         70
1306: invokestatic  #10
1309: aload         71
1311: invokestatic  #10
1314: aload         72
1316: invokestatic  #10
1319: aload         73
1321: invokestatic  #10
1324: new           #55
1327: dup
1328: invokespecial #56
1331: ldc           #57
1333: invokevirtual #58
1336: iload         74
1338: invokevirtual #97
1341: ldc           #60
1343: invokevirtual #58
1346: iconst_0
1347: invokevirtual #97
1350: ldc           #57
1352: invokevirtual #58
1355: invokevirtual #61
1358: iload         74
1360: ifne          1367
1363: iconst_1
1364: goto          1368
1367: iconst_0
1368: invokestatic  #62
1371: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test253
Start line: 9993
End line: 10013
Method source code: 
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.rejectSignedValues(false);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #805
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         5
67: invokevirtual #245
70: astore        7
72: aload         7
74: invokevirtual #25
77: astore        8
79: aload         8
81: iconst_0
82: invokevirtual #108
85: astore        9
87: aload_2
88: invokestatic  #10
91: aload_3
92: invokestatic  #10
95: aload         4
97: invokestatic  #10
100: aload         5
102: invokestatic  #10
105: aload         6
107: invokestatic  #10
110: aload         7
112: invokestatic  #10
115: aload         8
117: invokestatic  #10
120: aload         9
122: invokestatic  #10
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test254
Start line: 10016
End line: 10039
Method source code: 
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("1338");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder4.appendSuffix("3");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #806
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: ldc           #104
72: invokevirtual #17
75: astore        7
77: aload         4
79: ldc_w         #807
82: invokevirtual #132
85: astore        8
87: ldc           #31
89: invokestatic  #22
92: goto          97
95: astore        8
97: aload_2
98: invokestatic  #10
101: aload_3
102: invokestatic  #10
105: aload         4
107: invokestatic  #10
110: aload         5
112: invokestatic  #10
115: aload         6
117: invokestatic  #10
120: aload         7
122: invokestatic  #10
125: return
Exception table:
from    to  target type
77    92    95   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test255
Start line: 10042
End line: 10054
Method source code: 
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSuffix("20");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #808
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: invokevirtual #245
49: astore        4
51: aload         4
53: ldc_w         #809
56: invokevirtual #132
59: astore        5
61: aload_2
62: invokestatic  #10
65: aload_3
66: invokestatic  #10
69: aload         4
71: invokestatic  #10
74: aload         5
76: invokestatic  #10
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test256
Start line: 10057
End line: 10069
Method source code: 
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSuffix("AD");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #810
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_2
46: ldc_w         #811
49: invokevirtual #132
52: astore        4
54: aload_2
55: invokevirtual #71
58: astore        5
60: aload_2
61: invokestatic  #10
64: aload_3
65: invokestatic  #10
68: aload         4
70: invokestatic  #10
73: aload         5
75: invokestatic  #10
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test257
Start line: 10072
End line: 10094
Method source code: 
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendSuffix("eras");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.minimumPrintedDigits(86399);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #812
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #488
67: astore        7
69: aload_1
70: ldc_w         #295
73: invokevirtual #132
76: astore        8
78: aload         8
80: ldc_w         #813
83: invokevirtual #151
86: astore        9
88: aload         8
90: invokevirtual #149
93: astore        10
95: aload_2
96: invokestatic  #10
99: aload_3
100: invokestatic  #10
103: aload         4
105: invokestatic  #10
108: aload         5
110: invokestatic  #10
113: aload         6
115: invokestatic  #10
118: aload         7
120: invokestatic  #10
123: aload         8
125: invokestatic  #10
128: aload         9
130: invokestatic  #10
133: aload         10
135: invokestatic  #10
138: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test258
Start line: 10097
End line: 10189
Method source code: 
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Chronology chronology23 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant21, readableInstant22);
        org.joda.time.Chronology chronology24 = chronology23.withUTC();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.Period period26 = new org.joda.time.Period(1L, (long) 1, chronology24);
        int[] intArray27 = period26.getValues();
        java.util.Locale locale29 = null;
        int int30 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period26, 2922790, locale29);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder31.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder31.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder31.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder31.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal37 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology40);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period44 = period41.minusDays((int) (byte) 100);
        java.util.Locale locale46 = null;
        int int47 = literal37.countFieldsToPrint((org.joda.time.ReadablePeriod) period44, 999, locale46);
        org.joda.time.format.PeriodParser periodParser48 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder49 = periodFormatterBuilder31.append((org.joda.time.format.PeriodPrinter) literal37, periodParser48);
        org.joda.time.format.PeriodFormatter periodFormatter50 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) literal6, (org.joda.time.format.PeriodParser) literal37);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        int int52 = period51.getHours();
        org.joda.time.Period period54 = period51.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod55 = period54.toMutablePeriod();
        mutablePeriod55.setDays((int) (short) -1);
        mutablePeriod55.addSeconds(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType60.getRangeDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField63 = new org.joda.time.field.PreciseDurationField(durationFieldType61, (long) (short) 0);
        long long66 = preciseDurationField63.getMillis((int) (byte) 100, 864000000L);
        long long69 = preciseDurationField63.getMillis((int) (byte) -1, 515010L);
        org.joda.time.DurationFieldType durationFieldType70 = preciseDurationField63.getType();
        boolean boolean71 = mutablePeriod55.isSupported(durationFieldType70);
        mutablePeriod55.addMonths((-7969));
        java.util.Locale locale74 = null;
        int int75 = literal37.calculatePrintedLength((org.joda.time.ReadablePeriod) mutablePeriod55, locale74);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(literal37);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT-0.090S" + "'", str42, "PT-0.090S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #814
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: aconst_null
129: astore        15
131: aconst_null
132: astore        16
134: aload         15
136: aload         16
138: invokestatic  #358
141: astore        17
143: aload         17
145: invokevirtual #359
148: astore        18
150: aload         18
152: invokevirtual #360
155: astore        19
157: new           #46
160: dup
161: lconst_1
162: lconst_1
163: aload         18
165: invokespecial #83
168: astore        20
170: aload         20
172: invokevirtual #123
175: astore        21
177: aconst_null
178: astore        22
180: aload         6
182: aload         20
184: ldc_w         #361
187: aload         22
189: invokevirtual #86
192: istore        23
194: new           #14
197: dup
198: invokespecial #15
201: astore        24
203: aload         24
205: ldc           #16
207: invokevirtual #17
210: astore        25
212: aload         24
214: invokevirtual #25
217: astore        26
219: aload         24
221: invokevirtual #76
224: astore        27
226: aload         24
228: invokevirtual #77
231: astore        28
233: getstatic     #78
236: astore        29
238: aconst_null
239: astore        30
241: new           #46
244: dup
245: ldc2_w        #79
248: ldc2_w        #81
251: aload         30
253: invokespecial #83
256: astore        31
258: aload         31
260: invokevirtual #84
263: astore        32
265: aload         31
267: bipush        100
269: invokevirtual #85
272: astore        33
274: aconst_null
275: astore        34
277: aload         29
279: aload         33
281: sipush        999
284: aload         34
286: invokevirtual #86
289: istore        35
291: aconst_null
292: astore        36
294: aload         24
296: aload         29
298: aload         36
300: invokevirtual #87
303: astore        37
305: new           #164
308: dup
309: aload         6
311: aload         29
313: invokespecial #165
316: astore        38
318: getstatic     #8
321: astore        39
323: aload         39
325: invokevirtual #216
328: istore        40
330: aload         39
332: iconst_0
333: invokevirtual #200
336: astore        41
338: aload         41
340: invokevirtual #205
343: astore        42
345: aload         42
347: iconst_m1
348: invokevirtual #313
351: aload         42
353: bipush        8
355: invokevirtual #311
358: invokestatic  #568
361: astore        43
363: aload         43
365: invokevirtual #569
368: astore        44
370: new           #570
373: dup
374: aload         44
376: lconst_0
377: invokespecial #571
380: astore        45
382: aload         45
384: bipush        100
386: ldc2_w        #572
389: invokevirtual #574
392: lstore        46
394: aload         45
396: iconst_m1
397: ldc2_w        #575
400: invokevirtual #574
403: lstore        48
405: aload         45
407: invokevirtual #577
410: astore        50
412: aload         42
414: aload         50
416: invokevirtual #578
419: istore        51
421: aload         42
423: sipush        -7969
426: invokevirtual #815
429: aconst_null
430: astore        52
432: aload         29
434: aload         42
436: aload         52
438: invokevirtual #365
441: istore        53
443: aload_2
444: invokestatic  #10
447: aload_3
448: invokestatic  #10
451: aload         4
453: invokestatic  #10
456: aload         5
458: invokestatic  #10
461: aload         6
463: invokestatic  #10
466: new           #55
469: dup
470: invokespecial #56
473: ldc           #57
475: invokevirtual #58
478: aload         9
480: invokevirtual #58
483: ldc           #94
485: invokevirtual #58
488: invokevirtual #61
491: aload         9
493: ldc           #95
495: invokestatic  #96
498: aload         10
500: invokestatic  #10
503: new           #55
506: dup
507: invokespecial #56
510: ldc           #57
512: invokevirtual #58
515: iload         12
517: invokevirtual #59
520: ldc           #60
522: invokevirtual #58
525: iconst_0
526: invokevirtual #59
529: ldc           #57
531: invokevirtual #58
534: invokevirtual #61
537: iload         12
539: ifne          546
542: iconst_1
543: goto          547
546: iconst_0
547: invokestatic  #62
550: aload         14
552: invokestatic  #10
555: aload         17
557: invokestatic  #10
560: aload         18
562: invokestatic  #10
565: aload         19
567: invokestatic  #10
570: aload         21
572: invokestatic  #10
575: aload         21
577: invokestatic  #127
580: ldc_w         #370
583: invokestatic  #129
586: new           #55
589: dup
590: invokespecial #56
593: ldc           #57
595: invokevirtual #58
598: iload         23
600: invokevirtual #59
603: ldc           #60
605: invokevirtual #58
608: iconst_0
609: invokevirtual #59
612: ldc           #57
614: invokevirtual #58
617: invokevirtual #61
620: iload         23
622: ifne          629
625: iconst_1
626: goto          630
629: iconst_0
630: invokestatic  #62
633: aload         25
635: invokestatic  #10
638: aload         26
640: invokestatic  #10
643: aload         27
645: invokestatic  #10
648: aload         28
650: invokestatic  #10
653: aload         29
655: invokestatic  #10
658: new           #55
661: dup
662: invokespecial #56
665: ldc           #57
667: invokevirtual #58
670: aload         32
672: invokevirtual #58
675: ldc           #94
677: invokevirtual #58
680: invokevirtual #61
683: aload         32
685: ldc           #95
687: invokestatic  #96
690: aload         33
692: invokestatic  #10
695: new           #55
698: dup
699: invokespecial #56
702: ldc           #57
704: invokevirtual #58
707: iload         35
709: invokevirtual #59
712: ldc           #60
714: invokevirtual #58
717: iconst_0
718: invokevirtual #59
721: ldc           #57
723: invokevirtual #58
726: invokevirtual #61
729: iload         35
731: ifne          738
734: iconst_1
735: goto          739
738: iconst_0
739: invokestatic  #62
742: aload         37
744: invokestatic  #10
747: aload         39
749: invokestatic  #10
752: new           #55
755: dup
756: invokespecial #56
759: ldc           #57
761: invokevirtual #58
764: iload         40
766: invokevirtual #59
769: ldc           #60
771: invokevirtual #58
774: iconst_0
775: invokevirtual #59
778: ldc           #57
780: invokevirtual #58
783: invokevirtual #61
786: iload         40
788: ifne          795
791: iconst_1
792: goto          796
795: iconst_0
796: invokestatic  #62
799: aload         41
801: invokestatic  #10
804: aload         42
806: invokestatic  #10
809: aload         43
811: invokestatic  #10
814: aload         44
816: invokestatic  #10
819: new           #55
822: dup
823: invokespecial #56
826: ldc           #57
828: invokevirtual #58
831: lload         46
833: invokevirtual #386
836: ldc           #60
838: invokevirtual #58
841: lconst_0
842: invokevirtual #386
845: ldc           #57
847: invokevirtual #58
850: invokevirtual #61
853: lload         46
855: lconst_0
856: lcmp
857: ifne          864
860: iconst_1
861: goto          865
864: iconst_0
865: invokestatic  #62
868: new           #55
871: dup
872: invokespecial #56
875: ldc           #57
877: invokevirtual #58
880: lload         48
882: invokevirtual #386
885: ldc           #60
887: invokevirtual #58
890: lconst_0
891: invokevirtual #386
894: ldc           #57
896: invokevirtual #58
899: invokevirtual #61
902: lload         48
904: lconst_0
905: lcmp
906: ifne          913
909: iconst_1
910: goto          914
913: iconst_0
914: invokestatic  #62
917: aload         50
919: invokestatic  #10
922: new           #55
925: dup
926: invokespecial #56
929: ldc           #57
931: invokevirtual #58
934: iload         51
936: invokevirtual #97
939: ldc           #60
941: invokevirtual #58
944: iconst_0
945: invokevirtual #97
948: ldc           #57
950: invokevirtual #58
953: invokevirtual #61
956: iload         51
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #62
969: new           #55
972: dup
973: invokespecial #56
976: ldc           #57
978: invokevirtual #58
981: iload         53
983: invokevirtual #59
986: ldc           #60
988: invokevirtual #58
991: iconst_0
992: invokevirtual #59
995: ldc           #57
997: invokevirtual #58
1000: invokevirtual #61
1003: iload         53
1005: ifne          1012
1008: iconst_1
1009: goto          1013
1012: iconst_0
1013: invokestatic  #62
1016: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test259
Start line: 10192
End line: 10206
Method source code: 
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder5.appendSeparator("UnsupportedDurationField[days]", "");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #816
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload         4
54: invokevirtual #33
57: astore        5
59: aload         4
61: ldc_w         #817
64: ldc           #74
66: invokevirtual #20
69: astore        6
71: aload_2
72: invokestatic  #10
75: aload_3
76: invokestatic  #10
79: aload         4
81: invokestatic  #10
84: aload         5
86: invokestatic  #10
89: aload         6
91: invokestatic  #10
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test260
Start line: 10209
End line: 10223
Method source code: 
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendPrefix("", "TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #818
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: ldc           #74
55: ldc           #184
57: invokevirtual #41
60: astore        5
62: aload         4
64: invokevirtual #185
67: astore        6
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: aload         4
79: invokestatic  #10
82: aload         5
84: invokestatic  #10
87: aload         6
89: invokestatic  #10
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test261
Start line: 10226
End line: 10304
Method source code: 
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal6 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusDays((int) (byte) 100);
        java.util.Locale locale15 = null;
        int int16 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) period13, 999, locale15);
        org.joda.time.format.PeriodParser periodParser17 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder0.append((org.joda.time.format.PeriodPrinter) literal6, periodParser17);
        org.joda.time.Period period20 = new org.joda.time.Period((long) ' ');
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        int int22 = period21.getHours();
        org.joda.time.Period period24 = period21.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType29 = org.joda.time.DateTimeUtils.getPeriodType(periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period(100L, (long) (short) -1, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weeks();
        boolean boolean32 = periodType28.isSupported(durationFieldType31);
        mutablePeriod25.add(durationFieldType31, (int) (byte) 100);
        java.lang.String str35 = mutablePeriod25.toString();
        mutablePeriod25.setHours((int) (short) 10);
        mutablePeriod25.setYears(0);
        org.joda.time.Period period40 = period20.withFields((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        int int44 = period43.getWeeks();
        org.joda.time.Period period46 = period43.minusHours((int) '4');
        org.joda.time.Minutes minutes47 = period46.toStandardMinutes();
        org.joda.time.Period period49 = period46.minusMonths(0);
        int int50 = period46.getMillis();
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) period46);
        java.util.Locale locale53 = null;
        int int54 = literal6.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod25, 3, locale53);
        java.io.Writer writer55 = null;
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        java.util.Locale locale57 = null;
        // The following exception was thrown during execution in test generation
        try {
            literal6.printTo(writer55, readablePeriod56, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(literal6);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-0.090S" + "'", str11, "PT-0.090S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P100W" + "'", str35, "P100W");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #819
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: getstatic     #78
60: astore        6
62: aconst_null
63: astore        7
65: new           #46
68: dup
69: ldc2_w        #79
72: ldc2_w        #81
75: aload         7
77: invokespecial #83
80: astore        8
82: aload         8
84: invokevirtual #84
87: astore        9
89: aload         8
91: bipush        100
93: invokevirtual #85
96: astore        10
98: aconst_null
99: astore        11
101: aload         6
103: aload         10
105: sipush        999
108: aload         11
110: invokevirtual #86
113: istore        12
115: aconst_null
116: astore        13
118: aload_1
119: aload         6
121: aload         13
123: invokevirtual #87
126: astore        14
128: new           #46
131: dup
132: ldc2_w        #121
135: invokespecial #91
138: astore        15
140: getstatic     #8
143: astore        16
145: aload         16
147: invokevirtual #216
150: istore        17
152: aload         16
154: iconst_0
155: invokevirtual #200
158: astore        18
160: aload         18
162: invokevirtual #205
165: astore        19
167: invokestatic  #171
170: astore        20
172: aload         20
174: invokestatic  #172
177: astore        21
179: new           #46
182: dup
183: ldc2_w        #79
186: ldc2_w        #173
189: aload         20
191: invokespecial #175
194: astore        22
196: invokestatic  #176
199: astore        23
201: aload         20
203: aload         23
205: invokevirtual #177
208: istore        24
210: aload         19
212: aload         23
214: bipush        100
216: invokevirtual #226
219: aload         19
221: invokevirtual #235
224: astore        25
226: aload         19
228: bipush        10
230: invokevirtual #416
233: aload         19
235: iconst_0
236: invokevirtual #236
239: aload         15
241: aload         19
243: invokevirtual #364
246: astore        26
248: aconst_null
249: astore        27
251: aconst_null
252: astore        28
254: new           #46
257: dup
258: aload         27
260: aload         28
262: invokespecial #47
265: astore        29
267: aload         29
269: invokevirtual #48
272: istore        30
274: aload         29
276: bipush        52
278: invokevirtual #49
281: astore        31
283: aload         31
285: invokevirtual #50
288: astore        32
290: aload         31
292: iconst_0
293: invokevirtual #51
296: astore        33
298: aload         31
300: invokevirtual #417
303: istore        34
305: aload         19
307: aload         31
309: invokevirtual #219
312: aconst_null
313: astore        35
315: aload         6
317: aload         19
319: iconst_3
320: aload         35
322: invokevirtual #86
325: istore        36
327: aconst_null
328: astore        37
330: aconst_null
331: astore        38
333: aconst_null
334: astore        39
336: aload         6
338: aload         37
340: aload         38
342: aload         39
344: invokevirtual #93
347: ldc           #53
349: invokestatic  #22
352: goto          357
355: astore        40
357: aload_2
358: invokestatic  #10
361: aload_3
362: invokestatic  #10
365: aload         4
367: invokestatic  #10
370: aload         5
372: invokestatic  #10
375: aload         6
377: invokestatic  #10
380: new           #55
383: dup
384: invokespecial #56
387: ldc           #57
389: invokevirtual #58
392: aload         9
394: invokevirtual #58
397: ldc           #94
399: invokevirtual #58
402: invokevirtual #61
405: aload         9
407: ldc           #95
409: invokestatic  #96
412: aload         10
414: invokestatic  #10
417: new           #55
420: dup
421: invokespecial #56
424: ldc           #57
426: invokevirtual #58
429: iload         12
431: invokevirtual #59
434: ldc           #60
436: invokevirtual #58
439: iconst_0
440: invokevirtual #59
443: ldc           #57
445: invokevirtual #58
448: invokevirtual #61
451: iload         12
453: ifne          460
456: iconst_1
457: goto          461
460: iconst_0
461: invokestatic  #62
464: aload         14
466: invokestatic  #10
469: aload         16
471: invokestatic  #10
474: new           #55
477: dup
478: invokespecial #56
481: ldc           #57
483: invokevirtual #58
486: iload         17
488: invokevirtual #59
491: ldc           #60
493: invokevirtual #58
496: iconst_0
497: invokevirtual #59
500: ldc           #57
502: invokevirtual #58
505: invokevirtual #61
508: iload         17
510: ifne          517
513: iconst_1
514: goto          518
517: iconst_0
518: invokestatic  #62
521: aload         18
523: invokestatic  #10
526: aload         19
528: invokestatic  #10
531: aload         20
533: invokestatic  #10
536: aload         21
538: invokestatic  #10
541: aload         23
543: invokestatic  #10
546: new           #55
549: dup
550: invokespecial #56
553: ldc           #57
555: invokevirtual #58
558: iload         24
560: invokevirtual #97
563: ldc           #60
565: invokevirtual #58
568: iconst_0
569: invokevirtual #97
572: ldc           #57
574: invokevirtual #58
577: invokevirtual #61
580: iload         24
582: ifne          589
585: iconst_1
586: goto          590
589: iconst_0
590: invokestatic  #62
593: new           #55
596: dup
597: invokespecial #56
600: ldc           #57
602: invokevirtual #58
605: aload         25
607: invokevirtual #58
610: ldc           #238
612: invokevirtual #58
615: invokevirtual #61
618: aload         25
620: ldc           #239
622: invokestatic  #96
625: aload         26
627: invokestatic  #10
630: new           #55
633: dup
634: invokespecial #56
637: ldc           #57
639: invokevirtual #58
642: iload         30
644: invokevirtual #59
647: ldc           #60
649: invokevirtual #58
652: iconst_0
653: invokevirtual #59
656: ldc           #57
658: invokevirtual #58
661: invokevirtual #61
664: iload         30
666: ifne          673
669: iconst_1
670: goto          674
673: iconst_0
674: invokestatic  #62
677: aload         31
679: invokestatic  #10
682: aload         32
684: invokestatic  #10
687: aload         33
689: invokestatic  #10
692: new           #55
695: dup
696: invokespecial #56
699: ldc           #57
701: invokevirtual #58
704: iload         34
706: invokevirtual #59
709: ldc           #60
711: invokevirtual #58
714: iconst_0
715: invokevirtual #59
718: ldc           #57
720: invokevirtual #58
723: invokevirtual #61
726: iload         34
728: ifne          735
731: iconst_1
732: goto          736
735: iconst_0
736: invokestatic  #62
739: new           #55
742: dup
743: invokespecial #56
746: ldc           #57
748: invokevirtual #58
751: iload         36
753: invokevirtual #59
756: ldc           #60
758: invokevirtual #58
761: iconst_0
762: invokevirtual #59
765: ldc           #57
767: invokevirtual #58
770: invokevirtual #61
773: iload         36
775: ifne          782
778: iconst_1
779: goto          783
782: iconst_0
783: invokestatic  #62
786: return
Exception table:
from    to  target type
336   352   355   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test262
Start line: 10307
End line: 10337
Method source code: 
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter10.withLocale(locale12);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder7.append(periodFormatter10);
        java.util.Locale locale15 = periodFormatter10.getLocale();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNull(locale15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #820
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #77
67: astore        7
69: invokestatic  #12
72: astore        8
74: aconst_null
75: astore        9
77: aload         8
79: aload         9
81: invokevirtual #88
84: astore        10
86: aload         10
88: invokevirtual #89
91: istore        11
93: aconst_null
94: astore        12
96: aload         10
98: aload         12
100: invokevirtual #88
103: astore        13
105: aload         7
107: aload         10
109: invokevirtual #118
112: astore        14
114: aload         10
116: invokevirtual #660
119: astore        15
121: aload_2
122: invokestatic  #10
125: aload_3
126: invokestatic  #10
129: aload         4
131: invokestatic  #10
134: aload         5
136: invokestatic  #10
139: aload         6
141: invokestatic  #10
144: aload         7
146: invokestatic  #10
149: aload         8
151: invokestatic  #10
154: aload         10
156: invokestatic  #10
159: new           #55
162: dup
163: invokespecial #56
166: ldc           #57
168: invokevirtual #58
171: iload         11
173: invokevirtual #97
176: ldc           #60
178: invokevirtual #58
181: iconst_1
182: invokevirtual #97
185: ldc           #57
187: invokevirtual #58
190: invokevirtual #61
193: iload         11
195: iconst_1
196: if_icmpne     203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #62
207: aload         13
209: invokestatic  #10
212: aload         14
214: invokestatic  #10
217: aload         15
219: invokestatic  #354
222: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test263
Start line: 10340
End line: 10361
Method source code: 
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("DateTimeField[yearOfCentury]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendMillis();
        periodFormatterBuilder11.clear();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #821
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #185
66: astore        6
68: aload         5
70: ldc_w         #485
73: invokevirtual #37
76: astore        7
78: aload         7
80: invokevirtual #320
83: astore        8
85: aload         8
87: invokevirtual #39
90: astore        9
92: aload         9
94: invokevirtual #212
97: aload_2
98: invokestatic  #10
101: aload_3
102: invokestatic  #10
105: aload         4
107: invokestatic  #10
110: aload         5
112: invokestatic  #10
115: aload         6
117: invokestatic  #10
120: aload         7
122: invokestatic  #10
125: aload         8
127: invokestatic  #10
130: aload         9
132: invokestatic  #10
135: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test264
Start line: 10364
End line: 10385
Method source code: 
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSeparatorIfFieldsAfter("weekyears");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder5.appendSeparator("+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Cannot have two adjacent separators");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #822
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #139
56: astore        5
58: aload         5
60: ldc_w         #823
63: invokevirtual #17
66: astore        6
68: aload         5
70: ldc           #66
72: invokevirtual #37
75: astore        7
77: ldc           #21
79: invokestatic  #22
82: goto          87
85: astore        7
87: aload_2
88: invokestatic  #10
91: aload_3
92: invokestatic  #10
95: aload         4
97: invokestatic  #10
100: aload         5
102: invokestatic  #10
105: aload         6
107: invokestatic  #10
110: return
Exception table:
from    to  target type
68    82    85   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test265
Start line: 10388
End line: 10470
Method source code: 
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology2);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period6 = period3.minusDays((int) (byte) 100);
        org.joda.time.Period period7 = period3.toPeriod();
        org.joda.time.Period period9 = org.joda.time.Period.millis(1);
        int int10 = period9.getMonths();
        int int11 = period9.size();
        org.joda.time.Period period13 = period9.withDays((int) (byte) 100);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = period14.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period21 = period14.withField(durationFieldType19, 8);
        java.lang.String str22 = durationFieldType19.getName();
        org.joda.time.Period period24 = period9.withField(durationFieldType19, 1);
        org.joda.time.Period period26 = period9.minusDays(10);
        org.joda.time.Period period27 = period3.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period29 = period27.plusDays(3685056);
        org.joda.time.Period period31 = period29.multipliedBy(0);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder32.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter35 = periodFormatterBuilder34.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder37 = periodFormatterBuilder34.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter38 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        boolean boolean41 = periodFormatter40.isParser();
        java.util.Locale locale42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter40.withLocale(locale42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology47.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone49 = gregorianChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology47.yearOfCentury();
        org.joda.time.Period period51 = new org.joda.time.Period((long) '4', 100L, periodType46, (org.joda.time.Chronology) gregorianChronology47);
        org.joda.time.format.PeriodFormatter periodFormatter52 = periodFormatter40.withParseType(periodType46);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder53 = periodFormatterBuilder34.append(periodFormatter52);
        org.joda.time.format.PeriodParser periodParser54 = periodFormatter52.getParser();
        boolean boolean55 = periodFormatter52.isParser();
        java.lang.String str56 = period31.toString(periodFormatter52);
        org.joda.time.PeriodType periodType57 = periodFormatter52.getParseType();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT-0.090S" + "'", str4, "PT-0.090S");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodPrinter35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(periodFormatter52);
        org.junit.Assert.assertNotNull(periodFormatterBuilder53);
        org.junit.Assert.assertNotNull(periodParser54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "P0000-W00-00T00:00:00" + "'", str56, "P0000-W00-00T00:00:00");
        org.junit.Assert.assertNotNull(periodType57);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #824
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #46
30: dup
31: ldc2_w        #79
34: ldc2_w        #81
37: aload_1
38: invokespecial #83
41: astore_2
42: aload_2
43: invokevirtual #84
46: astore_3
47: aload_2
48: bipush        100
50: invokevirtual #85
53: astore        4
55: aload_2
56: invokevirtual #481
59: astore        5
61: iconst_1
62: invokestatic  #168
65: astore        6
67: aload         6
69: invokevirtual #169
72: istore        7
74: aload         6
76: invokevirtual #170
79: istore        8
81: aload         6
83: bipush        100
85: invokevirtual #200
88: astore        9
90: getstatic     #8
93: astore        10
95: aload         10
97: iconst_m1
98: invokevirtual #9
101: astore        11
103: aconst_null
104: astore        12
106: aload         10
108: aload         12
110: invokevirtual #201
113: istore        13
115: invokestatic  #202
118: astore        14
120: aload         10
122: aload         14
124: bipush        8
126: invokevirtual #203
129: astore        15
131: aload         14
133: invokevirtual #204
136: astore        16
138: aload         6
140: aload         14
142: iconst_1
143: invokevirtual #203
146: astore        17
148: aload         6
150: bipush        10
152: invokevirtual #85
155: astore        18
157: aload_2
158: aload         6
160: invokevirtual #657
163: astore        19
165: aload         19
167: ldc_w         #825
170: invokevirtual #9
173: astore        20
175: aload         20
177: iconst_0
178: invokevirtual #826
181: astore        21
183: new           #14
186: dup
187: invokespecial #15
190: astore        22
192: aload         22
194: ldc           #16
196: invokevirtual #17
199: astore        23
201: aload         23
203: invokevirtual #45
206: astore        24
208: aload         23
210: iconst_0
211: invokevirtual #108
214: astore        25
216: invokestatic  #12
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #88
231: astore        28
233: aload         28
235: invokevirtual #89
238: istore        29
240: aconst_null
241: astore        30
243: aload         28
245: aload         30
247: invokevirtual #88
250: astore        31
252: invokestatic  #109
255: astore        32
257: invokestatic  #110
260: astore        33
262: aload         33
264: invokevirtual #111
267: astore        34
269: aload         33
271: invokevirtual #112
274: astore        35
276: aload         33
278: invokevirtual #113
281: astore        36
283: new           #46
286: dup
287: ldc2_w        #114
290: ldc2_w        #79
293: aload         32
295: aload         33
297: invokespecial #116
300: astore        37
302: aload         28
304: aload         32
306: invokevirtual #117
309: astore        38
311: aload         23
313: aload         38
315: invokevirtual #118
318: astore        39
320: aload         38
322: invokevirtual #119
325: astore        40
327: aload         38
329: invokevirtual #89
332: istore        41
334: aload         21
336: aload         38
338: invokevirtual #284
341: astore        42
343: aload         38
345: invokevirtual #350
348: astore        43
350: new           #55
353: dup
354: invokespecial #56
357: ldc           #57
359: invokevirtual #58
362: aload_3
363: invokevirtual #58
366: ldc           #94
368: invokevirtual #58
371: invokevirtual #61
374: aload_3
375: ldc           #95
377: invokestatic  #96
380: aload         4
382: invokestatic  #10
385: aload         5
387: invokestatic  #10
390: aload         6
392: invokestatic  #10
395: new           #55
398: dup
399: invokespecial #56
402: ldc           #57
404: invokevirtual #58
407: iload         7
409: invokevirtual #59
412: ldc           #60
414: invokevirtual #58
417: iconst_0
418: invokevirtual #59
421: ldc           #57
423: invokevirtual #58
426: invokevirtual #61
429: iload         7
431: ifne          438
434: iconst_1
435: goto          439
438: iconst_0
439: invokestatic  #62
442: new           #55
445: dup
446: invokespecial #56
449: ldc           #57
451: invokevirtual #58
454: iload         8
456: invokevirtual #59
459: ldc           #60
461: invokevirtual #58
464: bipush        8
466: invokevirtual #59
469: ldc           #57
471: invokevirtual #58
474: invokevirtual #61
477: iload         8
479: bipush        8
481: if_icmpne     488
484: iconst_1
485: goto          489
488: iconst_0
489: invokestatic  #62
492: aload         9
494: invokestatic  #10
497: aload         10
499: invokestatic  #10
502: aload         11
504: invokestatic  #10
507: new           #55
510: dup
511: invokespecial #56
514: ldc           #57
516: invokevirtual #58
519: iload         13
521: invokevirtual #59
524: ldc           #60
526: invokevirtual #58
529: iconst_0
530: invokevirtual #59
533: ldc           #57
535: invokevirtual #58
538: invokevirtual #61
541: iload         13
543: ifne          550
546: iconst_1
547: goto          551
550: iconst_0
551: invokestatic  #62
554: aload         14
556: invokestatic  #10
559: aload         15
561: invokestatic  #10
564: new           #55
567: dup
568: invokespecial #56
571: ldc           #57
573: invokevirtual #58
576: aload         16
578: invokevirtual #58
581: ldc           #209
583: invokevirtual #58
586: invokevirtual #61
589: aload         16
591: ldc           #210
593: invokestatic  #96
596: aload         17
598: invokestatic  #10
601: aload         18
603: invokestatic  #10
606: aload         19
608: invokestatic  #10
611: aload         20
613: invokestatic  #10
616: aload         21
618: invokestatic  #10
621: aload         23
623: invokestatic  #10
626: aload         24
628: invokestatic  #10
631: aload         25
633: invokestatic  #10
636: aload         26
638: invokestatic  #10
641: aload         28
643: invokestatic  #10
646: new           #55
649: dup
650: invokespecial #56
653: ldc           #57
655: invokevirtual #58
658: iload         29
660: invokevirtual #97
663: ldc           #60
665: invokevirtual #58
668: iconst_1
669: invokevirtual #97
672: ldc           #57
674: invokevirtual #58
677: invokevirtual #61
680: iload         29
682: iconst_1
683: if_icmpne     690
686: iconst_1
687: goto          691
690: iconst_0
691: invokestatic  #62
694: aload         31
696: invokestatic  #10
699: aload         32
701: invokestatic  #10
704: aload         33
706: invokestatic  #10
709: aload         34
711: invokestatic  #10
714: aload         35
716: invokestatic  #10
719: aload         36
721: invokestatic  #10
724: aload         38
726: invokestatic  #10
729: aload         39
731: invokestatic  #10
734: aload         40
736: invokestatic  #10
739: new           #55
742: dup
743: invokespecial #56
746: ldc           #57
748: invokevirtual #58
751: iload         41
753: invokevirtual #97
756: ldc           #60
758: invokevirtual #58
761: iconst_1
762: invokevirtual #97
765: ldc           #57
767: invokevirtual #58
770: invokevirtual #61
773: iload         41
775: iconst_1
776: if_icmpne     783
779: iconst_1
780: goto          784
783: iconst_0
784: invokestatic  #62
787: new           #55
790: dup
791: invokespecial #56
794: ldc           #57
796: invokevirtual #58
799: aload         42
801: invokevirtual #58
804: ldc_w         #827
807: invokevirtual #58
810: invokevirtual #61
813: aload         42
815: ldc_w         #828
818: invokestatic  #96
821: aload         43
823: invokestatic  #10
826: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test266
Start line: 10473
End line: 10493
Method source code: 
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.maximumParsedDigits(0);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSeparatorIfFieldsAfter("");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #829
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload         6
65: invokevirtual #26
68: astore        7
70: aload         7
72: iconst_0
73: invokevirtual #213
76: astore        8
78: aload         8
80: ldc           #74
82: invokevirtual #17
85: astore        9
87: aload_2
88: invokestatic  #10
91: aload_3
92: invokestatic  #10
95: aload         4
97: invokestatic  #10
100: aload         5
102: invokestatic  #10
105: aload         6
107: invokestatic  #10
110: aload         7
112: invokestatic  #10
115: aload         8
117: invokestatic  #10
120: aload         9
122: invokestatic  #10
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test267
Start line: 10496
End line: 10529
Method source code: 
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSeparator("-81");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
        org.joda.time.format.PeriodFormatter periodFormatter6 = periodFormatterBuilder5.toFormatter();
        org.joda.time.chrono.GregorianChronology gregorianChronology7 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        int int9 = period8.getHours();
        org.joda.time.Period period11 = period8.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        mutablePeriod12.setDays((int) (short) -1);
        mutablePeriod12.addSeconds(8);
        long long19 = gregorianChronology7.add((org.joda.time.ReadablePeriod) mutablePeriod12, (long) (short) 0, 0);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.years();
        mutablePeriod12.set(durationFieldType20, (-1));
        int int25 = periodFormatter6.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod12, "P100W", 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(gregorianChronology7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #830
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: invokevirtual #77
42: astore_3
43: aload_2
44: ldc_w         #612
47: invokevirtual #37
50: astore        4
52: aload         4
54: invokevirtual #149
57: astore        5
59: aload         5
61: invokevirtual #161
64: astore        6
66: invokestatic  #222
69: astore        7
71: getstatic     #8
74: astore        8
76: aload         8
78: invokevirtual #216
81: istore        9
83: aload         8
85: iconst_0
86: invokevirtual #200
89: astore        10
91: aload         10
93: invokevirtual #205
96: astore        11
98: aload         11
100: iconst_m1
101: invokevirtual #313
104: aload         11
106: bipush        8
108: invokevirtual #311
111: aload         7
113: aload         11
115: lconst_0
116: iconst_0
117: invokevirtual #227
120: lstore        12
122: invokestatic  #300
125: astore        14
127: aload         11
129: aload         14
131: iconst_m1
132: invokevirtual #301
135: aload         6
137: aload         11
139: ldc           #239
141: iconst_0
142: invokevirtual #237
145: istore        15
147: aload_2
148: invokestatic  #10
151: aload_3
152: invokestatic  #10
155: aload         4
157: invokestatic  #10
160: aload         5
162: invokestatic  #10
165: aload         6
167: invokestatic  #10
170: aload         7
172: invokestatic  #10
175: aload         8
177: invokestatic  #10
180: new           #55
183: dup
184: invokespecial #56
187: ldc           #57
189: invokevirtual #58
192: iload         9
194: invokevirtual #59
197: ldc           #60
199: invokevirtual #58
202: iconst_0
203: invokevirtual #59
206: ldc           #57
208: invokevirtual #58
211: invokevirtual #61
214: iload         9
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #62
227: aload         10
229: invokestatic  #10
232: aload         11
234: invokestatic  #10
237: new           #55
240: dup
241: invokespecial #56
244: ldc           #57
246: invokevirtual #58
249: lload         12
251: invokevirtual #386
254: ldc           #60
256: invokevirtual #58
259: lconst_0
260: invokevirtual #386
263: ldc           #57
265: invokevirtual #58
268: invokevirtual #61
271: lload         12
273: lconst_0
274: lcmp
275: ifne          282
278: iconst_1
279: goto          283
282: iconst_0
283: invokestatic  #62
286: aload         14
288: invokestatic  #10
291: new           #55
294: dup
295: invokespecial #56
298: ldc           #57
300: invokevirtual #58
303: iload         15
305: invokevirtual #59
308: ldc           #60
310: invokevirtual #58
313: iconst_m1
314: invokevirtual #59
317: ldc           #57
319: invokevirtual #58
322: invokevirtual #61
325: iload         15
327: iconst_m1
328: if_icmpne     335
331: iconst_1
332: goto          336
335: iconst_0
336: invokestatic  #62
339: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test268
Start line: 10532
End line: 10615
Method source code: 
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology2);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period6 = period3.minusDays((int) (byte) 100);
        org.joda.time.Period period7 = period3.toPeriod();
        org.joda.time.Period period9 = org.joda.time.Period.millis(1);
        int int10 = period9.getMonths();
        int int11 = period9.size();
        org.joda.time.Period period13 = period9.withDays((int) (byte) 100);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = period14.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period21 = period14.withField(durationFieldType19, 8);
        java.lang.String str22 = durationFieldType19.getName();
        org.joda.time.Period period24 = period9.withField(durationFieldType19, 1);
        org.joda.time.Period period26 = period9.minusDays(10);
        org.joda.time.Period period27 = period3.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period29 = period27.plusDays(3685056);
        org.joda.time.Period period31 = period29.multipliedBy(0);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder32.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter35 = periodFormatterBuilder34.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder37 = periodFormatterBuilder34.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter38 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        boolean boolean41 = periodFormatter40.isParser();
        java.util.Locale locale42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter40.withLocale(locale42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology47.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone49 = gregorianChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology47.yearOfCentury();
        org.joda.time.Period period51 = new org.joda.time.Period((long) '4', 100L, periodType46, (org.joda.time.Chronology) gregorianChronology47);
        org.joda.time.format.PeriodFormatter periodFormatter52 = periodFormatter40.withParseType(periodType46);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder53 = periodFormatterBuilder34.append(periodFormatter52);
        org.joda.time.format.PeriodParser periodParser54 = periodFormatter52.getParser();
        boolean boolean55 = periodFormatter52.isParser();
        java.lang.String str56 = period31.toString(periodFormatter52);
        java.util.Locale locale57 = null;
        org.joda.time.format.PeriodFormatter periodFormatter58 = periodFormatter52.withLocale(locale57);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT-0.090S" + "'", str4, "PT-0.090S");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodPrinter35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(periodFormatter52);
        org.junit.Assert.assertNotNull(periodFormatterBuilder53);
        org.junit.Assert.assertNotNull(periodParser54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "P0000-W00-00T00:00:00" + "'", str56, "P0000-W00-00T00:00:00");
        org.junit.Assert.assertNotNull(periodFormatter58);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #831
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #46
30: dup
31: ldc2_w        #79
34: ldc2_w        #81
37: aload_1
38: invokespecial #83
41: astore_2
42: aload_2
43: invokevirtual #84
46: astore_3
47: aload_2
48: bipush        100
50: invokevirtual #85
53: astore        4
55: aload_2
56: invokevirtual #481
59: astore        5
61: iconst_1
62: invokestatic  #168
65: astore        6
67: aload         6
69: invokevirtual #169
72: istore        7
74: aload         6
76: invokevirtual #170
79: istore        8
81: aload         6
83: bipush        100
85: invokevirtual #200
88: astore        9
90: getstatic     #8
93: astore        10
95: aload         10
97: iconst_m1
98: invokevirtual #9
101: astore        11
103: aconst_null
104: astore        12
106: aload         10
108: aload         12
110: invokevirtual #201
113: istore        13
115: invokestatic  #202
118: astore        14
120: aload         10
122: aload         14
124: bipush        8
126: invokevirtual #203
129: astore        15
131: aload         14
133: invokevirtual #204
136: astore        16
138: aload         6
140: aload         14
142: iconst_1
143: invokevirtual #203
146: astore        17
148: aload         6
150: bipush        10
152: invokevirtual #85
155: astore        18
157: aload_2
158: aload         6
160: invokevirtual #657
163: astore        19
165: aload         19
167: ldc_w         #825
170: invokevirtual #9
173: astore        20
175: aload         20
177: iconst_0
178: invokevirtual #826
181: astore        21
183: new           #14
186: dup
187: invokespecial #15
190: astore        22
192: aload         22
194: ldc           #16
196: invokevirtual #17
199: astore        23
201: aload         23
203: invokevirtual #45
206: astore        24
208: aload         23
210: iconst_0
211: invokevirtual #108
214: astore        25
216: invokestatic  #12
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #88
231: astore        28
233: aload         28
235: invokevirtual #89
238: istore        29
240: aconst_null
241: astore        30
243: aload         28
245: aload         30
247: invokevirtual #88
250: astore        31
252: invokestatic  #109
255: astore        32
257: invokestatic  #110
260: astore        33
262: aload         33
264: invokevirtual #111
267: astore        34
269: aload         33
271: invokevirtual #112
274: astore        35
276: aload         33
278: invokevirtual #113
281: astore        36
283: new           #46
286: dup
287: ldc2_w        #114
290: ldc2_w        #79
293: aload         32
295: aload         33
297: invokespecial #116
300: astore        37
302: aload         28
304: aload         32
306: invokevirtual #117
309: astore        38
311: aload         23
313: aload         38
315: invokevirtual #118
318: astore        39
320: aload         38
322: invokevirtual #119
325: astore        40
327: aload         38
329: invokevirtual #89
332: istore        41
334: aload         21
336: aload         38
338: invokevirtual #284
341: astore        42
343: aconst_null
344: astore        43
346: aload         38
348: aload         43
350: invokevirtual #88
353: astore        44
355: new           #55
358: dup
359: invokespecial #56
362: ldc           #57
364: invokevirtual #58
367: aload_3
368: invokevirtual #58
371: ldc           #94
373: invokevirtual #58
376: invokevirtual #61
379: aload_3
380: ldc           #95
382: invokestatic  #96
385: aload         4
387: invokestatic  #10
390: aload         5
392: invokestatic  #10
395: aload         6
397: invokestatic  #10
400: new           #55
403: dup
404: invokespecial #56
407: ldc           #57
409: invokevirtual #58
412: iload         7
414: invokevirtual #59
417: ldc           #60
419: invokevirtual #58
422: iconst_0
423: invokevirtual #59
426: ldc           #57
428: invokevirtual #58
431: invokevirtual #61
434: iload         7
436: ifne          443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #62
447: new           #55
450: dup
451: invokespecial #56
454: ldc           #57
456: invokevirtual #58
459: iload         8
461: invokevirtual #59
464: ldc           #60
466: invokevirtual #58
469: bipush        8
471: invokevirtual #59
474: ldc           #57
476: invokevirtual #58
479: invokevirtual #61
482: iload         8
484: bipush        8
486: if_icmpne     493
489: iconst_1
490: goto          494
493: iconst_0
494: invokestatic  #62
497: aload         9
499: invokestatic  #10
502: aload         10
504: invokestatic  #10
507: aload         11
509: invokestatic  #10
512: new           #55
515: dup
516: invokespecial #56
519: ldc           #57
521: invokevirtual #58
524: iload         13
526: invokevirtual #59
529: ldc           #60
531: invokevirtual #58
534: iconst_0
535: invokevirtual #59
538: ldc           #57
540: invokevirtual #58
543: invokevirtual #61
546: iload         13
548: ifne          555
551: iconst_1
552: goto          556
555: iconst_0
556: invokestatic  #62
559: aload         14
561: invokestatic  #10
564: aload         15
566: invokestatic  #10
569: new           #55
572: dup
573: invokespecial #56
576: ldc           #57
578: invokevirtual #58
581: aload         16
583: invokevirtual #58
586: ldc           #209
588: invokevirtual #58
591: invokevirtual #61
594: aload         16
596: ldc           #210
598: invokestatic  #96
601: aload         17
603: invokestatic  #10
606: aload         18
608: invokestatic  #10
611: aload         19
613: invokestatic  #10
616: aload         20
618: invokestatic  #10
621: aload         21
623: invokestatic  #10
626: aload         23
628: invokestatic  #10
631: aload         24
633: invokestatic  #10
636: aload         25
638: invokestatic  #10
641: aload         26
643: invokestatic  #10
646: aload         28
648: invokestatic  #10
651: new           #55
654: dup
655: invokespecial #56
658: ldc           #57
660: invokevirtual #58
663: iload         29
665: invokevirtual #97
668: ldc           #60
670: invokevirtual #58
673: iconst_1
674: invokevirtual #97
677: ldc           #57
679: invokevirtual #58
682: invokevirtual #61
685: iload         29
687: iconst_1
688: if_icmpne     695
691: iconst_1
692: goto          696
695: iconst_0
696: invokestatic  #62
699: aload         31
701: invokestatic  #10
704: aload         32
706: invokestatic  #10
709: aload         33
711: invokestatic  #10
714: aload         34
716: invokestatic  #10
719: aload         35
721: invokestatic  #10
724: aload         36
726: invokestatic  #10
729: aload         38
731: invokestatic  #10
734: aload         39
736: invokestatic  #10
739: aload         40
741: invokestatic  #10
744: new           #55
747: dup
748: invokespecial #56
751: ldc           #57
753: invokevirtual #58
756: iload         41
758: invokevirtual #97
761: ldc           #60
763: invokevirtual #58
766: iconst_1
767: invokevirtual #97
770: ldc           #57
772: invokevirtual #58
775: invokevirtual #61
778: iload         41
780: iconst_1
781: if_icmpne     788
784: iconst_1
785: goto          789
788: iconst_0
789: invokestatic  #62
792: new           #55
795: dup
796: invokespecial #56
799: ldc           #57
801: invokevirtual #58
804: aload         42
806: invokevirtual #58
809: ldc_w         #827
812: invokevirtual #58
815: invokevirtual #61
818: aload         42
820: ldc_w         #828
823: invokestatic  #96
826: aload         44
828: invokestatic  #10
831: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test269
Start line: 10618
End line: 10664
Method source code: 
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal8 = new org.joda.time.format.PeriodFormatterBuilder.Literal("clockhourOfHalfday");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder9.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder9.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter19 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter19.withLocale(locale20);
        boolean boolean22 = periodFormatter21.isParser();
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter21.withLocale(locale23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder18.append(periodFormatter24);
        org.joda.time.format.PeriodParser periodParser26 = periodFormatterBuilder25.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder6.append((org.joda.time.format.PeriodPrinter) literal8, periodParser26);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = periodFormatterBuilder6.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodParser26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder28);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #832
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: new           #392
66: dup
67: ldc_w         #708
70: invokespecial #393
73: astore        7
75: new           #14
78: dup
79: invokespecial #15
82: astore        8
84: aload         8
86: ldc           #16
88: invokevirtual #17
91: astore        9
93: aload         8
95: invokevirtual #25
98: astore        10
100: aload         8
102: invokevirtual #76
105: astore        11
107: aload         8
109: invokevirtual #77
112: astore        12
114: aload         8
116: ldc           #16
118: invokevirtual #17
121: astore        13
123: aload         8
125: ldc           #141
127: invokevirtual #28
130: astore        14
132: invokestatic  #12
135: astore        15
137: aconst_null
138: astore        16
140: aload         15
142: aload         16
144: invokevirtual #88
147: astore        17
149: aload         17
151: invokevirtual #89
154: istore        18
156: aconst_null
157: astore        19
159: aload         17
161: aload         19
163: invokevirtual #88
166: astore        20
168: aload         14
170: aload         20
172: invokevirtual #118
175: astore        21
177: aload         21
179: invokevirtual #142
182: astore        22
184: aload         6
186: aload         7
188: aload         22
190: invokevirtual #87
193: astore        23
195: aload         6
197: invokevirtual #149
200: astore        24
202: aload_2
203: invokestatic  #10
206: aload_3
207: invokestatic  #10
210: aload         4
212: invokestatic  #10
215: aload         5
217: invokestatic  #10
220: aload         6
222: invokestatic  #10
225: aload         9
227: invokestatic  #10
230: aload         10
232: invokestatic  #10
235: aload         11
237: invokestatic  #10
240: aload         12
242: invokestatic  #10
245: aload         13
247: invokestatic  #10
250: aload         14
252: invokestatic  #10
255: aload         15
257: invokestatic  #10
260: aload         17
262: invokestatic  #10
265: new           #55
268: dup
269: invokespecial #56
272: ldc           #57
274: invokevirtual #58
277: iload         18
279: invokevirtual #97
282: ldc           #60
284: invokevirtual #58
287: iconst_1
288: invokevirtual #97
291: ldc           #57
293: invokevirtual #58
296: invokevirtual #61
299: iload         18
301: iconst_1
302: if_icmpne     309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #62
313: aload         20
315: invokestatic  #10
318: aload         21
320: invokestatic  #10
323: aload         22
325: invokestatic  #10
328: aload         23
330: invokestatic  #10
333: aload         24
335: invokestatic  #10
338: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test270
Start line: 10667
End line: 10693
Method source code: 
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodParser periodParser12 = periodFormatterBuilder8.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder8.appendPrefix("+07:32", "1776");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder15.appendPrefix("97", "(\"org.joda.time.JodaTimePermission\" \"DayTime\")");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder15.appendPrefix("DateTimeField[minuteOfDay]", "80");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodParser12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #833
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: aload         6
87: invokevirtual #142
90: astore        9
92: aload         6
94: ldc           #255
96: ldc_w         #422
99: invokevirtual #41
102: astore        10
104: aload         10
106: ldc_w         #347
109: ldc_w         #834
112: invokevirtual #41
115: astore        11
117: aload         10
119: ldc           #103
121: ldc_w         #835
124: invokevirtual #41
127: astore        12
129: aload_2
130: invokestatic  #10
133: aload_3
134: invokestatic  #10
137: aload         4
139: invokestatic  #10
142: aload         5
144: invokestatic  #10
147: aload         6
149: invokestatic  #10
152: aload         7
154: invokestatic  #10
157: aload         8
159: invokestatic  #10
162: aload         9
164: invokestatic  #10
167: aload         10
169: invokestatic  #10
172: aload         11
174: invokestatic  #10
177: aload         12
179: invokestatic  #10
182: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test271
Start line: 10696
End line: 10714
Method source code: 
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("dayOfMonth", "-101");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #836
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         6
66: ldc_w         #403
69: ldc           #40
71: invokevirtual #20
74: astore        7
76: aload         6
78: invokevirtual #149
81: astore        8
83: aload_2
84: invokestatic  #10
87: aload_3
88: invokestatic  #10
91: aload         4
93: invokestatic  #10
96: aload         5
98: invokestatic  #10
101: aload         6
103: invokestatic  #10
106: aload         7
108: invokestatic  #10
111: aload         8
113: invokestatic  #10
116: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test272
Start line: 10717
End line: 10729
Method source code: 
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.maximumParsedDigits(99);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMinutes();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #837
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: ldc           #42
41: invokevirtual #67
44: astore_3
45: aload_2
46: bipush        99
48: invokevirtual #213
51: astore        4
53: aload         4
55: invokevirtual #134
58: astore        5
60: aload_2
61: invokestatic  #10
64: aload_3
65: invokestatic  #10
68: aload         4
70: invokestatic  #10
73: aload         5
75: invokestatic  #10
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test273
Start line: 10732
End line: 10756
Method source code: 
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendSecondsWithMillis();
        org.joda.time.format.PeriodParser periodParser11 = periodFormatterBuilder10.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder10.appendSuffix("Invalid format: \"P-90M\" is too short", "DurationField[months]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder14.appendSeconds();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodParser11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #838
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         4
71: invokevirtual #488
74: astore        7
76: aload         7
78: invokevirtual #185
81: astore        8
83: aload         8
85: invokevirtual #142
88: astore        9
90: aload         8
92: ldc_w         #839
95: ldc_w         #840
98: invokevirtual #30
101: astore        10
103: aload         10
105: invokevirtual #320
108: astore        11
110: aload_2
111: invokestatic  #10
114: aload_3
115: invokestatic  #10
118: aload         4
120: invokestatic  #10
123: aload         5
125: invokestatic  #10
128: aload         6
130: invokestatic  #10
133: aload         7
135: invokestatic  #10
138: aload         8
140: invokestatic  #10
143: aload         9
145: invokestatic  #10
148: aload         10
150: invokestatic  #10
153: aload         11
155: invokestatic  #10
158: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test274
Start line: 10759
End line: 10783
Method source code: 
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.maximumParsedDigits((-24));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder7.appendPrefix("350");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder7.printZeroRarelyFirst();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder7.appendMinutes();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #841
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: ldc           #184
61: invokevirtual #28
64: astore        6
66: aload         6
68: invokevirtual #185
71: astore        7
73: aload         6
75: bipush        -24
77: invokevirtual #213
80: astore        8
82: aload         6
84: ldc_w         #652
87: invokevirtual #196
90: astore        9
92: aload         6
94: invokevirtual #248
97: astore        10
99: aload         6
101: invokevirtual #134
104: astore        11
106: aload_2
107: invokestatic  #10
110: aload_3
111: invokestatic  #10
114: aload         4
116: invokestatic  #10
119: aload         5
121: invokestatic  #10
124: aload         6
126: invokestatic  #10
129: aload         7
131: invokestatic  #10
134: aload         8
136: invokestatic  #10
139: aload         9
141: invokestatic  #10
144: aload         10
146: invokestatic  #10
149: aload         11
151: invokestatic  #10
154: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test275
Start line: 10786
End line: 10804
Method source code: 
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeconds();
        jodaTimePermission1.checkGuard((java.lang.Object) periodFormatterBuilder6);
        java.lang.String str11 = jodaTimePermission1.toString();
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(\"org.joda.time.JodaTimePermission\" \"Invalid format: \"PeriodType[YearDay]\"\")" + "'", str11, "(\"org.joda.time.JodaTimePermission\" \"Invalid format: \"PeriodType[YearDay]\"\")");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #842
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #317
32: invokespecial #318
35: astore_1
36: new           #14
39: dup
40: invokespecial #15
43: astore_2
44: aload_2
45: ldc           #16
47: invokevirtual #17
50: astore_3
51: aload_2
52: invokevirtual #25
55: astore        4
57: aload_2
58: invokevirtual #39
61: astore        5
63: aload         5
65: ldc_w         #319
68: invokevirtual #196
71: astore        6
73: aload         5
75: invokevirtual #320
78: astore        7
80: aload_1
81: aload         5
83: invokevirtual #321
86: aload_1
87: invokevirtual #843
90: astore        8
92: aload_3
93: invokestatic  #10
96: aload         4
98: invokestatic  #10
101: aload         5
103: invokestatic  #10
106: aload         6
108: invokestatic  #10
111: aload         7
113: invokestatic  #10
116: new           #55
119: dup
120: invokespecial #56
123: ldc           #57
125: invokevirtual #58
128: aload         8
130: invokevirtual #58
133: ldc_w         #844
136: invokevirtual #58
139: invokevirtual #61
142: aload         8
144: ldc_w         #845
147: invokestatic  #96
150: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test276
Start line: 10807
End line: 10821
Method source code: 
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("PT-8H-0.100S");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder1.maximumParsedDigits(99);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.maximumParsedDigits(5);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.printZeroAlways();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #846
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: ldc           #42
41: invokevirtual #67
44: astore_3
45: aload_2
46: bipush        99
48: invokevirtual #213
51: astore        4
53: aload         4
55: iconst_5
56: invokevirtual #213
59: astore        5
61: aload         4
63: invokevirtual #139
66: astore        6
68: aload_2
69: invokestatic  #10
72: aload_3
73: invokestatic  #10
76: aload         4
78: invokestatic  #10
81: aload         5
83: invokestatic  #10
86: aload         6
88: invokestatic  #10
91: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test277
Start line: 10824
End line: 10846
Method source code: 
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder12.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #847
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #139
83: astore        8
85: aload         7
87: invokevirtual #139
90: astore        9
92: aload         9
94: invokevirtual #77
97: astore        10
99: aload_2
100: invokestatic  #10
103: aload_3
104: invokestatic  #10
107: aload         4
109: invokestatic  #10
112: aload         5
114: invokestatic  #10
117: aload         6
119: invokestatic  #10
122: aload         7
124: invokestatic  #10
127: aload         8
129: invokestatic  #10
132: aload         9
134: invokestatic  #10
137: aload         10
139: invokestatic  #10
142: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test278
Start line: 10849
End line: 10953
Method source code: 
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        java.lang.String[] strArray36 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter37 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale38 = null;
        org.joda.time.format.PeriodFormatter periodFormatter39 = periodFormatter37.withLocale(locale38);
        boolean boolean40 = periodFormatter37.isParser();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter37.withLocale(locale41);
        org.joda.time.format.PeriodPrinter periodPrinter43 = periodFormatter42.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal44 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology47);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period51 = period48.minusDays((int) (byte) 100);
        java.util.Locale locale53 = null;
        int int54 = literal44.countFieldsToPrint((org.joda.time.ReadablePeriod) period51, 999, locale53);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator57 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray36, periodPrinter43, (org.joda.time.format.PeriodParser) literal44, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder58 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder60 = periodFormatterBuilder58.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter61 = periodFormatterBuilder60.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = periodFormatterBuilder60.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter64 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = periodFormatter64.withLocale(locale65);
        boolean boolean67 = periodFormatter66.isParser();
        java.util.Locale locale68 = null;
        org.joda.time.format.PeriodFormatter periodFormatter69 = periodFormatter66.withLocale(locale68);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology73 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField74 = gregorianChronology73.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone75 = gregorianChronology73.getZone();
        org.joda.time.DateTimeField dateTimeField76 = gregorianChronology73.yearOfCentury();
        org.joda.time.Period period77 = new org.joda.time.Period((long) '4', 100L, periodType72, (org.joda.time.Chronology) gregorianChronology73);
        org.joda.time.format.PeriodFormatter periodFormatter78 = periodFormatter66.withParseType(periodType72);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder60.append(periodFormatter78);
        org.joda.time.format.PeriodParser periodParser80 = periodFormatter78.getParser();
        org.joda.time.format.PeriodFormatterBuilder.Separator separator81 = separator28.finish((org.joda.time.format.PeriodPrinter) literal44, periodParser80);
        org.joda.time.ReadWritablePeriod readWritablePeriod82 = null;
        java.util.Locale locale85 = null;
        int int86 = separator28.parseInto(readWritablePeriod82, "", (-53), locale85);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        java.util.Locale locale88 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int89 = separator28.calculatePrintedLength(readablePeriod87, locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodPrinter43);
        org.junit.Assert.assertNotNull(literal44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT-0.090S" + "'", str49, "PT-0.090S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder60);
        org.junit.Assert.assertNotNull(periodPrinter61);
        org.junit.Assert.assertNotNull(periodFormatterBuilder63);
        org.junit.Assert.assertNotNull(periodFormatter64);
        org.junit.Assert.assertNotNull(periodFormatter66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(gregorianChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(periodFormatter78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodParser80);
        org.junit.Assert.assertNotNull(separator81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-53) + "'", int86 == (-53));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #848
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: iconst_5
171: anewarray     #99
174: dup
175: iconst_0
176: ldc           #100
178: aastore
179: dup
180: iconst_1
181: ldc           #101
183: aastore
184: dup
185: iconst_2
186: ldc           #102
188: aastore
189: dup
190: iconst_3
191: ldc           #103
193: aastore
194: dup
195: iconst_4
196: ldc           #104
198: aastore
199: astore        17
201: invokestatic  #12
204: astore        18
206: aconst_null
207: astore        19
209: aload         18
211: aload         19
213: invokevirtual #88
216: astore        20
218: aload         18
220: invokevirtual #89
223: istore        21
225: aconst_null
226: astore        22
228: aload         18
230: aload         22
232: invokevirtual #88
235: astore        23
237: aload         23
239: invokevirtual #90
242: astore        24
244: getstatic     #78
247: astore        25
249: aconst_null
250: astore        26
252: new           #46
255: dup
256: ldc2_w        #79
259: ldc2_w        #81
262: aload         26
264: invokespecial #83
267: astore        27
269: aload         27
271: invokevirtual #84
274: astore        28
276: aload         27
278: bipush        100
280: invokevirtual #85
283: astore        29
285: aconst_null
286: astore        30
288: aload         25
290: aload         29
292: sipush        999
295: aload         30
297: invokevirtual #86
300: istore        31
302: new           #105
305: dup
306: ldc           #106
308: ldc           #104
310: aload         17
312: aload         24
314: aload         25
316: iconst_0
317: iconst_0
318: invokespecial #107
321: astore        32
323: new           #14
326: dup
327: invokespecial #15
330: astore        33
332: aload         33
334: ldc           #16
336: invokevirtual #17
339: astore        34
341: aload         34
343: invokevirtual #45
346: astore        35
348: aload         34
350: iconst_0
351: invokevirtual #108
354: astore        36
356: invokestatic  #12
359: astore        37
361: aconst_null
362: astore        38
364: aload         37
366: aload         38
368: invokevirtual #88
371: astore        39
373: aload         39
375: invokevirtual #89
378: istore        40
380: aconst_null
381: astore        41
383: aload         39
385: aload         41
387: invokevirtual #88
390: astore        42
392: invokestatic  #109
395: astore        43
397: invokestatic  #110
400: astore        44
402: aload         44
404: invokevirtual #111
407: astore        45
409: aload         44
411: invokevirtual #112
414: astore        46
416: aload         44
418: invokevirtual #113
421: astore        47
423: new           #46
426: dup
427: ldc2_w        #114
430: ldc2_w        #79
433: aload         43
435: aload         44
437: invokespecial #116
440: astore        48
442: aload         39
444: aload         43
446: invokevirtual #117
449: astore        49
451: aload         34
453: aload         49
455: invokevirtual #118
458: astore        50
460: aload         49
462: invokevirtual #119
465: astore        51
467: aload         16
469: aload         25
471: aload         51
473: invokevirtual #120
476: astore        52
478: aconst_null
479: astore        53
481: aconst_null
482: astore        54
484: aload         16
486: aload         53
488: ldc           #74
490: bipush        -53
492: aload         54
494: invokevirtual #208
497: istore        55
499: aconst_null
500: astore        56
502: aconst_null
503: astore        57
505: aload         16
507: aload         56
509: aload         57
511: invokevirtual #179
514: istore        58
516: ldc           #53
518: invokestatic  #22
521: goto          526
524: astore        58
526: aload_1
527: invokestatic  #10
530: aload_2
531: invokestatic  #10
534: aload         4
536: invokestatic  #10
539: new           #55
542: dup
543: invokespecial #56
546: ldc           #57
548: invokevirtual #58
551: iload         5
553: invokevirtual #97
556: ldc           #60
558: invokevirtual #58
561: iconst_1
562: invokevirtual #97
565: ldc           #57
567: invokevirtual #58
570: invokevirtual #61
573: iload         5
575: iconst_1
576: if_icmpne     583
579: iconst_1
580: goto          584
583: iconst_0
584: invokestatic  #62
587: aload         7
589: invokestatic  #10
592: aload         8
594: invokestatic  #10
597: aload         9
599: invokestatic  #10
602: new           #55
605: dup
606: invokespecial #56
609: ldc           #57
611: invokevirtual #58
614: aload         12
616: invokevirtual #58
619: ldc           #94
621: invokevirtual #58
624: invokevirtual #61
627: aload         12
629: ldc           #95
631: invokestatic  #96
634: aload         13
636: invokestatic  #10
639: new           #55
642: dup
643: invokespecial #56
646: ldc           #57
648: invokevirtual #58
651: iload         15
653: invokevirtual #59
656: ldc           #60
658: invokevirtual #58
661: iconst_0
662: invokevirtual #59
665: ldc           #57
667: invokevirtual #58
670: invokevirtual #61
673: iload         15
675: ifne          682
678: iconst_1
679: goto          683
682: iconst_0
683: invokestatic  #62
686: aload         17
688: invokestatic  #10
691: aload         18
693: invokestatic  #10
696: aload         20
698: invokestatic  #10
701: new           #55
704: dup
705: invokespecial #56
708: ldc           #57
710: invokevirtual #58
713: iload         21
715: invokevirtual #97
718: ldc           #60
720: invokevirtual #58
723: iconst_1
724: invokevirtual #97
727: ldc           #57
729: invokevirtual #58
732: invokevirtual #61
735: iload         21
737: iconst_1
738: if_icmpne     745
741: iconst_1
742: goto          746
745: iconst_0
746: invokestatic  #62
749: aload         23
751: invokestatic  #10
754: aload         24
756: invokestatic  #10
759: aload         25
761: invokestatic  #10
764: new           #55
767: dup
768: invokespecial #56
771: ldc           #57
773: invokevirtual #58
776: aload         28
778: invokevirtual #58
781: ldc           #94
783: invokevirtual #58
786: invokevirtual #61
789: aload         28
791: ldc           #95
793: invokestatic  #96
796: aload         29
798: invokestatic  #10
801: new           #55
804: dup
805: invokespecial #56
808: ldc           #57
810: invokevirtual #58
813: iload         31
815: invokevirtual #59
818: ldc           #60
820: invokevirtual #58
823: iconst_0
824: invokevirtual #59
827: ldc           #57
829: invokevirtual #58
832: invokevirtual #61
835: iload         31
837: ifne          844
840: iconst_1
841: goto          845
844: iconst_0
845: invokestatic  #62
848: aload         34
850: invokestatic  #10
853: aload         35
855: invokestatic  #10
858: aload         36
860: invokestatic  #10
863: aload         37
865: invokestatic  #10
868: aload         39
870: invokestatic  #10
873: new           #55
876: dup
877: invokespecial #56
880: ldc           #57
882: invokevirtual #58
885: iload         40
887: invokevirtual #97
890: ldc           #60
892: invokevirtual #58
895: iconst_1
896: invokevirtual #97
899: ldc           #57
901: invokevirtual #58
904: invokevirtual #61
907: iload         40
909: iconst_1
910: if_icmpne     917
913: iconst_1
914: goto          918
917: iconst_0
918: invokestatic  #62
921: aload         42
923: invokestatic  #10
926: aload         43
928: invokestatic  #10
931: aload         44
933: invokestatic  #10
936: aload         45
938: invokestatic  #10
941: aload         46
943: invokestatic  #10
946: aload         47
948: invokestatic  #10
951: aload         49
953: invokestatic  #10
956: aload         50
958: invokestatic  #10
961: aload         51
963: invokestatic  #10
966: aload         52
968: invokestatic  #10
971: new           #55
974: dup
975: invokespecial #56
978: ldc           #57
980: invokevirtual #58
983: iload         55
985: invokevirtual #59
988: ldc           #60
990: invokevirtual #58
993: bipush        -53
995: invokevirtual #59
998: ldc           #57
1000: invokevirtual #58
1003: invokevirtual #61
1006: iload         55
1008: bipush        -53
1010: if_icmpne     1017
1013: iconst_1
1014: goto          1018
1017: iconst_0
1018: invokestatic  #62
1021: return
Exception table:
from    to  target type
505   521   524   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test279
Start line: 10956
End line: 10972
Method source code: 
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #849
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: invokevirtual #149
67: astore        7
69: aload_2
70: invokestatic  #10
73: aload_3
74: invokestatic  #10
77: aload         4
79: invokestatic  #10
82: aload         5
84: invokestatic  #10
87: aload         6
89: invokestatic  #10
92: aload         7
94: invokestatic  #10
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test280
Start line: 10975
End line: 11082
Method source code: 
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("months");
        java.lang.String[] strArray11 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal12 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology15);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period19 = period16.minusDays((int) (byte) 100);
        java.util.Locale locale21 = null;
        int int22 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period19, 999, locale21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period23.get(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period30 = period23.withField(durationFieldType28, 8);
        org.joda.time.Period period32 = period30.plusMonths((int) (short) 1);
        java.util.Locale locale34 = null;
        int int35 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period30, (-292275054), locale34);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal36 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology39);
        java.lang.String str41 = period40.toString();
        org.joda.time.Period period43 = period40.minusDays((int) (byte) 100);
        java.util.Locale locale45 = null;
        int int46 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period43, 999, locale45);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType50 = null;
        int int51 = period47.get(durationFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period54 = period47.withField(durationFieldType52, 8);
        org.joda.time.Period period56 = period54.plusMonths((int) (short) 1);
        java.util.Locale locale58 = null;
        int int59 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period54, (-292275054), locale58);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator62 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray11, (org.joda.time.format.PeriodPrinter) literal12, (org.joda.time.format.PeriodParser) literal36, true, true);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder65 = periodFormatterBuilder63.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter66 = periodFormatterBuilder65.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder68 = periodFormatterBuilder65.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter69 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter69.withLocale(locale70);
        boolean boolean72 = periodFormatter71.isParser();
        java.util.Locale locale73 = null;
        org.joda.time.format.PeriodFormatter periodFormatter74 = periodFormatter71.withLocale(locale73);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology78 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = gregorianChronology78.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone80 = gregorianChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gregorianChronology78.yearOfCentury();
        org.joda.time.Period period82 = new org.joda.time.Period((long) '4', 100L, periodType77, (org.joda.time.Chronology) gregorianChronology78);
        org.joda.time.format.PeriodFormatter periodFormatter83 = periodFormatter71.withParseType(periodType77);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder84 = periodFormatterBuilder65.append(periodFormatter83);
        org.joda.time.format.PeriodParser periodParser85 = periodFormatter83.getParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder86 = periodFormatterBuilder6.append((org.joda.time.format.PeriodPrinter) separator62, periodParser85);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder87 = periodFormatterBuilder6.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(literal12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-0.090S" + "'", str17, "PT-0.090S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(literal36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT-0.090S" + "'", str41, "PT-0.090S");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder65);
        org.junit.Assert.assertNotNull(periodPrinter66);
        org.junit.Assert.assertNotNull(periodFormatterBuilder68);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(periodFormatter74);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(gregorianChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(periodFormatter83);
        org.junit.Assert.assertNotNull(periodFormatterBuilder84);
        org.junit.Assert.assertNotNull(periodParser85);
        org.junit.Assert.assertNotNull(periodFormatterBuilder86);
        org.junit.Assert.assertNotNull(periodFormatterBuilder87);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #850
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: ldc           #27
55: invokevirtual #28
58: astore        5
60: iconst_2
61: anewarray     #99
64: dup
65: iconst_0
66: ldc           #141
68: aastore
69: dup
70: iconst_1
71: ldc           #250
73: aastore
74: astore        6
76: getstatic     #78
79: astore        7
81: aconst_null
82: astore        8
84: new           #46
87: dup
88: ldc2_w        #79
91: ldc2_w        #81
94: aload         8
96: invokespecial #83
99: astore        9
101: aload         9
103: invokevirtual #84
106: astore        10
108: aload         9
110: bipush        100
112: invokevirtual #85
115: astore        11
117: aconst_null
118: astore        12
120: aload         7
122: aload         11
124: sipush        999
127: aload         12
129: invokevirtual #86
132: istore        13
134: getstatic     #8
137: astore        14
139: aload         14
141: iconst_m1
142: invokevirtual #9
145: astore        15
147: aconst_null
148: astore        16
150: aload         14
152: aload         16
154: invokevirtual #201
157: istore        17
159: invokestatic  #202
162: astore        18
164: aload         14
166: aload         18
168: bipush        8
170: invokevirtual #203
173: astore        19
175: aload         19
177: iconst_1
178: invokevirtual #251
181: astore        20
183: aconst_null
184: astore        21
186: aload         7
188: aload         19
190: ldc           #252
192: aload         21
194: invokevirtual #86
197: istore        22
199: getstatic     #78
202: astore        23
204: aconst_null
205: astore        24
207: new           #46
210: dup
211: ldc2_w        #79
214: ldc2_w        #81
217: aload         24
219: invokespecial #83
222: astore        25
224: aload         25
226: invokevirtual #84
229: astore        26
231: aload         25
233: bipush        100
235: invokevirtual #85
238: astore        27
240: aconst_null
241: astore        28
243: aload         23
245: aload         27
247: sipush        999
250: aload         28
252: invokevirtual #86
255: istore        29
257: getstatic     #8
260: astore        30
262: aload         30
264: iconst_m1
265: invokevirtual #9
268: astore        31
270: aconst_null
271: astore        32
273: aload         30
275: aload         32
277: invokevirtual #201
280: istore        33
282: invokestatic  #202
285: astore        34
287: aload         30
289: aload         34
291: bipush        8
293: invokevirtual #203
296: astore        35
298: aload         35
300: iconst_1
301: invokevirtual #251
304: astore        36
306: aconst_null
307: astore        37
309: aload         23
311: aload         35
313: ldc           #252
315: aload         37
317: invokevirtual #86
320: istore        38
322: new           #105
325: dup
326: ldc           #131
328: ldc           #253
330: aload         6
332: aload         7
334: aload         23
336: iconst_1
337: iconst_1
338: invokespecial #107
341: astore        39
343: new           #14
346: dup
347: invokespecial #15
350: astore        40
352: aload         40
354: ldc           #16
356: invokevirtual #17
359: astore        41
361: aload         41
363: invokevirtual #45
366: astore        42
368: aload         41
370: iconst_0
371: invokevirtual #108
374: astore        43
376: invokestatic  #12
379: astore        44
381: aconst_null
382: astore        45
384: aload         44
386: aload         45
388: invokevirtual #88
391: astore        46
393: aload         46
395: invokevirtual #89
398: istore        47
400: aconst_null
401: astore        48
403: aload         46
405: aload         48
407: invokevirtual #88
410: astore        49
412: invokestatic  #109
415: astore        50
417: invokestatic  #110
420: astore        51
422: aload         51
424: invokevirtual #111
427: astore        52
429: aload         51
431: invokevirtual #112
434: astore        53
436: aload         51
438: invokevirtual #113
441: astore        54
443: new           #46
446: dup
447: ldc2_w        #114
450: ldc2_w        #79
453: aload         50
455: aload         51
457: invokespecial #116
460: astore        55
462: aload         46
464: aload         50
466: invokevirtual #117
469: astore        56
471: aload         41
473: aload         56
475: invokevirtual #118
478: astore        57
480: aload         56
482: invokevirtual #119
485: astore        58
487: aload         5
489: aload         39
491: aload         58
493: invokevirtual #87
496: astore        59
498: aload         5
500: invokevirtual #26
503: astore        60
505: aload_2
506: invokestatic  #10
509: aload_3
510: invokestatic  #10
513: aload         4
515: invokestatic  #10
518: aload         5
520: invokestatic  #10
523: aload         6
525: invokestatic  #10
528: aload         7
530: invokestatic  #10
533: new           #55
536: dup
537: invokespecial #56
540: ldc           #57
542: invokevirtual #58
545: aload         10
547: invokevirtual #58
550: ldc           #94
552: invokevirtual #58
555: invokevirtual #61
558: aload         10
560: ldc           #95
562: invokestatic  #96
565: aload         11
567: invokestatic  #10
570: new           #55
573: dup
574: invokespecial #56
577: ldc           #57
579: invokevirtual #58
582: iload         13
584: invokevirtual #59
587: ldc           #60
589: invokevirtual #58
592: iconst_0
593: invokevirtual #59
596: ldc           #57
598: invokevirtual #58
601: invokevirtual #61
604: iload         13
606: ifne          613
609: iconst_1
610: goto          614
613: iconst_0
614: invokestatic  #62
617: aload         14
619: invokestatic  #10
622: aload         15
624: invokestatic  #10
627: new           #55
630: dup
631: invokespecial #56
634: ldc           #57
636: invokevirtual #58
639: iload         17
641: invokevirtual #59
644: ldc           #60
646: invokevirtual #58
649: iconst_0
650: invokevirtual #59
653: ldc           #57
655: invokevirtual #58
658: invokevirtual #61
661: iload         17
663: ifne          670
666: iconst_1
667: goto          671
670: iconst_0
671: invokestatic  #62
674: aload         18
676: invokestatic  #10
679: aload         19
681: invokestatic  #10
684: aload         20
686: invokestatic  #10
689: new           #55
692: dup
693: invokespecial #56
696: ldc           #57
698: invokevirtual #58
701: iload         22
703: invokevirtual #59
706: ldc           #60
708: invokevirtual #58
711: iconst_0
712: invokevirtual #59
715: ldc           #57
717: invokevirtual #58
720: invokevirtual #61
723: iload         22
725: ifne          732
728: iconst_1
729: goto          733
732: iconst_0
733: invokestatic  #62
736: aload         23
738: invokestatic  #10
741: new           #55
744: dup
745: invokespecial #56
748: ldc           #57
750: invokevirtual #58
753: aload         26
755: invokevirtual #58
758: ldc           #94
760: invokevirtual #58
763: invokevirtual #61
766: aload         26
768: ldc           #95
770: invokestatic  #96
773: aload         27
775: invokestatic  #10
778: new           #55
781: dup
782: invokespecial #56
785: ldc           #57
787: invokevirtual #58
790: iload         29
792: invokevirtual #59
795: ldc           #60
797: invokevirtual #58
800: iconst_0
801: invokevirtual #59
804: ldc           #57
806: invokevirtual #58
809: invokevirtual #61
812: iload         29
814: ifne          821
817: iconst_1
818: goto          822
821: iconst_0
822: invokestatic  #62
825: aload         30
827: invokestatic  #10
830: aload         31
832: invokestatic  #10
835: new           #55
838: dup
839: invokespecial #56
842: ldc           #57
844: invokevirtual #58
847: iload         33
849: invokevirtual #59
852: ldc           #60
854: invokevirtual #58
857: iconst_0
858: invokevirtual #59
861: ldc           #57
863: invokevirtual #58
866: invokevirtual #61
869: iload         33
871: ifne          878
874: iconst_1
875: goto          879
878: iconst_0
879: invokestatic  #62
882: aload         34
884: invokestatic  #10
887: aload         35
889: invokestatic  #10
892: aload         36
894: invokestatic  #10
897: new           #55
900: dup
901: invokespecial #56
904: ldc           #57
906: invokevirtual #58
909: iload         38
911: invokevirtual #59
914: ldc           #60
916: invokevirtual #58
919: iconst_0
920: invokevirtual #59
923: ldc           #57
925: invokevirtual #58
928: invokevirtual #61
931: iload         38
933: ifne          940
936: iconst_1
937: goto          941
940: iconst_0
941: invokestatic  #62
944: aload         41
946: invokestatic  #10
949: aload         42
951: invokestatic  #10
954: aload         43
956: invokestatic  #10
959: aload         44
961: invokestatic  #10
964: aload         46
966: invokestatic  #10
969: new           #55
972: dup
973: invokespecial #56
976: ldc           #57
978: invokevirtual #58
981: iload         47
983: invokevirtual #97
986: ldc           #60
988: invokevirtual #58
991: iconst_1
992: invokevirtual #97
995: ldc           #57
997: invokevirtual #58
1000: invokevirtual #61
1003: iload         47
1005: iconst_1
1006: if_icmpne     1013
1009: iconst_1
1010: goto          1014
1013: iconst_0
1014: invokestatic  #62
1017: aload         49
1019: invokestatic  #10
1022: aload         50
1024: invokestatic  #10
1027: aload         51
1029: invokestatic  #10
1032: aload         52
1034: invokestatic  #10
1037: aload         53
1039: invokestatic  #10
1042: aload         54
1044: invokestatic  #10
1047: aload         56
1049: invokestatic  #10
1052: aload         57
1054: invokestatic  #10
1057: aload         58
1059: invokestatic  #10
1062: aload         59
1064: invokestatic  #10
1067: aload         60
1069: invokestatic  #10
1072: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test281
Start line: 11085
End line: 11115
Method source code: 
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter10.withLocale(locale12);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder7.append(periodFormatter10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder14.appendPrefix("-00:00:00.024", "-7");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #851
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #77
67: astore        7
69: invokestatic  #12
72: astore        8
74: aconst_null
75: astore        9
77: aload         8
79: aload         9
81: invokevirtual #88
84: astore        10
86: aload         10
88: invokevirtual #89
91: istore        11
93: aconst_null
94: astore        12
96: aload         10
98: aload         12
100: invokevirtual #88
103: astore        13
105: aload         7
107: aload         10
109: invokevirtual #118
112: astore        14
114: aload         14
116: ldc_w         #697
119: ldc_w         #852
122: invokevirtual #41
125: astore        15
127: aload_2
128: invokestatic  #10
131: aload_3
132: invokestatic  #10
135: aload         4
137: invokestatic  #10
140: aload         5
142: invokestatic  #10
145: aload         6
147: invokestatic  #10
150: aload         7
152: invokestatic  #10
155: aload         8
157: invokestatic  #10
160: aload         10
162: invokestatic  #10
165: new           #55
168: dup
169: invokespecial #56
172: ldc           #57
174: invokevirtual #58
177: iload         11
179: invokevirtual #97
182: ldc           #60
184: invokevirtual #58
187: iconst_1
188: invokevirtual #97
191: ldc           #57
193: invokevirtual #58
196: invokevirtual #61
199: iload         11
201: iconst_1
202: if_icmpne     209
205: iconst_1
206: goto          210
209: iconst_0
210: invokestatic  #62
213: aload         13
215: invokestatic  #10
218: aload         14
220: invokestatic  #10
223: aload         15
225: invokestatic  #10
228: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test282
Start line: 11118
End line: 11159
Method source code: 
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(100L, (long) (short) -1, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter6.withParseType(periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNotNull(periodType24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #853
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: invokestatic  #171
129: astore        16
131: aload         16
133: invokestatic  #172
136: astore        17
138: new           #46
141: dup
142: ldc2_w        #79
145: ldc2_w        #173
148: aload         16
150: invokespecial #175
153: astore        18
155: aload         16
157: invokevirtual #352
160: astore        19
162: aload         16
164: invokevirtual #353
167: astore        20
169: aload         6
171: aload         20
173: invokevirtual #117
176: astore        21
178: aload         20
180: invokevirtual #352
183: astore        22
185: aload_2
186: invokestatic  #10
189: aload_3
190: invokestatic  #10
193: aload         4
195: invokestatic  #10
198: aload         5
200: invokestatic  #10
203: aload         6
205: invokestatic  #10
208: aload         7
210: invokestatic  #354
213: aload         10
215: invokestatic  #10
218: new           #55
221: dup
222: invokespecial #56
225: ldc           #57
227: invokevirtual #58
230: iload         12
232: invokevirtual #97
235: ldc           #60
237: invokevirtual #58
240: iconst_0
241: invokevirtual #97
244: ldc           #57
246: invokevirtual #58
249: invokevirtual #61
252: iload         12
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #62
265: aload         14
267: invokestatic  #10
270: aload         15
272: invokestatic  #10
275: aload         16
277: invokestatic  #10
280: aload         17
282: invokestatic  #10
285: aload         19
287: invokestatic  #10
290: aload         20
292: invokestatic  #10
295: aload         21
297: invokestatic  #10
300: aload         22
302: invokestatic  #10
305: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test283
Start line: 11162
End line: 11180
Method source code: 
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendLiteral("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #854
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: ldc           #74
66: invokevirtual #28
69: astore        7
71: aload_1
72: invokevirtual #25
75: astore        8
77: aload_2
78: invokestatic  #10
81: aload_3
82: invokestatic  #10
85: aload         4
87: invokestatic  #10
90: aload         5
92: invokestatic  #10
95: aload         6
97: invokestatic  #10
100: aload         7
102: invokestatic  #10
105: aload         8
107: invokestatic  #10
110: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test284
Start line: 11183
End line: 11210
Method source code: 
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.printZeroAlways();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder12.appendSeparatorIfFieldsAfter("76");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #855
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #139
83: astore        8
85: aload         7
87: invokevirtual #139
90: astore        9
92: aload         9
94: ldc_w         #500
97: invokevirtual #17
100: astore        10
102: ldc           #43
104: invokestatic  #22
107: goto          112
110: astore        10
112: aload_2
113: invokestatic  #10
116: aload_3
117: invokestatic  #10
120: aload         4
122: invokestatic  #10
125: aload         5
127: invokestatic  #10
130: aload         6
132: invokestatic  #10
135: aload         7
137: invokestatic  #10
140: aload         8
142: invokestatic  #10
145: aload         9
147: invokestatic  #10
150: return
Exception table:
from    to  target type
92   107   110   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test285
Start line: 11213
End line: 11229
Method source code: 
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSeparator("-81");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.rejectSignedValues(false);
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #856
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: invokevirtual #77
42: astore_3
43: aload_2
44: ldc_w         #612
47: invokevirtual #37
50: astore        4
52: aload         4
54: invokevirtual #149
57: astore        5
59: aload         4
61: invokevirtual #33
64: astore        6
66: aload         6
68: iconst_0
69: invokevirtual #108
72: astore        7
74: aload_2
75: invokestatic  #10
78: aload_3
79: invokestatic  #10
82: aload         4
84: invokestatic  #10
87: aload         5
89: invokestatic  #10
92: aload         6
94: invokestatic  #10
97: aload         7
99: invokestatic  #10
102: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test286
Start line: 11232
End line: 11296
Method source code: 
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeconds();
        jodaTimePermission1.checkGuard((java.lang.Object) periodFormatterBuilder6);
        org.joda.time.JodaTimePermission jodaTimePermission12 = new org.joda.time.JodaTimePermission("P100W");
        java.lang.String str13 = jodaTimePermission12.getActions();
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField15 = gregorianChronology14.minuteOfHour();
        org.joda.time.Period period17 = org.joda.time.Period.millis(1);
        int int18 = period17.getMonths();
        int int19 = period17.size();
        org.joda.time.Period period21 = period17.withDays((int) (byte) 100);
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType25 = null;
        int int26 = period22.get(durationFieldType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period29 = period22.withField(durationFieldType27, 8);
        java.lang.String str30 = durationFieldType27.getName();
        org.joda.time.Period period32 = period17.withField(durationFieldType27, 1);
        org.joda.time.Period period34 = period17.minusDays(10);
        long long37 = gregorianChronology14.add((org.joda.time.ReadablePeriod) period17, (long) (short) 100, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = gregorianChronology14.dayOfYear();
        boolean boolean40 = jodaTimePermission12.equals((java.lang.Object) gregorianChronology14);
        java.lang.String str41 = jodaTimePermission12.getName();
        java.security.PermissionCollection permissionCollection42 = jodaTimePermission12.newPermissionCollection();
        java.lang.String str43 = jodaTimePermission12.toString();
        boolean boolean44 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "seconds" + "'", str30, "seconds");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 200L + "'", long37 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "P100W" + "'", str41, "P100W");
        org.junit.Assert.assertNotNull(permissionCollection42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(\"org.joda.time.JodaTimePermission\" \"P100W\")" + "'", str43, "(\"org.joda.time.JodaTimePermission\" \"P100W\")");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #857
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #317
32: invokespecial #318
35: astore_1
36: new           #14
39: dup
40: invokespecial #15
43: astore_2
44: aload_2
45: ldc           #16
47: invokevirtual #17
50: astore_3
51: aload_2
52: invokevirtual #25
55: astore        4
57: aload_2
58: invokevirtual #39
61: astore        5
63: aload         5
65: ldc_w         #319
68: invokevirtual #196
71: astore        6
73: aload         5
75: invokevirtual #320
78: astore        7
80: aload_1
81: aload         5
83: invokevirtual #321
86: new           #316
89: dup
90: ldc           #239
92: invokespecial #318
95: astore        8
97: aload         8
99: invokevirtual #381
102: astore        9
104: invokestatic  #110
107: astore        10
109: aload         10
111: invokevirtual #111
114: astore        11
116: iconst_1
117: invokestatic  #168
120: astore        12
122: aload         12
124: invokevirtual #169
127: istore        13
129: aload         12
131: invokevirtual #170
134: istore        14
136: aload         12
138: bipush        100
140: invokevirtual #200
143: astore        15
145: getstatic     #8
148: astore        16
150: aload         16
152: iconst_m1
153: invokevirtual #9
156: astore        17
158: aconst_null
159: astore        18
161: aload         16
163: aload         18
165: invokevirtual #201
168: istore        19
170: invokestatic  #202
173: astore        20
175: aload         16
177: aload         20
179: bipush        8
181: invokevirtual #203
184: astore        21
186: aload         20
188: invokevirtual #204
191: astore        22
193: aload         12
195: aload         20
197: iconst_1
198: invokevirtual #203
201: astore        23
203: aload         12
205: bipush        10
207: invokevirtual #85
210: astore        24
212: aload         10
214: aload         12
216: ldc2_w        #79
219: bipush        100
221: invokevirtual #227
224: lstore        25
226: aload         10
228: invokevirtual #382
231: astore        27
233: aload         10
235: invokevirtual #383
238: astore        28
240: aload         8
242: aload         10
244: invokevirtual #384
247: istore        29
249: aload         8
251: invokevirtual #322
254: astore        30
256: aload         8
258: invokevirtual #718
261: astore        31
263: aload         8
265: invokevirtual #843
268: astore        32
270: aload_1
271: aload         8
273: invokevirtual #380
276: istore        33
278: aload_3
279: invokestatic  #10
282: aload         4
284: invokestatic  #10
287: aload         5
289: invokestatic  #10
292: aload         6
294: invokestatic  #10
297: aload         7
299: invokestatic  #10
302: new           #55
305: dup
306: invokespecial #56
309: ldc           #57
311: invokevirtual #58
314: aload         9
316: invokevirtual #58
319: ldc_w         #385
322: invokevirtual #58
325: invokevirtual #61
328: aload         9
330: ldc           #74
332: invokestatic  #96
335: aload         10
337: invokestatic  #10
340: aload         11
342: invokestatic  #10
345: aload         12
347: invokestatic  #10
350: new           #55
353: dup
354: invokespecial #56
357: ldc           #57
359: invokevirtual #58
362: iload         13
364: invokevirtual #59
367: ldc           #60
369: invokevirtual #58
372: iconst_0
373: invokevirtual #59
376: ldc           #57
378: invokevirtual #58
381: invokevirtual #61
384: iload         13
386: ifne          393
389: iconst_1
390: goto          394
393: iconst_0
394: invokestatic  #62
397: new           #55
400: dup
401: invokespecial #56
404: ldc           #57
406: invokevirtual #58
409: iload         14
411: invokevirtual #59
414: ldc           #60
416: invokevirtual #58
419: bipush        8
421: invokevirtual #59
424: ldc           #57
426: invokevirtual #58
429: invokevirtual #61
432: iload         14
434: bipush        8
436: if_icmpne     443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #62
447: aload         15
449: invokestatic  #10
452: aload         16
454: invokestatic  #10
457: aload         17
459: invokestatic  #10
462: new           #55
465: dup
466: invokespecial #56
469: ldc           #57
471: invokevirtual #58
474: iload         19
476: invokevirtual #59
479: ldc           #60
481: invokevirtual #58
484: iconst_0
485: invokevirtual #59
488: ldc           #57
490: invokevirtual #58
493: invokevirtual #61
496: iload         19
498: ifne          505
501: iconst_1
502: goto          506
505: iconst_0
506: invokestatic  #62
509: aload         20
511: invokestatic  #10
514: aload         21
516: invokestatic  #10
519: new           #55
522: dup
523: invokespecial #56
526: ldc           #57
528: invokevirtual #58
531: aload         22
533: invokevirtual #58
536: ldc           #209
538: invokevirtual #58
541: invokevirtual #61
544: aload         22
546: ldc           #210
548: invokestatic  #96
551: aload         23
553: invokestatic  #10
556: aload         24
558: invokestatic  #10
561: new           #55
564: dup
565: invokespecial #56
568: ldc           #57
570: invokevirtual #58
573: lload         25
575: invokevirtual #386
578: ldc           #60
580: invokevirtual #58
583: ldc2_w        #387
586: invokevirtual #386
589: ldc           #57
591: invokevirtual #58
594: invokevirtual #61
597: lload         25
599: ldc2_w        #387
602: lcmp
603: ifne          610
606: iconst_1
607: goto          611
610: iconst_0
611: invokestatic  #62
614: aload         27
616: invokestatic  #10
619: aload         28
621: invokestatic  #10
624: new           #55
627: dup
628: invokespecial #56
631: ldc           #57
633: invokevirtual #58
636: iload         29
638: invokevirtual #97
641: ldc           #60
643: invokevirtual #58
646: iconst_0
647: invokevirtual #97
650: ldc           #57
652: invokevirtual #58
655: invokevirtual #61
658: iload         29
660: ifne          667
663: iconst_1
664: goto          668
667: iconst_0
668: invokestatic  #62
671: new           #55
674: dup
675: invokespecial #56
678: ldc           #57
680: invokevirtual #58
683: aload         30
685: invokevirtual #58
688: ldc           #238
690: invokevirtual #58
693: invokevirtual #61
696: aload         30
698: ldc           #239
700: invokestatic  #96
703: aload         31
705: invokestatic  #10
708: new           #55
711: dup
712: invokespecial #56
715: ldc           #57
717: invokevirtual #58
720: aload         32
722: invokevirtual #58
725: ldc_w         #858
728: invokevirtual #58
731: invokevirtual #61
734: aload         32
736: ldc_w         #859
739: invokestatic  #96
742: new           #55
745: dup
746: invokespecial #56
749: ldc           #57
751: invokevirtual #58
754: iload         33
756: invokevirtual #97
759: ldc           #60
761: invokevirtual #58
764: iconst_0
765: invokevirtual #97
768: ldc           #57
770: invokevirtual #58
773: invokevirtual #61
776: iload         33
778: ifne          785
781: iconst_1
782: goto          786
785: iconst_0
786: invokestatic  #62
789: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test287
Start line: 11299
End line: 11319
Method source code: 
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodParser periodParser17 = periodFormatterBuilder16.toParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodParser17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #860
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         8
118: invokevirtual #142
121: astore        9
123: aload_2
124: invokestatic  #10
127: aload_3
128: invokestatic  #10
131: aload         4
133: invokestatic  #10
136: aload         5
138: invokestatic  #10
141: aload         6
143: invokestatic  #10
146: aload         7
148: invokestatic  #10
151: aload         8
153: invokestatic  #10
156: aload         9
158: invokestatic  #10
161: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test288
Start line: 11322
End line: 11338
Method source code: 
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.maximumParsedDigits(24);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #861
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         4
60: invokevirtual #320
63: astore        6
65: aload         4
67: bipush        24
69: invokevirtual #213
72: astore        7
74: aload_2
75: invokestatic  #10
78: aload_3
79: invokestatic  #10
82: aload         4
84: invokestatic  #10
87: aload         5
89: invokestatic  #10
92: aload         6
94: invokestatic  #10
97: aload         7
99: invokestatic  #10
102: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test289
Start line: 11341
End line: 11442
Method source code: 
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        int int45 = period44.getHours();
        org.joda.time.Period period47 = period44.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        mutablePeriod48.setWeeks((-28800000));
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology53);
        int int55 = period54.getMonths();
        java.lang.String str56 = period54.toString();
        org.joda.time.Period period58 = period54.plusHours(0);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) period54);
        mutablePeriod48.clear();
        int int63 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod48, "", 787);
        org.joda.time.format.PeriodPrinter periodPrinter64 = periodFormatter40.getPrinter();
        org.joda.time.format.PeriodParser periodParser65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = new org.joda.time.format.PeriodFormatter(periodPrinter64, periodParser65);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType69 = org.joda.time.DateTimeUtils.getPeriodType(periodType68);
        org.joda.time.PeriodType periodType70 = periodType68.withHoursRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 100, periodType70);
        org.joda.time.PeriodType periodType72 = periodType70.withDaysRemoved();
        org.joda.time.PeriodType periodType73 = periodType72.withSecondsRemoved();
        org.joda.time.PeriodType periodType74 = periodType73.withHoursRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter75 = periodFormatter66.withParseType(periodType73);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT-0.090S" + "'", str56, "PT-0.090S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-788) + "'", int63 == (-788));
        org.junit.Assert.assertNotNull(periodPrinter64);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodFormatter75);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #862
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: getstatic     #8
275: astore        32
277: aload         32
279: invokevirtual #216
282: istore        33
284: aload         32
286: iconst_0
287: invokevirtual #200
290: astore        34
292: aload         34
294: invokevirtual #205
297: astore        35
299: aload         35
301: ldc           #217
303: invokevirtual #207
306: aconst_null
307: astore        36
309: new           #46
312: dup
313: ldc2_w        #79
316: ldc2_w        #81
319: aload         36
321: invokespecial #83
324: astore        37
326: aload         37
328: invokevirtual #169
331: istore        38
333: aload         37
335: invokevirtual #84
338: astore        39
340: aload         37
342: iconst_0
343: invokevirtual #218
346: astore        40
348: aload         35
350: aload         37
352: invokevirtual #219
355: aload         35
357: invokevirtual #457
360: aload         28
362: aload         35
364: ldc           #74
366: sipush        787
369: invokevirtual #237
372: istore        41
374: aload         28
376: invokevirtual #90
379: astore        42
381: aconst_null
382: astore        43
384: new           #164
387: dup
388: aload         42
390: aload         43
392: invokespecial #165
395: astore        44
397: invokestatic  #171
400: astore        45
402: aload         45
404: invokestatic  #172
407: astore        46
409: aload         45
411: invokevirtual #863
414: astore        47
416: new           #46
419: dup
420: ldc2_w        #79
423: aload         47
425: invokespecial #505
428: astore        48
430: aload         47
432: invokevirtual #352
435: astore        49
437: aload         49
439: invokevirtual #800
442: astore        50
444: aload         50
446: invokevirtual #863
449: astore        51
451: aload         44
453: aload         50
455: invokevirtual #117
458: astore        52
460: aload_1
461: invokestatic  #10
464: new           #55
467: dup
468: invokespecial #56
471: ldc           #57
473: invokevirtual #58
476: iload_2
477: invokevirtual #59
480: ldc           #60
482: invokevirtual #58
485: iconst_0
486: invokevirtual #59
489: ldc           #57
491: invokevirtual #58
494: invokevirtual #61
497: iload_2
498: ifne          505
501: iconst_1
502: goto          506
505: iconst_0
506: invokestatic  #62
509: aload_3
510: invokestatic  #10
513: aload         4
515: invokestatic  #10
518: new           #55
521: dup
522: invokespecial #56
525: ldc           #57
527: invokevirtual #58
530: iload         7
532: invokevirtual #59
535: ldc           #60
537: invokevirtual #58
540: iconst_0
541: invokevirtual #59
544: ldc           #57
546: invokevirtual #58
549: invokevirtual #61
552: iload         7
554: ifne          561
557: iconst_1
558: goto          562
561: iconst_0
562: invokestatic  #62
565: new           #55
568: dup
569: invokespecial #56
572: ldc           #57
574: invokevirtual #58
577: aload         8
579: invokevirtual #58
582: ldc           #94
584: invokevirtual #58
587: invokevirtual #61
590: aload         8
592: ldc           #95
594: invokestatic  #96
597: aload         9
599: invokestatic  #10
602: aload         10
604: invokestatic  #10
607: aload         11
609: invokestatic  #10
612: aload         13
614: invokestatic  #10
617: aload         14
619: invokestatic  #10
622: aload         15
624: invokestatic  #10
627: aload         16
629: invokestatic  #10
632: aload         18
634: invokestatic  #10
637: new           #55
640: dup
641: invokespecial #56
644: ldc           #57
646: invokevirtual #58
649: iload         19
651: invokevirtual #97
654: ldc           #60
656: invokevirtual #58
659: iconst_1
660: invokevirtual #97
663: ldc           #57
665: invokevirtual #58
668: invokevirtual #61
671: iload         19
673: iconst_1
674: if_icmpne     681
677: iconst_1
678: goto          682
681: iconst_0
682: invokestatic  #62
685: aload         21
687: invokestatic  #10
690: aload         22
692: invokestatic  #10
695: aload         23
697: invokestatic  #10
700: aload         24
702: invokestatic  #10
705: aload         25
707: invokestatic  #10
710: aload         26
712: invokestatic  #10
715: aload         28
717: invokestatic  #10
720: aload         29
722: invokestatic  #10
725: aload         30
727: invokestatic  #10
730: new           #55
733: dup
734: invokespecial #56
737: ldc           #57
739: invokevirtual #58
742: aload         31
744: invokevirtual #58
747: ldc_w         #286
750: invokevirtual #58
753: invokevirtual #61
756: aload         31
758: ldc           #143
760: invokestatic  #96
763: aload         32
765: invokestatic  #10
768: new           #55
771: dup
772: invokespecial #56
775: ldc           #57
777: invokevirtual #58
780: iload         33
782: invokevirtual #59
785: ldc           #60
787: invokevirtual #58
790: iconst_0
791: invokevirtual #59
794: ldc           #57
796: invokevirtual #58
799: invokevirtual #61
802: iload         33
804: ifne          811
807: iconst_1
808: goto          812
811: iconst_0
812: invokestatic  #62
815: aload         34
817: invokestatic  #10
820: aload         35
822: invokestatic  #10
825: new           #55
828: dup
829: invokespecial #56
832: ldc           #57
834: invokevirtual #58
837: iload         38
839: invokevirtual #59
842: ldc           #60
844: invokevirtual #58
847: iconst_0
848: invokevirtual #59
851: ldc           #57
853: invokevirtual #58
856: invokevirtual #61
859: iload         38
861: ifne          868
864: iconst_1
865: goto          869
868: iconst_0
869: invokestatic  #62
872: new           #55
875: dup
876: invokespecial #56
879: ldc           #57
881: invokevirtual #58
884: aload         39
886: invokevirtual #58
889: ldc           #94
891: invokevirtual #58
894: invokevirtual #61
897: aload         39
899: ldc           #95
901: invokestatic  #96
904: aload         40
906: invokestatic  #10
909: new           #55
912: dup
913: invokespecial #56
916: ldc           #57
918: invokevirtual #58
921: iload         41
923: invokevirtual #59
926: ldc           #60
928: invokevirtual #58
931: sipush        -788
934: invokevirtual #59
937: ldc           #57
939: invokevirtual #58
942: invokevirtual #61
945: iload         41
947: sipush        -788
950: if_icmpne     957
953: iconst_1
954: goto          958
957: iconst_0
958: invokestatic  #62
961: aload         42
963: invokestatic  #10
966: aload         45
968: invokestatic  #10
971: aload         46
973: invokestatic  #10
976: aload         47
978: invokestatic  #10
981: aload         49
983: invokestatic  #10
986: aload         50
988: invokestatic  #10
991: aload         51
993: invokestatic  #10
996: aload         52
998: invokestatic  #10
1001: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test290
Start line: 11445
End line: 11459
Method source code: 
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSuffix("0", "");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.rejectSignedValues(false);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #864
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: invokevirtual #248
49: astore        4
51: aload         4
53: ldc_w         #681
56: ldc           #74
58: invokevirtual #30
61: astore        5
63: aload         5
65: iconst_0
66: invokevirtual #108
69: astore        6
71: aload_2
72: invokestatic  #10
75: aload_3
76: invokestatic  #10
79: aload         4
81: invokestatic  #10
84: aload         5
86: invokestatic  #10
89: aload         6
91: invokestatic  #10
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test291
Start line: 11462
End line: 11512
Method source code: 
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendLiteral("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroAlways();
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter10.withLocale(locale12);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology17 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology17.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone19 = gregorianChronology17.getZone();
        org.joda.time.DateTimeField dateTimeField20 = gregorianChronology17.yearOfCentury();
        org.joda.time.Period period21 = new org.joda.time.Period((long) '4', 100L, periodType16, (org.joda.time.Chronology) gregorianChronology17);
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatter10.withParseType(periodType16);
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter10.withLocale(locale23);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        org.joda.time.PeriodType periodType27 = periodType25.withSecondsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter10.withParseType(periodType25);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder7.append(periodFormatter28);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(gregorianChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #865
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: ldc           #74
48: invokevirtual #28
51: astore        4
53: aload         4
55: invokevirtual #77
58: astore        5
60: aload         5
62: invokevirtual #139
65: astore        6
67: invokestatic  #12
70: astore        7
72: aconst_null
73: astore        8
75: aload         7
77: aload         8
79: invokevirtual #88
82: astore        9
84: aload         9
86: invokevirtual #89
89: istore        10
91: aconst_null
92: astore        11
94: aload         9
96: aload         11
98: invokevirtual #88
101: astore        12
103: invokestatic  #109
106: astore        13
108: invokestatic  #110
111: astore        14
113: aload         14
115: invokevirtual #111
118: astore        15
120: aload         14
122: invokevirtual #112
125: astore        16
127: aload         14
129: invokevirtual #113
132: astore        17
134: new           #46
137: dup
138: ldc2_w        #114
141: ldc2_w        #79
144: aload         13
146: aload         14
148: invokespecial #116
151: astore        18
153: aload         9
155: aload         13
157: invokevirtual #117
160: astore        19
162: aconst_null
163: astore        20
165: aload         9
167: aload         20
169: invokevirtual #88
172: astore        21
174: invokestatic  #463
177: astore        22
179: aload         22
181: invokevirtual #662
184: astore        23
186: aload         22
188: invokevirtual #800
191: astore        24
193: aload         9
195: aload         22
197: invokevirtual #117
200: astore        25
202: aload         6
204: aload         25
206: invokevirtual #118
209: astore        26
211: aload_2
212: invokestatic  #10
215: aload_3
216: invokestatic  #10
219: aload         4
221: invokestatic  #10
224: aload         5
226: invokestatic  #10
229: aload         6
231: invokestatic  #10
234: aload         7
236: invokestatic  #10
239: aload         9
241: invokestatic  #10
244: new           #55
247: dup
248: invokespecial #56
251: ldc           #57
253: invokevirtual #58
256: iload         10
258: invokevirtual #97
261: ldc           #60
263: invokevirtual #58
266: iconst_1
267: invokevirtual #97
270: ldc           #57
272: invokevirtual #58
275: invokevirtual #61
278: iload         10
280: iconst_1
281: if_icmpne     288
284: iconst_1
285: goto          289
288: iconst_0
289: invokestatic  #62
292: aload         12
294: invokestatic  #10
297: aload         13
299: invokestatic  #10
302: aload         14
304: invokestatic  #10
307: aload         15
309: invokestatic  #10
312: aload         16
314: invokestatic  #10
317: aload         17
319: invokestatic  #10
322: aload         19
324: invokestatic  #10
327: aload         21
329: invokestatic  #10
332: aload         22
334: invokestatic  #10
337: aload         23
339: invokestatic  #10
342: aload         24
344: invokestatic  #10
347: aload         25
349: invokestatic  #10
352: aload         26
354: invokestatic  #10
357: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test292
Start line: 11515
End line: 11574
Method source code: 
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatterBuilder10.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter16 = periodFormatterBuilder15.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder15.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter19 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale20 = null;
        org.joda.time.format.PeriodFormatter periodFormatter21 = periodFormatter19.withLocale(locale20);
        boolean boolean22 = periodFormatter21.isParser();
        java.util.Locale locale23 = null;
        org.joda.time.format.PeriodFormatter periodFormatter24 = periodFormatter21.withLocale(locale23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology28 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField29 = gregorianChronology28.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone30 = gregorianChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField31 = gregorianChronology28.yearOfCentury();
        org.joda.time.Period period32 = new org.joda.time.Period((long) '4', 100L, periodType27, (org.joda.time.Chronology) gregorianChronology28);
        org.joda.time.format.PeriodFormatter periodFormatter33 = periodFormatter21.withParseType(periodType27);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder15.append(periodFormatter33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder10.append(periodFormatter33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Prefix not followed by field");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodPrinter16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatter19);
        org.junit.Assert.assertNotNull(periodFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(periodFormatter24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(gregorianChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(periodFormatter33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #866
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #161
83: astore        8
85: aload         7
87: invokevirtual #76
90: astore        9
92: new           #14
95: dup
96: invokespecial #15
99: astore        10
101: aload         10
103: ldc           #16
105: invokevirtual #17
108: astore        11
110: aload         11
112: invokevirtual #45
115: astore        12
117: aload         11
119: iconst_0
120: invokevirtual #108
123: astore        13
125: invokestatic  #12
128: astore        14
130: aconst_null
131: astore        15
133: aload         14
135: aload         15
137: invokevirtual #88
140: astore        16
142: aload         16
144: invokevirtual #89
147: istore        17
149: aconst_null
150: astore        18
152: aload         16
154: aload         18
156: invokevirtual #88
159: astore        19
161: invokestatic  #109
164: astore        20
166: invokestatic  #110
169: astore        21
171: aload         21
173: invokevirtual #111
176: astore        22
178: aload         21
180: invokevirtual #112
183: astore        23
185: aload         21
187: invokevirtual #113
190: astore        24
192: new           #46
195: dup
196: ldc2_w        #114
199: ldc2_w        #79
202: aload         20
204: aload         21
206: invokespecial #116
209: astore        25
211: aload         16
213: aload         20
215: invokevirtual #117
218: astore        26
220: aload         11
222: aload         26
224: invokevirtual #118
227: astore        27
229: aload         7
231: aload         26
233: invokevirtual #118
236: astore        28
238: ldc           #43
240: invokestatic  #22
243: goto          248
246: astore        28
248: aload_2
249: invokestatic  #10
252: aload_3
253: invokestatic  #10
256: aload         4
258: invokestatic  #10
261: aload         5
263: invokestatic  #10
266: aload         6
268: invokestatic  #10
271: aload         7
273: invokestatic  #10
276: aload         8
278: invokestatic  #10
281: aload         9
283: invokestatic  #10
286: aload         11
288: invokestatic  #10
291: aload         12
293: invokestatic  #10
296: aload         13
298: invokestatic  #10
301: aload         14
303: invokestatic  #10
306: aload         16
308: invokestatic  #10
311: new           #55
314: dup
315: invokespecial #56
318: ldc           #57
320: invokevirtual #58
323: iload         17
325: invokevirtual #97
328: ldc           #60
330: invokevirtual #58
333: iconst_1
334: invokevirtual #97
337: ldc           #57
339: invokevirtual #58
342: invokevirtual #61
345: iload         17
347: iconst_1
348: if_icmpne     355
351: iconst_1
352: goto          356
355: iconst_0
356: invokestatic  #62
359: aload         19
361: invokestatic  #10
364: aload         20
366: invokestatic  #10
369: aload         21
371: invokestatic  #10
374: aload         22
376: invokestatic  #10
379: aload         23
381: invokestatic  #10
384: aload         24
386: invokestatic  #10
389: aload         26
391: invokestatic  #10
394: aload         27
396: invokestatic  #10
399: return
Exception table:
from    to  target type
229   243   246   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test293
Start line: 11577
End line: 11591
Method source code: 
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroRarelyLast();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #867
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #245
56: astore        5
58: aload         5
60: invokevirtual #488
63: astore        6
65: aload_2
66: invokestatic  #10
69: aload_3
70: invokestatic  #10
73: aload         4
75: invokestatic  #10
78: aload         5
80: invokestatic  #10
83: aload         6
85: invokestatic  #10
88: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test294
Start line: 11594
End line: 11614
Method source code: 
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder11.appendMillis3Digit();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #868
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         7
80: invokevirtual #25
83: astore        8
85: aload         8
87: invokevirtual #77
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test295
Start line: 11617
End line: 11712
Method source code: 
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology50);
        java.lang.String str52 = period51.toString();
        org.joda.time.Period period54 = period51.minusDays((int) (byte) 100);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType58 = null;
        int int59 = period55.get(durationFieldType58);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period62 = period55.withField(durationFieldType60, 8);
        org.joda.time.Period period64 = period54.withField(durationFieldType60, (-1));
        org.joda.time.Period period66 = period64.withWeeks((int) (short) 0);
        org.joda.time.Period period68 = period64.withDays(100);
        org.joda.time.MutablePeriod mutablePeriod69 = period64.toMutablePeriod();
        java.util.Locale locale71 = null;
        int int72 = separator28.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod69, (-1297), locale71);
        java.lang.StringBuffer stringBuffer73 = null;
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        java.util.Locale locale75 = null;
        // The following exception was thrown during execution in test generation
        try {
            separator28.printTo(stringBuffer73, readablePeriod74, locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT-0.090S" + "'", str52, "PT-0.090S");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #869
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: new           #14
173: dup
174: invokespecial #15
177: astore        17
179: aload         17
181: ldc           #16
183: invokevirtual #17
186: astore        18
188: aload         17
190: invokevirtual #25
193: astore        19
195: aload         17
197: invokevirtual #76
200: astore        20
202: aload         17
204: invokevirtual #77
207: astore        21
209: aload         17
211: ldc           #16
213: invokevirtual #17
216: astore        22
218: aload         17
220: ldc           #141
222: invokevirtual #28
225: astore        23
227: invokestatic  #12
230: astore        24
232: aconst_null
233: astore        25
235: aload         24
237: aload         25
239: invokevirtual #88
242: astore        26
244: aload         26
246: invokevirtual #89
249: istore        27
251: aconst_null
252: astore        28
254: aload         26
256: aload         28
258: invokevirtual #88
261: astore        29
263: aload         23
265: aload         29
267: invokevirtual #118
270: astore        30
272: aload         30
274: invokevirtual #142
277: astore        31
279: new           #164
282: dup
283: aload         16
285: aload         31
287: invokespecial #165
290: astore        32
292: aconst_null
293: astore        33
295: new           #46
298: dup
299: ldc2_w        #79
302: ldc2_w        #81
305: aload         33
307: invokespecial #83
310: astore        34
312: aload         34
314: invokevirtual #84
317: astore        35
319: aload         34
321: bipush        100
323: invokevirtual #85
326: astore        36
328: getstatic     #8
331: astore        37
333: aload         37
335: iconst_m1
336: invokevirtual #9
339: astore        38
341: aconst_null
342: astore        39
344: aload         37
346: aload         39
348: invokevirtual #201
351: istore        40
353: invokestatic  #202
356: astore        41
358: aload         37
360: aload         41
362: bipush        8
364: invokevirtual #203
367: astore        42
369: aload         36
371: aload         41
373: iconst_m1
374: invokevirtual #203
377: astore        43
379: aload         43
381: iconst_0
382: invokevirtual #508
385: astore        44
387: aload         43
389: bipush        100
391: invokevirtual #200
394: astore        45
396: aload         43
398: invokevirtual #205
401: astore        46
403: aconst_null
404: astore        47
406: aload         16
408: aload         46
410: sipush        -1297
413: aload         47
415: invokevirtual #167
418: istore        48
420: aconst_null
421: astore        49
423: aconst_null
424: astore        50
426: aconst_null
427: astore        51
429: aload         16
431: aload         49
433: aload         50
435: aload         51
437: invokevirtual #190
440: ldc           #53
442: invokestatic  #22
445: goto          450
448: astore        52
450: aload_1
451: invokestatic  #10
454: aload_2
455: invokestatic  #10
458: aload         4
460: invokestatic  #10
463: new           #55
466: dup
467: invokespecial #56
470: ldc           #57
472: invokevirtual #58
475: iload         5
477: invokevirtual #97
480: ldc           #60
482: invokevirtual #58
485: iconst_1
486: invokevirtual #97
489: ldc           #57
491: invokevirtual #58
494: invokevirtual #61
497: iload         5
499: iconst_1
500: if_icmpne     507
503: iconst_1
504: goto          508
507: iconst_0
508: invokestatic  #62
511: aload         7
513: invokestatic  #10
516: aload         8
518: invokestatic  #10
521: aload         9
523: invokestatic  #10
526: new           #55
529: dup
530: invokespecial #56
533: ldc           #57
535: invokevirtual #58
538: aload         12
540: invokevirtual #58
543: ldc           #94
545: invokevirtual #58
548: invokevirtual #61
551: aload         12
553: ldc           #95
555: invokestatic  #96
558: aload         13
560: invokestatic  #10
563: new           #55
566: dup
567: invokespecial #56
570: ldc           #57
572: invokevirtual #58
575: iload         15
577: invokevirtual #59
580: ldc           #60
582: invokevirtual #58
585: iconst_0
586: invokevirtual #59
589: ldc           #57
591: invokevirtual #58
594: invokevirtual #61
597: iload         15
599: ifne          606
602: iconst_1
603: goto          607
606: iconst_0
607: invokestatic  #62
610: aload         18
612: invokestatic  #10
615: aload         19
617: invokestatic  #10
620: aload         20
622: invokestatic  #10
625: aload         21
627: invokestatic  #10
630: aload         22
632: invokestatic  #10
635: aload         23
637: invokestatic  #10
640: aload         24
642: invokestatic  #10
645: aload         26
647: invokestatic  #10
650: new           #55
653: dup
654: invokespecial #56
657: ldc           #57
659: invokevirtual #58
662: iload         27
664: invokevirtual #97
667: ldc           #60
669: invokevirtual #58
672: iconst_1
673: invokevirtual #97
676: ldc           #57
678: invokevirtual #58
681: invokevirtual #61
684: iload         27
686: iconst_1
687: if_icmpne     694
690: iconst_1
691: goto          695
694: iconst_0
695: invokestatic  #62
698: aload         29
700: invokestatic  #10
703: aload         30
705: invokestatic  #10
708: aload         31
710: invokestatic  #10
713: new           #55
716: dup
717: invokespecial #56
720: ldc           #57
722: invokevirtual #58
725: aload         35
727: invokevirtual #58
730: ldc           #94
732: invokevirtual #58
735: invokevirtual #61
738: aload         35
740: ldc           #95
742: invokestatic  #96
745: aload         36
747: invokestatic  #10
750: aload         37
752: invokestatic  #10
755: aload         38
757: invokestatic  #10
760: new           #55
763: dup
764: invokespecial #56
767: ldc           #57
769: invokevirtual #58
772: iload         40
774: invokevirtual #59
777: ldc           #60
779: invokevirtual #58
782: iconst_0
783: invokevirtual #59
786: ldc           #57
788: invokevirtual #58
791: invokevirtual #61
794: iload         40
796: ifne          803
799: iconst_1
800: goto          804
803: iconst_0
804: invokestatic  #62
807: aload         41
809: invokestatic  #10
812: aload         42
814: invokestatic  #10
817: aload         43
819: invokestatic  #10
822: aload         44
824: invokestatic  #10
827: aload         45
829: invokestatic  #10
832: aload         46
834: invokestatic  #10
837: new           #55
840: dup
841: invokespecial #56
844: ldc           #57
846: invokevirtual #58
849: iload         48
851: invokevirtual #59
854: ldc           #60
856: invokevirtual #58
859: iconst_0
860: invokevirtual #59
863: ldc           #57
865: invokevirtual #58
868: invokevirtual #61
871: iload         48
873: ifne          880
876: iconst_1
877: goto          881
880: iconst_0
881: invokestatic  #62
884: return
Exception table:
from    to  target type
429   445   448   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test296
Start line: 11715
End line: 11755
Method source code: 
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatterBuilder9.toFormatter();
        org.joda.time.Period period21 = new org.joda.time.Period((-36), 1970, 99, 0, (-100), 351, 8, (int) (byte) 10);
        java.lang.String str22 = periodFormatter12.print((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = periodType23.withMonthsRemoved();
        java.lang.String str25 = periodType24.toString();
        org.joda.time.PeriodType periodType26 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = new org.joda.time.Period((java.lang.Object) str22, periodType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ZonedChronology[ISOChronology[UT...\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]8.01001052" + "'", str22, "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]8.01001052");
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[YearDay]" + "'", str25, "PeriodType[YearDay]");
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #870
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: invokevirtual #161
87: astore        9
89: new           #46
92: dup
93: bipush        -36
95: sipush        1970
98: bipush        99
100: iconst_0
101: bipush        -100
103: sipush        351
106: bipush        8
108: bipush        10
110: invokespecial #511
113: astore        10
115: aload         9
117: aload         10
119: invokevirtual #181
122: astore        11
124: invokestatic  #463
127: astore        12
129: aload         12
131: invokevirtual #464
134: astore        13
136: aload         13
138: invokevirtual #871
141: astore        14
143: aload         13
145: invokevirtual #353
148: astore        15
150: aload         15
152: invokevirtual #464
155: astore        16
157: new           #46
160: dup
161: aload         11
163: aload         16
165: invokespecial #399
168: astore        17
170: ldc_w         #872
173: invokestatic  #22
176: goto          181
179: astore        17
181: aload_2
182: invokestatic  #10
185: aload_3
186: invokestatic  #10
189: aload         4
191: invokestatic  #10
194: aload         5
196: invokestatic  #10
199: aload         6
201: invokestatic  #10
204: aload         7
206: invokestatic  #10
209: aload         8
211: invokestatic  #10
214: aload         9
216: invokestatic  #10
219: new           #55
222: dup
223: invokespecial #56
226: ldc           #57
228: invokevirtual #58
231: aload         11
233: invokevirtual #58
236: ldc_w         #873
239: invokevirtual #58
242: invokevirtual #61
245: aload         11
247: ldc_w         #874
250: invokestatic  #96
253: aload         12
255: invokestatic  #10
258: aload         13
260: invokestatic  #10
263: new           #55
266: dup
267: invokespecial #56
270: ldc           #57
272: invokevirtual #58
275: aload         14
277: invokevirtual #58
280: ldc_w         #875
283: invokevirtual #58
286: invokevirtual #61
289: aload         14
291: ldc           #36
293: invokestatic  #96
296: aload         15
298: invokestatic  #10
301: aload         16
303: invokestatic  #10
306: return
Exception table:
from    to  target type
157   176   179   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test297
Start line: 11758
End line: 11772
Method source code: 
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyFirst();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSuffix("0", "");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #876
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: invokevirtual #248
49: astore        4
51: aload         4
53: ldc_w         #681
56: ldc           #74
58: invokevirtual #30
61: astore        5
63: aload         5
65: invokevirtual #185
68: astore        6
70: aload_2
71: invokestatic  #10
74: aload_3
75: invokestatic  #10
78: aload         4
80: invokestatic  #10
83: aload         5
85: invokestatic  #10
88: aload         6
90: invokestatic  #10
93: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test298
Start line: 11775
End line: 11810
Method source code: 
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("7968");
        org.joda.time.JodaTimePermission jodaTimePermission3 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSeconds();
        jodaTimePermission3.checkGuard((java.lang.Object) periodFormatterBuilder8);
        boolean boolean13 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission3);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder14.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder14.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder17.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder18.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder18.appendSuffix("35", "");
        org.joda.time.format.PeriodParser periodParser23 = periodFormatterBuilder18.toParser();
        jodaTimePermission3.checkGuard((java.lang.Object) periodFormatterBuilder18);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder18.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodParser23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #877
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #379
32: invokespecial #318
35: astore_1
36: new           #316
39: dup
40: ldc_w         #317
43: invokespecial #318
46: astore_2
47: new           #14
50: dup
51: invokespecial #15
54: astore_3
55: aload_3
56: ldc           #16
58: invokevirtual #17
61: astore        4
63: aload_3
64: invokevirtual #25
67: astore        5
69: aload_3
70: invokevirtual #39
73: astore        6
75: aload         6
77: ldc_w         #319
80: invokevirtual #196
83: astore        7
85: aload         6
87: invokevirtual #320
90: astore        8
92: aload_2
93: aload         6
95: invokevirtual #321
98: aload_1
99: aload_2
100: invokevirtual #380
103: istore        9
105: new           #14
108: dup
109: invokespecial #15
112: astore        10
114: aload         10
116: ldc           #16
118: invokevirtual #17
121: astore        11
123: aload         10
125: invokevirtual #25
128: astore        12
130: aload         12
132: invokevirtual #71
135: astore        13
137: aload         13
139: invokevirtual #72
142: astore        14
144: aload         13
146: ldc           #73
148: ldc           #74
150: invokevirtual #30
153: astore        15
155: aload         13
157: invokevirtual #142
160: astore        16
162: aload_2
163: aload         13
165: invokevirtual #321
168: aload         13
170: invokevirtual #185
173: astore        17
175: aload         4
177: invokestatic  #10
180: aload         5
182: invokestatic  #10
185: aload         6
187: invokestatic  #10
190: aload         7
192: invokestatic  #10
195: aload         8
197: invokestatic  #10
200: new           #55
203: dup
204: invokespecial #56
207: ldc           #57
209: invokevirtual #58
212: iload         9
214: invokevirtual #97
217: ldc           #60
219: invokevirtual #58
222: iconst_0
223: invokevirtual #97
226: ldc           #57
228: invokevirtual #58
231: invokevirtual #61
234: iload         9
236: ifne          243
239: iconst_1
240: goto          244
243: iconst_0
244: invokestatic  #62
247: aload         11
249: invokestatic  #10
252: aload         12
254: invokestatic  #10
257: aload         13
259: invokestatic  #10
262: aload         14
264: invokestatic  #10
267: aload         15
269: invokestatic  #10
272: aload         16
274: invokestatic  #10
277: aload         17
279: invokestatic  #10
282: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test299
Start line: 11813
End line: 11827
Method source code: 
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendPrefix("-106");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #878
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #245
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: ldc_w         #477
63: invokevirtual #196
66: astore        6
68: aload_2
69: invokestatic  #10
72: aload_3
73: invokestatic  #10
76: aload         4
78: invokestatic  #10
81: aload         5
83: invokestatic  #10
86: aload         6
88: invokestatic  #10
91: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test300
Start line: 11830
End line: 11846
Method source code: 
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.printZeroNever();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #879
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #39
56: astore        5
58: aload         5
60: invokevirtual #185
63: astore        6
65: aload         6
67: invokevirtual #76
70: astore        7
72: aload_2
73: invokestatic  #10
76: aload_3
77: invokestatic  #10
80: aload         4
82: invokestatic  #10
85: aload         5
87: invokestatic  #10
90: aload         6
92: invokestatic  #10
95: aload         7
97: invokestatic  #10
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test301
Start line: 11849
End line: 11879
Method source code: 
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatterBuilder9.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder9.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder9.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.appendSeparatorIfFieldsBefore("secondOfMinute");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder16.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder17.appendSeparatorIfFieldsAfter("2024-05-15T22:13:24.785+10:52");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodPrinter12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #880
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: invokevirtual #45
87: astore        9
89: aload         7
91: invokevirtual #26
94: astore        10
96: aload         7
98: invokevirtual #139
101: astore        11
103: aload         7
105: ldc_w         #881
108: invokevirtual #67
111: astore        12
113: aload         12
115: invokevirtual #33
118: astore        13
120: aload         13
122: ldc_w         #633
125: invokevirtual #17
128: astore        14
130: aload_2
131: invokestatic  #10
134: aload_3
135: invokestatic  #10
138: aload         4
140: invokestatic  #10
143: aload         5
145: invokestatic  #10
148: aload         6
150: invokestatic  #10
153: aload         7
155: invokestatic  #10
158: aload         8
160: invokestatic  #10
163: aload         9
165: invokestatic  #10
168: aload         10
170: invokestatic  #10
173: aload         11
175: invokestatic  #10
178: aload         12
180: invokestatic  #10
183: aload         13
185: invokestatic  #10
188: aload         14
190: invokestatic  #10
193: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test302
Start line: 11882
End line: 11900
Method source code: 
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendSeparator("2024-05-15T11:18:07.428+00:00:00.010/2024-05-15T11:18:07.428+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.printZeroRarelyLast();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #882
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         4
60: invokevirtual #320
63: astore        6
65: aload         4
67: ldc_w         #563
70: invokevirtual #37
73: astore        7
75: aload         7
77: invokevirtual #488
80: astore        8
82: aload_2
83: invokestatic  #10
86: aload_3
87: invokestatic  #10
90: aload         4
92: invokestatic  #10
95: aload         5
97: invokestatic  #10
100: aload         6
102: invokestatic  #10
105: aload         7
107: invokestatic  #10
110: aload         8
112: invokestatic  #10
115: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test303
Start line: 11903
End line: 11923
Method source code: 
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #883
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         7
74: invokevirtual #26
77: astore        8
79: aload         7
81: invokevirtual #25
84: astore        9
86: aload_2
87: invokestatic  #10
90: aload_3
91: invokestatic  #10
94: aload         4
96: invokestatic  #10
99: aload         5
101: invokestatic  #10
104: aload         6
106: invokestatic  #10
109: aload         7
111: invokestatic  #10
114: aload         8
116: invokestatic  #10
119: aload         9
121: invokestatic  #10
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test304
Start line: 11926
End line: 11952
Method source code: 
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodParser periodParser12 = periodFormatterBuilder8.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder8.appendPrefix("+07:32", "1776");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder18 = periodFormatterBuilder15.appendPrefix("97", "(\"org.joda.time.JodaTimePermission\" \"DayTime\")");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder15.rejectSignedValues(false);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodParser12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #884
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: aload         6
87: invokevirtual #142
90: astore        9
92: aload         6
94: ldc           #255
96: ldc_w         #422
99: invokevirtual #41
102: astore        10
104: aload         10
106: ldc_w         #347
109: ldc_w         #834
112: invokevirtual #41
115: astore        11
117: aload         10
119: iconst_0
120: invokevirtual #108
123: astore        12
125: aload_2
126: invokestatic  #10
129: aload_3
130: invokestatic  #10
133: aload         4
135: invokestatic  #10
138: aload         5
140: invokestatic  #10
143: aload         6
145: invokestatic  #10
148: aload         7
150: invokestatic  #10
153: aload         8
155: invokestatic  #10
158: aload         9
160: invokestatic  #10
163: aload         10
165: invokestatic  #10
168: aload         11
170: invokestatic  #10
173: aload         12
175: invokestatic  #10
178: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test305
Start line: 11955
End line: 11977
Method source code: 
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("DateTimeField[yearOfCentury]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder11.minimumPrintedDigits(999);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #885
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #185
66: astore        6
68: aload         5
70: ldc_w         #485
73: invokevirtual #37
76: astore        7
78: aload         7
80: invokevirtual #320
83: astore        8
85: aload         8
87: invokevirtual #39
90: astore        9
92: aload         9
94: sipush        999
97: invokevirtual #151
100: astore        10
102: aload_2
103: invokestatic  #10
106: aload_3
107: invokestatic  #10
110: aload         4
112: invokestatic  #10
115: aload         5
117: invokestatic  #10
120: aload         6
122: invokestatic  #10
125: aload         7
127: invokestatic  #10
130: aload         8
132: invokestatic  #10
135: aload         9
137: invokestatic  #10
140: aload         10
142: invokestatic  #10
145: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test306
Start line: 11980
End line: 12000
Method source code: 
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatterBuilder5.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder5.appendWeeks();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodPrinter7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #886
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         5
67: invokevirtual #45
70: astore        7
72: aload         5
74: invokevirtual #320
77: astore        8
79: aload         5
81: invokevirtual #26
84: astore        9
86: aload_2
87: invokestatic  #10
90: aload_3
91: invokestatic  #10
94: aload         4
96: invokestatic  #10
99: aload         5
101: invokestatic  #10
104: aload         6
106: invokestatic  #10
109: aload         7
111: invokestatic  #10
114: aload         8
116: invokestatic  #10
119: aload         9
121: invokestatic  #10
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test307
Start line: 12003
End line: 12120
Method source code: 
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        java.lang.Object obj0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Chronology chronology3 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant1, readableInstant2);
        org.joda.time.Chronology chronology4 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.yearOfCentury();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeUtils.getZone(dateTimeZone7);
        org.joda.time.chrono.ZonedChronology zonedChronology9 = org.joda.time.chrono.ZonedChronology.getInstance(chronology4, dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = zonedChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology9.clockhourOfHalfday();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.time();
        boolean boolean13 = zonedChronology9.equals((java.lang.Object) periodType12);
        org.joda.time.Period period14 = new org.joda.time.Period(obj0, periodType12);
        org.joda.time.Period period15 = period14.toPeriod();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        int int17 = period16.getHours();
        org.joda.time.Period period19 = period16.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        mutablePeriod20.setWeeks((-28800000));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology25);
        int int27 = period26.getMonths();
        java.lang.String str28 = period26.toString();
        org.joda.time.Period period30 = period26.plusHours(0);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period33 = period26.minusYears(0);
        org.joda.time.Period period35 = period26.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder36.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter39 = periodFormatterBuilder38.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder38.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter42 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter42.withLocale(locale43);
        boolean boolean45 = periodFormatter44.isParser();
        java.util.Locale locale46 = null;
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter44.withLocale(locale46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology51 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField52 = gregorianChronology51.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone53 = gregorianChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField54 = gregorianChronology51.yearOfCentury();
        org.joda.time.Period period55 = new org.joda.time.Period((long) '4', 100L, periodType50, (org.joda.time.Chronology) gregorianChronology51);
        org.joda.time.format.PeriodFormatter periodFormatter56 = periodFormatter44.withParseType(periodType50);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder57 = periodFormatterBuilder38.append(periodFormatter56);
        org.joda.time.format.PeriodParser periodParser58 = periodFormatter56.getParser();
        java.lang.String str59 = period26.toString(periodFormatter56);
        java.lang.String str60 = period14.toString(periodFormatter56);
        java.util.Locale locale61 = null;
        org.joda.time.format.PeriodFormatter periodFormatter62 = periodFormatter56.withLocale(locale61);
        java.lang.StringBuffer stringBuffer63 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) ' ');
        int[] intArray66 = period65.getValues();
        org.joda.time.Period period67 = period65.negated();
        org.joda.time.Period period69 = org.joda.time.Period.millis(1);
        int int70 = period69.getMonths();
        int int71 = period69.size();
        org.joda.time.Period period72 = period65.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period74 = period69.plusWeeks((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            periodFormatter56.printTo(stringBuffer63, (org.joda.time.ReadablePeriod) period69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(zonedChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT-0.090S" + "'", str28, "PT-0.090S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodPrinter39);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(gregorianChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(periodFormatter56);
        org.junit.Assert.assertNotNull(periodFormatterBuilder57);
        org.junit.Assert.assertNotNull(periodParser58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str59, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "P0000-W00-00T00:00:00" + "'", str60, "P0000-W00-00T00:00:00");
        org.junit.Assert.assertNotNull(periodFormatter62);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 0, 32]");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 8 + "'", int71 == 8);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #887
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aconst_null
28: astore_2
29: aconst_null
30: astore_3
31: aload_2
32: aload_3
33: invokestatic  #358
36: astore        4
38: aload         4
40: invokevirtual #359
43: astore        5
45: aload         5
47: invokevirtual #621
50: astore        6
52: aconst_null
53: astore        7
55: aload         7
57: invokestatic  #460
60: astore        8
62: aload         8
64: invokestatic  #461
67: astore        9
69: aload         5
71: aload         9
73: invokestatic  #622
76: astore        10
78: aload         10
80: invokevirtual #623
83: astore        11
85: aload         10
87: invokevirtual #888
90: astore        12
92: invokestatic  #171
95: astore        13
97: aload         10
99: aload         13
101: invokevirtual #889
104: istore        14
106: new           #46
109: dup
110: aload_1
111: aload         13
113: invokespecial #399
116: astore        15
118: aload         15
120: invokevirtual #481
123: astore        16
125: getstatic     #8
128: astore        17
130: aload         17
132: invokevirtual #216
135: istore        18
137: aload         17
139: iconst_0
140: invokevirtual #200
143: astore        19
145: aload         19
147: invokevirtual #205
150: astore        20
152: aload         20
154: ldc           #217
156: invokevirtual #207
159: aconst_null
160: astore        21
162: new           #46
165: dup
166: ldc2_w        #79
169: ldc2_w        #81
172: aload         21
174: invokespecial #83
177: astore        22
179: aload         22
181: invokevirtual #169
184: istore        23
186: aload         22
188: invokevirtual #84
191: astore        24
193: aload         22
195: iconst_0
196: invokevirtual #218
199: astore        25
201: aload         20
203: aload         22
205: invokevirtual #219
208: aload         22
210: iconst_0
211: invokevirtual #282
214: astore        26
216: aload         22
218: bipush        100
220: invokevirtual #283
223: astore        27
225: new           #14
228: dup
229: invokespecial #15
232: astore        28
234: aload         28
236: ldc           #16
238: invokevirtual #17
241: astore        29
243: aload         29
245: invokevirtual #45
248: astore        30
250: aload         29
252: iconst_0
253: invokevirtual #108
256: astore        31
258: invokestatic  #12
261: astore        32
263: aconst_null
264: astore        33
266: aload         32
268: aload         33
270: invokevirtual #88
273: astore        34
275: aload         34
277: invokevirtual #89
280: istore        35
282: aconst_null
283: astore        36
285: aload         34
287: aload         36
289: invokevirtual #88
292: astore        37
294: invokestatic  #109
297: astore        38
299: invokestatic  #110
302: astore        39
304: aload         39
306: invokevirtual #111
309: astore        40
311: aload         39
313: invokevirtual #112
316: astore        41
318: aload         39
320: invokevirtual #113
323: astore        42
325: new           #46
328: dup
329: ldc2_w        #114
332: ldc2_w        #79
335: aload         38
337: aload         39
339: invokespecial #116
342: astore        43
344: aload         34
346: aload         38
348: invokevirtual #117
351: astore        44
353: aload         29
355: aload         44
357: invokevirtual #118
360: astore        45
362: aload         44
364: invokevirtual #119
367: astore        46
369: aload         22
371: aload         44
373: invokevirtual #284
376: astore        47
378: aload         15
380: aload         44
382: invokevirtual #284
385: astore        48
387: aconst_null
388: astore        49
390: aload         44
392: aload         49
394: invokevirtual #88
397: astore        50
399: aconst_null
400: astore        51
402: new           #46
405: dup
406: ldc2_w        #121
409: invokespecial #91
412: astore        52
414: aload         52
416: invokevirtual #123
419: astore        53
421: aload         52
423: invokevirtual #890
426: astore        54
428: iconst_1
429: invokestatic  #168
432: astore        55
434: aload         55
436: invokevirtual #169
439: istore        56
441: aload         55
443: invokevirtual #170
446: istore        57
448: aload         52
450: aload         55
452: invokevirtual #657
455: astore        58
457: aload         55
459: bipush        10
461: invokevirtual #334
464: astore        59
466: aload         44
468: aload         51
470: aload         55
472: invokevirtual #314
475: ldc           #53
477: invokestatic  #22
480: goto          485
483: astore        60
485: aload         4
487: invokestatic  #10
490: aload         5
492: invokestatic  #10
495: aload         6
497: invokestatic  #10
500: aload         8
502: invokestatic  #10
505: aload         9
507: invokestatic  #10
510: aload         10
512: invokestatic  #10
515: aload         11
517: invokestatic  #10
520: aload         12
522: invokestatic  #10
525: aload         13
527: invokestatic  #10
530: new           #55
533: dup
534: invokespecial #56
537: ldc           #57
539: invokevirtual #58
542: iload         14
544: invokevirtual #97
547: ldc           #60
549: invokevirtual #58
552: iconst_0
553: invokevirtual #97
556: ldc           #57
558: invokevirtual #58
561: invokevirtual #61
564: iload         14
566: ifne          573
569: iconst_1
570: goto          574
573: iconst_0
574: invokestatic  #62
577: aload         16
579: invokestatic  #10
582: aload         17
584: invokestatic  #10
587: new           #55
590: dup
591: invokespecial #56
594: ldc           #57
596: invokevirtual #58
599: iload         18
601: invokevirtual #59
604: ldc           #60
606: invokevirtual #58
609: iconst_0
610: invokevirtual #59
613: ldc           #57
615: invokevirtual #58
618: invokevirtual #61
621: iload         18
623: ifne          630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #62
634: aload         19
636: invokestatic  #10
639: aload         20
641: invokestatic  #10
644: new           #55
647: dup
648: invokespecial #56
651: ldc           #57
653: invokevirtual #58
656: iload         23
658: invokevirtual #59
661: ldc           #60
663: invokevirtual #58
666: iconst_0
667: invokevirtual #59
670: ldc           #57
672: invokevirtual #58
675: invokevirtual #61
678: iload         23
680: ifne          687
683: iconst_1
684: goto          688
687: iconst_0
688: invokestatic  #62
691: new           #55
694: dup
695: invokespecial #56
698: ldc           #57
700: invokevirtual #58
703: aload         24
705: invokevirtual #58
708: ldc           #94
710: invokevirtual #58
713: invokevirtual #61
716: aload         24
718: ldc           #95
720: invokestatic  #96
723: aload         25
725: invokestatic  #10
728: aload         26
730: invokestatic  #10
733: aload         27
735: invokestatic  #10
738: aload         29
740: invokestatic  #10
743: aload         30
745: invokestatic  #10
748: aload         31
750: invokestatic  #10
753: aload         32
755: invokestatic  #10
758: aload         34
760: invokestatic  #10
763: new           #55
766: dup
767: invokespecial #56
770: ldc           #57
772: invokevirtual #58
775: iload         35
777: invokevirtual #97
780: ldc           #60
782: invokevirtual #58
785: iconst_1
786: invokevirtual #97
789: ldc           #57
791: invokevirtual #58
794: invokevirtual #61
797: iload         35
799: iconst_1
800: if_icmpne     807
803: iconst_1
804: goto          808
807: iconst_0
808: invokestatic  #62
811: aload         37
813: invokestatic  #10
816: aload         38
818: invokestatic  #10
821: aload         39
823: invokestatic  #10
826: aload         40
828: invokestatic  #10
831: aload         41
833: invokestatic  #10
836: aload         42
838: invokestatic  #10
841: aload         44
843: invokestatic  #10
846: aload         45
848: invokestatic  #10
851: aload         46
853: invokestatic  #10
856: new           #55
859: dup
860: invokespecial #56
863: ldc           #57
865: invokevirtual #58
868: aload         47
870: invokevirtual #58
873: ldc_w         #286
876: invokevirtual #58
879: invokevirtual #61
882: aload         47
884: ldc           #143
886: invokestatic  #96
889: new           #55
892: dup
893: invokespecial #56
896: ldc           #57
898: invokevirtual #58
901: aload         48
903: invokevirtual #58
906: ldc_w         #827
909: invokevirtual #58
912: invokevirtual #61
915: aload         48
917: ldc_w         #828
920: invokestatic  #96
923: aload         50
925: invokestatic  #10
928: aload         53
930: invokestatic  #10
933: aload         53
935: invokestatic  #127
938: ldc           #128
940: invokestatic  #129
943: aload         54
945: invokestatic  #10
948: aload         55
950: invokestatic  #10
953: new           #55
956: dup
957: invokespecial #56
960: ldc           #57
962: invokevirtual #58
965: iload         56
967: invokevirtual #59
970: ldc           #60
972: invokevirtual #58
975: iconst_0
976: invokevirtual #59
979: ldc           #57
981: invokevirtual #58
984: invokevirtual #61
987: iload         56
989: ifne          996
992: iconst_1
993: goto          997
996: iconst_0
997: invokestatic  #62
1000: new           #55
1003: dup
1004: invokespecial #56
1007: ldc           #57
1009: invokevirtual #58
1012: iload         57
1014: invokevirtual #59
1017: ldc           #60
1019: invokevirtual #58
1022: bipush        8
1024: invokevirtual #59
1027: ldc           #57
1029: invokevirtual #58
1032: invokevirtual #61
1035: iload         57
1037: bipush        8
1039: if_icmpne     1046
1042: iconst_1
1043: goto          1047
1046: iconst_0
1047: invokestatic  #62
1050: aload         58
1052: invokestatic  #10
1055: aload         59
1057: invokestatic  #10
1060: return
Exception table:
from    to  target type
466   480   483   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test308
Start line: 12123
End line: 12131
Method source code: 
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.minimumPrintedDigits((-12));
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #891
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: bipush        -12
41: invokevirtual #151
44: astore_3
45: aload_2
46: invokestatic  #10
49: aload_3
50: invokestatic  #10
53: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test309
Start line: 12134
End line: 12152
Method source code: 
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.minimumPrintedDigits(20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder6.appendPrefix("halfdays", "-31319-10-16T05:22:12.807+00:00:00.010/-31319-10-16T05:22:12.807+00:00:00.010");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #892
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #39
56: astore        5
58: aload         5
60: invokevirtual #134
63: astore        6
65: aload         5
67: bipush        20
69: invokevirtual #151
72: astore        7
74: aload         5
76: ldc_w         #893
79: ldc_w         #894
82: invokevirtual #41
85: astore        8
87: aload_2
88: invokestatic  #10
91: aload_3
92: invokestatic  #10
95: aload         4
97: invokestatic  #10
100: aload         5
102: invokestatic  #10
105: aload         6
107: invokestatic  #10
110: aload         7
112: invokestatic  #10
115: aload         8
117: invokestatic  #10
120: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test310
Start line: 12155
End line: 12173
Method source code: 
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("dayOfMonth", "-101");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder6.appendPrefix("P-36W-292279004DT0.001S", "2777");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #895
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         6
66: ldc_w         #403
69: ldc           #40
71: invokevirtual #20
74: astore        7
76: aload         6
78: ldc_w         #679
81: ldc_w         #288
84: invokevirtual #41
87: astore        8
89: aload_2
90: invokestatic  #10
93: aload_3
94: invokestatic  #10
97: aload         4
99: invokestatic  #10
102: aload         5
104: invokestatic  #10
107: aload         6
109: invokestatic  #10
112: aload         7
114: invokestatic  #10
117: aload         8
119: invokestatic  #10
122: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test311
Start line: 12176
End line: 12198
Method source code: 
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendPrefix("2024-05-15T11:17:21.964+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder9.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder9.appendSuffix("2024-05-15T12:20:21.398+00:00:00.010");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #896
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: aload         7
75: ldc           #195
77: invokevirtual #196
80: astore        8
82: aload         7
84: invokevirtual #33
87: astore        9
89: aload         7
91: ldc_w         #897
94: invokevirtual #132
97: astore        10
99: aload_2
100: invokestatic  #10
103: aload_3
104: invokestatic  #10
107: aload         4
109: invokestatic  #10
112: aload         5
114: invokestatic  #10
117: aload         6
119: invokestatic  #10
122: aload         7
124: invokestatic  #10
127: aload         8
129: invokestatic  #10
132: aload         9
134: invokestatic  #10
137: aload         10
139: invokestatic  #10
142: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test312
Start line: 12201
End line: 12307
Method source code: 
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendLiteral("TimeNoHoursNoMillis");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder7.maximumParsedDigits((-24));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder11.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder11.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder11.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder11.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal17 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology20);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period24 = period21.minusDays((int) (byte) 100);
        java.util.Locale locale26 = null;
        int int27 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) period24, 999, locale26);
        org.joda.time.format.PeriodParser periodParser28 = null;
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder11.append((org.joda.time.format.PeriodPrinter) literal17, periodParser28);
        org.joda.time.Period period31 = new org.joda.time.Period((long) ' ');
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        int int33 = period32.getHours();
        org.joda.time.Period period35 = period32.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod36 = period35.toMutablePeriod();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType40 = org.joda.time.DateTimeUtils.getPeriodType(periodType39);
        org.joda.time.Period period41 = new org.joda.time.Period(100L, (long) (short) -1, periodType39);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.weeks();
        boolean boolean43 = periodType39.isSupported(durationFieldType42);
        mutablePeriod36.add(durationFieldType42, (int) (byte) 100);
        java.lang.String str46 = mutablePeriod36.toString();
        mutablePeriod36.setHours((int) (short) 10);
        mutablePeriod36.setYears(0);
        org.joda.time.Period period51 = period31.withFields((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration52, readableInstant53);
        int int55 = period54.getWeeks();
        org.joda.time.Period period57 = period54.minusHours((int) '4');
        org.joda.time.Minutes minutes58 = period57.toStandardMinutes();
        org.joda.time.Period period60 = period57.minusMonths(0);
        int int61 = period57.getMillis();
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) period57);
        java.util.Locale locale64 = null;
        int int65 = literal17.countFieldsToPrint((org.joda.time.ReadablePeriod) mutablePeriod36, 3, locale64);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder66 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder68 = periodFormatterBuilder66.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder69 = periodFormatterBuilder66.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder70 = periodFormatterBuilder66.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder71 = periodFormatterBuilder66.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder74 = periodFormatterBuilder66.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder76 = periodFormatterBuilder74.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder77 = periodFormatterBuilder74.appendWeeks();
        org.joda.time.format.PeriodParser periodParser78 = periodFormatterBuilder74.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder79 = periodFormatterBuilder7.append((org.joda.time.format.PeriodPrinter) literal17, periodParser78);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder80 = periodFormatterBuilder79.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder81 = periodFormatterBuilder80.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(literal17);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT-0.090S" + "'", str22, "PT-0.090S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P100W" + "'", str46, "P100W");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder68);
        org.junit.Assert.assertNotNull(periodFormatterBuilder69);
        org.junit.Assert.assertNotNull(periodFormatterBuilder70);
        org.junit.Assert.assertNotNull(periodFormatterBuilder71);
        org.junit.Assert.assertNotNull(periodFormatterBuilder74);
        org.junit.Assert.assertNotNull(periodFormatterBuilder76);
        org.junit.Assert.assertNotNull(periodFormatterBuilder77);
        org.junit.Assert.assertNotNull(periodParser78);
        org.junit.Assert.assertNotNull(periodFormatterBuilder79);
        org.junit.Assert.assertNotNull(periodFormatterBuilder80);
        org.junit.Assert.assertNotNull(periodFormatterBuilder81);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #898
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: ldc           #184
61: invokevirtual #28
64: astore        6
66: aload         6
68: invokevirtual #185
71: astore        7
73: aload         6
75: bipush        -24
77: invokevirtual #213
80: astore        8
82: new           #14
85: dup
86: invokespecial #15
89: astore        9
91: aload         9
93: ldc           #16
95: invokevirtual #17
98: astore        10
100: aload         9
102: invokevirtual #25
105: astore        11
107: aload         9
109: invokevirtual #76
112: astore        12
114: aload         9
116: invokevirtual #77
119: astore        13
121: getstatic     #78
124: astore        14
126: aconst_null
127: astore        15
129: new           #46
132: dup
133: ldc2_w        #79
136: ldc2_w        #81
139: aload         15
141: invokespecial #83
144: astore        16
146: aload         16
148: invokevirtual #84
151: astore        17
153: aload         16
155: bipush        100
157: invokevirtual #85
160: astore        18
162: aconst_null
163: astore        19
165: aload         14
167: aload         18
169: sipush        999
172: aload         19
174: invokevirtual #86
177: istore        20
179: aconst_null
180: astore        21
182: aload         9
184: aload         14
186: aload         21
188: invokevirtual #87
191: astore        22
193: new           #46
196: dup
197: ldc2_w        #121
200: invokespecial #91
203: astore        23
205: getstatic     #8
208: astore        24
210: aload         24
212: invokevirtual #216
215: istore        25
217: aload         24
219: iconst_0
220: invokevirtual #200
223: astore        26
225: aload         26
227: invokevirtual #205
230: astore        27
232: invokestatic  #171
235: astore        28
237: aload         28
239: invokestatic  #172
242: astore        29
244: new           #46
247: dup
248: ldc2_w        #79
251: ldc2_w        #173
254: aload         28
256: invokespecial #175
259: astore        30
261: invokestatic  #176
264: astore        31
266: aload         28
268: aload         31
270: invokevirtual #177
273: istore        32
275: aload         27
277: aload         31
279: bipush        100
281: invokevirtual #226
284: aload         27
286: invokevirtual #235
289: astore        33
291: aload         27
293: bipush        10
295: invokevirtual #416
298: aload         27
300: iconst_0
301: invokevirtual #236
304: aload         23
306: aload         27
308: invokevirtual #364
311: astore        34
313: aconst_null
314: astore        35
316: aconst_null
317: astore        36
319: new           #46
322: dup
323: aload         35
325: aload         36
327: invokespecial #47
330: astore        37
332: aload         37
334: invokevirtual #48
337: istore        38
339: aload         37
341: bipush        52
343: invokevirtual #49
346: astore        39
348: aload         39
350: invokevirtual #50
353: astore        40
355: aload         39
357: iconst_0
358: invokevirtual #51
361: astore        41
363: aload         39
365: invokevirtual #417
368: istore        42
370: aload         27
372: aload         39
374: invokevirtual #219
377: aconst_null
378: astore        43
380: aload         14
382: aload         27
384: iconst_3
385: aload         43
387: invokevirtual #86
390: istore        44
392: new           #14
395: dup
396: invokespecial #15
399: astore        45
401: aload         45
403: ldc           #16
405: invokevirtual #17
408: astore        46
410: aload         45
412: invokevirtual #25
415: astore        47
417: aload         45
419: invokevirtual #76
422: astore        48
424: aload         45
426: invokevirtual #77
429: astore        49
431: aload         45
433: ldc_w         #332
436: ldc_w         #333
439: invokevirtual #30
442: astore        50
444: aload         50
446: ldc           #146
448: invokevirtual #132
451: astore        51
453: aload         50
455: invokevirtual #26
458: astore        52
460: aload         50
462: invokevirtual #142
465: astore        53
467: aload         6
469: aload         14
471: aload         53
473: invokevirtual #87
476: astore        54
478: aload         54
480: invokevirtual #320
483: astore        55
485: aload         55
487: invokevirtual #185
490: astore        56
492: aload_2
493: invokestatic  #10
496: aload_3
497: invokestatic  #10
500: aload         4
502: invokestatic  #10
505: aload         5
507: invokestatic  #10
510: aload         6
512: invokestatic  #10
515: aload         7
517: invokestatic  #10
520: aload         8
522: invokestatic  #10
525: aload         10
527: invokestatic  #10
530: aload         11
532: invokestatic  #10
535: aload         12
537: invokestatic  #10
540: aload         13
542: invokestatic  #10
545: aload         14
547: invokestatic  #10
550: new           #55
553: dup
554: invokespecial #56
557: ldc           #57
559: invokevirtual #58
562: aload         17
564: invokevirtual #58
567: ldc           #94
569: invokevirtual #58
572: invokevirtual #61
575: aload         17
577: ldc           #95
579: invokestatic  #96
582: aload         18
584: invokestatic  #10
587: new           #55
590: dup
591: invokespecial #56
594: ldc           #57
596: invokevirtual #58
599: iload         20
601: invokevirtual #59
604: ldc           #60
606: invokevirtual #58
609: iconst_0
610: invokevirtual #59
613: ldc           #57
615: invokevirtual #58
618: invokevirtual #61
621: iload         20
623: ifne          630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #62
634: aload         22
636: invokestatic  #10
639: aload         24
641: invokestatic  #10
644: new           #55
647: dup
648: invokespecial #56
651: ldc           #57
653: invokevirtual #58
656: iload         25
658: invokevirtual #59
661: ldc           #60
663: invokevirtual #58
666: iconst_0
667: invokevirtual #59
670: ldc           #57
672: invokevirtual #58
675: invokevirtual #61
678: iload         25
680: ifne          687
683: iconst_1
684: goto          688
687: iconst_0
688: invokestatic  #62
691: aload         26
693: invokestatic  #10
696: aload         27
698: invokestatic  #10
701: aload         28
703: invokestatic  #10
706: aload         29
708: invokestatic  #10
711: aload         31
713: invokestatic  #10
716: new           #55
719: dup
720: invokespecial #56
723: ldc           #57
725: invokevirtual #58
728: iload         32
730: invokevirtual #97
733: ldc           #60
735: invokevirtual #58
738: iconst_0
739: invokevirtual #97
742: ldc           #57
744: invokevirtual #58
747: invokevirtual #61
750: iload         32
752: ifne          759
755: iconst_1
756: goto          760
759: iconst_0
760: invokestatic  #62
763: new           #55
766: dup
767: invokespecial #56
770: ldc           #57
772: invokevirtual #58
775: aload         33
777: invokevirtual #58
780: ldc           #238
782: invokevirtual #58
785: invokevirtual #61
788: aload         33
790: ldc           #239
792: invokestatic  #96
795: aload         34
797: invokestatic  #10
800: new           #55
803: dup
804: invokespecial #56
807: ldc           #57
809: invokevirtual #58
812: iload         38
814: invokevirtual #59
817: ldc           #60
819: invokevirtual #58
822: iconst_0
823: invokevirtual #59
826: ldc           #57
828: invokevirtual #58
831: invokevirtual #61
834: iload         38
836: ifne          843
839: iconst_1
840: goto          844
843: iconst_0
844: invokestatic  #62
847: aload         39
849: invokestatic  #10
852: aload         40
854: invokestatic  #10
857: aload         41
859: invokestatic  #10
862: new           #55
865: dup
866: invokespecial #56
869: ldc           #57
871: invokevirtual #58
874: iload         42
876: invokevirtual #59
879: ldc           #60
881: invokevirtual #58
884: iconst_0
885: invokevirtual #59
888: ldc           #57
890: invokevirtual #58
893: invokevirtual #61
896: iload         42
898: ifne          905
901: iconst_1
902: goto          906
905: iconst_0
906: invokestatic  #62
909: new           #55
912: dup
913: invokespecial #56
916: ldc           #57
918: invokevirtual #58
921: iload         44
923: invokevirtual #59
926: ldc           #60
928: invokevirtual #58
931: iconst_0
932: invokevirtual #59
935: ldc           #57
937: invokevirtual #58
940: invokevirtual #61
943: iload         44
945: ifne          952
948: iconst_1
949: goto          953
952: iconst_0
953: invokestatic  #62
956: aload         46
958: invokestatic  #10
961: aload         47
963: invokestatic  #10
966: aload         48
968: invokestatic  #10
971: aload         49
973: invokestatic  #10
976: aload         50
978: invokestatic  #10
981: aload         51
983: invokestatic  #10
986: aload         52
988: invokestatic  #10
991: aload         53
993: invokestatic  #10
996: aload         54
998: invokestatic  #10
1001: aload         55
1003: invokestatic  #10
1006: aload         56
1008: invokestatic  #10
1011: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test313
Start line: 12310
End line: 12345
Method source code: 
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeUtils.getZone(dateTimeZone1);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone3 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        boolean boolean6 = cachedDateTimeZone3.equals((java.lang.Object) periodType5);
        java.lang.String str8 = cachedDateTimeZone3.getNameKey((long) (short) 1);
        int int10 = cachedDateTimeZone3.getStandardOffset(32284799990L);
        long long12 = cachedDateTimeZone3.previousTransition(0L);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder13.appendSeconds();
        boolean boolean15 = cachedDateTimeZone3.equals((java.lang.Object) periodFormatterBuilder13);
        boolean boolean16 = cachedDateTimeZone3.isFixed();
        int int18 = cachedDateTimeZone3.getOffset(315532800L);
        int int20 = cachedDateTimeZone3.getOffset((-39120001L));
        java.lang.String str21 = cachedDateTimeZone3.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(cachedDateTimeZone3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT-0.090S" + "'", str8, "PT-0.090S");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #899
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aload_1
28: invokestatic  #460
31: astore_2
32: aload_2
33: invokestatic  #461
36: astore_3
37: aload_3
38: invokestatic  #462
41: astore        4
43: invokestatic  #463
46: astore        5
48: aload         5
50: invokevirtual #464
53: astore        6
55: aload         4
57: aload         6
59: invokevirtual #465
62: istore        7
64: aload         4
66: lconst_1
67: invokevirtual #466
70: astore        8
72: aload         4
74: ldc2_w        #467
77: invokevirtual #469
80: istore        9
82: aload         4
84: lconst_0
85: invokevirtual #470
88: lstore        10
90: new           #14
93: dup
94: invokespecial #15
97: astore        12
99: aload         12
101: invokevirtual #320
104: astore        13
106: aload         4
108: aload         12
110: invokevirtual #465
113: istore        14
115: aload         4
117: invokevirtual #627
120: istore        15
122: aload         4
124: ldc2_w        #900
127: invokevirtual #902
130: istore        16
132: aload         4
134: ldc2_w        #903
137: invokevirtual #902
140: istore        17
142: aload         4
144: invokevirtual #905
147: astore        18
149: aload_2
150: invokestatic  #10
153: aload_3
154: invokestatic  #10
157: aload         4
159: invokestatic  #10
162: aload         5
164: invokestatic  #10
167: aload         6
169: invokestatic  #10
172: new           #55
175: dup
176: invokespecial #56
179: ldc           #57
181: invokevirtual #58
184: iload         7
186: invokevirtual #97
189: ldc           #60
191: invokevirtual #58
194: iconst_0
195: invokevirtual #97
198: ldc           #57
200: invokevirtual #58
203: invokevirtual #61
206: iload         7
208: ifne          215
211: iconst_1
212: goto          216
215: iconst_0
216: invokestatic  #62
219: aload         13
221: invokestatic  #10
224: new           #55
227: dup
228: invokespecial #56
231: ldc           #57
233: invokevirtual #58
236: iload         14
238: invokevirtual #97
241: ldc           #60
243: invokevirtual #58
246: iconst_0
247: invokevirtual #97
250: ldc           #57
252: invokevirtual #58
255: invokevirtual #61
258: iload         14
260: ifne          267
263: iconst_1
264: goto          268
267: iconst_0
268: invokestatic  #62
271: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test314
Start line: 12348
End line: 12415
Method source code: 
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("DateTimeField[yearOfCentury]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendMillis();
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter14.isParser();
        org.joda.time.format.PeriodParser periodParser16 = periodFormatter14.getParser();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType25 = org.joda.time.DateTimeUtils.getPeriodType(periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period(100L, (long) (short) -1, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        boolean boolean28 = periodType24.isSupported(durationFieldType27);
        mutablePeriod21.add(durationFieldType27, (int) (byte) 100);
        java.lang.String str31 = mutablePeriod21.toString();
        java.util.Locale locale34 = null;
        int int35 = periodParser16.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod21, "weekyear", (int) '#', locale34);
        org.joda.time.format.PeriodFormatter periodFormatter36 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale37 = null;
        org.joda.time.format.PeriodFormatter periodFormatter38 = periodFormatter36.withLocale(locale37);
        java.lang.String str39 = mutablePeriod21.toString(periodFormatter38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType41 = org.joda.time.DateTimeUtils.getPeriodType(periodType40);
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter38.withParseType(periodType41);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder43 = periodFormatterBuilder11.append(periodFormatter42);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodParser16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P100W" + "'", str31, "P100W");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-36) + "'", int35 == (-36));
        org.junit.Assert.assertNotNull(periodFormatter36);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "P0000-W100-00T00:00:00" + "'", str39, "P0000-W100-00T00:00:00");
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertNotNull(periodFormatterBuilder43);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #906
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #185
66: astore        6
68: aload         5
70: ldc_w         #485
73: invokevirtual #37
76: astore        7
78: aload         7
80: invokevirtual #320
83: astore        8
85: aload         8
87: invokevirtual #39
90: astore        9
92: invokestatic  #12
95: astore        10
97: aconst_null
98: astore        11
100: aload         10
102: aload         11
104: invokevirtual #88
107: astore        12
109: aload         12
111: invokevirtual #89
114: istore        13
116: aload         12
118: invokevirtual #119
121: astore        14
123: getstatic     #8
126: astore        15
128: aload         15
130: invokevirtual #216
133: istore        16
135: aload         15
137: iconst_0
138: invokevirtual #200
141: astore        17
143: aload         17
145: invokevirtual #205
148: astore        18
150: invokestatic  #171
153: astore        19
155: aload         19
157: invokestatic  #172
160: astore        20
162: new           #46
165: dup
166: ldc2_w        #79
169: ldc2_w        #173
172: aload         19
174: invokespecial #175
177: astore        21
179: invokestatic  #176
182: astore        22
184: aload         19
186: aload         22
188: invokevirtual #177
191: istore        23
193: aload         18
195: aload         22
197: bipush        100
199: invokevirtual #226
202: aload         18
204: invokevirtual #235
207: astore        24
209: aconst_null
210: astore        25
212: aload         14
214: aload         18
216: ldc           #135
218: bipush        35
220: aload         25
222: invokeinterface #231,  5
227: istore        26
229: invokestatic  #12
232: astore        27
234: aconst_null
235: astore        28
237: aload         27
239: aload         28
241: invokevirtual #88
244: astore        29
246: aload         18
248: aload         29
250: invokevirtual #907
253: astore        30
255: invokestatic  #171
258: astore        31
260: aload         31
262: invokestatic  #172
265: astore        32
267: aload         29
269: aload         32
271: invokevirtual #117
274: astore        33
276: aload         9
278: aload         33
280: invokevirtual #118
283: astore        34
285: aload_2
286: invokestatic  #10
289: aload_3
290: invokestatic  #10
293: aload         4
295: invokestatic  #10
298: aload         5
300: invokestatic  #10
303: aload         6
305: invokestatic  #10
308: aload         7
310: invokestatic  #10
313: aload         8
315: invokestatic  #10
318: aload         9
320: invokestatic  #10
323: aload         10
325: invokestatic  #10
328: aload         12
330: invokestatic  #10
333: new           #55
336: dup
337: invokespecial #56
340: ldc           #57
342: invokevirtual #58
345: iload         13
347: invokevirtual #97
350: ldc           #60
352: invokevirtual #58
355: iconst_1
356: invokevirtual #97
359: ldc           #57
361: invokevirtual #58
364: invokevirtual #61
367: iload         13
369: iconst_1
370: if_icmpne     377
373: iconst_1
374: goto          378
377: iconst_0
378: invokestatic  #62
381: aload         14
383: invokestatic  #10
386: aload         15
388: invokestatic  #10
391: new           #55
394: dup
395: invokespecial #56
398: ldc           #57
400: invokevirtual #58
403: iload         16
405: invokevirtual #59
408: ldc           #60
410: invokevirtual #58
413: iconst_0
414: invokevirtual #59
417: ldc           #57
419: invokevirtual #58
422: invokevirtual #61
425: iload         16
427: ifne          434
430: iconst_1
431: goto          435
434: iconst_0
435: invokestatic  #62
438: aload         17
440: invokestatic  #10
443: aload         18
445: invokestatic  #10
448: aload         19
450: invokestatic  #10
453: aload         20
455: invokestatic  #10
458: aload         22
460: invokestatic  #10
463: new           #55
466: dup
467: invokespecial #56
470: ldc           #57
472: invokevirtual #58
475: iload         23
477: invokevirtual #97
480: ldc           #60
482: invokevirtual #58
485: iconst_0
486: invokevirtual #97
489: ldc           #57
491: invokevirtual #58
494: invokevirtual #61
497: iload         23
499: ifne          506
502: iconst_1
503: goto          507
506: iconst_0
507: invokestatic  #62
510: new           #55
513: dup
514: invokespecial #56
517: ldc           #57
519: invokevirtual #58
522: aload         24
524: invokevirtual #58
527: ldc           #238
529: invokevirtual #58
532: invokevirtual #61
535: aload         24
537: ldc           #239
539: invokestatic  #96
542: new           #55
545: dup
546: invokespecial #56
549: ldc           #57
551: invokevirtual #58
554: iload         26
556: invokevirtual #59
559: ldc           #60
561: invokevirtual #58
564: bipush        -36
566: invokevirtual #59
569: ldc           #57
571: invokevirtual #58
574: invokevirtual #61
577: iload         26
579: bipush        -36
581: if_icmpne     588
584: iconst_1
585: goto          589
588: iconst_0
589: invokestatic  #62
592: aload         27
594: invokestatic  #10
597: aload         29
599: invokestatic  #10
602: new           #55
605: dup
606: invokespecial #56
609: ldc           #57
611: invokevirtual #58
614: aload         30
616: invokevirtual #58
619: ldc_w         #908
622: invokevirtual #58
625: invokevirtual #61
628: aload         30
630: ldc_w         #909
633: invokestatic  #96
636: aload         31
638: invokestatic  #10
641: aload         32
643: invokestatic  #10
646: aload         33
648: invokestatic  #10
651: aload         34
653: invokestatic  #10
656: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test315
Start line: 12418
End line: 12443
Method source code: 
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSeconds();
        periodFormatterBuilder4.clear();
        org.joda.time.format.PeriodFormatter periodFormatter9 = periodFormatterBuilder4.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder4.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder10.appendSeparator("677", "2024-05-15T12:19:55.224+00:00:00.010/2024-05-15T12:19:55.224+00:00:00.010");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder10.appendMonths();
        org.joda.time.format.PeriodPrinter periodPrinter15 = periodFormatterBuilder14.toPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodPrinter15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #910
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         4
63: invokevirtual #320
66: astore        6
68: aload         4
70: invokevirtual #212
73: aload         4
75: invokevirtual #161
78: astore        7
80: aload         4
82: invokevirtual #488
85: astore        8
87: aload         8
89: ldc_w         #700
92: ldc_w         #701
95: invokevirtual #20
98: astore        9
100: aload         8
102: invokevirtual #72
105: astore        10
107: aload         10
109: invokevirtual #45
112: astore        11
114: aload_2
115: invokestatic  #10
118: aload_3
119: invokestatic  #10
122: aload         4
124: invokestatic  #10
127: aload         5
129: invokestatic  #10
132: aload         6
134: invokestatic  #10
137: aload         7
139: invokestatic  #10
142: aload         8
144: invokestatic  #10
147: aload         9
149: invokestatic  #10
152: aload         10
154: invokestatic  #10
157: aload         11
159: invokestatic  #10
162: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test316
Start line: 12446
End line: 12491
Method source code: 
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter12.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.append(periodFormatter15);
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        int int18 = period17.getHours();
        org.joda.time.Period period20 = period17.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        mutablePeriod21.setDays((int) (short) -1);
        mutablePeriod21.addSeconds(8);
        mutablePeriod21.addMonths((int) (byte) 1);
        int[] intArray28 = mutablePeriod21.getValues();
        mutablePeriod21.addYears(4871);
        int int33 = periodFormatter15.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod21, "", (int) (byte) -1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 1, 0, -1, 0, 0, 8, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #911
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: invokestatic  #12
76: astore        8
78: aconst_null
79: astore        9
81: aload         8
83: aload         9
85: invokevirtual #88
88: astore        10
90: aload         10
92: invokevirtual #89
95: istore        11
97: aconst_null
98: astore        12
100: aload         10
102: aload         12
104: invokevirtual #88
107: astore        13
109: aload         7
111: aload         13
113: invokevirtual #118
116: astore        14
118: getstatic     #8
121: astore        15
123: aload         15
125: invokevirtual #216
128: istore        16
130: aload         15
132: iconst_0
133: invokevirtual #200
136: astore        17
138: aload         17
140: invokevirtual #205
143: astore        18
145: aload         18
147: iconst_m1
148: invokevirtual #313
151: aload         18
153: bipush        8
155: invokevirtual #311
158: aload         18
160: iconst_1
161: invokevirtual #815
164: aload         18
166: invokevirtual #912
169: astore        19
171: aload         18
173: sipush        4871
176: invokevirtual #475
179: aload         13
181: aload         18
183: ldc           #74
185: iconst_m1
186: invokevirtual #237
189: istore        20
191: aload_2
192: invokestatic  #10
195: aload_3
196: invokestatic  #10
199: aload         4
201: invokestatic  #10
204: aload         5
206: invokestatic  #10
209: aload         6
211: invokestatic  #10
214: aload         7
216: invokestatic  #10
219: aload         8
221: invokestatic  #10
224: aload         10
226: invokestatic  #10
229: new           #55
232: dup
233: invokespecial #56
236: ldc           #57
238: invokevirtual #58
241: iload         11
243: invokevirtual #97
246: ldc           #60
248: invokevirtual #58
251: iconst_1
252: invokevirtual #97
255: ldc           #57
257: invokevirtual #58
260: invokevirtual #61
263: iload         11
265: iconst_1
266: if_icmpne     273
269: iconst_1
270: goto          274
273: iconst_0
274: invokestatic  #62
277: aload         13
279: invokestatic  #10
282: aload         14
284: invokestatic  #10
287: aload         15
289: invokestatic  #10
292: new           #55
295: dup
296: invokespecial #56
299: ldc           #57
301: invokevirtual #58
304: iload         16
306: invokevirtual #59
309: ldc           #60
311: invokevirtual #58
314: iconst_0
315: invokevirtual #59
318: ldc           #57
320: invokevirtual #58
323: invokevirtual #61
326: iload         16
328: ifne          335
331: iconst_1
332: goto          336
335: iconst_0
336: invokestatic  #62
339: aload         17
341: invokestatic  #10
344: aload         18
346: invokestatic  #10
349: aload         19
351: invokestatic  #10
354: aload         19
356: invokestatic  #127
359: ldc_w         #913
362: invokestatic  #129
365: new           #55
368: dup
369: invokespecial #56
372: ldc           #57
374: invokevirtual #58
377: iload         20
379: invokevirtual #59
382: ldc           #60
384: invokevirtual #58
387: iconst_m1
388: invokevirtual #59
391: ldc           #57
393: invokevirtual #58
396: invokevirtual #61
399: iload         20
401: iconst_m1
402: if_icmpne     409
405: iconst_1
406: goto          410
409: iconst_0
410: invokestatic  #62
413: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test317
Start line: 12494
End line: 12522
Method source code: 
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.joda.time.JodaTimePermission jodaTimePermission1 = new org.joda.time.JodaTimePermission("7968");
        org.joda.time.JodaTimePermission jodaTimePermission3 = new org.joda.time.JodaTimePermission("Invalid format: \"PeriodType[YearDay]\"");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSeconds();
        jodaTimePermission3.checkGuard((java.lang.Object) periodFormatterBuilder8);
        boolean boolean13 = jodaTimePermission1.implies((java.security.Permission) jodaTimePermission3);
        org.joda.time.chrono.GregorianChronology gregorianChronology14 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.DurationField durationField15 = gregorianChronology14.seconds();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology14.clockhourOfHalfday();
        jodaTimePermission1.checkGuard((java.lang.Object) gregorianChronology14);
        java.lang.String str18 = jodaTimePermission1.getActions();
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(gregorianChronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #914
20: aastore
21: invokevirtual #7
24: pop
25: new           #316
28: dup
29: ldc_w         #379
32: invokespecial #318
35: astore_1
36: new           #316
39: dup
40: ldc_w         #317
43: invokespecial #318
46: astore_2
47: new           #14
50: dup
51: invokespecial #15
54: astore_3
55: aload_3
56: ldc           #16
58: invokevirtual #17
61: astore        4
63: aload_3
64: invokevirtual #25
67: astore        5
69: aload_3
70: invokevirtual #39
73: astore        6
75: aload         6
77: ldc_w         #319
80: invokevirtual #196
83: astore        7
85: aload         6
87: invokevirtual #320
90: astore        8
92: aload_2
93: aload         6
95: invokevirtual #321
98: aload_1
99: aload_2
100: invokevirtual #380
103: istore        9
105: invokestatic  #222
108: astore        10
110: aload         10
112: invokevirtual #224
115: astore        11
117: aload         10
119: invokevirtual #711
122: astore        12
124: aload_1
125: aload         10
127: invokevirtual #321
130: aload_1
131: invokevirtual #381
134: astore        13
136: aload         4
138: invokestatic  #10
141: aload         5
143: invokestatic  #10
146: aload         6
148: invokestatic  #10
151: aload         7
153: invokestatic  #10
156: aload         8
158: invokestatic  #10
161: new           #55
164: dup
165: invokespecial #56
168: ldc           #57
170: invokevirtual #58
173: iload         9
175: invokevirtual #97
178: ldc           #60
180: invokevirtual #58
183: iconst_0
184: invokevirtual #97
187: ldc           #57
189: invokevirtual #58
192: invokevirtual #61
195: iload         9
197: ifne          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #62
208: aload         10
210: invokestatic  #10
213: aload         11
215: invokestatic  #10
218: aload         12
220: invokestatic  #10
223: new           #55
226: dup
227: invokespecial #56
230: ldc           #57
232: invokevirtual #58
235: aload         13
237: invokevirtual #58
240: ldc_w         #385
243: invokevirtual #58
246: invokevirtual #61
249: aload         13
251: ldc           #74
253: invokestatic  #96
256: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test318
Start line: 12525
End line: 12545
Method source code: 
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder5.appendSuffix("13");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder9.appendSuffix("halfdays");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #915
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: invokevirtual #33
69: astore        7
71: aload         5
73: ldc           #243
75: invokevirtual #132
78: astore        8
80: aload         8
82: ldc_w         #893
85: invokevirtual #132
88: astore        9
90: aload_2
91: invokestatic  #10
94: aload_3
95: invokestatic  #10
98: aload         4
100: invokestatic  #10
103: aload         5
105: invokestatic  #10
108: aload         6
110: invokestatic  #10
113: aload         7
115: invokestatic  #10
118: aload         8
120: invokestatic  #10
123: aload         9
125: invokestatic  #10
128: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test319
Start line: 12548
End line: 12610
Method source code: 
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatterBuilder5.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder8.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder8.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder8.appendLiteral("52");
        org.joda.time.format.PeriodParser periodParser18 = periodFormatterBuilder8.toParser();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        int int20 = period19.getHours();
        org.joda.time.Period period22 = period19.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod23 = period22.toMutablePeriod();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType27 = org.joda.time.DateTimeUtils.getPeriodType(periodType26);
        org.joda.time.Period period28 = new org.joda.time.Period(100L, (long) (short) -1, periodType26);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        boolean boolean30 = periodType26.isSupported(durationFieldType29);
        mutablePeriod23.add(durationFieldType29, (int) (byte) 100);
        java.lang.String str33 = mutablePeriod23.toString();
        mutablePeriod23.setHours((int) (short) 10);
        mutablePeriod23.setYears(0);
        mutablePeriod23.addHours(315532800);
        java.util.Locale locale42 = null;
        int int43 = periodParser18.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod23, "100", 3655, locale42);
        org.joda.time.format.PeriodFormatter periodFormatter44 = new org.joda.time.format.PeriodFormatter(periodPrinter7, periodParser18);
        org.joda.time.format.PeriodParser periodParser45 = periodFormatter44.getParser();
        org.joda.time.format.PeriodPrinter periodPrinter46 = periodFormatter44.getPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodPrinter7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodParser18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "P100W" + "'", str33, "P100W");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3656) + "'", int43 == (-3656));
        org.junit.Assert.assertNotNull(periodParser45);
        org.junit.Assert.assertNotNull(periodPrinter46);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #916
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         5
67: invokevirtual #45
70: astore        7
72: new           #14
75: dup
76: invokespecial #15
79: astore        8
81: aload         8
83: ldc           #16
85: invokevirtual #17
88: astore        9
90: aload         8
92: invokevirtual #25
95: astore        10
97: aload         8
99: invokevirtual #76
102: astore        11
104: aload         8
106: invokevirtual #77
109: astore        12
111: aload         8
113: ldc           #16
115: invokevirtual #17
118: astore        13
120: aload         8
122: ldc           #141
124: invokevirtual #28
127: astore        14
129: aload         8
131: invokevirtual #142
134: astore        15
136: getstatic     #8
139: astore        16
141: aload         16
143: invokevirtual #216
146: istore        17
148: aload         16
150: iconst_0
151: invokevirtual #200
154: astore        18
156: aload         18
158: invokevirtual #205
161: astore        19
163: invokestatic  #171
166: astore        20
168: aload         20
170: invokestatic  #172
173: astore        21
175: new           #46
178: dup
179: ldc2_w        #79
182: ldc2_w        #173
185: aload         20
187: invokespecial #175
190: astore        22
192: invokestatic  #176
195: astore        23
197: aload         20
199: aload         23
201: invokevirtual #177
204: istore        24
206: aload         19
208: aload         23
210: bipush        100
212: invokevirtual #226
215: aload         19
217: invokevirtual #235
220: astore        25
222: aload         19
224: bipush        10
226: invokevirtual #416
229: aload         19
231: iconst_0
232: invokevirtual #236
235: aload         19
237: ldc_w         #276
240: invokevirtual #312
243: aconst_null
244: astore        26
246: aload         15
248: aload         19
250: ldc_w         #917
253: sipush        3655
256: aload         26
258: invokeinterface #231,  5
263: istore        27
265: new           #164
268: dup
269: aload         7
271: aload         15
273: invokespecial #165
276: astore        28
278: aload         28
280: invokevirtual #119
283: astore        29
285: aload         28
287: invokevirtual #90
290: astore        30
292: aload_2
293: invokestatic  #10
296: aload_3
297: invokestatic  #10
300: aload         4
302: invokestatic  #10
305: aload         5
307: invokestatic  #10
310: aload         6
312: invokestatic  #10
315: aload         7
317: invokestatic  #10
320: aload         9
322: invokestatic  #10
325: aload         10
327: invokestatic  #10
330: aload         11
332: invokestatic  #10
335: aload         12
337: invokestatic  #10
340: aload         13
342: invokestatic  #10
345: aload         14
347: invokestatic  #10
350: aload         15
352: invokestatic  #10
355: aload         16
357: invokestatic  #10
360: new           #55
363: dup
364: invokespecial #56
367: ldc           #57
369: invokevirtual #58
372: iload         17
374: invokevirtual #59
377: ldc           #60
379: invokevirtual #58
382: iconst_0
383: invokevirtual #59
386: ldc           #57
388: invokevirtual #58
391: invokevirtual #61
394: iload         17
396: ifne          403
399: iconst_1
400: goto          404
403: iconst_0
404: invokestatic  #62
407: aload         18
409: invokestatic  #10
412: aload         19
414: invokestatic  #10
417: aload         20
419: invokestatic  #10
422: aload         21
424: invokestatic  #10
427: aload         23
429: invokestatic  #10
432: new           #55
435: dup
436: invokespecial #56
439: ldc           #57
441: invokevirtual #58
444: iload         24
446: invokevirtual #97
449: ldc           #60
451: invokevirtual #58
454: iconst_0
455: invokevirtual #97
458: ldc           #57
460: invokevirtual #58
463: invokevirtual #61
466: iload         24
468: ifne          475
471: iconst_1
472: goto          476
475: iconst_0
476: invokestatic  #62
479: new           #55
482: dup
483: invokespecial #56
486: ldc           #57
488: invokevirtual #58
491: aload         25
493: invokevirtual #58
496: ldc           #238
498: invokevirtual #58
501: invokevirtual #61
504: aload         25
506: ldc           #239
508: invokestatic  #96
511: new           #55
514: dup
515: invokespecial #56
518: ldc           #57
520: invokevirtual #58
523: iload         27
525: invokevirtual #59
528: ldc           #60
530: invokevirtual #58
533: sipush        -3656
536: invokevirtual #59
539: ldc           #57
541: invokevirtual #58
544: invokevirtual #61
547: iload         27
549: sipush        -3656
552: if_icmpne     559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #62
563: aload         29
565: invokestatic  #10
568: aload         30
570: invokestatic  #10
573: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test320
Start line: 12613
End line: 12631
Method source code: 
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSecondsWithMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #918
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #488
67: astore        7
69: aload_1
70: invokevirtual #185
73: astore        8
75: aload_2
76: invokestatic  #10
79: aload_3
80: invokestatic  #10
83: aload         4
85: invokestatic  #10
88: aload         5
90: invokestatic  #10
93: aload         6
95: invokestatic  #10
98: aload         7
100: invokestatic  #10
103: aload         8
105: invokestatic  #10
108: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test321
Start line: 12634
End line: 12757
Method source code: 
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.joda.time.chrono.GregorianChronology gregorianChronology0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = gregorianChronology0.minuteOfHour();
        org.joda.time.Period period3 = org.joda.time.Period.millis(1);
        int int4 = period3.getMonths();
        int int5 = period3.size();
        org.joda.time.Period period7 = period3.withDays((int) (byte) 100);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType11 = null;
        int int12 = period8.get(durationFieldType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period8.withField(durationFieldType13, 8);
        java.lang.String str16 = durationFieldType13.getName();
        org.joda.time.Period period18 = period3.withField(durationFieldType13, 1);
        org.joda.time.Period period20 = period3.minusDays(10);
        long long23 = gregorianChronology0.add((org.joda.time.ReadablePeriod) period3, (long) (short) 100, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField24 = gregorianChronology0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = gregorianChronology0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = gregorianChronology0.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = gregorianChronology0.halfdayOfDay();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder30 = periodFormatterBuilder28.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder28.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder28.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder32.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder32.appendSeconds();
        periodFormatterBuilder32.clear();
        org.joda.time.format.PeriodFormatter periodFormatter37 = periodFormatterBuilder32.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal39 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter40 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale41 = null;
        org.joda.time.format.PeriodFormatter periodFormatter42 = periodFormatter40.withLocale(locale41);
        boolean boolean43 = periodFormatter42.isParser();
        org.joda.time.format.PeriodParser periodParser44 = periodFormatter42.getParser();
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        int int46 = period45.getHours();
        org.joda.time.Period period48 = period45.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod49 = period48.toMutablePeriod();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType53 = org.joda.time.DateTimeUtils.getPeriodType(periodType52);
        org.joda.time.Period period54 = new org.joda.time.Period(100L, (long) (short) -1, periodType52);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.weeks();
        boolean boolean56 = periodType52.isSupported(durationFieldType55);
        mutablePeriod49.add(durationFieldType55, (int) (byte) 100);
        java.lang.String str59 = mutablePeriod49.toString();
        java.util.Locale locale62 = null;
        int int63 = periodParser44.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod49, "weekyear", (int) '#', locale62);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder64 = periodFormatterBuilder32.append((org.joda.time.format.PeriodPrinter) literal39, periodParser44);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        int int66 = period65.getHours();
        org.joda.time.Period period68 = period65.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod69 = period68.toMutablePeriod();
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType73 = org.joda.time.DateTimeUtils.getPeriodType(periodType72);
        org.joda.time.Period period74 = new org.joda.time.Period(100L, (long) (short) -1, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.weeks();
        boolean boolean76 = periodType72.isSupported(durationFieldType75);
        mutablePeriod69.add(durationFieldType75, (int) (byte) 100);
        java.lang.String str79 = mutablePeriod69.toString();
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.years();
        mutablePeriod69.set(durationFieldType80, (int) (short) -1);
        mutablePeriod69.addYears((int) '4');
        mutablePeriod69.addMillis((-101));
        java.util.Locale locale89 = null;
        int int90 = literal39.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod69, "-106", 315532800, locale89);
        boolean boolean91 = gregorianChronology0.equals((java.lang.Object) "-106");
        org.joda.time.DateTimeField dateTimeField92 = gregorianChronology0.yearOfEra();
        org.junit.Assert.assertNotNull(gregorianChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "seconds" + "'", str16, "seconds");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder30);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertNotNull(periodFormatter37);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(periodParser44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "P100W" + "'", str59, "P100W");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-36) + "'", int63 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(mutablePeriod69);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "P100W" + "'", str79, "P100W");
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-315532801) + "'", int90 == (-315532801));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTimeField92);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #919
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #110
28: astore_1
29: aload_1
30: invokevirtual #111
33: astore_2
34: iconst_1
35: invokestatic  #168
38: astore_3
39: aload_3
40: invokevirtual #169
43: istore        4
45: aload_3
46: invokevirtual #170
49: istore        5
51: aload_3
52: bipush        100
54: invokevirtual #200
57: astore        6
59: getstatic     #8
62: astore        7
64: aload         7
66: iconst_m1
67: invokevirtual #9
70: astore        8
72: aconst_null
73: astore        9
75: aload         7
77: aload         9
79: invokevirtual #201
82: istore        10
84: invokestatic  #202
87: astore        11
89: aload         7
91: aload         11
93: bipush        8
95: invokevirtual #203
98: astore        12
100: aload         11
102: invokevirtual #204
105: astore        13
107: aload_3
108: aload         11
110: iconst_1
111: invokevirtual #203
114: astore        14
116: aload_3
117: bipush        10
119: invokevirtual #85
122: astore        15
124: aload_1
125: aload_3
126: ldc2_w        #79
129: bipush        100
131: invokevirtual #227
134: lstore        16
136: aload_1
137: invokevirtual #382
140: astore        18
142: aload_1
143: invokevirtual #473
146: astore        19
148: aload_1
149: invokevirtual #383
152: astore        20
154: aload_1
155: invokevirtual #474
158: astore        21
160: new           #14
163: dup
164: invokespecial #15
167: astore        22
169: aload         22
171: ldc           #16
173: invokevirtual #17
176: astore        23
178: aload         22
180: invokevirtual #25
183: astore        24
185: aload         22
187: invokevirtual #39
190: astore        25
192: aload         25
194: ldc_w         #319
197: invokevirtual #196
200: astore        26
202: aload         25
204: invokevirtual #320
207: astore        27
209: aload         25
211: invokevirtual #212
214: aload         25
216: invokevirtual #161
219: astore        28
221: new           #392
224: dup
225: ldc           #74
227: invokespecial #393
230: astore        29
232: invokestatic  #12
235: astore        30
237: aconst_null
238: astore        31
240: aload         30
242: aload         31
244: invokevirtual #88
247: astore        32
249: aload         32
251: invokevirtual #89
254: istore        33
256: aload         32
258: invokevirtual #119
261: astore        34
263: getstatic     #8
266: astore        35
268: aload         35
270: invokevirtual #216
273: istore        36
275: aload         35
277: iconst_0
278: invokevirtual #200
281: astore        37
283: aload         37
285: invokevirtual #205
288: astore        38
290: invokestatic  #171
293: astore        39
295: aload         39
297: invokestatic  #172
300: astore        40
302: new           #46
305: dup
306: ldc2_w        #79
309: ldc2_w        #173
312: aload         39
314: invokespecial #175
317: astore        41
319: invokestatic  #176
322: astore        42
324: aload         39
326: aload         42
328: invokevirtual #177
331: istore        43
333: aload         38
335: aload         42
337: bipush        100
339: invokevirtual #226
342: aload         38
344: invokevirtual #235
347: astore        44
349: aconst_null
350: astore        45
352: aload         34
354: aload         38
356: ldc           #135
358: bipush        35
360: aload         45
362: invokeinterface #231,  5
367: istore        46
369: aload         25
371: aload         29
373: aload         34
375: invokevirtual #87
378: astore        47
380: getstatic     #8
383: astore        48
385: aload         48
387: invokevirtual #216
390: istore        49
392: aload         48
394: iconst_0
395: invokevirtual #200
398: astore        50
400: aload         50
402: invokevirtual #205
405: astore        51
407: invokestatic  #171
410: astore        52
412: aload         52
414: invokestatic  #172
417: astore        53
419: new           #46
422: dup
423: ldc2_w        #79
426: ldc2_w        #173
429: aload         52
431: invokespecial #175
434: astore        54
436: invokestatic  #176
439: astore        55
441: aload         52
443: aload         55
445: invokevirtual #177
448: istore        56
450: aload         51
452: aload         55
454: bipush        100
456: invokevirtual #226
459: aload         51
461: invokevirtual #235
464: astore        57
466: invokestatic  #300
469: astore        58
471: aload         51
473: aload         58
475: iconst_m1
476: invokevirtual #301
479: aload         51
481: bipush        52
483: invokevirtual #475
486: aload         51
488: bipush        -101
490: invokevirtual #476
493: aconst_null
494: astore        59
496: aload         29
498: aload         51
500: ldc_w         #477
503: ldc_w         #276
506: aload         59
508: invokevirtual #221
511: istore        60
513: aload_1
514: ldc_w         #477
517: invokevirtual #478
520: istore        61
522: aload_1
523: invokevirtual #473
526: astore        62
528: aload_1
529: invokestatic  #10
532: aload_2
533: invokestatic  #10
536: aload_3
537: invokestatic  #10
540: new           #55
543: dup
544: invokespecial #56
547: ldc           #57
549: invokevirtual #58
552: iload         4
554: invokevirtual #59
557: ldc           #60
559: invokevirtual #58
562: iconst_0
563: invokevirtual #59
566: ldc           #57
568: invokevirtual #58
571: invokevirtual #61
574: iload         4
576: ifne          583
579: iconst_1
580: goto          584
583: iconst_0
584: invokestatic  #62
587: new           #55
590: dup
591: invokespecial #56
594: ldc           #57
596: invokevirtual #58
599: iload         5
601: invokevirtual #59
604: ldc           #60
606: invokevirtual #58
609: bipush        8
611: invokevirtual #59
614: ldc           #57
616: invokevirtual #58
619: invokevirtual #61
622: iload         5
624: bipush        8
626: if_icmpne     633
629: iconst_1
630: goto          634
633: iconst_0
634: invokestatic  #62
637: aload         6
639: invokestatic  #10
642: aload         7
644: invokestatic  #10
647: aload         8
649: invokestatic  #10
652: new           #55
655: dup
656: invokespecial #56
659: ldc           #57
661: invokevirtual #58
664: iload         10
666: invokevirtual #59
669: ldc           #60
671: invokevirtual #58
674: iconst_0
675: invokevirtual #59
678: ldc           #57
680: invokevirtual #58
683: invokevirtual #61
686: iload         10
688: ifne          695
691: iconst_1
692: goto          696
695: iconst_0
696: invokestatic  #62
699: aload         11
701: invokestatic  #10
704: aload         12
706: invokestatic  #10
709: new           #55
712: dup
713: invokespecial #56
716: ldc           #57
718: invokevirtual #58
721: aload         13
723: invokevirtual #58
726: ldc           #209
728: invokevirtual #58
731: invokevirtual #61
734: aload         13
736: ldc           #210
738: invokestatic  #96
741: aload         14
743: invokestatic  #10
746: aload         15
748: invokestatic  #10
751: new           #55
754: dup
755: invokespecial #56
758: ldc           #57
760: invokevirtual #58
763: lload         16
765: invokevirtual #386
768: ldc           #60
770: invokevirtual #58
773: ldc2_w        #387
776: invokevirtual #386
779: ldc           #57
781: invokevirtual #58
784: invokevirtual #61
787: lload         16
789: ldc2_w        #387
792: lcmp
793: ifne          800
796: iconst_1
797: goto          801
800: iconst_0
801: invokestatic  #62
804: aload         18
806: invokestatic  #10
809: aload         19
811: invokestatic  #10
814: aload         20
816: invokestatic  #10
819: aload         21
821: invokestatic  #10
824: aload         23
826: invokestatic  #10
829: aload         24
831: invokestatic  #10
834: aload         25
836: invokestatic  #10
839: aload         26
841: invokestatic  #10
844: aload         27
846: invokestatic  #10
849: aload         28
851: invokestatic  #10
854: aload         30
856: invokestatic  #10
859: aload         32
861: invokestatic  #10
864: new           #55
867: dup
868: invokespecial #56
871: ldc           #57
873: invokevirtual #58
876: iload         33
878: invokevirtual #97
881: ldc           #60
883: invokevirtual #58
886: iconst_1
887: invokevirtual #97
890: ldc           #57
892: invokevirtual #58
895: invokevirtual #61
898: iload         33
900: iconst_1
901: if_icmpne     908
904: iconst_1
905: goto          909
908: iconst_0
909: invokestatic  #62
912: aload         34
914: invokestatic  #10
917: aload         35
919: invokestatic  #10
922: new           #55
925: dup
926: invokespecial #56
929: ldc           #57
931: invokevirtual #58
934: iload         36
936: invokevirtual #59
939: ldc           #60
941: invokevirtual #58
944: iconst_0
945: invokevirtual #59
948: ldc           #57
950: invokevirtual #58
953: invokevirtual #61
956: iload         36
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #62
969: aload         37
971: invokestatic  #10
974: aload         38
976: invokestatic  #10
979: aload         39
981: invokestatic  #10
984: aload         40
986: invokestatic  #10
989: aload         42
991: invokestatic  #10
994: new           #55
997: dup
998: invokespecial #56
1001: ldc           #57
1003: invokevirtual #58
1006: iload         43
1008: invokevirtual #97
1011: ldc           #60
1013: invokevirtual #58
1016: iconst_0
1017: invokevirtual #97
1020: ldc           #57
1022: invokevirtual #58
1025: invokevirtual #61
1028: iload         43
1030: ifne          1037
1033: iconst_1
1034: goto          1038
1037: iconst_0
1038: invokestatic  #62
1041: new           #55
1044: dup
1045: invokespecial #56
1048: ldc           #57
1050: invokevirtual #58
1053: aload         44
1055: invokevirtual #58
1058: ldc           #238
1060: invokevirtual #58
1063: invokevirtual #61
1066: aload         44
1068: ldc           #239
1070: invokestatic  #96
1073: new           #55
1076: dup
1077: invokespecial #56
1080: ldc           #57
1082: invokevirtual #58
1085: iload         46
1087: invokevirtual #59
1090: ldc           #60
1092: invokevirtual #58
1095: bipush        -36
1097: invokevirtual #59
1100: ldc           #57
1102: invokevirtual #58
1105: invokevirtual #61
1108: iload         46
1110: bipush        -36
1112: if_icmpne     1119
1115: iconst_1
1116: goto          1120
1119: iconst_0
1120: invokestatic  #62
1123: aload         47
1125: invokestatic  #10
1128: aload         48
1130: invokestatic  #10
1133: new           #55
1136: dup
1137: invokespecial #56
1140: ldc           #57
1142: invokevirtual #58
1145: iload         49
1147: invokevirtual #59
1150: ldc           #60
1152: invokevirtual #58
1155: iconst_0
1156: invokevirtual #59
1159: ldc           #57
1161: invokevirtual #58
1164: invokevirtual #61
1167: iload         49
1169: ifne          1176
1172: iconst_1
1173: goto          1177
1176: iconst_0
1177: invokestatic  #62
1180: aload         50
1182: invokestatic  #10
1185: aload         51
1187: invokestatic  #10
1190: aload         52
1192: invokestatic  #10
1195: aload         53
1197: invokestatic  #10
1200: aload         55
1202: invokestatic  #10
1205: new           #55
1208: dup
1209: invokespecial #56
1212: ldc           #57
1214: invokevirtual #58
1217: iload         56
1219: invokevirtual #97
1222: ldc           #60
1224: invokevirtual #58
1227: iconst_0
1228: invokevirtual #97
1231: ldc           #57
1233: invokevirtual #58
1236: invokevirtual #61
1239: iload         56
1241: ifne          1248
1244: iconst_1
1245: goto          1249
1248: iconst_0
1249: invokestatic  #62
1252: new           #55
1255: dup
1256: invokespecial #56
1259: ldc           #57
1261: invokevirtual #58
1264: aload         57
1266: invokevirtual #58
1269: ldc           #238
1271: invokevirtual #58
1274: invokevirtual #61
1277: aload         57
1279: ldc           #239
1281: invokestatic  #96
1284: aload         58
1286: invokestatic  #10
1289: new           #55
1292: dup
1293: invokespecial #56
1296: ldc           #57
1298: invokevirtual #58
1301: iload         60
1303: invokevirtual #59
1306: ldc           #60
1308: invokevirtual #58
1311: ldc_w         #479
1314: invokevirtual #59
1317: ldc           #57
1319: invokevirtual #58
1322: invokevirtual #61
1325: iload         60
1327: ldc_w         #479
1330: if_icmpne     1337
1333: iconst_1
1334: goto          1338
1337: iconst_0
1338: invokestatic  #62
1341: new           #55
1344: dup
1345: invokespecial #56
1348: ldc           #57
1350: invokevirtual #58
1353: iload         61
1355: invokevirtual #97
1358: ldc           #60
1360: invokevirtual #58
1363: iconst_0
1364: invokevirtual #97
1367: ldc           #57
1369: invokevirtual #58
1372: invokevirtual #61
1375: iload         61
1377: ifne          1384
1380: iconst_1
1381: goto          1385
1384: iconst_0
1385: invokestatic  #62
1388: aload         62
1390: invokestatic  #10
1393: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test322
Start line: 12760
End line: 12778
Method source code: 
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatterBuilder6.toPrinter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodPrinter8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #920
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         6
74: invokevirtual #45
77: astore        8
79: aload_2
80: invokestatic  #10
83: aload_3
84: invokestatic  #10
87: aload         4
89: invokestatic  #10
92: aload         5
94: invokestatic  #10
97: aload         6
99: invokestatic  #10
102: aload         7
104: invokestatic  #10
107: aload         8
109: invokestatic  #10
112: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test323
Start line: 12781
End line: 12803
Method source code: 
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder4.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = periodFormatterBuilder10.appendSeparator("-81", "-548886");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder10.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #921
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         4
71: invokevirtual #185
74: astore        7
76: aload         4
78: invokevirtual #320
81: astore        8
83: aload         8
85: ldc_w         #612
88: ldc_w         #922
91: invokevirtual #20
94: astore        9
96: aload         8
98: invokevirtual #72
101: astore        10
103: aload_2
104: invokestatic  #10
107: aload_3
108: invokestatic  #10
111: aload         4
113: invokestatic  #10
116: aload         5
118: invokestatic  #10
121: aload         6
123: invokestatic  #10
126: aload         7
128: invokestatic  #10
131: aload         8
133: invokestatic  #10
136: aload         9
138: invokestatic  #10
141: aload         10
143: invokestatic  #10
146: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test324
Start line: 12806
End line: 12890
Method source code: 
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendSuffix("35", "");
        org.joda.time.format.PeriodParser periodParser9 = periodFormatterBuilder4.toParser();
        org.joda.time.chrono.GregorianChronology gregorianChronology10 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField11 = gregorianChronology10.minuteOfHour();
        org.joda.time.Period period13 = org.joda.time.Period.millis(1);
        int int14 = period13.getMonths();
        int int15 = period13.size();
        org.joda.time.Period period17 = period13.withDays((int) (byte) 100);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = period18.get(durationFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period25 = period18.withField(durationFieldType23, 8);
        java.lang.String str26 = durationFieldType23.getName();
        org.joda.time.Period period28 = period13.withField(durationFieldType23, 1);
        org.joda.time.Period period30 = period13.minusDays(10);
        long long33 = gregorianChronology10.add((org.joda.time.ReadablePeriod) period13, (long) (short) 100, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField34 = gregorianChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = gregorianChronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology10.hourOfDay();
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        int int38 = period37.getHours();
        org.joda.time.Period period40 = period37.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod41 = period40.toMutablePeriod();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType45 = org.joda.time.DateTimeUtils.getPeriodType(periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period(100L, (long) (short) -1, periodType44);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.weeks();
        boolean boolean48 = periodType44.isSupported(durationFieldType47);
        mutablePeriod41.add(durationFieldType47, (int) (byte) 100);
        java.lang.String str51 = mutablePeriod41.toString();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.years();
        mutablePeriod41.set(durationFieldType52, (int) (short) -1);
        int[] intArray56 = gregorianChronology10.get((org.joda.time.ReadablePeriod) mutablePeriod41, 0L);
        java.util.Locale locale59 = null;
        int int60 = periodParser9.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod41, "America/Los_Angeles", 2836, locale59);
        mutablePeriod41.setSeconds((-28596198));
        mutablePeriod41.addSeconds(0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodParser9);
        org.junit.Assert.assertNotNull(gregorianChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "seconds" + "'", str26, "seconds");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 200L + "'", long33 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "P100W" + "'", str51, "P100W");
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-2837) + "'", int60 == (-2837));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #923
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: aload         4
60: ldc           #73
62: ldc           #74
64: invokevirtual #30
67: astore        6
69: aload         4
71: invokevirtual #142
74: astore        7
76: invokestatic  #110
79: astore        8
81: aload         8
83: invokevirtual #111
86: astore        9
88: iconst_1
89: invokestatic  #168
92: astore        10
94: aload         10
96: invokevirtual #169
99: istore        11
101: aload         10
103: invokevirtual #170
106: istore        12
108: aload         10
110: bipush        100
112: invokevirtual #200
115: astore        13
117: getstatic     #8
120: astore        14
122: aload         14
124: iconst_m1
125: invokevirtual #9
128: astore        15
130: aconst_null
131: astore        16
133: aload         14
135: aload         16
137: invokevirtual #201
140: istore        17
142: invokestatic  #202
145: astore        18
147: aload         14
149: aload         18
151: bipush        8
153: invokevirtual #203
156: astore        19
158: aload         18
160: invokevirtual #204
163: astore        20
165: aload         10
167: aload         18
169: iconst_1
170: invokevirtual #203
173: astore        21
175: aload         10
177: bipush        10
179: invokevirtual #85
182: astore        22
184: aload         8
186: aload         10
188: ldc2_w        #79
191: bipush        100
193: invokevirtual #227
196: lstore        23
198: aload         8
200: invokevirtual #382
203: astore        25
205: aload         8
207: invokevirtual #924
210: astore        26
212: aload         8
214: invokevirtual #382
217: astore        27
219: getstatic     #8
222: astore        28
224: aload         28
226: invokevirtual #216
229: istore        29
231: aload         28
233: iconst_0
234: invokevirtual #200
237: astore        30
239: aload         30
241: invokevirtual #205
244: astore        31
246: invokestatic  #171
249: astore        32
251: aload         32
253: invokestatic  #172
256: astore        33
258: new           #46
261: dup
262: ldc2_w        #79
265: ldc2_w        #173
268: aload         32
270: invokespecial #175
273: astore        34
275: invokestatic  #176
278: astore        35
280: aload         32
282: aload         35
284: invokevirtual #177
287: istore        36
289: aload         31
291: aload         35
293: bipush        100
295: invokevirtual #226
298: aload         31
300: invokevirtual #235
303: astore        37
305: invokestatic  #300
308: astore        38
310: aload         31
312: aload         38
314: iconst_m1
315: invokevirtual #301
318: aload         8
320: aload         31
322: lconst_0
323: invokevirtual #925
326: astore        39
328: aconst_null
329: astore        40
331: aload         7
333: aload         31
335: ldc           #19
337: sipush        2836
340: aload         40
342: invokeinterface #231,  5
347: istore        41
349: aload         31
351: ldc_w         #926
354: invokevirtual #366
357: aload         31
359: iconst_0
360: invokevirtual #311
363: aload_2
364: invokestatic  #10
367: aload_3
368: invokestatic  #10
371: aload         4
373: invokestatic  #10
376: aload         5
378: invokestatic  #10
381: aload         6
383: invokestatic  #10
386: aload         7
388: invokestatic  #10
391: aload         8
393: invokestatic  #10
396: aload         9
398: invokestatic  #10
401: aload         10
403: invokestatic  #10
406: new           #55
409: dup
410: invokespecial #56
413: ldc           #57
415: invokevirtual #58
418: iload         11
420: invokevirtual #59
423: ldc           #60
425: invokevirtual #58
428: iconst_0
429: invokevirtual #59
432: ldc           #57
434: invokevirtual #58
437: invokevirtual #61
440: iload         11
442: ifne          449
445: iconst_1
446: goto          450
449: iconst_0
450: invokestatic  #62
453: new           #55
456: dup
457: invokespecial #56
460: ldc           #57
462: invokevirtual #58
465: iload         12
467: invokevirtual #59
470: ldc           #60
472: invokevirtual #58
475: bipush        8
477: invokevirtual #59
480: ldc           #57
482: invokevirtual #58
485: invokevirtual #61
488: iload         12
490: bipush        8
492: if_icmpne     499
495: iconst_1
496: goto          500
499: iconst_0
500: invokestatic  #62
503: aload         13
505: invokestatic  #10
508: aload         14
510: invokestatic  #10
513: aload         15
515: invokestatic  #10
518: new           #55
521: dup
522: invokespecial #56
525: ldc           #57
527: invokevirtual #58
530: iload         17
532: invokevirtual #59
535: ldc           #60
537: invokevirtual #58
540: iconst_0
541: invokevirtual #59
544: ldc           #57
546: invokevirtual #58
549: invokevirtual #61
552: iload         17
554: ifne          561
557: iconst_1
558: goto          562
561: iconst_0
562: invokestatic  #62
565: aload         18
567: invokestatic  #10
570: aload         19
572: invokestatic  #10
575: new           #55
578: dup
579: invokespecial #56
582: ldc           #57
584: invokevirtual #58
587: aload         20
589: invokevirtual #58
592: ldc           #209
594: invokevirtual #58
597: invokevirtual #61
600: aload         20
602: ldc           #210
604: invokestatic  #96
607: aload         21
609: invokestatic  #10
612: aload         22
614: invokestatic  #10
617: new           #55
620: dup
621: invokespecial #56
624: ldc           #57
626: invokevirtual #58
629: lload         23
631: invokevirtual #386
634: ldc           #60
636: invokevirtual #58
639: ldc2_w        #387
642: invokevirtual #386
645: ldc           #57
647: invokevirtual #58
650: invokevirtual #61
653: lload         23
655: ldc2_w        #387
658: lcmp
659: ifne          666
662: iconst_1
663: goto          667
666: iconst_0
667: invokestatic  #62
670: aload         25
672: invokestatic  #10
675: aload         26
677: invokestatic  #10
680: aload         27
682: invokestatic  #10
685: aload         28
687: invokestatic  #10
690: new           #55
693: dup
694: invokespecial #56
697: ldc           #57
699: invokevirtual #58
702: iload         29
704: invokevirtual #59
707: ldc           #60
709: invokevirtual #58
712: iconst_0
713: invokevirtual #59
716: ldc           #57
718: invokevirtual #58
721: invokevirtual #61
724: iload         29
726: ifne          733
729: iconst_1
730: goto          734
733: iconst_0
734: invokestatic  #62
737: aload         30
739: invokestatic  #10
742: aload         31
744: invokestatic  #10
747: aload         32
749: invokestatic  #10
752: aload         33
754: invokestatic  #10
757: aload         35
759: invokestatic  #10
762: new           #55
765: dup
766: invokespecial #56
769: ldc           #57
771: invokevirtual #58
774: iload         36
776: invokevirtual #97
779: ldc           #60
781: invokevirtual #58
784: iconst_0
785: invokevirtual #97
788: ldc           #57
790: invokevirtual #58
793: invokevirtual #61
796: iload         36
798: ifne          805
801: iconst_1
802: goto          806
805: iconst_0
806: invokestatic  #62
809: new           #55
812: dup
813: invokespecial #56
816: ldc           #57
818: invokevirtual #58
821: aload         37
823: invokevirtual #58
826: ldc           #238
828: invokevirtual #58
831: invokevirtual #61
834: aload         37
836: ldc           #239
838: invokestatic  #96
841: aload         38
843: invokestatic  #10
846: aload         39
848: invokestatic  #10
851: aload         39
853: invokestatic  #127
856: ldc_w         #370
859: invokestatic  #129
862: new           #55
865: dup
866: invokespecial #56
869: ldc           #57
871: invokevirtual #58
874: iload         41
876: invokevirtual #59
879: ldc           #60
881: invokevirtual #58
884: sipush        -2837
887: invokevirtual #59
890: ldc           #57
892: invokevirtual #58
895: invokevirtual #61
898: iload         41
900: sipush        -2837
903: if_icmpne     910
906: iconst_1
907: goto          911
910: iconst_0
911: invokestatic  #62
914: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test325
Start line: 12893
End line: 12905
Method source code: 
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.maximumParsedDigits(7);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendPrefix("2024-05-15T22:13:16.534+10:52/2024-05-15T22:13:16.534+10:52");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #927
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: bipush        7
48: invokevirtual #213
51: astore        4
53: aload         4
55: ldc_w         #928
58: invokevirtual #196
61: astore        5
63: aload_2
64: invokestatic  #10
67: aload_3
68: invokestatic  #10
71: aload         4
73: invokestatic  #10
76: aload         5
78: invokestatic  #10
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test326
Start line: 12908
End line: 12996
Method source code: 
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        int int45 = period44.getHours();
        org.joda.time.Period period47 = period44.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        mutablePeriod48.setWeeks((-28800000));
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology53);
        int int55 = period54.getMonths();
        java.lang.String str56 = period54.toString();
        org.joda.time.Period period58 = period54.plusHours(0);
        mutablePeriod48.setPeriod((org.joda.time.ReadablePeriod) period54);
        mutablePeriod48.clear();
        int int63 = periodFormatter40.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod48, "", 787);
        org.joda.time.format.PeriodPrinter periodPrinter64 = periodFormatter40.getPrinter();
        org.joda.time.format.PeriodParser periodParser65 = null;
        org.joda.time.format.PeriodFormatter periodFormatter66 = new org.joda.time.format.PeriodFormatter(periodPrinter64, periodParser65);
        org.joda.time.PeriodType periodType67 = periodFormatter66.getParseType();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT-0.090S" + "'", str56, "PT-0.090S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-788) + "'", int63 == (-788));
        org.junit.Assert.assertNotNull(periodPrinter64);
        org.junit.Assert.assertNull(periodType67);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #929
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: getstatic     #8
275: astore        32
277: aload         32
279: invokevirtual #216
282: istore        33
284: aload         32
286: iconst_0
287: invokevirtual #200
290: astore        34
292: aload         34
294: invokevirtual #205
297: astore        35
299: aload         35
301: ldc           #217
303: invokevirtual #207
306: aconst_null
307: astore        36
309: new           #46
312: dup
313: ldc2_w        #79
316: ldc2_w        #81
319: aload         36
321: invokespecial #83
324: astore        37
326: aload         37
328: invokevirtual #169
331: istore        38
333: aload         37
335: invokevirtual #84
338: astore        39
340: aload         37
342: iconst_0
343: invokevirtual #218
346: astore        40
348: aload         35
350: aload         37
352: invokevirtual #219
355: aload         35
357: invokevirtual #457
360: aload         28
362: aload         35
364: ldc           #74
366: sipush        787
369: invokevirtual #237
372: istore        41
374: aload         28
376: invokevirtual #90
379: astore        42
381: aconst_null
382: astore        43
384: new           #164
387: dup
388: aload         42
390: aload         43
392: invokespecial #165
395: astore        44
397: aload         44
399: invokevirtual #350
402: astore        45
404: aload_1
405: invokestatic  #10
408: new           #55
411: dup
412: invokespecial #56
415: ldc           #57
417: invokevirtual #58
420: iload_2
421: invokevirtual #59
424: ldc           #60
426: invokevirtual #58
429: iconst_0
430: invokevirtual #59
433: ldc           #57
435: invokevirtual #58
438: invokevirtual #61
441: iload_2
442: ifne          449
445: iconst_1
446: goto          450
449: iconst_0
450: invokestatic  #62
453: aload_3
454: invokestatic  #10
457: aload         4
459: invokestatic  #10
462: new           #55
465: dup
466: invokespecial #56
469: ldc           #57
471: invokevirtual #58
474: iload         7
476: invokevirtual #59
479: ldc           #60
481: invokevirtual #58
484: iconst_0
485: invokevirtual #59
488: ldc           #57
490: invokevirtual #58
493: invokevirtual #61
496: iload         7
498: ifne          505
501: iconst_1
502: goto          506
505: iconst_0
506: invokestatic  #62
509: new           #55
512: dup
513: invokespecial #56
516: ldc           #57
518: invokevirtual #58
521: aload         8
523: invokevirtual #58
526: ldc           #94
528: invokevirtual #58
531: invokevirtual #61
534: aload         8
536: ldc           #95
538: invokestatic  #96
541: aload         9
543: invokestatic  #10
546: aload         10
548: invokestatic  #10
551: aload         11
553: invokestatic  #10
556: aload         13
558: invokestatic  #10
561: aload         14
563: invokestatic  #10
566: aload         15
568: invokestatic  #10
571: aload         16
573: invokestatic  #10
576: aload         18
578: invokestatic  #10
581: new           #55
584: dup
585: invokespecial #56
588: ldc           #57
590: invokevirtual #58
593: iload         19
595: invokevirtual #97
598: ldc           #60
600: invokevirtual #58
603: iconst_1
604: invokevirtual #97
607: ldc           #57
609: invokevirtual #58
612: invokevirtual #61
615: iload         19
617: iconst_1
618: if_icmpne     625
621: iconst_1
622: goto          626
625: iconst_0
626: invokestatic  #62
629: aload         21
631: invokestatic  #10
634: aload         22
636: invokestatic  #10
639: aload         23
641: invokestatic  #10
644: aload         24
646: invokestatic  #10
649: aload         25
651: invokestatic  #10
654: aload         26
656: invokestatic  #10
659: aload         28
661: invokestatic  #10
664: aload         29
666: invokestatic  #10
669: aload         30
671: invokestatic  #10
674: new           #55
677: dup
678: invokespecial #56
681: ldc           #57
683: invokevirtual #58
686: aload         31
688: invokevirtual #58
691: ldc_w         #286
694: invokevirtual #58
697: invokevirtual #61
700: aload         31
702: ldc           #143
704: invokestatic  #96
707: aload         32
709: invokestatic  #10
712: new           #55
715: dup
716: invokespecial #56
719: ldc           #57
721: invokevirtual #58
724: iload         33
726: invokevirtual #59
729: ldc           #60
731: invokevirtual #58
734: iconst_0
735: invokevirtual #59
738: ldc           #57
740: invokevirtual #58
743: invokevirtual #61
746: iload         33
748: ifne          755
751: iconst_1
752: goto          756
755: iconst_0
756: invokestatic  #62
759: aload         34
761: invokestatic  #10
764: aload         35
766: invokestatic  #10
769: new           #55
772: dup
773: invokespecial #56
776: ldc           #57
778: invokevirtual #58
781: iload         38
783: invokevirtual #59
786: ldc           #60
788: invokevirtual #58
791: iconst_0
792: invokevirtual #59
795: ldc           #57
797: invokevirtual #58
800: invokevirtual #61
803: iload         38
805: ifne          812
808: iconst_1
809: goto          813
812: iconst_0
813: invokestatic  #62
816: new           #55
819: dup
820: invokespecial #56
823: ldc           #57
825: invokevirtual #58
828: aload         39
830: invokevirtual #58
833: ldc           #94
835: invokevirtual #58
838: invokevirtual #61
841: aload         39
843: ldc           #95
845: invokestatic  #96
848: aload         40
850: invokestatic  #10
853: new           #55
856: dup
857: invokespecial #56
860: ldc           #57
862: invokevirtual #58
865: iload         41
867: invokevirtual #59
870: ldc           #60
872: invokevirtual #58
875: sipush        -788
878: invokevirtual #59
881: ldc           #57
883: invokevirtual #58
886: invokevirtual #61
889: iload         41
891: sipush        -788
894: if_icmpne     901
897: iconst_1
898: goto          902
901: iconst_0
902: invokestatic  #62
905: aload         42
907: invokestatic  #10
910: aload         45
912: invokestatic  #354
915: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test327
Start line: 12999
End line: 13019
Method source code: 
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendLiteral("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendLiteral("DurationField[weeks]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.appendSeparatorIfFieldsBefore("P0000-W00-00T00:00:00");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #930
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload_1
64: ldc           #74
66: invokevirtual #28
69: astore        7
71: aload         7
73: ldc_w         #491
76: invokevirtual #28
79: astore        8
81: aload         8
83: ldc_w         #828
86: invokevirtual #67
89: astore        9
91: aload_2
92: invokestatic  #10
95: aload_3
96: invokestatic  #10
99: aload         4
101: invokestatic  #10
104: aload         5
106: invokestatic  #10
109: aload         6
111: invokestatic  #10
114: aload         7
116: invokestatic  #10
119: aload         8
121: invokestatic  #10
124: aload         9
126: invokestatic  #10
129: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test328
Start line: 13022
End line: 13060
Method source code: 
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        java.util.Locale locale22 = null;
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter20.withLocale(locale22);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatter23);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #931
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aconst_null
156: astore        19
158: aload         17
160: aload         19
162: invokevirtual #88
165: astore        20
167: aload_2
168: invokestatic  #10
171: aload_3
172: invokestatic  #10
175: aload         4
177: invokestatic  #10
180: aload         5
182: invokestatic  #10
185: aload         7
187: invokestatic  #10
190: new           #55
193: dup
194: invokespecial #56
197: ldc           #57
199: invokevirtual #58
202: iload         8
204: invokevirtual #97
207: ldc           #60
209: invokevirtual #58
212: iconst_1
213: invokevirtual #97
216: ldc           #57
218: invokevirtual #58
221: invokevirtual #61
224: iload         8
226: iconst_1
227: if_icmpne     234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #62
238: aload         10
240: invokestatic  #10
243: aload         11
245: invokestatic  #10
248: aload         12
250: invokestatic  #10
253: aload         13
255: invokestatic  #10
258: aload         14
260: invokestatic  #10
263: aload         15
265: invokestatic  #10
268: aload         17
270: invokestatic  #10
273: aload         18
275: invokestatic  #10
278: aload         20
280: invokestatic  #10
283: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test329
Start line: 13063
End line: 13171
Method source code: 
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatterBuilder7.toPrinter();
        org.joda.time.Period period10 = org.joda.time.Period.millis(1);
        int int11 = period10.getMonths();
        int int12 = period10.size();
        org.joda.time.Period period14 = period10.withDays((int) (byte) 100);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType18 = null;
        int int19 = period15.get(durationFieldType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period22 = period15.withField(durationFieldType20, 8);
        java.lang.String str23 = durationFieldType20.getName();
        org.joda.time.Period period25 = period10.withField(durationFieldType20, 1);
        org.joda.time.Period period27 = period10.minusDays(10);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Chronology chronology31 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant29, readableInstant30);
        org.joda.time.Chronology chronology32 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekyear();
        boolean boolean34 = durationFieldType28.isSupported(chronology31);
        boolean boolean35 = period27.isSupported(durationFieldType28);
        org.joda.time.Period period37 = period27.minusMinutes(0);
        org.joda.time.Period period39 = org.joda.time.Period.millis(1);
        int int40 = period39.getMonths();
        int int41 = period39.size();
        org.joda.time.Period period43 = period39.withDays((int) (byte) 100);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period44.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = period44.get(durationFieldType47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period51 = period44.withField(durationFieldType49, 8);
        java.lang.String str52 = durationFieldType49.getName();
        org.joda.time.Period period54 = period39.withField(durationFieldType49, 1);
        org.joda.time.Period period56 = period39.minusDays(10);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        org.joda.time.Period period59 = org.joda.time.Period.millis(1);
        int int60 = period59.getMonths();
        int int61 = period59.size();
        org.joda.time.Period period63 = period59.withDays((int) (byte) 100);
        mutablePeriod57.add((org.joda.time.ReadablePeriod) period59);
        org.joda.time.Period period66 = period59.withDays((int) '4');
        org.joda.time.Period period68 = period59.minusHours((int) (short) 100);
        org.joda.time.Period period69 = period27.withFields((org.joda.time.ReadablePeriod) period59);
        int int70 = period69.getMonths();
        org.joda.time.Period period72 = period69.withWeeks((-8));
        java.util.Locale locale73 = null;
        int int74 = periodPrinter8.calculatePrintedLength((org.joda.time.ReadablePeriod) period69, locale73);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodPrinter8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "seconds" + "'", str23, "seconds");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "seconds" + "'", str52, "seconds");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 66 + "'", int74 == 66);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #932
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         7
74: invokevirtual #45
77: astore        8
79: iconst_1
80: invokestatic  #168
83: astore        9
85: aload         9
87: invokevirtual #169
90: istore        10
92: aload         9
94: invokevirtual #170
97: istore        11
99: aload         9
101: bipush        100
103: invokevirtual #200
106: astore        12
108: getstatic     #8
111: astore        13
113: aload         13
115: iconst_m1
116: invokevirtual #9
119: astore        14
121: aconst_null
122: astore        15
124: aload         13
126: aload         15
128: invokevirtual #201
131: istore        16
133: invokestatic  #202
136: astore        17
138: aload         13
140: aload         17
142: bipush        8
144: invokevirtual #203
147: astore        18
149: aload         17
151: invokevirtual #204
154: astore        19
156: aload         9
158: aload         17
160: iconst_1
161: invokevirtual #203
164: astore        20
166: aload         9
168: bipush        10
170: invokevirtual #85
173: astore        21
175: invokestatic  #202
178: astore        22
180: aconst_null
181: astore        23
183: aconst_null
184: astore        24
186: aload         23
188: aload         24
190: invokestatic  #358
193: astore        25
195: aload         25
197: invokevirtual #359
200: astore        26
202: aload         25
204: invokevirtual #654
207: astore        27
209: aload         22
211: aload         25
213: invokevirtual #655
216: istore        28
218: aload         21
220: aload         22
222: invokevirtual #656
225: istore        29
227: aload         21
229: iconst_0
230: invokevirtual #522
233: astore        30
235: iconst_1
236: invokestatic  #168
239: astore        31
241: aload         31
243: invokevirtual #169
246: istore        32
248: aload         31
250: invokevirtual #170
253: istore        33
255: aload         31
257: bipush        100
259: invokevirtual #200
262: astore        34
264: getstatic     #8
267: astore        35
269: aload         35
271: iconst_m1
272: invokevirtual #9
275: astore        36
277: aconst_null
278: astore        37
280: aload         35
282: aload         37
284: invokevirtual #201
287: istore        38
289: invokestatic  #202
292: astore        39
294: aload         35
296: aload         39
298: bipush        8
300: invokevirtual #203
303: astore        40
305: aload         39
307: invokevirtual #204
310: astore        41
312: aload         31
314: aload         39
316: iconst_1
317: invokevirtual #203
320: astore        42
322: aload         31
324: bipush        10
326: invokevirtual #85
329: astore        43
331: aload         43
333: invokevirtual #205
336: astore        44
338: iconst_1
339: invokestatic  #168
342: astore        45
344: aload         45
346: invokevirtual #169
349: istore        46
351: aload         45
353: invokevirtual #170
356: istore        47
358: aload         45
360: bipush        100
362: invokevirtual #200
365: astore        48
367: aload         44
369: aload         45
371: invokevirtual #933
374: aload         45
376: bipush        52
378: invokevirtual #200
381: astore        49
383: aload         45
385: bipush        100
387: invokevirtual #49
390: astore        50
392: aload         21
394: aload         45
396: invokevirtual #364
399: astore        51
401: aload         51
403: invokevirtual #169
406: istore        52
408: aload         51
410: bipush        -8
412: invokevirtual #508
415: astore        53
417: aconst_null
418: astore        54
420: aload         8
422: aload         51
424: aload         54
426: invokeinterface #92,  3
431: istore        55
433: aload_2
434: invokestatic  #10
437: aload_3
438: invokestatic  #10
441: aload         4
443: invokestatic  #10
446: aload         5
448: invokestatic  #10
451: aload         6
453: invokestatic  #10
456: aload         7
458: invokestatic  #10
461: aload         8
463: invokestatic  #10
466: aload         9
468: invokestatic  #10
471: new           #55
474: dup
475: invokespecial #56
478: ldc           #57
480: invokevirtual #58
483: iload         10
485: invokevirtual #59
488: ldc           #60
490: invokevirtual #58
493: iconst_0
494: invokevirtual #59
497: ldc           #57
499: invokevirtual #58
502: invokevirtual #61
505: iload         10
507: ifne          514
510: iconst_1
511: goto          515
514: iconst_0
515: invokestatic  #62
518: new           #55
521: dup
522: invokespecial #56
525: ldc           #57
527: invokevirtual #58
530: iload         11
532: invokevirtual #59
535: ldc           #60
537: invokevirtual #58
540: bipush        8
542: invokevirtual #59
545: ldc           #57
547: invokevirtual #58
550: invokevirtual #61
553: iload         11
555: bipush        8
557: if_icmpne     564
560: iconst_1
561: goto          565
564: iconst_0
565: invokestatic  #62
568: aload         12
570: invokestatic  #10
573: aload         13
575: invokestatic  #10
578: aload         14
580: invokestatic  #10
583: new           #55
586: dup
587: invokespecial #56
590: ldc           #57
592: invokevirtual #58
595: iload         16
597: invokevirtual #59
600: ldc           #60
602: invokevirtual #58
605: iconst_0
606: invokevirtual #59
609: ldc           #57
611: invokevirtual #58
614: invokevirtual #61
617: iload         16
619: ifne          626
622: iconst_1
623: goto          627
626: iconst_0
627: invokestatic  #62
630: aload         17
632: invokestatic  #10
635: aload         18
637: invokestatic  #10
640: new           #55
643: dup
644: invokespecial #56
647: ldc           #57
649: invokevirtual #58
652: aload         19
654: invokevirtual #58
657: ldc           #209
659: invokevirtual #58
662: invokevirtual #61
665: aload         19
667: ldc           #210
669: invokestatic  #96
672: aload         20
674: invokestatic  #10
677: aload         21
679: invokestatic  #10
682: aload         22
684: invokestatic  #10
687: aload         25
689: invokestatic  #10
692: aload         26
694: invokestatic  #10
697: aload         27
699: invokestatic  #10
702: new           #55
705: dup
706: invokespecial #56
709: ldc           #57
711: invokevirtual #58
714: iload         28
716: invokevirtual #97
719: ldc           #60
721: invokevirtual #58
724: iconst_1
725: invokevirtual #97
728: ldc           #57
730: invokevirtual #58
733: invokevirtual #61
736: iload         28
738: iconst_1
739: if_icmpne     746
742: iconst_1
743: goto          747
746: iconst_0
747: invokestatic  #62
750: new           #55
753: dup
754: invokespecial #56
757: ldc           #57
759: invokevirtual #58
762: iload         29
764: invokevirtual #97
767: ldc           #60
769: invokevirtual #58
772: iconst_1
773: invokevirtual #97
776: ldc           #57
778: invokevirtual #58
781: invokevirtual #61
784: iload         29
786: iconst_1
787: if_icmpne     794
790: iconst_1
791: goto          795
794: iconst_0
795: invokestatic  #62
798: aload         30
800: invokestatic  #10
803: aload         31
805: invokestatic  #10
808: new           #55
811: dup
812: invokespecial #56
815: ldc           #57
817: invokevirtual #58
820: iload         32
822: invokevirtual #59
825: ldc           #60
827: invokevirtual #58
830: iconst_0
831: invokevirtual #59
834: ldc           #57
836: invokevirtual #58
839: invokevirtual #61
842: iload         32
844: ifne          851
847: iconst_1
848: goto          852
851: iconst_0
852: invokestatic  #62
855: new           #55
858: dup
859: invokespecial #56
862: ldc           #57
864: invokevirtual #58
867: iload         33
869: invokevirtual #59
872: ldc           #60
874: invokevirtual #58
877: bipush        8
879: invokevirtual #59
882: ldc           #57
884: invokevirtual #58
887: invokevirtual #61
890: iload         33
892: bipush        8
894: if_icmpne     901
897: iconst_1
898: goto          902
901: iconst_0
902: invokestatic  #62
905: aload         34
907: invokestatic  #10
910: aload         35
912: invokestatic  #10
915: aload         36
917: invokestatic  #10
920: new           #55
923: dup
924: invokespecial #56
927: ldc           #57
929: invokevirtual #58
932: iload         38
934: invokevirtual #59
937: ldc           #60
939: invokevirtual #58
942: iconst_0
943: invokevirtual #59
946: ldc           #57
948: invokevirtual #58
951: invokevirtual #61
954: iload         38
956: ifne          963
959: iconst_1
960: goto          964
963: iconst_0
964: invokestatic  #62
967: aload         39
969: invokestatic  #10
972: aload         40
974: invokestatic  #10
977: new           #55
980: dup
981: invokespecial #56
984: ldc           #57
986: invokevirtual #58
989: aload         41
991: invokevirtual #58
994: ldc           #209
996: invokevirtual #58
999: invokevirtual #61
1002: aload         41
1004: ldc           #210
1006: invokestatic  #96
1009: aload         42
1011: invokestatic  #10
1014: aload         43
1016: invokestatic  #10
1019: aload         44
1021: invokestatic  #10
1024: aload         45
1026: invokestatic  #10
1029: new           #55
1032: dup
1033: invokespecial #56
1036: ldc           #57
1038: invokevirtual #58
1041: iload         46
1043: invokevirtual #59
1046: ldc           #60
1048: invokevirtual #58
1051: iconst_0
1052: invokevirtual #59
1055: ldc           #57
1057: invokevirtual #58
1060: invokevirtual #61
1063: iload         46
1065: ifne          1072
1068: iconst_1
1069: goto          1073
1072: iconst_0
1073: invokestatic  #62
1076: new           #55
1079: dup
1080: invokespecial #56
1083: ldc           #57
1085: invokevirtual #58
1088: iload         47
1090: invokevirtual #59
1093: ldc           #60
1095: invokevirtual #58
1098: bipush        8
1100: invokevirtual #59
1103: ldc           #57
1105: invokevirtual #58
1108: invokevirtual #61
1111: iload         47
1113: bipush        8
1115: if_icmpne     1122
1118: iconst_1
1119: goto          1123
1122: iconst_0
1123: invokestatic  #62
1126: aload         48
1128: invokestatic  #10
1131: aload         49
1133: invokestatic  #10
1136: aload         50
1138: invokestatic  #10
1141: aload         51
1143: invokestatic  #10
1146: new           #55
1149: dup
1150: invokespecial #56
1153: ldc           #57
1155: invokevirtual #58
1158: iload         52
1160: invokevirtual #59
1163: ldc           #60
1165: invokevirtual #58
1168: iconst_0
1169: invokevirtual #59
1172: ldc           #57
1174: invokevirtual #58
1177: invokevirtual #61
1180: iload         52
1182: ifne          1189
1185: iconst_1
1186: goto          1190
1189: iconst_0
1190: invokestatic  #62
1193: aload         53
1195: invokestatic  #10
1198: new           #55
1201: dup
1202: invokespecial #56
1205: ldc           #57
1207: invokevirtual #58
1210: iload         55
1212: invokevirtual #59
1215: ldc           #60
1217: invokevirtual #58
1220: bipush        66
1222: invokevirtual #59
1225: ldc           #57
1227: invokevirtual #58
1230: invokevirtual #61
1233: iload         55
1235: bipush        66
1237: if_icmpne     1244
1240: iconst_1
1241: goto          1245
1244: iconst_0
1245: invokestatic  #62
1248: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test330
Start line: 13174
End line: 13194
Method source code: 
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.maximumParsedDigits(23);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.printZeroAlways();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder11.appendDays();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #934
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         6
71: bipush        23
73: invokevirtual #213
76: astore        7
78: aload         7
80: invokevirtual #139
83: astore        8
85: aload         8
87: invokevirtual #71
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test331
Start line: 13197
End line: 13217
Method source code: 
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSuffix("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #935
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: ldc           #74
68: invokevirtual #132
71: astore        7
73: aload         7
75: ldc           #192
77: invokevirtual #17
80: astore        8
82: aload         7
84: invokevirtual #149
87: astore        9
89: aload_2
90: invokestatic  #10
93: aload_3
94: invokestatic  #10
97: aload         4
99: invokestatic  #10
102: aload         5
104: invokestatic  #10
107: aload         6
109: invokestatic  #10
112: aload         7
114: invokestatic  #10
117: aload         8
119: invokestatic  #10
122: aload         9
124: invokestatic  #10
127: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test332
Start line: 13220
End line: 13248
Method source code: 
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSuffix("");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSeparatorIfFieldsAfter("days");
        periodFormatterBuilder8.clear();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder8.appendSeparator("65687846-06-10T16:37:56.408+00:00:00.010/65687846-06-10T16:37:56.408+00:00:00.010", "8");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder14.appendSuffix("-292278993", "PT1.001S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No field to apply suffix to");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #936
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #76
62: astore        6
64: aload         5
66: ldc           #74
68: invokevirtual #132
71: astore        7
73: aload         7
75: ldc           #192
77: invokevirtual #17
80: astore        8
82: aload         7
84: invokevirtual #212
87: aload         7
89: ldc_w         #937
92: ldc_w         #294
95: invokevirtual #20
98: astore        9
100: aload         9
102: ldc_w         #938
105: ldc_w         #670
108: invokevirtual #30
111: astore        10
113: ldc           #31
115: invokestatic  #22
118: goto          123
121: astore        10
123: aload_2
124: invokestatic  #10
127: aload_3
128: invokestatic  #10
131: aload         4
133: invokestatic  #10
136: aload         5
138: invokestatic  #10
141: aload         6
143: invokestatic  #10
146: aload         7
148: invokestatic  #10
151: aload         8
153: invokestatic  #10
156: aload         9
158: invokestatic  #10
161: return
Exception table:
from    to  target type
100   118   121   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test333
Start line: 13251
End line: 13307
Method source code: 
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = org.joda.time.DateTimeUtils.getIntervalChronology(readableInstant0, readableInstant1);
        org.joda.time.Chronology chronology3 = chronology2.withUTC();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.yearOfCentury();
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeUtils.getZone(dateTimeZone6);
        org.joda.time.chrono.ZonedChronology zonedChronology8 = org.joda.time.chrono.ZonedChronology.getInstance(chronology3, dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = zonedChronology8.secondOfDay();
        java.lang.String str10 = zonedChronology8.toString();
        org.joda.time.DateTimeField dateTimeField11 = zonedChronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = zonedChronology8.millisOfSecond();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeUtils.getZone(dateTimeZone14);
        org.joda.time.tz.CachedDateTimeZone cachedDateTimeZone16 = org.joda.time.tz.CachedDateTimeZone.forZone(dateTimeZone15);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType18 = periodType17.withMonthsRemoved();
        boolean boolean19 = cachedDateTimeZone16.equals((java.lang.Object) periodType18);
        java.lang.String str21 = cachedDateTimeZone16.getNameKey((long) (short) 1);
        int int23 = cachedDateTimeZone16.getStandardOffset(32284799990L);
        long long25 = cachedDateTimeZone16.previousTransition(0L);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder26 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder26.appendSeconds();
        boolean boolean28 = cachedDateTimeZone16.equals((java.lang.Object) periodFormatterBuilder26);
        boolean boolean29 = cachedDateTimeZone16.isFixed();
        org.joda.time.Chronology chronology30 = zonedChronology8.withZone((org.joda.time.DateTimeZone) cachedDateTimeZone16);
        long long32 = cachedDateTimeZone16.previousTransition((long) 35064);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(zonedChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ZonedChronology[ISOChronology[UTC], GregorianChronology[UTC]]" + "'", str10, "ZonedChronology[ISOChronology[UTC], GregorianChronology[UTC]]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(cachedDateTimeZone16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DateTimeField[secondOfDay]" + "'", str21, "DateTimeField[secondOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 35064L + "'", long32 == 35064L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #939
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aconst_null
28: astore_2
29: aload_1
30: aload_2
31: invokestatic  #358
34: astore_3
35: aload_3
36: invokevirtual #359
39: astore        4
41: aload         4
43: invokevirtual #621
46: astore        5
48: aconst_null
49: astore        6
51: aload         6
53: invokestatic  #460
56: astore        7
58: aload         7
60: invokestatic  #461
63: astore        8
65: aload         4
67: aload         8
69: invokestatic  #622
72: astore        9
74: aload         9
76: invokevirtual #623
79: astore        10
81: aload         9
83: invokevirtual #624
86: astore        11
88: aload         9
90: invokevirtual #625
93: astore        12
95: aload         9
97: invokevirtual #626
100: astore        13
102: aconst_null
103: astore        14
105: aload         14
107: invokestatic  #460
110: astore        15
112: aload         15
114: invokestatic  #461
117: astore        16
119: aload         16
121: invokestatic  #462
124: astore        17
126: invokestatic  #463
129: astore        18
131: aload         18
133: invokevirtual #464
136: astore        19
138: aload         17
140: aload         19
142: invokevirtual #465
145: istore        20
147: aload         17
149: lconst_1
150: invokevirtual #466
153: astore        21
155: aload         17
157: ldc2_w        #467
160: invokevirtual #469
163: istore        22
165: aload         17
167: lconst_0
168: invokevirtual #470
171: lstore        23
173: new           #14
176: dup
177: invokespecial #15
180: astore        25
182: aload         25
184: invokevirtual #320
187: astore        26
189: aload         17
191: aload         25
193: invokevirtual #465
196: istore        27
198: aload         17
200: invokevirtual #627
203: istore        28
205: aload         9
207: aload         17
209: invokevirtual #628
212: astore        29
214: aload         17
216: ldc2_w        #940
219: invokevirtual #470
222: lstore        30
224: aload_3
225: invokestatic  #10
228: aload         4
230: invokestatic  #10
233: aload         5
235: invokestatic  #10
238: aload         7
240: invokestatic  #10
243: aload         8
245: invokestatic  #10
248: aload         9
250: invokestatic  #10
253: aload         10
255: invokestatic  #10
258: aload         12
260: invokestatic  #10
263: aload         13
265: invokestatic  #10
268: aload         15
270: invokestatic  #10
273: aload         16
275: invokestatic  #10
278: aload         17
280: invokestatic  #10
283: aload         18
285: invokestatic  #10
288: aload         19
290: invokestatic  #10
293: new           #55
296: dup
297: invokespecial #56
300: ldc           #57
302: invokevirtual #58
305: iload         20
307: invokevirtual #97
310: ldc           #60
312: invokevirtual #58
315: iconst_0
316: invokevirtual #97
319: ldc           #57
321: invokevirtual #58
324: invokevirtual #61
327: iload         20
329: ifne          336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #62
340: aload         26
342: invokestatic  #10
345: new           #55
348: dup
349: invokespecial #56
352: ldc           #57
354: invokevirtual #58
357: iload         27
359: invokevirtual #97
362: ldc           #60
364: invokevirtual #58
367: iconst_0
368: invokevirtual #97
371: ldc           #57
373: invokevirtual #58
376: invokevirtual #61
379: iload         27
381: ifne          388
384: iconst_1
385: goto          389
388: iconst_0
389: invokestatic  #62
392: aload         29
394: invokestatic  #10
397: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test334
Start line: 13310
End line: 13326
Method source code: 
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder4.appendLiteral("5258");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #942
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #245
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         4
60: ldc_w         #943
63: invokevirtual #28
66: astore        6
68: aload         6
70: invokevirtual #25
73: astore        7
75: aload_2
76: invokestatic  #10
79: aload_3
80: invokestatic  #10
83: aload         4
85: invokestatic  #10
88: aload         5
90: invokestatic  #10
93: aload         6
95: invokestatic  #10
98: aload         7
100: invokestatic  #10
103: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test335
Start line: 13329
End line: 13359
Method source code: 
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter10.withLocale(locale12);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder7.append(periodFormatter10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder14.appendPrefix("2024-05-15T22:13:24.591+10:52/2024-05-15T22:13:24.591+10:52");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #944
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #77
67: astore        7
69: invokestatic  #12
72: astore        8
74: aconst_null
75: astore        9
77: aload         8
79: aload         9
81: invokevirtual #88
84: astore        10
86: aload         10
88: invokevirtual #89
91: istore        11
93: aconst_null
94: astore        12
96: aload         10
98: aload         12
100: invokevirtual #88
103: astore        13
105: aload         7
107: aload         10
109: invokevirtual #118
112: astore        14
114: aload         14
116: ldc_w         #945
119: invokevirtual #196
122: astore        15
124: aload_2
125: invokestatic  #10
128: aload_3
129: invokestatic  #10
132: aload         4
134: invokestatic  #10
137: aload         5
139: invokestatic  #10
142: aload         6
144: invokestatic  #10
147: aload         7
149: invokestatic  #10
152: aload         8
154: invokestatic  #10
157: aload         10
159: invokestatic  #10
162: new           #55
165: dup
166: invokespecial #56
169: ldc           #57
171: invokevirtual #58
174: iload         11
176: invokevirtual #97
179: ldc           #60
181: invokevirtual #58
184: iconst_1
185: invokevirtual #97
188: ldc           #57
190: invokevirtual #58
193: invokevirtual #61
196: iload         11
198: iconst_1
199: if_icmpne     206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #62
210: aload         13
212: invokestatic  #10
215: aload         14
217: invokestatic  #10
220: aload         15
222: invokestatic  #10
225: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test336
Start line: 13362
End line: 13380
Method source code: 
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendYears();
        org.joda.time.format.PeriodPrinter periodPrinter7 = periodFormatterBuilder6.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparatorIfFieldsAfter("-47");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodPrinter7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #946
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload         5
59: invokevirtual #33
62: astore        6
64: aload         6
66: invokevirtual #45
69: astore        7
71: aload         6
73: ldc_w         #947
76: invokevirtual #17
79: astore        8
81: aload_2
82: invokestatic  #10
85: aload_3
86: invokestatic  #10
89: aload         4
91: invokestatic  #10
94: aload         5
96: invokestatic  #10
99: aload         6
101: invokestatic  #10
104: aload         7
106: invokestatic  #10
109: aload         8
111: invokestatic  #10
114: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test337
Start line: 13383
End line: 13422
Method source code: 
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter10 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale11 = null;
        org.joda.time.format.PeriodFormatter periodFormatter12 = periodFormatter10.withLocale(locale11);
        boolean boolean13 = periodFormatter12.isParser();
        java.util.Locale locale14 = null;
        org.joda.time.format.PeriodFormatter periodFormatter15 = periodFormatter12.withLocale(locale14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder9.append(periodFormatter15);
        org.joda.time.format.PeriodParser periodParser17 = periodFormatterBuilder16.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter18 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale19 = null;
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter18.withLocale(locale19);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder16.append(periodFormatter18);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder16.appendHours();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(periodFormatter15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodParser17);
        org.junit.Assert.assertNotNull(periodFormatter18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #948
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc           #16
60: invokevirtual #17
63: astore        6
65: aload_1
66: ldc           #141
68: invokevirtual #28
71: astore        7
73: invokestatic  #12
76: astore        8
78: aconst_null
79: astore        9
81: aload         8
83: aload         9
85: invokevirtual #88
88: astore        10
90: aload         10
92: invokevirtual #89
95: istore        11
97: aconst_null
98: astore        12
100: aload         10
102: aload         12
104: invokevirtual #88
107: astore        13
109: aload         7
111: aload         13
113: invokevirtual #118
116: astore        14
118: aload         14
120: invokevirtual #142
123: astore        15
125: invokestatic  #12
128: astore        16
130: aconst_null
131: astore        17
133: aload         16
135: aload         17
137: invokevirtual #88
140: astore        18
142: aload         14
144: aload         16
146: invokevirtual #118
149: astore        19
151: aload         14
153: invokevirtual #245
156: astore        20
158: aload_2
159: invokestatic  #10
162: aload_3
163: invokestatic  #10
166: aload         4
168: invokestatic  #10
171: aload         5
173: invokestatic  #10
176: aload         6
178: invokestatic  #10
181: aload         7
183: invokestatic  #10
186: aload         8
188: invokestatic  #10
191: aload         10
193: invokestatic  #10
196: new           #55
199: dup
200: invokespecial #56
203: ldc           #57
205: invokevirtual #58
208: iload         11
210: invokevirtual #97
213: ldc           #60
215: invokevirtual #58
218: iconst_1
219: invokevirtual #97
222: ldc           #57
224: invokevirtual #58
227: invokevirtual #61
230: iload         11
232: iconst_1
233: if_icmpne     240
236: iconst_1
237: goto          241
240: iconst_0
241: invokestatic  #62
244: aload         13
246: invokestatic  #10
249: aload         14
251: invokestatic  #10
254: aload         15
256: invokestatic  #10
259: aload         16
261: invokestatic  #10
264: aload         18
266: invokestatic  #10
269: aload         19
271: invokestatic  #10
274: aload         20
276: invokestatic  #10
279: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test338
Start line: 13425
End line: 13462
Method source code: 
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale7 = null;
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter6.withLocale(locale7);
        boolean boolean9 = periodFormatter8.isParser();
        java.util.Locale locale10 = null;
        org.joda.time.format.PeriodFormatter periodFormatter11 = periodFormatter8.withLocale(locale10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology15 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField16 = gregorianChronology15.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = gregorianChronology15.getZone();
        org.joda.time.DateTimeField dateTimeField18 = gregorianChronology15.yearOfCentury();
        org.joda.time.Period period19 = new org.joda.time.Period((long) '4', 100L, periodType14, (org.joda.time.Chronology) gregorianChronology15);
        org.joda.time.format.PeriodFormatter periodFormatter20 = periodFormatter8.withParseType(periodType14);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder21 = periodFormatterBuilder2.append(periodFormatter20);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder21.appendMonths();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(periodFormatter11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(gregorianChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodFormatter20);
        org.junit.Assert.assertNotNull(periodFormatterBuilder21);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #949
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: invokestatic  #12
55: astore        5
57: aconst_null
58: astore        6
60: aload         5
62: aload         6
64: invokevirtual #88
67: astore        7
69: aload         7
71: invokevirtual #89
74: istore        8
76: aconst_null
77: astore        9
79: aload         7
81: aload         9
83: invokevirtual #88
86: astore        10
88: invokestatic  #109
91: astore        11
93: invokestatic  #110
96: astore        12
98: aload         12
100: invokevirtual #111
103: astore        13
105: aload         12
107: invokevirtual #112
110: astore        14
112: aload         12
114: invokevirtual #113
117: astore        15
119: new           #46
122: dup
123: ldc2_w        #114
126: ldc2_w        #79
129: aload         11
131: aload         12
133: invokespecial #116
136: astore        16
138: aload         7
140: aload         11
142: invokevirtual #117
145: astore        17
147: aload_2
148: aload         17
150: invokevirtual #118
153: astore        18
155: aload         18
157: invokevirtual #72
160: astore        19
162: aload_2
163: invokestatic  #10
166: aload_3
167: invokestatic  #10
170: aload         4
172: invokestatic  #10
175: aload         5
177: invokestatic  #10
180: aload         7
182: invokestatic  #10
185: new           #55
188: dup
189: invokespecial #56
192: ldc           #57
194: invokevirtual #58
197: iload         8
199: invokevirtual #97
202: ldc           #60
204: invokevirtual #58
207: iconst_1
208: invokevirtual #97
211: ldc           #57
213: invokevirtual #58
216: invokevirtual #61
219: iload         8
221: iconst_1
222: if_icmpne     229
225: iconst_1
226: goto          230
229: iconst_0
230: invokestatic  #62
233: aload         10
235: invokestatic  #10
238: aload         11
240: invokestatic  #10
243: aload         12
245: invokestatic  #10
248: aload         13
250: invokestatic  #10
253: aload         14
255: invokestatic  #10
258: aload         15
260: invokestatic  #10
263: aload         17
265: invokestatic  #10
268: aload         18
270: invokestatic  #10
273: aload         19
275: invokestatic  #10
278: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test339
Start line: 13465
End line: 13485
Method source code: 
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatterBuilder0.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #950
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #77
67: astore        7
69: aload_1
70: invokevirtual #161
73: astore        8
75: aload_1
76: invokevirtual #25
79: astore        9
81: aload_2
82: invokestatic  #10
85: aload_3
86: invokestatic  #10
89: aload         4
91: invokestatic  #10
94: aload         5
96: invokestatic  #10
99: aload         6
101: invokestatic  #10
104: aload         7
106: invokestatic  #10
109: aload         8
111: invokestatic  #10
114: aload         9
116: invokestatic  #10
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test340
Start line: 13488
End line: 13508
Method source code: 
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.maximumParsedDigits(0);
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatterBuilder7.toFormatter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatter10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #951
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload         6
65: invokevirtual #26
68: astore        7
70: aload         7
72: iconst_0
73: invokevirtual #213
76: astore        8
78: aload         7
80: invokevirtual #161
83: astore        9
85: aload_2
86: invokestatic  #10
89: aload_3
90: invokestatic  #10
93: aload         4
95: invokestatic  #10
98: aload         5
100: invokestatic  #10
103: aload         6
105: invokestatic  #10
108: aload         7
110: invokestatic  #10
113: aload         8
115: invokestatic  #10
118: aload         9
120: invokestatic  #10
123: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test341
Start line: 13511
End line: 13529
Method source code: 
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendSeparator("-81");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
        org.joda.time.format.PeriodParser periodParser6 = periodFormatterBuilder5.toParser();
        org.joda.time.ReadWritablePeriod readWritablePeriod7 = null;
        java.util.Locale locale10 = null;
        int int11 = periodParser6.parseInto(readWritablePeriod7, "6", (-2837), locale10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodParser6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2837) + "'", int11 == (-2837));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #952
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #134
37: astore_2
38: aload_2
39: invokevirtual #77
42: astore_3
43: aload_2
44: ldc_w         #612
47: invokevirtual #37
50: astore        4
52: aload         4
54: invokevirtual #149
57: astore        5
59: aload         5
61: invokevirtual #142
64: astore        6
66: aconst_null
67: astore        7
69: aconst_null
70: astore        8
72: aload         6
74: aload         7
76: ldc_w         #631
79: sipush        -2837
82: aload         8
84: invokeinterface #231,  5
89: istore        9
91: aload_2
92: invokestatic  #10
95: aload_3
96: invokestatic  #10
99: aload         4
101: invokestatic  #10
104: aload         5
106: invokestatic  #10
109: aload         6
111: invokestatic  #10
114: new           #55
117: dup
118: invokespecial #56
121: ldc           #57
123: invokevirtual #58
126: iload         9
128: invokevirtual #59
131: ldc           #60
133: invokevirtual #58
136: sipush        -2837
139: invokevirtual #59
142: ldc           #57
144: invokevirtual #58
147: invokevirtual #61
150: iload         9
152: sipush        -2837
155: if_icmpne     162
158: iconst_1
159: goto          163
162: iconst_0
163: invokestatic  #62
166: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test342
Start line: 13532
End line: 13573
Method source code: 
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
        org.joda.time.format.PeriodFormatter periodFormatter6 = org.joda.time.format.ISOPeriodFormat.alternate();
        org.joda.time.PeriodType periodType7 = periodFormatter6.getParseType();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.DurationFieldType durationFieldType11 = null;
        boolean boolean12 = periodType10.isSupported(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant8, readableInstant9, periodType10);
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter6.withParseType(periodType10);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder5.append(periodFormatter6);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType19 = org.joda.time.DateTimeUtils.getPeriodType(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(100L, (long) (short) -1, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withDaysRemoved();
        org.joda.time.PeriodType periodType22 = periodType18.withYearsRemoved();
        org.joda.time.format.PeriodFormatter periodFormatter23 = periodFormatter6.withParseType(periodType22);
        java.util.Locale locale24 = periodFormatter6.getLocale();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatter6);
        org.junit.Assert.assertNull(periodType7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodFormatter23);
        org.junit.Assert.assertNull(locale24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #953
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: invokevirtual #72
56: astore        5
58: invokestatic  #349
61: astore        6
63: aload         6
65: invokevirtual #350
68: astore        7
70: aconst_null
71: astore        8
73: aconst_null
74: astore        9
76: invokestatic  #109
79: astore        10
81: aconst_null
82: astore        11
84: aload         10
86: aload         11
88: invokevirtual #177
91: istore        12
93: new           #46
96: dup
97: aload         8
99: aload         9
101: aload         10
103: invokespecial #351
106: astore        13
108: aload         6
110: aload         10
112: invokevirtual #117
115: astore        14
117: aload         5
119: aload         6
121: invokevirtual #118
124: astore        15
126: invokestatic  #171
129: astore        16
131: aload         16
133: invokestatic  #172
136: astore        17
138: new           #46
141: dup
142: ldc2_w        #79
145: ldc2_w        #173
148: aload         16
150: invokespecial #175
153: astore        18
155: aload         16
157: invokevirtual #352
160: astore        19
162: aload         16
164: invokevirtual #353
167: astore        20
169: aload         6
171: aload         20
173: invokevirtual #117
176: astore        21
178: aload         6
180: invokevirtual #660
183: astore        22
185: aload_2
186: invokestatic  #10
189: aload_3
190: invokestatic  #10
193: aload         4
195: invokestatic  #10
198: aload         5
200: invokestatic  #10
203: aload         6
205: invokestatic  #10
208: aload         7
210: invokestatic  #354
213: aload         10
215: invokestatic  #10
218: new           #55
221: dup
222: invokespecial #56
225: ldc           #57
227: invokevirtual #58
230: iload         12
232: invokevirtual #97
235: ldc           #60
237: invokevirtual #58
240: iconst_0
241: invokevirtual #97
244: ldc           #57
246: invokevirtual #58
249: invokevirtual #61
252: iload         12
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #62
265: aload         14
267: invokestatic  #10
270: aload         15
272: invokestatic  #10
275: aload         16
277: invokestatic  #10
280: aload         17
282: invokestatic  #10
285: aload         19
287: invokestatic  #10
290: aload         20
292: invokestatic  #10
295: aload         21
297: invokestatic  #10
300: aload         22
302: invokestatic  #354
305: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test343
Start line: 13576
End line: 13650
Method source code: 
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder6.printZeroIfSupported();
        org.joda.time.format.PeriodPrinter periodPrinter12 = periodFormatterBuilder6.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder13 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder15 = periodFormatterBuilder13.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder13.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder13.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder17.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = periodFormatterBuilder17.appendSeconds();
        periodFormatterBuilder17.clear();
        org.joda.time.format.PeriodFormatter periodFormatter22 = periodFormatterBuilder17.toFormatter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal24 = new org.joda.time.format.PeriodFormatterBuilder.Literal("");
        org.joda.time.format.PeriodFormatter periodFormatter25 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale26 = null;
        org.joda.time.format.PeriodFormatter periodFormatter27 = periodFormatter25.withLocale(locale26);
        boolean boolean28 = periodFormatter27.isParser();
        org.joda.time.format.PeriodParser periodParser29 = periodFormatter27.getParser();
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        int int31 = period30.getHours();
        org.joda.time.Period period33 = period30.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType38 = org.joda.time.DateTimeUtils.getPeriodType(periodType37);
        org.joda.time.Period period39 = new org.joda.time.Period(100L, (long) (short) -1, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.weeks();
        boolean boolean41 = periodType37.isSupported(durationFieldType40);
        mutablePeriod34.add(durationFieldType40, (int) (byte) 100);
        java.lang.String str44 = mutablePeriod34.toString();
        java.util.Locale locale47 = null;
        int int48 = periodParser29.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod34, "weekyear", (int) '#', locale47);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder49 = periodFormatterBuilder17.append((org.joda.time.format.PeriodPrinter) literal24, periodParser29);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder50 = periodFormatterBuilder1.append(periodPrinter12, periodParser29);
        org.joda.time.format.PeriodParser periodParser51 = periodFormatterBuilder50.toParser();
        org.junit.Assert.assertNotNull(periodFormatterBuilder1);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodPrinter12);
        org.junit.Assert.assertNotNull(periodFormatterBuilder15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder20);
        org.junit.Assert.assertNotNull(periodFormatter22);
        org.junit.Assert.assertNotNull(periodFormatter25);
        org.junit.Assert.assertNotNull(periodFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodParser29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "P100W" + "'", str44, "P100W");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-36) + "'", int48 == (-36));
        org.junit.Assert.assertNotNull(periodFormatterBuilder49);
        org.junit.Assert.assertNotNull(periodFormatterBuilder50);
        org.junit.Assert.assertNotNull(periodParser51);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #954
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: invokevirtual #320
37: astore_2
38: new           #14
41: dup
42: invokespecial #15
45: astore_3
46: aload_3
47: ldc           #16
49: invokevirtual #17
52: astore        4
54: aload_3
55: invokevirtual #25
58: astore        5
60: aload_3
61: invokevirtual #26
64: astore        6
66: aload         6
68: invokevirtual #33
71: astore        7
73: aload         6
75: ldc           #29
77: ldc           #192
79: invokevirtual #41
82: astore        8
84: aload         6
86: invokevirtual #149
89: astore        9
91: aload         6
93: invokevirtual #45
96: astore        10
98: new           #14
101: dup
102: invokespecial #15
105: astore        11
107: aload         11
109: ldc           #16
111: invokevirtual #17
114: astore        12
116: aload         11
118: invokevirtual #25
121: astore        13
123: aload         11
125: invokevirtual #39
128: astore        14
130: aload         14
132: ldc_w         #319
135: invokevirtual #196
138: astore        15
140: aload         14
142: invokevirtual #320
145: astore        16
147: aload         14
149: invokevirtual #212
152: aload         14
154: invokevirtual #161
157: astore        17
159: new           #392
162: dup
163: ldc           #74
165: invokespecial #393
168: astore        18
170: invokestatic  #12
173: astore        19
175: aconst_null
176: astore        20
178: aload         19
180: aload         20
182: invokevirtual #88
185: astore        21
187: aload         21
189: invokevirtual #89
192: istore        22
194: aload         21
196: invokevirtual #119
199: astore        23
201: getstatic     #8
204: astore        24
206: aload         24
208: invokevirtual #216
211: istore        25
213: aload         24
215: iconst_0
216: invokevirtual #200
219: astore        26
221: aload         26
223: invokevirtual #205
226: astore        27
228: invokestatic  #171
231: astore        28
233: aload         28
235: invokestatic  #172
238: astore        29
240: new           #46
243: dup
244: ldc2_w        #79
247: ldc2_w        #173
250: aload         28
252: invokespecial #175
255: astore        30
257: invokestatic  #176
260: astore        31
262: aload         28
264: aload         31
266: invokevirtual #177
269: istore        32
271: aload         27
273: aload         31
275: bipush        100
277: invokevirtual #226
280: aload         27
282: invokevirtual #235
285: astore        33
287: aconst_null
288: astore        34
290: aload         23
292: aload         27
294: ldc           #135
296: bipush        35
298: aload         34
300: invokeinterface #231,  5
305: istore        35
307: aload         14
309: aload         18
311: aload         23
313: invokevirtual #87
316: astore        36
318: aload_2
319: aload         10
321: aload         23
323: invokevirtual #87
326: astore        37
328: aload         37
330: invokevirtual #142
333: astore        38
335: aload_2
336: invokestatic  #10
339: aload         4
341: invokestatic  #10
344: aload         5
346: invokestatic  #10
349: aload         6
351: invokestatic  #10
354: aload         7
356: invokestatic  #10
359: aload         8
361: invokestatic  #10
364: aload         9
366: invokestatic  #10
369: aload         10
371: invokestatic  #10
374: aload         12
376: invokestatic  #10
379: aload         13
381: invokestatic  #10
384: aload         14
386: invokestatic  #10
389: aload         15
391: invokestatic  #10
394: aload         16
396: invokestatic  #10
399: aload         17
401: invokestatic  #10
404: aload         19
406: invokestatic  #10
409: aload         21
411: invokestatic  #10
414: new           #55
417: dup
418: invokespecial #56
421: ldc           #57
423: invokevirtual #58
426: iload         22
428: invokevirtual #97
431: ldc           #60
433: invokevirtual #58
436: iconst_1
437: invokevirtual #97
440: ldc           #57
442: invokevirtual #58
445: invokevirtual #61
448: iload         22
450: iconst_1
451: if_icmpne     458
454: iconst_1
455: goto          459
458: iconst_0
459: invokestatic  #62
462: aload         23
464: invokestatic  #10
467: aload         24
469: invokestatic  #10
472: new           #55
475: dup
476: invokespecial #56
479: ldc           #57
481: invokevirtual #58
484: iload         25
486: invokevirtual #59
489: ldc           #60
491: invokevirtual #58
494: iconst_0
495: invokevirtual #59
498: ldc           #57
500: invokevirtual #58
503: invokevirtual #61
506: iload         25
508: ifne          515
511: iconst_1
512: goto          516
515: iconst_0
516: invokestatic  #62
519: aload         26
521: invokestatic  #10
524: aload         27
526: invokestatic  #10
529: aload         28
531: invokestatic  #10
534: aload         29
536: invokestatic  #10
539: aload         31
541: invokestatic  #10
544: new           #55
547: dup
548: invokespecial #56
551: ldc           #57
553: invokevirtual #58
556: iload         32
558: invokevirtual #97
561: ldc           #60
563: invokevirtual #58
566: iconst_0
567: invokevirtual #97
570: ldc           #57
572: invokevirtual #58
575: invokevirtual #61
578: iload         32
580: ifne          587
583: iconst_1
584: goto          588
587: iconst_0
588: invokestatic  #62
591: new           #55
594: dup
595: invokespecial #56
598: ldc           #57
600: invokevirtual #58
603: aload         33
605: invokevirtual #58
608: ldc           #238
610: invokevirtual #58
613: invokevirtual #61
616: aload         33
618: ldc           #239
620: invokestatic  #96
623: new           #55
626: dup
627: invokespecial #56
630: ldc           #57
632: invokevirtual #58
635: iload         35
637: invokevirtual #59
640: ldc           #60
642: invokevirtual #58
645: bipush        -36
647: invokevirtual #59
650: ldc           #57
652: invokevirtual #58
655: invokevirtual #61
658: iload         35
660: bipush        -36
662: if_icmpne     669
665: iconst_1
666: goto          670
669: iconst_0
670: invokestatic  #62
673: aload         36
675: invokestatic  #10
678: aload         37
680: invokestatic  #10
683: aload         38
685: invokestatic  #10
688: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test344
Start line: 13653
End line: 13669
Method source code: 
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendSuffix("P10Y100W");
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatterBuilder7.toFormatter();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #955
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         5
60: ldc_w         #356
63: invokevirtual #132
66: astore        6
68: aload         6
70: invokevirtual #161
73: astore        7
75: aload_2
76: invokestatic  #10
79: aload_3
80: invokestatic  #10
83: aload         4
85: invokestatic  #10
88: aload         5
90: invokestatic  #10
93: aload         6
95: invokestatic  #10
98: aload         7
100: invokestatic  #10
103: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test345
Start line: 13672
End line: 13731
Method source code: 
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField3 = new org.joda.time.field.PreciseDurationField(durationFieldType1, (long) (short) 0);
        long long6 = preciseDurationField3.getMillis((int) (byte) 100, 864000000L);
        long long9 = preciseDurationField3.getMillis((int) (byte) -1, 515010L);
        org.joda.time.DurationFieldType durationFieldType10 = preciseDurationField3.getType();
        boolean boolean11 = preciseDurationField3.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getRangeDurationType();
        org.joda.time.field.PreciseDurationField preciseDurationField16 = new org.joda.time.field.PreciseDurationField(durationFieldType14, (long) (short) 0);
        long long19 = preciseDurationField16.getMillis((int) (byte) 100, 864000000L);
        org.joda.time.field.UnsupportedDateTimeField unsupportedDateTimeField20 = org.joda.time.field.UnsupportedDateTimeField.getInstance(dateTimeFieldType12, (org.joda.time.DurationField) preciseDurationField16);
        boolean boolean21 = preciseDurationField16.isPrecise();
        int int22 = preciseDurationField3.compareTo((org.joda.time.DurationField) preciseDurationField16);
        long long24 = preciseDurationField3.getMillis(1715771842908L);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder25.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder28 = periodFormatterBuilder25.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder25.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder30 = periodFormatterBuilder25.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder25.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder25.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder25.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder35 = periodFormatterBuilder25.rejectSignedValues(false);
        boolean boolean36 = preciseDurationField3.equals((java.lang.Object) periodFormatterBuilder25);
        // The following exception was thrown during execution in test generation
        try {
            long long39 = preciseDurationField3.getDifferenceAsLong(0L, 2072846049899878600L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null");
        } catch (java.lang.ArithmeticException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(unsupportedDateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder28);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
        org.junit.Assert.assertNotNull(periodFormatterBuilder30);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #956
20: aastore
21: invokevirtual #7
24: pop
25: invokestatic  #568
28: astore_1
29: aload_1
30: invokevirtual #569
33: astore_2
34: new           #570
37: dup
38: aload_2
39: lconst_0
40: invokespecial #571
43: astore_3
44: aload_3
45: bipush        100
47: ldc2_w        #572
50: invokevirtual #574
53: lstore        4
55: aload_3
56: iconst_m1
57: ldc2_w        #575
60: invokevirtual #574
63: lstore        6
65: aload_3
66: invokevirtual #577
69: astore        8
71: aload_3
72: invokevirtual #957
75: istore        9
77: invokestatic  #958
80: astore        10
82: invokestatic  #568
85: astore        11
87: aload         11
89: invokevirtual #569
92: astore        12
94: new           #570
97: dup
98: aload         12
100: lconst_0
101: invokespecial #571
104: astore        13
106: aload         13
108: bipush        100
110: ldc2_w        #572
113: invokevirtual #574
116: lstore        14
118: aload         10
120: aload         13
122: invokestatic  #581
125: astore        16
127: aload         13
129: invokevirtual #959
132: istore        17
134: aload_3
135: aload         13
137: invokevirtual #960
140: istore        18
142: aload_3
143: ldc2_w        #961
146: invokevirtual #963
149: lstore        19
151: new           #14
154: dup
155: invokespecial #15
158: astore        21
160: aload         21
162: ldc           #16
164: invokevirtual #17
167: astore        22
169: aload         21
171: invokevirtual #25
174: astore        23
176: aload         21
178: invokevirtual #26
181: astore        24
183: aload         21
185: invokevirtual #76
188: astore        25
190: aload         21
192: invokevirtual #72
195: astore        26
197: aload         21
199: invokevirtual #25
202: astore        27
204: aload         21
206: invokevirtual #185
209: astore        28
211: aload         21
213: iconst_0
214: invokevirtual #108
217: astore        29
219: aload_3
220: aload         21
222: invokevirtual #964
225: istore        30
227: aload_3
228: lconst_0
229: ldc2_w        #965
232: invokevirtual #967
235: lstore        31
237: ldc_w         #968
240: invokestatic  #22
243: goto          248
246: astore        31
248: aload_1
249: invokestatic  #10
252: aload_2
253: invokestatic  #10
256: new           #55
259: dup
260: invokespecial #56
263: ldc           #57
265: invokevirtual #58
268: lload         4
270: invokevirtual #386
273: ldc           #60
275: invokevirtual #58
278: lconst_0
279: invokevirtual #386
282: ldc           #57
284: invokevirtual #58
287: invokevirtual #61
290: lload         4
292: lconst_0
293: lcmp
294: ifne          301
297: iconst_1
298: goto          302
301: iconst_0
302: invokestatic  #62
305: new           #55
308: dup
309: invokespecial #56
312: ldc           #57
314: invokevirtual #58
317: lload         6
319: invokevirtual #386
322: ldc           #60
324: invokevirtual #58
327: lconst_0
328: invokevirtual #386
331: ldc           #57
333: invokevirtual #58
336: invokevirtual #61
339: lload         6
341: lconst_0
342: lcmp
343: ifne          350
346: iconst_1
347: goto          351
350: iconst_0
351: invokestatic  #62
354: aload         8
356: invokestatic  #10
359: new           #55
362: dup
363: invokespecial #56
366: ldc           #57
368: invokevirtual #58
371: iload         9
373: invokevirtual #97
376: ldc           #60
378: invokevirtual #58
381: iconst_1
382: invokevirtual #97
385: ldc           #57
387: invokevirtual #58
390: invokevirtual #61
393: iload         9
395: iconst_1
396: if_icmpne     403
399: iconst_1
400: goto          404
403: iconst_0
404: invokestatic  #62
407: aload         10
409: invokestatic  #10
412: aload         11
414: invokestatic  #10
417: aload         12
419: invokestatic  #10
422: new           #55
425: dup
426: invokespecial #56
429: ldc           #57
431: invokevirtual #58
434: lload         14
436: invokevirtual #386
439: ldc           #60
441: invokevirtual #58
444: lconst_0
445: invokevirtual #386
448: ldc           #57
450: invokevirtual #58
453: invokevirtual #61
456: lload         14
458: lconst_0
459: lcmp
460: ifne          467
463: iconst_1
464: goto          468
467: iconst_0
468: invokestatic  #62
471: aload         16
473: invokestatic  #10
476: new           #55
479: dup
480: invokespecial #56
483: ldc           #57
485: invokevirtual #58
488: iload         17
490: invokevirtual #97
493: ldc           #60
495: invokevirtual #58
498: iconst_1
499: invokevirtual #97
502: ldc           #57
504: invokevirtual #58
507: invokevirtual #61
510: iload         17
512: iconst_1
513: if_icmpne     520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #62
524: new           #55
527: dup
528: invokespecial #56
531: ldc           #57
533: invokevirtual #58
536: iload         18
538: invokevirtual #59
541: ldc           #60
543: invokevirtual #58
546: iconst_0
547: invokevirtual #59
550: ldc           #57
552: invokevirtual #58
555: invokevirtual #61
558: iload         18
560: ifne          567
563: iconst_1
564: goto          568
567: iconst_0
568: invokestatic  #62
571: new           #55
574: dup
575: invokespecial #56
578: ldc           #57
580: invokevirtual #58
583: lload         19
585: invokevirtual #386
588: ldc           #60
590: invokevirtual #58
593: lconst_0
594: invokevirtual #386
597: ldc           #57
599: invokevirtual #58
602: invokevirtual #61
605: lload         19
607: lconst_0
608: lcmp
609: ifne          616
612: iconst_1
613: goto          617
616: iconst_0
617: invokestatic  #62
620: aload         22
622: invokestatic  #10
625: aload         23
627: invokestatic  #10
630: aload         24
632: invokestatic  #10
635: aload         25
637: invokestatic  #10
640: aload         26
642: invokestatic  #10
645: aload         27
647: invokestatic  #10
650: aload         28
652: invokestatic  #10
655: aload         29
657: invokestatic  #10
660: new           #55
663: dup
664: invokespecial #56
667: ldc           #57
669: invokevirtual #58
672: iload         30
674: invokevirtual #97
677: ldc           #60
679: invokevirtual #58
682: iconst_0
683: invokevirtual #97
686: ldc           #57
688: invokevirtual #58
691: invokevirtual #61
694: iload         30
696: ifne          703
699: iconst_1
700: goto          704
703: iconst_0
704: invokestatic  #62
707: return
Exception table:
from    to  target type
227   243   246   Class java/lang/ArithmeticException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test346
Start line: 13734
End line: 13752
Method source code: 
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("months");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.maximumParsedDigits((-1217829137));
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder4.appendSeparator("DateTimeField[secondOfDay]", "799");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder4.printZeroNever();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #970
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: ldc           #27
55: invokevirtual #28
58: astore        5
60: aload         4
62: ldc_w         #453
65: invokevirtual #213
68: astore        6
70: aload         4
72: ldc_w         #289
75: ldc_w         #454
78: invokevirtual #20
81: astore        7
83: aload         4
85: invokevirtual #76
88: astore        8
90: aload_2
91: invokestatic  #10
94: aload_3
95: invokestatic  #10
98: aload         4
100: invokestatic  #10
103: aload         5
105: invokestatic  #10
108: aload         6
110: invokestatic  #10
113: aload         7
115: invokestatic  #10
118: aload         8
120: invokestatic  #10
123: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test347
Start line: 13755
End line: 13775
Method source code: 
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder11.printZeroIfSupported();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #971
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #39
83: astore        8
85: aload         8
87: invokevirtual #149
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test348
Start line: 13778
End line: 13796
Method source code: 
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.appendSeparator("Invalid format: \"eras\" is too short", "-07:00");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendSeparatorIfFieldsBefore("480");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder10.appendPrefix("PT1.001S");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #972
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #33
44: astore_3
45: aload_3
46: ldc           #34
48: ldc           #35
50: invokevirtual #20
53: astore        4
55: aload         4
57: invokevirtual #26
60: astore        5
62: aload         4
64: invokevirtual #72
67: astore        6
69: aload         4
71: ldc_w         #601
74: invokevirtual #67
77: astore        7
79: aload         7
81: ldc_w         #670
84: invokevirtual #196
87: astore        8
89: aload_2
90: invokestatic  #10
93: aload_3
94: invokestatic  #10
97: aload         4
99: invokestatic  #10
102: aload         5
104: invokestatic  #10
107: aload         6
109: invokestatic  #10
112: aload         7
114: invokestatic  #10
117: aload         8
119: invokestatic  #10
122: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test349
Start line: 13799
End line: 13912
Method source code: 
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("months");
        java.lang.String[] strArray11 = new java.lang.String[] { "52", "GregorianChronology[America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder.Literal literal12 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology15);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period19 = period16.minusDays((int) (byte) 100);
        java.util.Locale locale21 = null;
        int int22 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period19, 999, locale21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = period23.get(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period30 = period23.withField(durationFieldType28, 8);
        org.joda.time.Period period32 = period30.plusMonths((int) (short) 1);
        java.util.Locale locale34 = null;
        int int35 = literal12.countFieldsToPrint((org.joda.time.ReadablePeriod) period30, (-292275054), locale34);
        org.joda.time.format.PeriodFormatterBuilder.Literal literal36 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology39);
        java.lang.String str41 = period40.toString();
        org.joda.time.Period period43 = period40.minusDays((int) (byte) 100);
        java.util.Locale locale45 = null;
        int int46 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period43, 999, locale45);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType50 = null;
        int int51 = period47.get(durationFieldType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period54 = period47.withField(durationFieldType52, 8);
        org.joda.time.Period period56 = period54.plusMonths((int) (short) 1);
        java.util.Locale locale58 = null;
        int int59 = literal36.countFieldsToPrint((org.joda.time.ReadablePeriod) period54, (-292275054), locale58);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator62 = new org.joda.time.format.PeriodFormatterBuilder.Separator("1970", "BC", strArray11, (org.joda.time.format.PeriodPrinter) literal12, (org.joda.time.format.PeriodParser) literal36, true, true);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder63 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder65 = periodFormatterBuilder63.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter66 = periodFormatterBuilder65.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder68 = periodFormatterBuilder65.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter69 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale70 = null;
        org.joda.time.format.PeriodFormatter periodFormatter71 = periodFormatter69.withLocale(locale70);
        boolean boolean72 = periodFormatter71.isParser();
        java.util.Locale locale73 = null;
        org.joda.time.format.PeriodFormatter periodFormatter74 = periodFormatter71.withLocale(locale73);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology78 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField79 = gregorianChronology78.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone80 = gregorianChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField81 = gregorianChronology78.yearOfCentury();
        org.joda.time.Period period82 = new org.joda.time.Period((long) '4', 100L, periodType77, (org.joda.time.Chronology) gregorianChronology78);
        org.joda.time.format.PeriodFormatter periodFormatter83 = periodFormatter71.withParseType(periodType77);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder84 = periodFormatterBuilder65.append(periodFormatter83);
        org.joda.time.format.PeriodParser periodParser85 = periodFormatter83.getParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder86 = periodFormatterBuilder6.append((org.joda.time.format.PeriodPrinter) separator62, periodParser85);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder87 = periodFormatterBuilder86.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder88 = periodFormatterBuilder87.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder89 = periodFormatterBuilder87.appendHours();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder90 = periodFormatterBuilder87.appendHours();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(literal12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT-0.090S" + "'", str17, "PT-0.090S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(literal36);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT-0.090S" + "'", str41, "PT-0.090S");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder65);
        org.junit.Assert.assertNotNull(periodPrinter66);
        org.junit.Assert.assertNotNull(periodFormatterBuilder68);
        org.junit.Assert.assertNotNull(periodFormatter69);
        org.junit.Assert.assertNotNull(periodFormatter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(periodFormatter74);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(gregorianChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(periodFormatter83);
        org.junit.Assert.assertNotNull(periodFormatterBuilder84);
        org.junit.Assert.assertNotNull(periodParser85);
        org.junit.Assert.assertNotNull(periodFormatterBuilder86);
        org.junit.Assert.assertNotNull(periodFormatterBuilder87);
        org.junit.Assert.assertNotNull(periodFormatterBuilder88);
        org.junit.Assert.assertNotNull(periodFormatterBuilder89);
        org.junit.Assert.assertNotNull(periodFormatterBuilder90);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #973
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: ldc           #27
55: invokevirtual #28
58: astore        5
60: iconst_2
61: anewarray     #99
64: dup
65: iconst_0
66: ldc           #141
68: aastore
69: dup
70: iconst_1
71: ldc           #250
73: aastore
74: astore        6
76: getstatic     #78
79: astore        7
81: aconst_null
82: astore        8
84: new           #46
87: dup
88: ldc2_w        #79
91: ldc2_w        #81
94: aload         8
96: invokespecial #83
99: astore        9
101: aload         9
103: invokevirtual #84
106: astore        10
108: aload         9
110: bipush        100
112: invokevirtual #85
115: astore        11
117: aconst_null
118: astore        12
120: aload         7
122: aload         11
124: sipush        999
127: aload         12
129: invokevirtual #86
132: istore        13
134: getstatic     #8
137: astore        14
139: aload         14
141: iconst_m1
142: invokevirtual #9
145: astore        15
147: aconst_null
148: astore        16
150: aload         14
152: aload         16
154: invokevirtual #201
157: istore        17
159: invokestatic  #202
162: astore        18
164: aload         14
166: aload         18
168: bipush        8
170: invokevirtual #203
173: astore        19
175: aload         19
177: iconst_1
178: invokevirtual #251
181: astore        20
183: aconst_null
184: astore        21
186: aload         7
188: aload         19
190: ldc           #252
192: aload         21
194: invokevirtual #86
197: istore        22
199: getstatic     #78
202: astore        23
204: aconst_null
205: astore        24
207: new           #46
210: dup
211: ldc2_w        #79
214: ldc2_w        #81
217: aload         24
219: invokespecial #83
222: astore        25
224: aload         25
226: invokevirtual #84
229: astore        26
231: aload         25
233: bipush        100
235: invokevirtual #85
238: astore        27
240: aconst_null
241: astore        28
243: aload         23
245: aload         27
247: sipush        999
250: aload         28
252: invokevirtual #86
255: istore        29
257: getstatic     #8
260: astore        30
262: aload         30
264: iconst_m1
265: invokevirtual #9
268: astore        31
270: aconst_null
271: astore        32
273: aload         30
275: aload         32
277: invokevirtual #201
280: istore        33
282: invokestatic  #202
285: astore        34
287: aload         30
289: aload         34
291: bipush        8
293: invokevirtual #203
296: astore        35
298: aload         35
300: iconst_1
301: invokevirtual #251
304: astore        36
306: aconst_null
307: astore        37
309: aload         23
311: aload         35
313: ldc           #252
315: aload         37
317: invokevirtual #86
320: istore        38
322: new           #105
325: dup
326: ldc           #131
328: ldc           #253
330: aload         6
332: aload         7
334: aload         23
336: iconst_1
337: iconst_1
338: invokespecial #107
341: astore        39
343: new           #14
346: dup
347: invokespecial #15
350: astore        40
352: aload         40
354: ldc           #16
356: invokevirtual #17
359: astore        41
361: aload         41
363: invokevirtual #45
366: astore        42
368: aload         41
370: iconst_0
371: invokevirtual #108
374: astore        43
376: invokestatic  #12
379: astore        44
381: aconst_null
382: astore        45
384: aload         44
386: aload         45
388: invokevirtual #88
391: astore        46
393: aload         46
395: invokevirtual #89
398: istore        47
400: aconst_null
401: astore        48
403: aload         46
405: aload         48
407: invokevirtual #88
410: astore        49
412: invokestatic  #109
415: astore        50
417: invokestatic  #110
420: astore        51
422: aload         51
424: invokevirtual #111
427: astore        52
429: aload         51
431: invokevirtual #112
434: astore        53
436: aload         51
438: invokevirtual #113
441: astore        54
443: new           #46
446: dup
447: ldc2_w        #114
450: ldc2_w        #79
453: aload         50
455: aload         51
457: invokespecial #116
460: astore        55
462: aload         46
464: aload         50
466: invokevirtual #117
469: astore        56
471: aload         41
473: aload         56
475: invokevirtual #118
478: astore        57
480: aload         56
482: invokevirtual #119
485: astore        58
487: aload         5
489: aload         39
491: aload         58
493: invokevirtual #87
496: astore        59
498: aload         59
500: invokevirtual #488
503: astore        60
505: aload         60
507: invokevirtual #77
510: astore        61
512: aload         60
514: invokevirtual #245
517: astore        62
519: aload         60
521: invokevirtual #245
524: astore        63
526: aload_2
527: invokestatic  #10
530: aload_3
531: invokestatic  #10
534: aload         4
536: invokestatic  #10
539: aload         5
541: invokestatic  #10
544: aload         6
546: invokestatic  #10
549: aload         7
551: invokestatic  #10
554: new           #55
557: dup
558: invokespecial #56
561: ldc           #57
563: invokevirtual #58
566: aload         10
568: invokevirtual #58
571: ldc           #94
573: invokevirtual #58
576: invokevirtual #61
579: aload         10
581: ldc           #95
583: invokestatic  #96
586: aload         11
588: invokestatic  #10
591: new           #55
594: dup
595: invokespecial #56
598: ldc           #57
600: invokevirtual #58
603: iload         13
605: invokevirtual #59
608: ldc           #60
610: invokevirtual #58
613: iconst_0
614: invokevirtual #59
617: ldc           #57
619: invokevirtual #58
622: invokevirtual #61
625: iload         13
627: ifne          634
630: iconst_1
631: goto          635
634: iconst_0
635: invokestatic  #62
638: aload         14
640: invokestatic  #10
643: aload         15
645: invokestatic  #10
648: new           #55
651: dup
652: invokespecial #56
655: ldc           #57
657: invokevirtual #58
660: iload         17
662: invokevirtual #59
665: ldc           #60
667: invokevirtual #58
670: iconst_0
671: invokevirtual #59
674: ldc           #57
676: invokevirtual #58
679: invokevirtual #61
682: iload         17
684: ifne          691
687: iconst_1
688: goto          692
691: iconst_0
692: invokestatic  #62
695: aload         18
697: invokestatic  #10
700: aload         19
702: invokestatic  #10
705: aload         20
707: invokestatic  #10
710: new           #55
713: dup
714: invokespecial #56
717: ldc           #57
719: invokevirtual #58
722: iload         22
724: invokevirtual #59
727: ldc           #60
729: invokevirtual #58
732: iconst_0
733: invokevirtual #59
736: ldc           #57
738: invokevirtual #58
741: invokevirtual #61
744: iload         22
746: ifne          753
749: iconst_1
750: goto          754
753: iconst_0
754: invokestatic  #62
757: aload         23
759: invokestatic  #10
762: new           #55
765: dup
766: invokespecial #56
769: ldc           #57
771: invokevirtual #58
774: aload         26
776: invokevirtual #58
779: ldc           #94
781: invokevirtual #58
784: invokevirtual #61
787: aload         26
789: ldc           #95
791: invokestatic  #96
794: aload         27
796: invokestatic  #10
799: new           #55
802: dup
803: invokespecial #56
806: ldc           #57
808: invokevirtual #58
811: iload         29
813: invokevirtual #59
816: ldc           #60
818: invokevirtual #58
821: iconst_0
822: invokevirtual #59
825: ldc           #57
827: invokevirtual #58
830: invokevirtual #61
833: iload         29
835: ifne          842
838: iconst_1
839: goto          843
842: iconst_0
843: invokestatic  #62
846: aload         30
848: invokestatic  #10
851: aload         31
853: invokestatic  #10
856: new           #55
859: dup
860: invokespecial #56
863: ldc           #57
865: invokevirtual #58
868: iload         33
870: invokevirtual #59
873: ldc           #60
875: invokevirtual #58
878: iconst_0
879: invokevirtual #59
882: ldc           #57
884: invokevirtual #58
887: invokevirtual #61
890: iload         33
892: ifne          899
895: iconst_1
896: goto          900
899: iconst_0
900: invokestatic  #62
903: aload         34
905: invokestatic  #10
908: aload         35
910: invokestatic  #10
913: aload         36
915: invokestatic  #10
918: new           #55
921: dup
922: invokespecial #56
925: ldc           #57
927: invokevirtual #58
930: iload         38
932: invokevirtual #59
935: ldc           #60
937: invokevirtual #58
940: iconst_0
941: invokevirtual #59
944: ldc           #57
946: invokevirtual #58
949: invokevirtual #61
952: iload         38
954: ifne          961
957: iconst_1
958: goto          962
961: iconst_0
962: invokestatic  #62
965: aload         41
967: invokestatic  #10
970: aload         42
972: invokestatic  #10
975: aload         43
977: invokestatic  #10
980: aload         44
982: invokestatic  #10
985: aload         46
987: invokestatic  #10
990: new           #55
993: dup
994: invokespecial #56
997: ldc           #57
999: invokevirtual #58
1002: iload         47
1004: invokevirtual #97
1007: ldc           #60
1009: invokevirtual #58
1012: iconst_1
1013: invokevirtual #97
1016: ldc           #57
1018: invokevirtual #58
1021: invokevirtual #61
1024: iload         47
1026: iconst_1
1027: if_icmpne     1034
1030: iconst_1
1031: goto          1035
1034: iconst_0
1035: invokestatic  #62
1038: aload         49
1040: invokestatic  #10
1043: aload         50
1045: invokestatic  #10
1048: aload         51
1050: invokestatic  #10
1053: aload         52
1055: invokestatic  #10
1058: aload         53
1060: invokestatic  #10
1063: aload         54
1065: invokestatic  #10
1068: aload         56
1070: invokestatic  #10
1073: aload         57
1075: invokestatic  #10
1078: aload         58
1080: invokestatic  #10
1083: aload         59
1085: invokestatic  #10
1088: aload         60
1090: invokestatic  #10
1093: aload         61
1095: invokestatic  #10
1098: aload         62
1100: invokestatic  #10
1103: aload         63
1105: invokestatic  #10
1108: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test350
Start line: 13915
End line: 14011
Method source code: 
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder4.appendPrefix("Standard", "days");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder4.printZeroRarelyLast();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendSecondsWithMillis();
        org.joda.time.format.PeriodParser periodParser11 = periodFormatterBuilder10.toParser();
        org.joda.time.Period period14 = new org.joda.time.Period(1L, 1407849453482400000L);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        int int16 = period15.getHours();
        org.joda.time.Period period18 = period15.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType23 = org.joda.time.DateTimeUtils.getPeriodType(periodType22);
        org.joda.time.Period period24 = new org.joda.time.Period(100L, (long) (short) -1, periodType22);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weeks();
        boolean boolean26 = periodType22.isSupported(durationFieldType25);
        mutablePeriod19.add(durationFieldType25, (int) (byte) 100);
        java.lang.String str29 = mutablePeriod19.toString();
        org.joda.time.format.PeriodFormatter periodFormatter30 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale31 = null;
        org.joda.time.format.PeriodFormatter periodFormatter32 = periodFormatter30.withLocale(locale31);
        boolean boolean33 = periodFormatter30.isParser();
        java.lang.String str34 = mutablePeriod19.toString(periodFormatter30);
        org.joda.time.Period period35 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod19);
        mutablePeriod19.setWeeks(1);
        mutablePeriod19.setPeriod(1439, (-2837), 1310, (-7969), 0, 151, (int) (short) 10, 1970);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology49);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period53 = period50.minusDays((int) (byte) 100);
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        int int55 = period54.getHours();
        org.joda.time.Period period57 = period54.withDays((int) (short) -1);
        org.joda.time.chrono.GregorianChronology gregorianChronology58 = org.joda.time.chrono.GregorianChronology.getInstance();
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        int int60 = period59.getHours();
        org.joda.time.Period period62 = period59.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod63 = period62.toMutablePeriod();
        mutablePeriod63.setDays((int) (short) -1);
        mutablePeriod63.addSeconds(8);
        long long70 = gregorianChronology58.add((org.joda.time.ReadablePeriod) mutablePeriod63, (long) (short) 0, 0);
        org.joda.time.Period period71 = period57.plus((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.Period period72 = period50.withFields((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.Period period74 = period72.plusDays((-292278994));
        org.joda.time.Period period76 = period72.minusSeconds((-548886));
        org.joda.time.Period period78 = period76.minusMinutes(59);
        mutablePeriod19.add((org.joda.time.ReadablePeriod) period76);
        mutablePeriod19.addMillis((-2025));
        mutablePeriod19.addYears(40);
        java.util.Locale locale86 = null;
        int int87 = periodParser11.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod19, "", 551, locale86);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodParser11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "P100W" + "'", str29, "P100W");
        org.junit.Assert.assertNotNull(periodFormatter30);
        org.junit.Assert.assertNotNull(periodFormatter32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "P0000-W100-00T00:00:00" + "'", str34, "P0000-W100-00T00:00:00");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT-0.090S" + "'", str51, "PT-0.090S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(gregorianChronology58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-552) + "'", int87 == (-552));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #974
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload         4
53: invokevirtual #33
56: astore        5
58: aload         4
60: ldc           #29
62: ldc           #192
64: invokevirtual #41
67: astore        6
69: aload         4
71: invokevirtual #488
74: astore        7
76: aload         7
78: invokevirtual #185
81: astore        8
83: aload         8
85: invokevirtual #142
88: astore        9
90: new           #46
93: dup
94: lconst_1
95: ldc2_w        #975
98: invokespecial #977
101: astore        10
103: getstatic     #8
106: astore        11
108: aload         11
110: invokevirtual #216
113: istore        12
115: aload         11
117: iconst_0
118: invokevirtual #200
121: astore        13
123: aload         13
125: invokevirtual #205
128: astore        14
130: invokestatic  #171
133: astore        15
135: aload         15
137: invokestatic  #172
140: astore        16
142: new           #46
145: dup
146: ldc2_w        #79
149: ldc2_w        #173
152: aload         15
154: invokespecial #175
157: astore        17
159: invokestatic  #176
162: astore        18
164: aload         15
166: aload         18
168: invokevirtual #177
171: istore        19
173: aload         14
175: aload         18
177: bipush        100
179: invokevirtual #226
182: aload         14
184: invokevirtual #235
187: astore        20
189: invokestatic  #12
192: astore        21
194: aconst_null
195: astore        22
197: aload         21
199: aload         22
201: invokevirtual #88
204: astore        23
206: aload         21
208: invokevirtual #89
211: istore        24
213: aload         14
215: aload         21
217: invokevirtual #907
220: astore        25
222: aload         10
224: aload         14
226: invokevirtual #364
229: astore        26
231: aload         14
233: iconst_1
234: invokevirtual #207
237: aload         14
239: sipush        1439
242: sipush        -2837
245: sipush        1310
248: sipush        -7969
251: iconst_0
252: sipush        151
255: bipush        10
257: sipush        1970
260: invokevirtual #978
263: aconst_null
264: astore        27
266: new           #46
269: dup
270: ldc2_w        #79
273: ldc2_w        #81
276: aload         27
278: invokespecial #83
281: astore        28
283: aload         28
285: invokevirtual #84
288: astore        29
290: aload         28
292: bipush        100
294: invokevirtual #85
297: astore        30
299: getstatic     #8
302: astore        31
304: aload         31
306: invokevirtual #216
309: istore        32
311: aload         31
313: iconst_m1
314: invokevirtual #200
317: astore        33
319: invokestatic  #222
322: astore        34
324: getstatic     #8
327: astore        35
329: aload         35
331: invokevirtual #216
334: istore        36
336: aload         35
338: iconst_0
339: invokevirtual #200
342: astore        37
344: aload         37
346: invokevirtual #205
349: astore        38
351: aload         38
353: iconst_m1
354: invokevirtual #313
357: aload         38
359: bipush        8
361: invokevirtual #311
364: aload         34
366: aload         38
368: lconst_0
369: iconst_0
370: invokevirtual #227
373: lstore        39
375: aload         33
377: aload         38
379: invokevirtual #979
382: astore        41
384: aload         28
386: aload         38
388: invokevirtual #364
391: astore        42
393: aload         42
395: ldc           #232
397: invokevirtual #9
400: astore        43
402: aload         42
404: ldc_w         #980
407: invokevirtual #283
410: astore        44
412: aload         44
414: bipush        59
416: invokevirtual #522
419: astore        45
421: aload         14
423: aload         44
425: invokevirtual #933
428: aload         14
430: sipush        -2025
433: invokevirtual #476
436: aload         14
438: bipush        40
440: invokevirtual #475
443: aconst_null
444: astore        46
446: aload         9
448: aload         14
450: ldc           #74
452: sipush        551
455: aload         46
457: invokeinterface #231,  5
462: istore        47
464: aload_2
465: invokestatic  #10
468: aload_3
469: invokestatic  #10
472: aload         4
474: invokestatic  #10
477: aload         5
479: invokestatic  #10
482: aload         6
484: invokestatic  #10
487: aload         7
489: invokestatic  #10
492: aload         8
494: invokestatic  #10
497: aload         9
499: invokestatic  #10
502: aload         11
504: invokestatic  #10
507: new           #55
510: dup
511: invokespecial #56
514: ldc           #57
516: invokevirtual #58
519: iload         12
521: invokevirtual #59
524: ldc           #60
526: invokevirtual #58
529: iconst_0
530: invokevirtual #59
533: ldc           #57
535: invokevirtual #58
538: invokevirtual #61
541: iload         12
543: ifne          550
546: iconst_1
547: goto          551
550: iconst_0
551: invokestatic  #62
554: aload         13
556: invokestatic  #10
559: aload         14
561: invokestatic  #10
564: aload         15
566: invokestatic  #10
569: aload         16
571: invokestatic  #10
574: aload         18
576: invokestatic  #10
579: new           #55
582: dup
583: invokespecial #56
586: ldc           #57
588: invokevirtual #58
591: iload         19
593: invokevirtual #97
596: ldc           #60
598: invokevirtual #58
601: iconst_0
602: invokevirtual #97
605: ldc           #57
607: invokevirtual #58
610: invokevirtual #61
613: iload         19
615: ifne          622
618: iconst_1
619: goto          623
622: iconst_0
623: invokestatic  #62
626: new           #55
629: dup
630: invokespecial #56
633: ldc           #57
635: invokevirtual #58
638: aload         20
640: invokevirtual #58
643: ldc           #238
645: invokevirtual #58
648: invokevirtual #61
651: aload         20
653: ldc           #239
655: invokestatic  #96
658: aload         21
660: invokestatic  #10
663: aload         23
665: invokestatic  #10
668: new           #55
671: dup
672: invokespecial #56
675: ldc           #57
677: invokevirtual #58
680: iload         24
682: invokevirtual #97
685: ldc           #60
687: invokevirtual #58
690: iconst_1
691: invokevirtual #97
694: ldc           #57
696: invokevirtual #58
699: invokevirtual #61
702: iload         24
704: iconst_1
705: if_icmpne     712
708: iconst_1
709: goto          713
712: iconst_0
713: invokestatic  #62
716: new           #55
719: dup
720: invokespecial #56
723: ldc           #57
725: invokevirtual #58
728: aload         25
730: invokevirtual #58
733: ldc_w         #908
736: invokevirtual #58
739: invokevirtual #61
742: aload         25
744: ldc_w         #909
747: invokestatic  #96
750: aload         26
752: invokestatic  #10
755: new           #55
758: dup
759: invokespecial #56
762: ldc           #57
764: invokevirtual #58
767: aload         29
769: invokevirtual #58
772: ldc           #94
774: invokevirtual #58
777: invokevirtual #61
780: aload         29
782: ldc           #95
784: invokestatic  #96
787: aload         30
789: invokestatic  #10
792: aload         31
794: invokestatic  #10
797: new           #55
800: dup
801: invokespecial #56
804: ldc           #57
806: invokevirtual #58
809: iload         32
811: invokevirtual #59
814: ldc           #60
816: invokevirtual #58
819: iconst_0
820: invokevirtual #59
823: ldc           #57
825: invokevirtual #58
828: invokevirtual #61
831: iload         32
833: ifne          840
836: iconst_1
837: goto          841
840: iconst_0
841: invokestatic  #62
844: aload         33
846: invokestatic  #10
849: aload         34
851: invokestatic  #10
854: aload         35
856: invokestatic  #10
859: new           #55
862: dup
863: invokespecial #56
866: ldc           #57
868: invokevirtual #58
871: iload         36
873: invokevirtual #59
876: ldc           #60
878: invokevirtual #58
881: iconst_0
882: invokevirtual #59
885: ldc           #57
887: invokevirtual #58
890: invokevirtual #61
893: iload         36
895: ifne          902
898: iconst_1
899: goto          903
902: iconst_0
903: invokestatic  #62
906: aload         37
908: invokestatic  #10
911: aload         38
913: invokestatic  #10
916: new           #55
919: dup
920: invokespecial #56
923: ldc           #57
925: invokevirtual #58
928: lload         39
930: invokevirtual #386
933: ldc           #60
935: invokevirtual #58
938: lconst_0
939: invokevirtual #386
942: ldc           #57
944: invokevirtual #58
947: invokevirtual #61
950: lload         39
952: lconst_0
953: lcmp
954: ifne          961
957: iconst_1
958: goto          962
961: iconst_0
962: invokestatic  #62
965: aload         41
967: invokestatic  #10
970: aload         42
972: invokestatic  #10
975: aload         43
977: invokestatic  #10
980: aload         44
982: invokestatic  #10
985: aload         45
987: invokestatic  #10
990: new           #55
993: dup
994: invokespecial #56
997: ldc           #57
999: invokevirtual #58
1002: iload         47
1004: invokevirtual #59
1007: ldc           #60
1009: invokevirtual #58
1012: sipush        -552
1015: invokevirtual #59
1018: ldc           #57
1020: invokevirtual #58
1023: invokevirtual #61
1026: iload         47
1028: sipush        -552
1031: if_icmpne     1038
1034: iconst_1
1035: goto          1039
1038: iconst_0
1039: invokestatic  #62
1042: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test351
Start line: 14014
End line: 14030
Method source code: 
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendMonths();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendPrefix("379");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #981
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #72
61: astore        6
63: aload         6
65: ldc_w         #411
68: invokevirtual #196
71: astore        7
73: aload_2
74: invokestatic  #10
77: aload_3
78: invokestatic  #10
81: aload         4
83: invokestatic  #10
86: aload         5
88: invokestatic  #10
91: aload         6
93: invokestatic  #10
96: aload         7
98: invokestatic  #10
101: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test352
Start line: 14033
End line: 14061
Method source code: 
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        java.lang.String[] strArray15 = new java.lang.String[] { "UnsupportedDateTimeField", "GregorianChronology[hi!]", "PeriodType[YearDay]", "hi!", "-101", "ZonedChronology[ISOChronology[UTC], America/Los_Angeles]" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder16 = periodFormatterBuilder6.appendSeparator("", "", strArray15);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder17 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder6.appendSuffix("35313-01-15T11:38:44.842+00:00:00.010");
        java.lang.String[] strArray26 = new java.lang.String[] { "P-36W-292279004DT0.001S", "BC", "2024-05-19T12:57:02.916+00:00:00.010/2024-05-19T12:57:02.916+00:00:00.010", "105" };
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder27 = periodFormatterBuilder6.appendSeparator("5258880", "P-90M", strArray26);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = periodFormatterBuilder27.appendPrefix("2024-05-15T12:20:07.488+00:00:00.010");
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(periodFormatterBuilder16);
        org.junit.Assert.assertNotNull(periodFormatterBuilder17);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(periodFormatterBuilder27);
        org.junit.Assert.assertNotNull(periodFormatterBuilder29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #982
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: bipush        6
67: anewarray     #99
70: dup
71: iconst_0
72: ldc_w         #405
75: aastore
76: dup
77: iconst_1
78: ldc           #101
80: aastore
81: dup
82: iconst_2
83: ldc           #36
85: aastore
86: dup
87: iconst_3
88: ldc           #187
90: aastore
91: dup
92: iconst_4
93: ldc           #40
95: aastore
96: dup
97: iconst_5
98: ldc           #16
100: aastore
101: astore        7
103: aload         6
105: ldc           #74
107: ldc           #74
109: aload         7
111: invokevirtual #137
114: astore        8
116: aload         6
118: invokevirtual #185
121: astore        9
123: aload         6
125: ldc_w         #534
128: invokevirtual #132
131: astore        10
133: iconst_4
134: anewarray     #99
137: dup
138: iconst_0
139: ldc_w         #679
142: aastore
143: dup
144: iconst_1
145: ldc           #253
147: aastore
148: dup
149: iconst_2
150: ldc_w         #432
153: aastore
154: dup
155: iconst_3
156: ldc_w         #983
159: aastore
160: astore        11
162: aload         6
164: ldc_w         #765
167: ldc_w         #559
170: aload         11
172: invokevirtual #137
175: astore        12
177: aload         12
179: ldc_w         #984
182: invokevirtual #196
185: astore        13
187: aload_2
188: invokestatic  #10
191: aload_3
192: invokestatic  #10
195: aload         4
197: invokestatic  #10
200: aload         5
202: invokestatic  #10
205: aload         6
207: invokestatic  #10
210: aload         7
212: invokestatic  #10
215: aload         8
217: invokestatic  #10
220: aload         9
222: invokestatic  #10
225: aload         10
227: invokestatic  #10
230: aload         11
232: invokestatic  #10
235: aload         12
237: invokestatic  #10
240: aload         13
242: invokestatic  #10
245: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test353
Start line: 14064
End line: 14100
Method source code: 
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder0.appendSuffix("12", "weeks");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder8.appendSuffix("70");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder8.appendWeeks();
        org.joda.time.format.PeriodFormatter periodFormatter12 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale13 = null;
        org.joda.time.format.PeriodFormatter periodFormatter14 = periodFormatter12.withLocale(locale13);
        boolean boolean15 = periodFormatter12.isParser();
        java.util.Locale locale16 = null;
        org.joda.time.format.PeriodFormatter periodFormatter17 = periodFormatter12.withLocale(locale16);
        org.joda.time.format.PeriodParser periodParser18 = periodFormatter12.getParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder19 = periodFormatterBuilder8.append(periodFormatter12);
        boolean boolean20 = periodFormatter12.isPrinter();
        org.joda.time.PeriodType periodType21 = periodFormatter12.getParseType();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatter12);
        org.junit.Assert.assertNotNull(periodFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(periodFormatter17);
        org.junit.Assert.assertNotNull(periodParser18);
        org.junit.Assert.assertNotNull(periodFormatterBuilder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(periodType21);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #985
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #76
49: astore        4
51: aload_1
52: invokevirtual #77
55: astore        5
57: aload_1
58: ldc_w         #332
61: ldc_w         #333
64: invokevirtual #30
67: astore        6
69: aload         6
71: ldc           #146
73: invokevirtual #132
76: astore        7
78: aload         6
80: invokevirtual #26
83: astore        8
85: invokestatic  #12
88: astore        9
90: aconst_null
91: astore        10
93: aload         9
95: aload         10
97: invokevirtual #88
100: astore        11
102: aload         9
104: invokevirtual #89
107: istore        12
109: aconst_null
110: astore        13
112: aload         9
114: aload         13
116: invokevirtual #88
119: astore        14
121: aload         9
123: invokevirtual #119
126: astore        15
128: aload         6
130: aload         9
132: invokevirtual #118
135: astore        16
137: aload         9
139: invokevirtual #234
142: istore        17
144: aload         9
146: invokevirtual #350
149: astore        18
151: aload_2
152: invokestatic  #10
155: aload_3
156: invokestatic  #10
159: aload         4
161: invokestatic  #10
164: aload         5
166: invokestatic  #10
169: aload         6
171: invokestatic  #10
174: aload         7
176: invokestatic  #10
179: aload         8
181: invokestatic  #10
184: aload         9
186: invokestatic  #10
189: aload         11
191: invokestatic  #10
194: new           #55
197: dup
198: invokespecial #56
201: ldc           #57
203: invokevirtual #58
206: iload         12
208: invokevirtual #97
211: ldc           #60
213: invokevirtual #58
216: iconst_1
217: invokevirtual #97
220: ldc           #57
222: invokevirtual #58
225: invokevirtual #61
228: iload         12
230: iconst_1
231: if_icmpne     238
234: iconst_1
235: goto          239
238: iconst_0
239: invokestatic  #62
242: aload         14
244: invokestatic  #10
247: aload         15
249: invokestatic  #10
252: aload         16
254: invokestatic  #10
257: new           #55
260: dup
261: invokespecial #56
264: ldc           #57
266: invokevirtual #58
269: iload         17
271: invokevirtual #97
274: ldc           #60
276: invokevirtual #58
279: iconst_1
280: invokevirtual #97
283: ldc           #57
285: invokevirtual #58
288: invokevirtual #61
291: iload         17
293: iconst_1
294: if_icmpne     301
297: iconst_1
298: goto          302
301: iconst_0
302: invokestatic  #62
305: aload         18
307: invokestatic  #354
310: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test354
Start line: 14103
End line: 14138
Method source code: 
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendMillis3Digit();
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter10.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter10.withLocale(locale12);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder14 = periodFormatterBuilder7.append(periodFormatter10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = periodFormatter10.parsePeriod("1239");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1239\"");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodFormatterBuilder14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #986
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #25
61: astore        6
63: aload_1
64: invokevirtual #77
67: astore        7
69: invokestatic  #12
72: astore        8
74: aconst_null
75: astore        9
77: aload         8
79: aload         9
81: invokevirtual #88
84: astore        10
86: aload         10
88: invokevirtual #89
91: istore        11
93: aconst_null
94: astore        12
96: aload         10
98: aload         12
100: invokevirtual #88
103: astore        13
105: aload         7
107: aload         10
109: invokevirtual #118
112: astore        14
114: aload         10
116: ldc_w         #987
119: invokevirtual #155
122: astore        15
124: ldc_w         #988
127: invokestatic  #22
130: goto          135
133: astore        15
135: aload_2
136: invokestatic  #10
139: aload_3
140: invokestatic  #10
143: aload         4
145: invokestatic  #10
148: aload         5
150: invokestatic  #10
153: aload         6
155: invokestatic  #10
158: aload         7
160: invokestatic  #10
163: aload         8
165: invokestatic  #10
168: aload         10
170: invokestatic  #10
173: new           #55
176: dup
177: invokespecial #56
180: ldc           #57
182: invokevirtual #58
185: iload         11
187: invokevirtual #97
190: ldc           #60
192: invokevirtual #58
195: iconst_1
196: invokevirtual #97
199: ldc           #57
201: invokevirtual #58
204: invokevirtual #61
207: iload         11
209: iconst_1
210: if_icmpne     217
213: iconst_1
214: goto          218
217: iconst_0
218: invokestatic  #62
221: aload         13
223: invokestatic  #10
226: aload         14
228: invokestatic  #10
231: return
Exception table:
from    to  target type
114   130   133   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test355
Start line: 14141
End line: 14204
Method source code: 
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getHours();
        org.joda.time.Period period3 = period0.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod4 = period3.toMutablePeriod();
        mutablePeriod4.setWeeks((-28800000));
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology9);
        int int11 = period10.getMonths();
        java.lang.String str12 = period10.toString();
        org.joda.time.Period period14 = period10.plusHours(0);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period17 = period10.minusYears(0);
        org.joda.time.Period period19 = period10.minusSeconds(100);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder20 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder22 = periodFormatterBuilder20.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter23 = periodFormatterBuilder22.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder25 = periodFormatterBuilder22.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter26 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale27 = null;
        org.joda.time.format.PeriodFormatter periodFormatter28 = periodFormatter26.withLocale(locale27);
        boolean boolean29 = periodFormatter28.isParser();
        java.util.Locale locale30 = null;
        org.joda.time.format.PeriodFormatter periodFormatter31 = periodFormatter28.withLocale(locale30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology35 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField36 = gregorianChronology35.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = gregorianChronology35.getZone();
        org.joda.time.DateTimeField dateTimeField38 = gregorianChronology35.yearOfCentury();
        org.joda.time.Period period39 = new org.joda.time.Period((long) '4', 100L, periodType34, (org.joda.time.Chronology) gregorianChronology35);
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter28.withParseType(periodType34);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder41 = periodFormatterBuilder22.append(periodFormatter40);
        org.joda.time.format.PeriodParser periodParser42 = periodFormatter40.getParser();
        java.lang.String str43 = period10.toString(periodFormatter40);
        boolean boolean44 = periodFormatter40.isParser();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT-0.090S" + "'", str12, "PT-0.090S");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodFormatterBuilder22);
        org.junit.Assert.assertNotNull(periodPrinter23);
        org.junit.Assert.assertNotNull(periodFormatterBuilder25);
        org.junit.Assert.assertNotNull(periodFormatter26);
        org.junit.Assert.assertNotNull(periodFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(periodFormatter31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(gregorianChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertNotNull(periodFormatterBuilder41);
        org.junit.Assert.assertNotNull(periodParser42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "P0000-W00-00T00:00:-00.090" + "'", str43, "P0000-W00-00T00:00:-00.090");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #989
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #8
28: astore_1
29: aload_1
30: invokevirtual #216
33: istore_2
34: aload_1
35: iconst_0
36: invokevirtual #200
39: astore_3
40: aload_3
41: invokevirtual #205
44: astore        4
46: aload         4
48: ldc           #217
50: invokevirtual #207
53: aconst_null
54: astore        5
56: new           #46
59: dup
60: ldc2_w        #79
63: ldc2_w        #81
66: aload         5
68: invokespecial #83
71: astore        6
73: aload         6
75: invokevirtual #169
78: istore        7
80: aload         6
82: invokevirtual #84
85: astore        8
87: aload         6
89: iconst_0
90: invokevirtual #218
93: astore        9
95: aload         4
97: aload         6
99: invokevirtual #219
102: aload         6
104: iconst_0
105: invokevirtual #282
108: astore        10
110: aload         6
112: bipush        100
114: invokevirtual #283
117: astore        11
119: new           #14
122: dup
123: invokespecial #15
126: astore        12
128: aload         12
130: ldc           #16
132: invokevirtual #17
135: astore        13
137: aload         13
139: invokevirtual #45
142: astore        14
144: aload         13
146: iconst_0
147: invokevirtual #108
150: astore        15
152: invokestatic  #12
155: astore        16
157: aconst_null
158: astore        17
160: aload         16
162: aload         17
164: invokevirtual #88
167: astore        18
169: aload         18
171: invokevirtual #89
174: istore        19
176: aconst_null
177: astore        20
179: aload         18
181: aload         20
183: invokevirtual #88
186: astore        21
188: invokestatic  #109
191: astore        22
193: invokestatic  #110
196: astore        23
198: aload         23
200: invokevirtual #111
203: astore        24
205: aload         23
207: invokevirtual #112
210: astore        25
212: aload         23
214: invokevirtual #113
217: astore        26
219: new           #46
222: dup
223: ldc2_w        #114
226: ldc2_w        #79
229: aload         22
231: aload         23
233: invokespecial #116
236: astore        27
238: aload         18
240: aload         22
242: invokevirtual #117
245: astore        28
247: aload         13
249: aload         28
251: invokevirtual #118
254: astore        29
256: aload         28
258: invokevirtual #119
261: astore        30
263: aload         6
265: aload         28
267: invokevirtual #284
270: astore        31
272: aload         28
274: invokevirtual #89
277: istore        32
279: aload_1
280: invokestatic  #10
283: new           #55
286: dup
287: invokespecial #56
290: ldc           #57
292: invokevirtual #58
295: iload_2
296: invokevirtual #59
299: ldc           #60
301: invokevirtual #58
304: iconst_0
305: invokevirtual #59
308: ldc           #57
310: invokevirtual #58
313: invokevirtual #61
316: iload_2
317: ifne          324
320: iconst_1
321: goto          325
324: iconst_0
325: invokestatic  #62
328: aload_3
329: invokestatic  #10
332: aload         4
334: invokestatic  #10
337: new           #55
340: dup
341: invokespecial #56
344: ldc           #57
346: invokevirtual #58
349: iload         7
351: invokevirtual #59
354: ldc           #60
356: invokevirtual #58
359: iconst_0
360: invokevirtual #59
363: ldc           #57
365: invokevirtual #58
368: invokevirtual #61
371: iload         7
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #62
384: new           #55
387: dup
388: invokespecial #56
391: ldc           #57
393: invokevirtual #58
396: aload         8
398: invokevirtual #58
401: ldc           #94
403: invokevirtual #58
406: invokevirtual #61
409: aload         8
411: ldc           #95
413: invokestatic  #96
416: aload         9
418: invokestatic  #10
421: aload         10
423: invokestatic  #10
426: aload         11
428: invokestatic  #10
431: aload         13
433: invokestatic  #10
436: aload         14
438: invokestatic  #10
441: aload         15
443: invokestatic  #10
446: aload         16
448: invokestatic  #10
451: aload         18
453: invokestatic  #10
456: new           #55
459: dup
460: invokespecial #56
463: ldc           #57
465: invokevirtual #58
468: iload         19
470: invokevirtual #97
473: ldc           #60
475: invokevirtual #58
478: iconst_1
479: invokevirtual #97
482: ldc           #57
484: invokevirtual #58
487: invokevirtual #61
490: iload         19
492: iconst_1
493: if_icmpne     500
496: iconst_1
497: goto          501
500: iconst_0
501: invokestatic  #62
504: aload         21
506: invokestatic  #10
509: aload         22
511: invokestatic  #10
514: aload         23
516: invokestatic  #10
519: aload         24
521: invokestatic  #10
524: aload         25
526: invokestatic  #10
529: aload         26
531: invokestatic  #10
534: aload         28
536: invokestatic  #10
539: aload         29
541: invokestatic  #10
544: aload         30
546: invokestatic  #10
549: new           #55
552: dup
553: invokespecial #56
556: ldc           #57
558: invokevirtual #58
561: aload         31
563: invokevirtual #58
566: ldc_w         #286
569: invokevirtual #58
572: invokevirtual #61
575: aload         31
577: ldc           #143
579: invokestatic  #96
582: new           #55
585: dup
586: invokespecial #56
589: ldc           #57
591: invokevirtual #58
594: iload         32
596: invokevirtual #97
599: ldc           #60
601: invokevirtual #58
604: iconst_1
605: invokevirtual #97
608: ldc           #57
610: invokevirtual #58
613: invokevirtual #61
616: iload         32
618: iconst_1
619: if_icmpne     626
622: iconst_1
623: goto          627
626: iconst_0
627: invokestatic  #62
630: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test356
Start line: 14207
End line: 14229
Method source code: 
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatterBuilder7.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendYears();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder7.maximumParsedDigits(259);
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodPrinter8);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #990
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         7
74: invokevirtual #45
77: astore        8
79: aload         7
81: invokevirtual #33
84: astore        9
86: aload         7
88: sipush        259
91: invokevirtual #213
94: astore        10
96: aload_2
97: invokestatic  #10
100: aload_3
101: invokestatic  #10
104: aload         4
106: invokestatic  #10
109: aload         5
111: invokestatic  #10
114: aload         6
116: invokestatic  #10
119: aload         7
121: invokestatic  #10
124: aload         8
126: invokestatic  #10
129: aload         9
131: invokestatic  #10
134: aload         10
136: invokestatic  #10
139: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test357
Start line: 14232
End line: 14250
Method source code: 
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.printZeroIfSupported();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.printZeroNever();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #991
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_3
46: invokevirtual #71
49: astore        4
51: aload         4
53: invokevirtual #76
56: astore        5
58: aload         5
60: invokevirtual #149
63: astore        6
65: aload         5
67: invokevirtual #26
70: astore        7
72: aload         7
74: invokevirtual #76
77: astore        8
79: aload_2
80: invokestatic  #10
83: aload_3
84: invokestatic  #10
87: aload         4
89: invokestatic  #10
92: aload         5
94: invokestatic  #10
97: aload         6
99: invokestatic  #10
102: aload         7
104: invokestatic  #10
107: aload         8
109: invokestatic  #10
112: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test358
Start line: 14253
End line: 14267
Method source code: 
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.appendYears();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #992
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #26
49: astore        4
51: aload_1
52: invokevirtual #76
55: astore        5
57: aload_1
58: invokevirtual #33
61: astore        6
63: aload_2
64: invokestatic  #10
67: aload_3
68: invokestatic  #10
71: aload         4
73: invokestatic  #10
76: aload         5
78: invokestatic  #10
81: aload         6
83: invokestatic  #10
86: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test359
Start line: 14270
End line: 14352
Method source code: 
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology2);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period6 = period3.minusDays((int) (byte) 100);
        org.joda.time.Period period7 = period3.toPeriod();
        org.joda.time.Period period9 = org.joda.time.Period.millis(1);
        int int10 = period9.getMonths();
        int int11 = period9.size();
        org.joda.time.Period period13 = period9.withDays((int) (byte) 100);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.plusDays((-1));
        org.joda.time.DurationFieldType durationFieldType17 = null;
        int int18 = period14.get(durationFieldType17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period21 = period14.withField(durationFieldType19, 8);
        java.lang.String str22 = durationFieldType19.getName();
        org.joda.time.Period period24 = period9.withField(durationFieldType19, 1);
        org.joda.time.Period period26 = period9.minusDays(10);
        org.joda.time.Period period27 = period3.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period29 = period27.plusDays(3685056);
        org.joda.time.Period period31 = period29.multipliedBy(0);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder32.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter35 = periodFormatterBuilder34.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder37 = periodFormatterBuilder34.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatter periodFormatter38 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale39 = null;
        org.joda.time.format.PeriodFormatter periodFormatter40 = periodFormatter38.withLocale(locale39);
        boolean boolean41 = periodFormatter40.isParser();
        java.util.Locale locale42 = null;
        org.joda.time.format.PeriodFormatter periodFormatter43 = periodFormatter40.withLocale(locale42);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.chrono.GregorianChronology gregorianChronology47 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField48 = gregorianChronology47.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone49 = gregorianChronology47.getZone();
        org.joda.time.DateTimeField dateTimeField50 = gregorianChronology47.yearOfCentury();
        org.joda.time.Period period51 = new org.joda.time.Period((long) '4', 100L, periodType46, (org.joda.time.Chronology) gregorianChronology47);
        org.joda.time.format.PeriodFormatter periodFormatter52 = periodFormatter40.withParseType(periodType46);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder53 = periodFormatterBuilder34.append(periodFormatter52);
        org.joda.time.format.PeriodParser periodParser54 = periodFormatter52.getParser();
        boolean boolean55 = periodFormatter52.isParser();
        java.lang.String str56 = period31.toString(periodFormatter52);
        org.joda.time.Period period58 = period31.multipliedBy((int) (short) 10);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT-0.090S" + "'", str4, "PT-0.090S");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "seconds" + "'", str22, "seconds");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodPrinter35);
        org.junit.Assert.assertNotNull(periodFormatterBuilder37);
        org.junit.Assert.assertNotNull(periodFormatter38);
        org.junit.Assert.assertNotNull(periodFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(periodFormatter43);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(gregorianChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(periodFormatter52);
        org.junit.Assert.assertNotNull(periodFormatterBuilder53);
        org.junit.Assert.assertNotNull(periodParser54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "P0000-W00-00T00:00:00" + "'", str56, "P0000-W00-00T00:00:00");
        org.junit.Assert.assertNotNull(period58);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #993
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #46
30: dup
31: ldc2_w        #79
34: ldc2_w        #81
37: aload_1
38: invokespecial #83
41: astore_2
42: aload_2
43: invokevirtual #84
46: astore_3
47: aload_2
48: bipush        100
50: invokevirtual #85
53: astore        4
55: aload_2
56: invokevirtual #481
59: astore        5
61: iconst_1
62: invokestatic  #168
65: astore        6
67: aload         6
69: invokevirtual #169
72: istore        7
74: aload         6
76: invokevirtual #170
79: istore        8
81: aload         6
83: bipush        100
85: invokevirtual #200
88: astore        9
90: getstatic     #8
93: astore        10
95: aload         10
97: iconst_m1
98: invokevirtual #9
101: astore        11
103: aconst_null
104: astore        12
106: aload         10
108: aload         12
110: invokevirtual #201
113: istore        13
115: invokestatic  #202
118: astore        14
120: aload         10
122: aload         14
124: bipush        8
126: invokevirtual #203
129: astore        15
131: aload         14
133: invokevirtual #204
136: astore        16
138: aload         6
140: aload         14
142: iconst_1
143: invokevirtual #203
146: astore        17
148: aload         6
150: bipush        10
152: invokevirtual #85
155: astore        18
157: aload_2
158: aload         6
160: invokevirtual #657
163: astore        19
165: aload         19
167: ldc_w         #825
170: invokevirtual #9
173: astore        20
175: aload         20
177: iconst_0
178: invokevirtual #826
181: astore        21
183: new           #14
186: dup
187: invokespecial #15
190: astore        22
192: aload         22
194: ldc           #16
196: invokevirtual #17
199: astore        23
201: aload         23
203: invokevirtual #45
206: astore        24
208: aload         23
210: iconst_0
211: invokevirtual #108
214: astore        25
216: invokestatic  #12
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #88
231: astore        28
233: aload         28
235: invokevirtual #89
238: istore        29
240: aconst_null
241: astore        30
243: aload         28
245: aload         30
247: invokevirtual #88
250: astore        31
252: invokestatic  #109
255: astore        32
257: invokestatic  #110
260: astore        33
262: aload         33
264: invokevirtual #111
267: astore        34
269: aload         33
271: invokevirtual #112
274: astore        35
276: aload         33
278: invokevirtual #113
281: astore        36
283: new           #46
286: dup
287: ldc2_w        #114
290: ldc2_w        #79
293: aload         32
295: aload         33
297: invokespecial #116
300: astore        37
302: aload         28
304: aload         32
306: invokevirtual #117
309: astore        38
311: aload         23
313: aload         38
315: invokevirtual #118
318: astore        39
320: aload         38
322: invokevirtual #119
325: astore        40
327: aload         38
329: invokevirtual #89
332: istore        41
334: aload         21
336: aload         38
338: invokevirtual #284
341: astore        42
343: aload         21
345: bipush        10
347: invokevirtual #826
350: astore        43
352: new           #55
355: dup
356: invokespecial #56
359: ldc           #57
361: invokevirtual #58
364: aload_3
365: invokevirtual #58
368: ldc           #94
370: invokevirtual #58
373: invokevirtual #61
376: aload_3
377: ldc           #95
379: invokestatic  #96
382: aload         4
384: invokestatic  #10
387: aload         5
389: invokestatic  #10
392: aload         6
394: invokestatic  #10
397: new           #55
400: dup
401: invokespecial #56
404: ldc           #57
406: invokevirtual #58
409: iload         7
411: invokevirtual #59
414: ldc           #60
416: invokevirtual #58
419: iconst_0
420: invokevirtual #59
423: ldc           #57
425: invokevirtual #58
428: invokevirtual #61
431: iload         7
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #62
444: new           #55
447: dup
448: invokespecial #56
451: ldc           #57
453: invokevirtual #58
456: iload         8
458: invokevirtual #59
461: ldc           #60
463: invokevirtual #58
466: bipush        8
468: invokevirtual #59
471: ldc           #57
473: invokevirtual #58
476: invokevirtual #61
479: iload         8
481: bipush        8
483: if_icmpne     490
486: iconst_1
487: goto          491
490: iconst_0
491: invokestatic  #62
494: aload         9
496: invokestatic  #10
499: aload         10
501: invokestatic  #10
504: aload         11
506: invokestatic  #10
509: new           #55
512: dup
513: invokespecial #56
516: ldc           #57
518: invokevirtual #58
521: iload         13
523: invokevirtual #59
526: ldc           #60
528: invokevirtual #58
531: iconst_0
532: invokevirtual #59
535: ldc           #57
537: invokevirtual #58
540: invokevirtual #61
543: iload         13
545: ifne          552
548: iconst_1
549: goto          553
552: iconst_0
553: invokestatic  #62
556: aload         14
558: invokestatic  #10
561: aload         15
563: invokestatic  #10
566: new           #55
569: dup
570: invokespecial #56
573: ldc           #57
575: invokevirtual #58
578: aload         16
580: invokevirtual #58
583: ldc           #209
585: invokevirtual #58
588: invokevirtual #61
591: aload         16
593: ldc           #210
595: invokestatic  #96
598: aload         17
600: invokestatic  #10
603: aload         18
605: invokestatic  #10
608: aload         19
610: invokestatic  #10
613: aload         20
615: invokestatic  #10
618: aload         21
620: invokestatic  #10
623: aload         23
625: invokestatic  #10
628: aload         24
630: invokestatic  #10
633: aload         25
635: invokestatic  #10
638: aload         26
640: invokestatic  #10
643: aload         28
645: invokestatic  #10
648: new           #55
651: dup
652: invokespecial #56
655: ldc           #57
657: invokevirtual #58
660: iload         29
662: invokevirtual #97
665: ldc           #60
667: invokevirtual #58
670: iconst_1
671: invokevirtual #97
674: ldc           #57
676: invokevirtual #58
679: invokevirtual #61
682: iload         29
684: iconst_1
685: if_icmpne     692
688: iconst_1
689: goto          693
692: iconst_0
693: invokestatic  #62
696: aload         31
698: invokestatic  #10
701: aload         32
703: invokestatic  #10
706: aload         33
708: invokestatic  #10
711: aload         34
713: invokestatic  #10
716: aload         35
718: invokestatic  #10
721: aload         36
723: invokestatic  #10
726: aload         38
728: invokestatic  #10
731: aload         39
733: invokestatic  #10
736: aload         40
738: invokestatic  #10
741: new           #55
744: dup
745: invokespecial #56
748: ldc           #57
750: invokevirtual #58
753: iload         41
755: invokevirtual #97
758: ldc           #60
760: invokevirtual #58
763: iconst_1
764: invokevirtual #97
767: ldc           #57
769: invokevirtual #58
772: invokevirtual #61
775: iload         41
777: iconst_1
778: if_icmpne     785
781: iconst_1
782: goto          786
785: iconst_0
786: invokestatic  #62
789: new           #55
792: dup
793: invokespecial #56
796: ldc           #57
798: invokevirtual #58
801: aload         42
803: invokevirtual #58
806: ldc_w         #827
809: invokevirtual #58
812: invokevirtual #61
815: aload         42
817: ldc_w         #828
820: invokestatic  #96
823: aload         43
825: invokestatic  #10
828: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test360
Start line: 14355
End line: 14375
Method source code: 
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("ISOChronology[hi!]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder6.appendSeparator("DateTimeField[yearOfCentury]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder9.appendSeconds();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendYears();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodFormatterBuilder3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder4);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodFormatterBuilder7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder9);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #994
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_1
41: invokevirtual #25
44: astore_3
45: aload_1
46: invokevirtual #39
49: astore        4
51: aload         4
53: ldc_w         #319
56: invokevirtual #196
59: astore        5
61: aload         5
63: invokevirtual #185
66: astore        6
68: aload         5
70: ldc_w         #485
73: invokevirtual #37
76: astore        7
78: aload         7
80: invokevirtual #320
83: astore        8
85: aload         8
87: invokevirtual #33
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test361
Start line: 14378
End line: 14398
Method source code: 
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder0 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodPrinter periodPrinter3 = periodFormatterBuilder2.toPrinter();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.rejectSignedValues(false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder2.appendDays();
        org.joda.time.format.PeriodParser periodParser7 = periodFormatterBuilder6.toParser();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder6.appendSuffix("weekyearOfCentury", "-106");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.appendSecondsWithMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder11.appendSecondsWithOptionalMillis();
        org.junit.Assert.assertNotNull(periodFormatterBuilder2);
        org.junit.Assert.assertNotNull(periodPrinter3);
        org.junit.Assert.assertNotNull(periodFormatterBuilder5);
        org.junit.Assert.assertNotNull(periodFormatterBuilder6);
        org.junit.Assert.assertNotNull(periodParser7);
        org.junit.Assert.assertNotNull(periodFormatterBuilder10);
        org.junit.Assert.assertNotNull(periodFormatterBuilder11);
        org.junit.Assert.assertNotNull(periodFormatterBuilder12);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #995
20: aastore
21: invokevirtual #7
24: pop
25: new           #14
28: dup
29: invokespecial #15
32: astore_1
33: aload_1
34: ldc           #16
36: invokevirtual #17
39: astore_2
40: aload_2
41: invokevirtual #45
44: astore_3
45: aload_2
46: iconst_0
47: invokevirtual #108
50: astore        4
52: aload_2
53: invokevirtual #71
56: astore        5
58: aload         5
60: invokevirtual #142
63: astore        6
65: aload         5
67: ldc_w         #495
70: ldc_w         #477
73: invokevirtual #30
76: astore        7
78: aload         7
80: invokevirtual #185
83: astore        8
85: aload         8
87: invokevirtual #25
90: astore        9
92: aload_2
93: invokestatic  #10
96: aload_3
97: invokestatic  #10
100: aload         4
102: invokestatic  #10
105: aload         5
107: invokestatic  #10
110: aload         6
112: invokestatic  #10
115: aload         7
117: invokestatic  #10
120: aload         8
122: invokestatic  #10
125: aload         9
127: invokestatic  #10
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/RegressionTest0.class
Class name: RegressionTest0
Method name: test362
Start line: 14401
End line: 14491
Method source code: 
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        java.lang.String[] strArray7 = new java.lang.String[] { "DurationField[eras]", "GregorianChronology[hi!]", "69", "DateTimeField[minuteOfDay]", "1338" };
        org.joda.time.format.PeriodFormatter periodFormatter8 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale9 = null;
        org.joda.time.format.PeriodFormatter periodFormatter10 = periodFormatter8.withLocale(locale9);
        boolean boolean11 = periodFormatter8.isParser();
        java.util.Locale locale12 = null;
        org.joda.time.format.PeriodFormatter periodFormatter13 = periodFormatter8.withLocale(locale12);
        org.joda.time.format.PeriodPrinter periodPrinter14 = periodFormatter13.getPrinter();
        org.joda.time.format.PeriodFormatterBuilder.Literal literal15 = org.joda.time.format.PeriodFormatterBuilder.Literal.EMPTY;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, (long) 10, chronology18);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period22 = period19.minusDays((int) (byte) 100);
        java.util.Locale locale24 = null;
        int int25 = literal15.countFieldsToPrint((org.joda.time.ReadablePeriod) period22, 999, locale24);
        org.joda.time.format.PeriodFormatterBuilder.Separator separator28 = new org.joda.time.format.PeriodFormatterBuilder.Separator("yearOfEra", "1338", strArray7, periodPrinter14, (org.joda.time.format.PeriodParser) literal15, false, false);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder29 = new org.joda.time.format.PeriodFormatterBuilder();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder31 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder32 = periodFormatterBuilder29.appendSecondsWithOptionalMillis();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder33 = periodFormatterBuilder29.printZeroNever();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder34 = periodFormatterBuilder29.appendMillis3Digit();
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder36 = periodFormatterBuilder29.appendSeparatorIfFieldsAfter("ZonedChronology[ISOChronology[UTC], America/Los_Angeles]");
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder38 = periodFormatterBuilder29.appendLiteral("52");
        org.joda.time.format.PeriodFormatter periodFormatter39 = org.joda.time.format.ISOPeriodFormat.alternateExtendedWithWeeks();
        java.util.Locale locale40 = null;
        org.joda.time.format.PeriodFormatter periodFormatter41 = periodFormatter39.withLocale(locale40);
        boolean boolean42 = periodFormatter41.isParser();
        java.util.Locale locale43 = null;
        org.joda.time.format.PeriodFormatter periodFormatter44 = periodFormatter41.withLocale(locale43);
        org.joda.time.format.PeriodFormatterBuilder periodFormatterBuilder45 = periodFormatterBuilder38.append(periodFormatter44);
        org.joda.time.format.PeriodParser periodParser46 = periodFormatterBuilder45.toParser();
        org.joda.time.format.PeriodFormatter periodFormatter47 = new org.joda.time.format.PeriodFormatter((org.joda.time.format.PeriodPrinter) separator28, periodParser46);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        int int49 = period48.getHours();
        org.joda.time.Period period51 = period48.withDays(0);
        org.joda.time.MutablePeriod mutablePeriod52 = period51.toMutablePeriod();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType56 = org.joda.time.DateTimeUtils.getPeriodType(periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period(100L, (long) (short) -1, periodType55);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.weeks();
        boolean boolean59 = periodType55.isSupported(durationFieldType58);
        mutablePeriod52.add(durationFieldType58, (int) (byte) 100);
        java.lang.String str62 = mutablePeriod52.toString();
        mutablePeriod52.setYears((int) (short) 10);
        java.lang.String str65 = mutablePeriod52.toString();
        mutablePeriod52.add((-1000), 5258880, (-2922791), 80, (-1217829137), (-1000), 1, (-24));
        mutablePeriod52.setMinutes(351);
        java.util.Locale locale79 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int80 = separator28.parseInto((org.joda.time.ReadWritablePeriod) mutablePeriod52, "1338", 0, locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNotNull(periodFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(periodFormatter13);
        org.junit.Assert.assertNotNull(periodPrinter14);
        org.junit.Assert.assertNotNull(literal15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT-0.090S" + "'", str20, "PT-0.090S");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodFormatterBuilder31);
        org.junit.Assert.assertNotNull(periodFormatterBuilder32);
        org.junit.Assert.assertNotNull(periodFormatterBuilder33);
        org.junit.Assert.assertNotNull(periodFormatterBuilder34);
        org.junit.Assert.assertNotNull(periodFormatterBuilder36);
        org.junit.Assert.assertNotNull(periodFormatterBuilder38);
        org.junit.Assert.assertNotNull(periodFormatter39);
        org.junit.Assert.assertNotNull(periodFormatter41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(periodFormatter44);
        org.junit.Assert.assertNotNull(periodFormatterBuilder45);
        org.junit.Assert.assertNotNull(periodParser46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "P100W" + "'", str62, "P100W");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "P10Y100W" + "'", str65, "P10Y100W");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #996
20: aastore
21: invokevirtual #7
24: pop
25: iconst_5
26: anewarray     #99
29: dup
30: iconst_0
31: ldc           #100
33: aastore
34: dup
35: iconst_1
36: ldc           #101
38: aastore
39: dup
40: iconst_2
41: ldc           #102
43: aastore
44: dup
45: iconst_3
46: ldc           #103
48: aastore
49: dup
50: iconst_4
51: ldc           #104
53: aastore
54: astore_1
55: invokestatic  #12
58: astore_2
59: aconst_null
60: astore_3
61: aload_2
62: aload_3
63: invokevirtual #88
66: astore        4
68: aload_2
69: invokevirtual #89
72: istore        5
74: aconst_null
75: astore        6
77: aload_2
78: aload         6
80: invokevirtual #88
83: astore        7
85: aload         7
87: invokevirtual #90
90: astore        8
92: getstatic     #78
95: astore        9
97: aconst_null
98: astore        10
100: new           #46
103: dup
104: ldc2_w        #79
107: ldc2_w        #81
110: aload         10
112: invokespecial #83
115: astore        11
117: aload         11
119: invokevirtual #84
122: astore        12
124: aload         11
126: bipush        100
128: invokevirtual #85
131: astore        13
133: aconst_null
134: astore        14
136: aload         9
138: aload         13
140: sipush        999
143: aload         14
145: invokevirtual #86
148: istore        15
150: new           #105
153: dup
154: ldc           #106
156: ldc           #104
158: aload_1
159: aload         8
161: aload         9
163: iconst_0
164: iconst_0
165: invokespecial #107
168: astore        16
170: new           #14
173: dup
174: invokespecial #15
177: astore        17
179: aload         17
181: ldc           #16
183: invokevirtual #17
186: astore        18
188: aload         17
190: invokevirtual #25
193: astore        19
195: aload         17
197: invokevirtual #76
200: astore        20
202: aload         17
204: invokevirtual #77
207: astore        21
209: aload         17
211: ldc           #16
213: invokevirtual #17
216: astore        22
218: aload         17
220: ldc           #141
222: invokevirtual #28
225: astore        23
227: invokestatic  #12
230: astore        24
232: aconst_null
233: astore        25
235: aload         24
237: aload         25
239: invokevirtual #88
242: astore        26
244: aload         26
246: invokevirtual #89
249: istore        27
251: aconst_null
252: astore        28
254: aload         26
256: aload         28
258: invokevirtual #88
261: astore        29
263: aload         23
265: aload         29
267: invokevirtual #118
270: astore        30
272: aload         30
274: invokevirtual #142
277: astore        31
279: new           #164
282: dup
283: aload         16
285: aload         31
287: invokespecial #165
290: astore        32
292: getstatic     #8
295: astore        33
297: aload         33
299: invokevirtual #216
302: istore        34
304: aload         33
306: iconst_0
307: invokevirtual #200
310: astore        35
312: aload         35
314: invokevirtual #205
317: astore        36
319: invokestatic  #171
322: astore        37
324: aload         37
326: invokestatic  #172
329: astore        38
331: new           #46
334: dup
335: ldc2_w        #79
338: ldc2_w        #173
341: aload         37
343: invokespecial #175
346: astore        39
348: invokestatic  #176
351: astore        40
353: aload         37
355: aload         40
357: invokevirtual #177
360: istore        41
362: aload         36
364: aload         40
366: bipush        100
368: invokevirtual #226
371: aload         36
373: invokevirtual #235
376: astore        42
378: aload         36
380: bipush        10
382: invokevirtual #236
385: aload         36
387: invokevirtual #235
390: astore        43
392: aload         36
394: sipush        -1000
397: ldc_w         #292
400: ldc_w         #997
403: bipush        80
405: ldc_w         #453
408: sipush        -1000
411: iconst_1
412: bipush        -24
414: invokevirtual #277
417: aload         36
419: sipush        351
422: invokevirtual #998
425: aconst_null
426: astore        44
428: aload         16
430: aload         36
432: ldc           #104
434: iconst_0
435: aload         44
437: invokevirtual #208
440: istore        45
442: ldc           #53
444: invokestatic  #22
447: goto          452
450: astore        45
452: aload_1
453: invokestatic  #10
456: aload_2
457: invokestatic  #10
460: aload         4
462: invokestatic  #10
465: new           #55
468: dup
469: invokespecial #56
472: ldc           #57
474: invokevirtual #58
477: iload         5
479: invokevirtual #97
482: ldc           #60
484: invokevirtual #58
487: iconst_1
488: invokevirtual #97
491: ldc           #57
493: invokevirtual #58
496: invokevirtual #61
499: iload         5
501: iconst_1
502: if_icmpne     509
505: iconst_1
506: goto          510
509: iconst_0
510: invokestatic  #62
513: aload         7
515: invokestatic  #10
518: aload         8
520: invokestatic  #10
523: aload         9
525: invokestatic  #10
528: new           #55
531: dup
532: invokespecial #56
535: ldc           #57
537: invokevirtual #58
540: aload         12
542: invokevirtual #58
545: ldc           #94
547: invokevirtual #58
550: invokevirtual #61
553: aload         12
555: ldc           #95
557: invokestatic  #96
560: aload         13
562: invokestatic  #10
565: new           #55
568: dup
569: invokespecial #56
572: ldc           #57
574: invokevirtual #58
577: iload         15
579: invokevirtual #59
582: ldc           #60
584: invokevirtual #58
587: iconst_0
588: invokevirtual #59
591: ldc           #57
593: invokevirtual #58
596: invokevirtual #61
599: iload         15
601: ifne          608
604: iconst_1
605: goto          609
608: iconst_0
609: invokestatic  #62
612: aload         18
614: invokestatic  #10
617: aload         19
619: invokestatic  #10
622: aload         20
624: invokestatic  #10
627: aload         21
629: invokestatic  #10
632: aload         22
634: invokestatic  #10
637: aload         23
639: invokestatic  #10
642: aload         24
644: invokestatic  #10
647: aload         26
649: invokestatic  #10
652: new           #55
655: dup
656: invokespecial #56
659: ldc           #57
661: invokevirtual #58
664: iload         27
666: invokevirtual #97
669: ldc           #60
671: invokevirtual #58
674: iconst_1
675: invokevirtual #97
678: ldc           #57
680: invokevirtual #58
683: invokevirtual #61
686: iload         27
688: iconst_1
689: if_icmpne     696
692: iconst_1
693: goto          697
696: iconst_0
697: invokestatic  #62
700: aload         29
702: invokestatic  #10
705: aload         30
707: invokestatic  #10
710: aload         31
712: invokestatic  #10
715: aload         33
717: invokestatic  #10
720: new           #55
723: dup
724: invokespecial #56
727: ldc           #57
729: invokevirtual #58
732: iload         34
734: invokevirtual #59
737: ldc           #60
739: invokevirtual #58
742: iconst_0
743: invokevirtual #59
746: ldc           #57
748: invokevirtual #58
751: invokevirtual #61
754: iload         34
756: ifne          763
759: iconst_1
760: goto          764
763: iconst_0
764: invokestatic  #62
767: aload         35
769: invokestatic  #10
772: aload         36
774: invokestatic  #10
777: aload         37
779: invokestatic  #10
782: aload         38
784: invokestatic  #10
787: aload         40
789: invokestatic  #10
792: new           #55
795: dup
796: invokespecial #56
799: ldc           #57
801: invokevirtual #58
804: iload         41
806: invokevirtual #97
809: ldc           #60
811: invokevirtual #58
814: iconst_0
815: invokevirtual #97
818: ldc           #57
820: invokevirtual #58
823: invokevirtual #61
826: iload         41
828: ifne          835
831: iconst_1
832: goto          836
835: iconst_0
836: invokestatic  #62
839: new           #55
842: dup
843: invokespecial #56
846: ldc           #57
848: invokevirtual #58
851: aload         42
853: invokevirtual #58
856: ldc           #238
858: invokevirtual #58
861: invokevirtual #61
864: aload         42
866: ldc           #239
868: invokestatic  #96
871: new           #55
874: dup
875: invokespecial #56
878: ldc           #57
880: invokevirtual #58
883: aload         43
885: invokevirtual #58
888: ldc_w         #999
891: invokevirtual #58
894: invokevirtual #61
897: aload         43
899: ldc_w         #356
902: invokestatic  #96
905: return
Exception table:
from    to  target type
428   447   450   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test000
Start line: 41
End line: 49
Method source code: 
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("!sjj;bzk");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(5, 5, 5, true, 5, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(5, 5, 5, 5, 5, 5, 5, 5);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.UK;
      int int0 = periodFormatterBuilder_FieldFormatter1.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(29, int0);
  }
Method byte code: 
0: new           #2
3: dup
4: ldc           #3
6: invokespecial #4
9: astore_1
10: new           #5
13: dup
14: iconst_5
15: iconst_5
16: iconst_5
17: iconst_1
18: iconst_5
19: aconst_null
20: checkcast     #6
23: aload_1
24: aload_1
25: invokespecial #7
28: astore_2
29: new           #8
32: dup
33: iconst_5
34: iconst_5
35: iconst_5
36: iconst_5
37: iconst_5
38: iconst_5
39: iconst_5
40: iconst_5
41: invokespecial #9
44: astore_3
45: new           #5
48: dup
49: aload_2
50: aload_1
51: invokespecial #10
54: astore        4
56: getstatic     #11
59: astore        5
61: aload         4
63: aload_3
64: aload         5
66: invokevirtual #12
69: istore        6
71: ldc2_w        #13
74: iload         6
76: i2l
77: invokestatic  #15
80: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test001
Start line: 52
End line: 58
Method source code: 
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("The type must not be null", "The type must not be null");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) stringWriter0, 0);
      assertEquals("The type must not be nullThe type must not be null", stringWriter0.toString());
  }
Method byte code: 
0: new           #16
3: dup
4: ldc           #17
6: ldc           #17
8: invokespecial #18
11: astore_1
12: new           #19
15: dup
16: aload_1
17: aload_1
18: invokespecial #20
21: astore_2
22: new           #21
25: dup
26: invokespecial #22
29: astore_3
30: aload_2
31: aload_3
32: iconst_0
33: invokevirtual #23
36: ldc           #24
38: aload_3
39: invokevirtual #25
42: invokestatic  #26
45: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test002
Start line: 61
End line: 65
Method source code: 
  public void test002()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #29
12: astore_2
13: aload_2
14: aload_1
15: invokestatic  #30
18: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test003
Start line: 68
End line: 77
Method source code: 
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeconds();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Period period0 = Period.ZERO;
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^6Fn`D4:?3D]!");
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) seconds0, (Locale) null);
      assertEquals(1, seconds0.size());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #31
12: pop
13: aload_1
14: invokevirtual #32
17: astore_2
18: getstatic     #33
21: astore_3
22: aload_3
23: invokestatic  #34
26: astore        4
28: new           #35
31: dup
32: ldc           #36
34: invokespecial #37
37: astore        5
39: aload_2
40: aload         5
42: aload         4
44: aconst_null
45: checkcast     #38
48: invokeinterface #39,  4
53: lconst_1
54: aload         4
56: invokevirtual #40
59: i2l
60: invokestatic  #15
63: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test004
Start line: 80
End line: 84
Method source code: 
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #41
12: astore_2
13: aload_1
14: aload_2
15: invokestatic  #30
18: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test005
Start line: 87
End line: 107
Method source code: 
  public void test005()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'q6F");
      Locale locale0 = Locale.FRENCH;
      Period period0 = new Period();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("[`ZT'kGKK$7>", "'q6F", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #42
12: astore_2
13: aload_2
14: invokevirtual #43
17: pop
18: aload_1
19: invokevirtual #32
22: checkcast     #44
25: astore_3
26: new           #35
29: dup
30: ldc           #45
32: invokespecial #37
35: astore        4
37: getstatic     #46
40: astore        5
42: new           #47
45: dup
46: invokespecial #48
49: astore        6
51: new           #49
54: dup
55: ldc           #50
57: ldc           #45
59: aconst_null
60: checkcast     #51
63: aload_3
64: aload_3
65: iconst_1
66: iconst_0
67: invokespecial #52
70: astore        7
72: aload         7
74: aload         4
76: aload         6
78: aload         5
80: invokevirtual #53
83: ldc           #54
85: invokestatic  #55
88: goto          100
91: astore        8
93: ldc           #57
95: aload         8
97: invokestatic  #58
100: return
Exception table:
from    to  target type
72    88    91   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test006
Start line: 110
End line: 114
Method source code: 
  public void test006()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-6303));
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: sipush        -6303
12: invokevirtual #59
15: astore_2
16: aload_2
17: aload_1
18: invokestatic  #30
21: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test007
Start line: 117
End line: 127
Method source code: 
  public void test007()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6N[6;\"HKU8");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Period period0 = Period.ZERO;
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("TWN", locale0.getISO3Country());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #60
12: astore_2
13: aload_2
14: invokevirtual #61
17: pop
18: aload_1
19: invokevirtual #32
22: astore_3
23: new           #35
26: dup
27: ldc           #62
29: invokespecial #37
32: astore        4
34: getstatic     #63
37: astore        5
39: getstatic     #33
42: astore        6
44: aload_3
45: aload         4
47: aload         6
49: aload         5
51: invokeinterface #39,  4
56: ldc           #64
58: aload         5
60: invokevirtual #65
63: invokestatic  #26
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test008
Start line: 130
End line: 134
Method source code: 
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #66
12: astore_2
13: aload_1
14: aload_2
15: invokestatic  #30
18: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test009
Start line: 137
End line: 141
Method source code: 
  public void test009()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore("5n)/*w71gtyAvQ&RXE");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #67
11: invokevirtual #68
14: astore_2
15: aload_2
16: aload_1
17: invokestatic  #30
20: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test010
Start line: 144
End line: 148
Method source code: 
  public void test010()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits((-6303));
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: sipush        -6303
12: invokevirtual #69
15: astore_2
16: aload_2
17: aload_1
18: invokestatic  #30
21: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test011
Start line: 151
End line: 160
Method source code: 
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":*5Jn");
      Locale locale0 = Locale.JAPAN;
      MutablePeriod mutablePeriod0 = new MutablePeriod(517, 517, 517, 517);
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("", locale0.getVariant());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #43
12: astore_2
13: aload_2
14: invokevirtual #32
17: astore_3
18: new           #35
21: dup
22: ldc           #70
24: invokespecial #37
27: astore        4
29: getstatic     #71
32: astore        5
34: new           #8
37: dup
38: sipush        517
41: sipush        517
44: sipush        517
47: sipush        517
50: invokespecial #72
53: astore        6
55: aload_3
56: aload         4
58: aload         6
60: aload         5
62: invokeinterface #39,  4
67: ldc           #73
69: aload         5
71: invokevirtual #74
74: invokestatic  #26
77: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test012
Start line: 163
End line: 168
Method source code: 
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[1];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("org.joda.time.format.ISODateTimeFormat", "org.joda.time.format.ISODateTimeFormat", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: iconst_1
9: anewarray     #75
12: astore_2
13: aload_1
14: ldc           #76
16: ldc           #76
18: aload_2
19: invokevirtual #77
22: astore_3
23: aload_1
24: aload_3
25: invokestatic  #30
28: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test013
Start line: 171
End line: 180
Method source code: 
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("pjdl#gw");
      Locale locale0 = Locale.PRC;
      Period period0 = Period.ZERO;
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("CN", locale0.getCountry());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #78
12: pop
13: aload_1
14: invokevirtual #32
17: astore_2
18: new           #35
21: dup
22: ldc           #79
24: invokespecial #37
27: astore_3
28: getstatic     #80
31: astore        4
33: getstatic     #33
36: astore        5
38: aload_2
39: aload_3
40: aload         5
42: aload         4
44: invokeinterface #39,  4
49: ldc           #81
51: aload         4
53: invokevirtual #82
56: invokestatic  #26
59: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test014
Start line: 183
End line: 187
Method source code: 
  public void test014()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("p+55d");
      String string0 = mutablePeriod0.toString();
      assertEquals("P55D", string0);
  }
Method byte code: 
0: ldc           #83
2: invokestatic  #84
5: astore_1
6: aload_1
7: invokevirtual #85
10: astore_2
11: ldc           #86
13: aload_2
14: invokestatic  #26
17: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test015
Start line: 190
End line: 200
Method source code: 
  public void test015()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendSeparator(">8bd!0");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, (Locale) null);
      assertEquals(1, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #87
24: astore_3
25: aload_3
26: ldc           #88
28: invokevirtual #89
31: pop
32: aload_2
33: invokevirtual #32
36: astore        4
38: aload         4
40: invokestatic  #90
43: aload         4
45: aload_1
46: aconst_null
47: checkcast     #38
50: invokeinterface #91,  3
55: istore        5
57: lconst_1
58: iload         5
60: i2l
61: invokestatic  #15
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test016
Start line: 203
End line: 215
Method source code: 
  public void test016()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-5e n");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNotNull(periodPrinter0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale locale0 = Locale.PRC;
      periodPrinter0.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: ldc           #92
23: invokevirtual #93
26: pop
27: aload_2
28: invokevirtual #32
31: astore_3
32: aload_3
33: invokestatic  #90
36: new           #94
39: dup
40: invokespecial #95
43: astore        4
45: getstatic     #80
48: astore        5
50: aload_3
51: aload         4
53: aload_1
54: aload         5
56: invokeinterface #39,  4
61: ldc           #73
63: aload         4
65: invokevirtual #96
68: invokestatic  #26
71: lconst_0
72: aload         4
74: invokevirtual #97
77: i2l
78: invokestatic  #15
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test017
Start line: 218
End line: 228
Method source code: 
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendPrefix("No printer or parser supplied");
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("No printer or parser supplied");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Period period0 = Period.ZERO;
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("zh_TW", locale0.toString());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #98
11: invokevirtual #99
14: pop
15: aload_1
16: invokevirtual #43
19: pop
20: aload_1
21: invokevirtual #32
24: astore_2
25: new           #35
28: dup
29: ldc           #98
31: invokespecial #37
34: astore_3
35: getstatic     #63
38: astore        4
40: getstatic     #33
43: astore        5
45: aload_2
46: aload_3
47: aload         5
49: aload         4
51: invokeinterface #39,  4
56: ldc           #100
58: aload         4
60: invokevirtual #101
63: invokestatic  #26
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test018
Start line: 231
End line: 237
Method source code: 
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertNull(periodPrinter0);
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: new           #27
7: dup
8: invokespecial #28
11: astore_2
12: aload_2
13: aconst_null
14: checkcast     #103
17: aload_1
18: invokevirtual #104
21: pop
22: aload_2
23: invokevirtual #32
26: astore_3
27: aload_3
28: invokestatic  #105
31: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test019
Start line: 240
End line: 246
Method source code: 
  public void test019()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodParser periodParser0 = periodFormatterBuilder1.toParser();
      assertNull(periodParser0);
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: new           #27
7: dup
8: invokespecial #28
11: astore_2
12: aload_2
13: aload_1
14: aconst_null
15: checkcast     #106
18: invokevirtual #104
21: astore_3
22: aload_3
23: invokevirtual #107
26: astore        4
28: aload         4
30: invokestatic  #105
33: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test020
Start line: 249
End line: 252
Method source code: 
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.clear();
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #108
12: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test021
Start line: 255
End line: 268
Method source code: 
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #109
13: invokevirtual #110
16: pop
17: ldc           #111
19: invokestatic  #55
22: goto          32
25: astore_2
26: ldc           #113
28: aload_2
29: invokestatic  #58
32: return
Exception table:
from    to  target type
8    22    25   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test022
Start line: 271
End line: 284
Method source code: 
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #103
13: aconst_null
14: checkcast     #106
17: invokevirtual #104
20: pop
21: ldc           #111
23: invokestatic  #55
26: goto          36
29: astore_2
30: ldc           #113
32: aload_2
33: invokestatic  #58
36: return
Exception table:
from    to  target type
8    26    29   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test023
Start line: 287
End line: 291
Method source code: 
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("orgH6oda.time.format.PeriodFormatRerBuilder$Separator");
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #114
11: invokevirtual #115
14: astore_2
15: aload_2
16: aload_1
17: invokestatic  #30
20: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test024
Start line: 294
End line: 307
Method source code: 
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #75
13: invokevirtual #115
16: pop
17: ldc           #111
19: invokestatic  #55
22: goto          32
25: astore_2
26: ldc           #113
28: aload_2
29: invokestatic  #58
32: return
Exception table:
from    to  target type
8    22    25   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test025
Start line: 310
End line: 323
Method source code: 
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #75
13: invokevirtual #99
16: pop
17: ldc           #111
19: invokestatic  #55
22: goto          32
25: astore_2
26: ldc           #113
28: aload_2
29: invokestatic  #58
32: return
Exception table:
from    to  target type
8    22    25   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test026
Start line: 326
End line: 339
Method source code: 
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #75
13: aconst_null
14: checkcast     #75
17: invokevirtual #116
20: pop
21: ldc           #111
23: invokestatic  #55
26: goto          36
29: astore_2
30: ldc           #113
32: aload_2
33: invokestatic  #58
36: return
Exception table:
from    to  target type
8    26    29   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test027
Start line: 342
End line: 355
Method source code: 
  public void test027()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix("PrRix ot \"ollowed by field", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #117
11: aconst_null
12: checkcast     #75
15: invokevirtual #116
18: pop
19: ldc           #111
21: invokestatic  #55
24: goto          34
27: astore_2
28: ldc           #113
30: aload_2
31: invokestatic  #58
34: return
Exception table:
from    to  target type
8    24    27   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test028
Start line: 358
End line: 363
Method source code: 
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("IS^ T", "IS^ T");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix("IS^ T", "IS^ T");
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #118
11: ldc           #118
13: invokevirtual #116
16: astore_2
17: aload_1
18: ldc           #118
20: ldc           #118
22: invokevirtual #116
25: astore_3
26: aload_3
27: aload_2
28: invokestatic  #30
31: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test029
Start line: 366
End line: 379
Method source code: 
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #119
11: invokevirtual #120
14: pop
15: ldc           #121
17: invokestatic  #55
20: goto          30
23: astore_2
24: ldc           #113
26: aload_2
27: invokestatic  #58
30: return
Exception table:
from    to  target type
8    20    23   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test030
Start line: 382
End line: 395
Method source code: 
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #75
13: invokevirtual #120
16: pop
17: ldc           #111
19: invokestatic  #55
22: goto          32
25: astore_2
26: ldc           #113
28: aload_2
29: invokestatic  #58
32: return
Exception table:
from    to  target type
8    22    25   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test031
Start line: 398
End line: 411
Method source code: 
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #75
13: aconst_null
14: checkcast     #75
17: invokevirtual #123
20: pop
21: ldc           #111
23: invokestatic  #55
26: goto          36
29: astore_2
30: ldc           #113
32: aload_2
33: invokestatic  #58
36: return
Exception table:
from    to  target type
8    26    29   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test032
Start line: 414
End line: 427
Method source code: 
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("pteJx not&ol\"weG by fie~d", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #124
11: aconst_null
12: checkcast     #75
15: invokevirtual #123
18: pop
19: ldc           #111
21: invokestatic  #55
24: goto          34
27: astore_2
28: ldc           #113
30: aload_2
31: invokestatic  #58
34: return
Exception table:
from    to  target type
8    24    27   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test033
Start line: 430
End line: 445
Method source code: 
  public void test033()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("5IT@2c8PZr", "L&+/zW-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: new           #27
7: dup
8: invokespecial #28
11: astore_2
12: aload_2
13: aload_1
14: aconst_null
15: checkcast     #106
18: invokevirtual #104
21: astore_3
22: aload_3
23: ldc           #125
25: ldc           #126
27: invokevirtual #123
30: pop
31: ldc           #121
33: invokestatic  #55
36: goto          48
39: astore        4
41: ldc           #113
43: aload         4
45: invokestatic  #58
48: return
Exception table:
from    to  target type
22    36    39   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test034
Start line: 448
End line: 465
Method source code: 
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.field.OffsetDateTimeField");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Literal0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("-5Pe@di");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: new           #127
11: dup
12: invokespecial #128
15: astore_2
16: new           #44
19: dup
20: aload_2
21: invokespecial #129
24: astore_3
25: new           #130
28: dup
29: ldc           #131
31: invokespecial #132
34: astore        4
36: aload_1
37: aload_3
38: aload         4
40: invokevirtual #104
43: astore        5
45: aload         5
47: ldc           #133
49: invokevirtual #120
52: pop
53: ldc           #121
55: invokestatic  #55
58: goto          70
61: astore        6
63: ldc           #113
65: aload         6
67: invokestatic  #58
70: return
Exception table:
from    to  target type
45    58    61   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test035
Start line: 468
End line: 482
Method source code: 
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("5DtUYlJZwnYa`k");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("5DtUYlJZwnYa`k", "5DtUYlJZwnYa`k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #134
11: invokevirtual #93
14: astore_2
15: aload_2
16: ldc           #134
18: ldc           #134
20: invokevirtual #123
23: pop
24: ldc           #121
26: invokestatic  #55
29: goto          39
32: astore_3
33: ldc           #113
35: aload_3
36: invokestatic  #58
39: return
Exception table:
from    to  target type
15    29    32   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test036
Start line: 485
End line: 498
Method source code: 
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #75
13: aconst_null
14: checkcast     #75
17: invokevirtual #135
20: pop
21: ldc           #111
23: invokestatic  #55
26: goto          36
29: astore_2
30: ldc           #113
32: aload_2
33: invokestatic  #58
36: return
Exception table:
from    to  target type
8    26    29   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test037
Start line: 501
End line: 514
Method source code: 
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator("ygcnK3P", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #136
11: aconst_null
12: checkcast     #75
15: invokevirtual #135
18: pop
19: ldc           #111
21: invokestatic  #55
24: goto          34
27: astore_2
28: ldc           #113
30: aload_2
31: invokestatic  #58
34: return
Exception table:
from    to  target type
8    24    27   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test038
Start line: 517
End line: 531
Method source code: 
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-5e n");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsBefore("5n)/*w71gtyAvQ&RXE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #92
11: invokevirtual #93
14: astore_2
15: aload_2
16: ldc           #67
18: invokevirtual #68
21: pop
22: ldc           #121
24: invokestatic  #55
27: goto          37
30: astore_3
31: ldc           #113
33: aload_3
34: invokestatic  #58
37: return
Exception table:
from    to  target type
15    27    30   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test039
Start line: 534
End line: 548
Method source code: 
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("DurationField=[", "DurationField=[");
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparatorIfFieldsAfter("DurationField=[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #137
11: ldc           #137
13: invokevirtual #116
16: astore_2
17: aload_2
18: ldc           #137
20: invokevirtual #93
23: pop
24: ldc           #121
26: invokestatic  #55
29: goto          39
32: astore_3
33: ldc           #113
35: aload_3
36: invokestatic  #58
39: return
Exception table:
from    to  target type
17    29    32   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test040
Start line: 551
End line: 566
Method source code: 
  public void test040()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.toFormatter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Builder has created neither a printer nor a parser
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: new           #109
11: dup
12: aconst_null
13: checkcast     #103
16: aconst_null
17: checkcast     #106
20: invokespecial #138
23: astore_2
24: aload_1
25: aload_2
26: invokevirtual #110
29: astore_3
30: aload_3
31: invokevirtual #139
34: pop
35: ldc           #121
37: invokestatic  #55
40: goto          52
43: astore        4
45: ldc           #113
47: aload         4
49: invokestatic  #58
52: return
Exception table:
from    to  target type
30    40    43   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test041
Start line: 569
End line: 575
Method source code: 
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertFalse(periodFormatter0.isPrinter());
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: new           #27
7: dup
8: invokespecial #28
11: astore_2
12: aload_2
13: aconst_null
14: checkcast     #103
17: aload_1
18: invokevirtual #104
21: astore_3
22: aload_3
23: invokevirtual #139
26: astore        4
28: aload         4
30: invokevirtual #140
33: invokestatic  #141
36: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test042
Start line: 578
End line: 584
Method source code: 
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("!sjj;bzk");
      periodFormatterBuilder1.toParser();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertNotNull(periodPrinter0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc           #3
11: invokevirtual #93
14: astore_2
15: aload_2
16: invokevirtual #107
19: pop
20: aload_2
21: invokevirtual #32
24: astore_3
25: aload_3
26: invokestatic  #90
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test043
Start line: 587
End line: 596
Method source code: 
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(".55*");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(".55*", ".55*", stringArray0, periodFormatterBuilder_Literal0, (PeriodParser) null, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator1, (PeriodParser) periodFormatterBuilder_Separator0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertTrue(periodFormatter0.isParser());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: iconst_0
9: anewarray     #75
12: astore_2
13: new           #130
16: dup
17: ldc           #142
19: invokespecial #132
22: astore_3
23: new           #49
26: dup
27: ldc           #142
29: ldc           #142
31: aload_2
32: aload_3
33: aconst_null
34: checkcast     #106
37: iconst_1
38: iconst_1
39: invokespecial #52
42: astore        4
44: aload         4
46: aload_3
47: aconst_null
48: checkcast     #106
51: invokevirtual #143
54: astore        5
56: aload_1
57: aload         5
59: aload         4
61: invokevirtual #104
64: astore        6
66: aload         6
68: invokevirtual #139
71: astore        7
73: aload         7
75: invokevirtual #144
78: invokestatic  #145
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test044
Start line: 599
End line: 605
Method source code: 
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) null);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertFalse(periodFormatter0.isParser());
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: new           #27
7: dup
8: invokespecial #28
11: astore_2
12: aload_2
13: aload_1
14: aconst_null
15: checkcast     #106
18: invokevirtual #104
21: astore_3
22: aload_3
23: invokevirtual #139
26: astore        4
28: aload         4
30: invokevirtual #144
33: invokestatic  #141
36: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test045
Start line: 608
End line: 615
Method source code: 
  public void test045()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("p+55d");
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("/bw");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1, 4, 4, true, 1, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Locale locale0 = Locale.CANADA;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "p+55d", 4, locale0);
      assertEquals((-5), int0);
  }
Method byte code: 
0: ldc           #83
2: invokestatic  #84
5: astore_1
6: new           #2
9: dup
10: ldc           #146
12: invokespecial #4
15: astore_2
16: new           #5
19: dup
20: iconst_1
21: iconst_4
22: iconst_4
23: iconst_1
24: iconst_1
25: aconst_null
26: checkcast     #6
29: aload_2
30: aload_2
31: invokespecial #7
34: astore_3
35: getstatic     #147
38: astore        4
40: aload_3
41: aload_1
42: ldc           #83
44: iconst_4
45: aload         4
47: invokevirtual #148
50: istore        5
52: ldc2_w        #149
55: iload         5
57: i2l
58: invokestatic  #15
61: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test046
Start line: 618
End line: 630
Method source code: 
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p+55");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p+55\" is malformed at \"+55\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #151
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test047
Start line: 633
End line: 645
Method source code: 
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p1,+w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p1,+w\" is malformed at \"1,+w\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #153
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test048
Start line: 648
End line: 652
Method source code: 
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(".BR-8+)~3u7AAFq");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(".BR-8+)~3u7AAFq", 3);
      assertEquals((-4), int0);
  }
Method byte code: 
0: new           #2
3: dup
4: ldc           #154
6: invokespecial #4
9: astore_1
10: aload_1
11: ldc           #154
13: iconst_3
14: invokevirtual #155
17: istore_2
18: ldc2_w        #156
21: iload_2
22: i2l
23: invokestatic  #15
26: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test049
Start line: 655
End line: 667
Method source code: 
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p5.m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p5.m\" is malformed at \"5.m\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #158
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test050
Start line: 670
End line: 682
Method source code: 
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p0/y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p0/y\" is malformed at \"0/y\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #159
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test051
Start line: 685
End line: 689
Method source code: 
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(".BR-8+)~3u7AAFq");
      int int0 = periodFormatterBuilder_SimpleAffix0.scan(".pd2e*GmXNvb%_", 3);
      assertEquals((-4), int0);
  }
Method byte code: 
0: new           #2
3: dup
4: ldc           #154
6: invokespecial #4
9: astore_1
10: aload_1
11: ldc           #160
13: iconst_3
14: invokevirtual #155
17: istore_2
18: ldc2_w        #156
21: iload_2
22: i2l
23: invokestatic  #15
26: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test052
Start line: 692
End line: 704
Method source code: 
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("P39fTx*,37*r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P39fTx*,37*r\" is malformed at \"39fTx*,37*r\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #161
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test053
Start line: 707
End line: 708
Method source code: 
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",7.4mz9E]@N&G@v}");
Method byte code: 
0: new           #2
3: dup
4: ldc           #162
6: invokespecial #4
9: astore_1
10: aload_1
11: ldc           #162
13: iconst_3
14: invokevirtual #155
17: istore_2
18: ldc2_w        #156
21: iload_2
22: i2l
23: invokestatic  #15
26: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test054
Start line: 714
End line: 726
Method source code: 
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p16gp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p16gp\" is malformed at \"16gp\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #163
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test055
Start line: 729
End line: 741
Method source code: 
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("P57Qpe%?@JK;_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P57Qpe%?@JK;_\" is malformed at \"57Qpe%?@JK;_\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #164
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test056
Start line: 744
End line: 748
Method source code: 
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength((-4177984));
      assertEquals(58, int0);
  }
Method byte code: 
0: new           #16
3: dup
4: ldc           #165
6: ldc           #165
8: invokespecial #18
11: astore_1
12: aload_1
13: ldc           #166
15: invokevirtual #167
18: istore_2
19: ldc2_w        #168
22: iload_2
23: i2l
24: invokestatic  #15
27: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test057
Start line: 751
End line: 755
Method source code: 
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$CompositeAffix", "org.joda.time.format.PeriodFormatterBuilder$CompositeAffix");
      int int0 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(1);
      assertEquals(58, int0);
  }
Method byte code: 
0: new           #16
3: dup
4: ldc           #165
6: ldc           #165
8: invokespecial #18
11: astore_1
12: aload_1
13: iconst_1
14: invokevirtual #167
17: istore_2
18: ldc2_w        #168
21: iload_2
22: i2l
23: invokestatic  #15
26: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test058
Start line: 758
End line: 765
Method source code: 
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("The type must not be null", "The type must not be null");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-3553));
      assertEquals(50, stringBuffer0.length());
  }
Method byte code: 
0: new           #16
3: dup
4: ldc           #17
6: ldc           #17
8: invokespecial #18
11: astore_1
12: new           #19
15: dup
16: aload_1
17: aload_1
18: invokespecial #20
21: astore_2
22: new           #21
25: dup
26: invokespecial #22
29: astore_3
30: aload_3
31: invokevirtual #170
34: astore        4
36: aload_2
37: aload         4
39: sipush        -3553
42: invokevirtual #171
45: ldc2_w        #172
48: aload         4
50: invokevirtual #174
53: i2l
54: invokestatic  #15
57: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test059
Start line: 768
End line: 773
Method source code: 
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.format.PeriodFormatterBuilder$Composite", "org.joda.time.format.PeriodFormatterBuilder$Composite");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "org.joda.time.format.PeriodFormatterBuilder$Composite");
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1);
      assertEquals("org.joda.time.format.PeriodFormatterBuilder$Compositeorg.joda.time.format.PeriodFormatterBuilder$Composite", stringBuffer0.toString());
  }
Method byte code: 
0: new           #16
3: dup
4: ldc           #175
6: ldc           #175
8: invokespecial #18
11: astore_1
12: new           #176
15: dup
16: ldc           #175
18: invokespecial #177
21: astore_2
22: aload_1
23: aload_2
24: iconst_1
25: invokevirtual #178
28: ldc           #179
30: aload_2
31: invokevirtual #180
34: invokestatic  #26
37: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test060
Start line: 776
End line: 781
Method source code: 
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix((String) null, (String) null);
      StringWriter stringWriter0 = new StringWriter();
      periodFormatterBuilder_PluralAffix0.printTo((Writer) stringWriter0, 1);
      assertEquals("null", stringWriter0.toString());
  }
Method byte code: 
0: new           #16
3: dup
4: aconst_null
5: checkcast     #75
8: aconst_null
9: checkcast     #75
12: invokespecial #18
15: astore_1
16: new           #21
19: dup
20: invokespecial #22
23: astore_2
24: aload_1
25: aload_2
26: iconst_1
27: invokevirtual #181
30: ldc           #182
32: aload_2
33: invokevirtual #25
36: invokestatic  #26
39: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test061
Start line: 784
End line: 794
Method source code: 
  public void test061()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-5e- ni");
      periodFormatterBuilder0.appendPrefix("am-5e- ni", "am-5e- ni");
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.UK;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "am-5e- ni", 2, locale0);
      assertEquals(2, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: ldc           #183
23: invokevirtual #93
26: pop
27: aload_2
28: ldc           #183
30: ldc           #183
32: invokevirtual #116
35: pop
36: aload_2
37: invokevirtual #61
40: pop
41: aload_2
42: invokevirtual #32
45: checkcast     #49
48: astore_3
49: getstatic     #11
52: astore        4
54: aload_3
55: aload_1
56: ldc           #183
58: iconst_2
59: aload         4
61: invokevirtual #184
64: istore        5
66: ldc2_w        #185
69: iload         5
71: i2l
72: invokestatic  #15
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test062
Start line: 797
End line: 0
Method source code: 
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(",7.4mz9E]@N&G@v}", ",7.4mz9E]@N&G@v}");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3, 3, 3, false, 3, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      Period period0 = periodFormatter0.parsePeriod(",7.4mz9E]@N&G@v}");
      assertNotNull(period0);
  }
Method byte code: 
0: iconst_1
1: anewarray     #5
4: astore_1
5: new           #16
8: dup
9: ldc           #162
11: ldc           #162
13: invokespecial #18
16: astore_2
17: new           #19
20: dup
21: aload_2
22: aload_2
23: invokespecial #20
26: astore_3
27: new           #5
30: dup
31: iconst_3
32: iconst_3
33: iconst_3
34: iconst_0
35: iconst_3
36: aload_1
37: aload_3
38: aload_3
39: invokespecial #7
42: astore        4
44: new           #109
47: dup
48: aload         4
50: aload         4
52: invokespecial #138
55: astore        5
57: aload         5
59: ldc           #162
61: invokevirtual #187
64: astore        6
66: aload         6
68: invokestatic  #90
71: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test063
Start line: 808
End line: 810
Method source code: 
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(",7.4mz9E]@N&G@v}", "gfc0'%x%(M'");
Method byte code: 
0: iconst_1
1: anewarray     #5
4: astore_1
5: new           #16
8: dup
9: ldc           #162
11: ldc           #188
13: invokespecial #18
16: astore_2
17: new           #19
20: dup
21: aload_2
22: aload_2
23: invokespecial #20
26: astore_3
27: new           #5
30: dup
31: iconst_3
32: iconst_3
33: iconst_3
34: iconst_0
35: iconst_3
36: aload_1
37: aload_3
38: aload_3
39: invokespecial #7
42: astore        4
44: new           #109
47: dup
48: aload         4
50: aload         4
52: invokespecial #138
55: astore        5
57: aload         5
59: ldc           #188
61: invokevirtual #187
64: astore        6
66: aload         4
68: aload         6
70: invokevirtual #189
73: lstore        7
75: lconst_0
76: lload         7
78: invokestatic  #15
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test064
Start line: 820
End line: 830
Method source code: 
  public void test064()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("-5(7I\"PoP522@i");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      periodFormatterBuilder1.appendSuffix("Asia/Ho_Chi_Minh", "-5(7I\"PoP522@i");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.UK;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "-5(7I\"PoP522@i", 0, locale0);
      assertEquals(0, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: ldc           #191
19: invokevirtual #93
22: pop
23: aload_2
24: invokevirtual #192
27: astore_3
28: aload_3
29: ldc           #193
31: ldc           #191
33: invokevirtual #123
36: pop
37: aload_2
38: invokevirtual #32
41: checkcast     #49
44: astore        4
46: getstatic     #11
49: astore        5
51: aload         4
53: aload_1
54: ldc           #191
56: iconst_0
57: aload         5
59: invokevirtual #184
62: istore        6
64: lconst_0
65: iload         6
67: i2l
68: invokestatic  #15
71: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test065
Start line: 833
End line: 838
Method source code: 
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("The type must not be null", "The type must not be null");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("DurationField[", 0);
      assertEquals((-1), int0);
  }
Method byte code: 
0: new           #16
3: dup
4: ldc           #17
6: ldc           #17
8: invokespecial #18
11: astore_1
12: new           #19
15: dup
16: aload_1
17: aload_1
18: invokespecial #20
21: astore_2
22: aload_2
23: ldc           #194
25: iconst_0
26: invokevirtual #195
29: istore_3
30: ldc2_w        #196
33: iload_3
34: i2l
35: invokestatic  #15
38: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test066
Start line: 841
End line: 849
Method source code: 
  public void test066()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("p+55d");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("p+55d", "p+55d");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(2, 2, 2, true, 2, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      Locale locale0 = Locale.CHINA;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "p+55d", 2, locale0);
      assertEquals(2, int0);
  }
Method byte code: 
0: ldc           #83
2: invokestatic  #84
5: astore_1
6: new           #16
9: dup
10: ldc           #83
12: ldc           #83
14: invokespecial #18
17: astore_2
18: new           #19
21: dup
22: aload_2
23: aload_2
24: invokespecial #20
27: astore_3
28: new           #5
31: dup
32: iconst_2
33: iconst_2
34: iconst_2
35: iconst_1
36: iconst_2
37: aconst_null
38: checkcast     #6
41: aload_3
42: aload_2
43: invokespecial #7
46: astore        4
48: getstatic     #198
51: astore        5
53: aload         4
55: aload_1
56: ldc           #83
58: iconst_2
59: aload         5
61: invokevirtual #148
64: istore        6
66: ldc2_w        #185
69: iload         6
71: i2l
72: invokestatic  #15
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test067
Start line: 852
End line: 871
Method source code: 
  public void test067()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      periodFormatterBuilder1.appendSuffix("2");
      periodFormatterBuilder0.appendSuffix("2", "2");
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("2", "2", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "2", 0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #199
20: astore_3
21: aload_3
22: ldc           #119
24: invokevirtual #120
27: pop
28: aload_2
29: ldc           #119
31: ldc           #119
33: invokevirtual #123
36: pop
37: aload_2
38: invokevirtual #32
41: checkcast     #44
44: astore        4
46: new           #49
49: dup
50: ldc           #119
52: ldc           #119
54: aconst_null
55: checkcast     #51
58: aload         4
60: aload         4
62: iconst_1
63: iconst_1
64: invokespecial #52
67: astore        5
69: aload         5
71: aload_1
72: ldc           #119
74: iconst_0
75: aconst_null
76: checkcast     #38
79: invokevirtual #184
82: pop
83: ldc           #54
85: invokestatic  #55
88: goto          100
91: astore        6
93: ldc           #57
95: aload         6
97: invokestatic  #58
100: return
Exception table:
from    to  target type
69    88    91   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test068
Start line: 874
End line: 883
Method source code: 
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("<@&erT+z[~m.", "<@&erT+z[~m.");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(43, 43, 43, false, 43, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 43, (Chronology) julianChronology0);
      Locale locale0 = Locale.CHINESE;
      int int0 = periodFormatterBuilder_FieldFormatter0.countFieldsToPrint(mutablePeriod0, (-1889), locale0);
      assertEquals(0, int0);
  }
Method byte code: 
0: iconst_0
1: anewarray     #5
4: astore_1
5: new           #16
8: dup
9: ldc           #200
11: ldc           #200
13: invokespecial #18
16: astore_2
17: new           #5
20: dup
21: bipush        43
23: bipush        43
25: bipush        43
27: iconst_0
28: bipush        43
30: aload_1
31: aload_2
32: aload_2
33: invokespecial #7
36: astore_3
37: invokestatic  #201
40: astore        4
42: new           #8
45: dup
46: ldc2_w        #202
49: aload         4
51: invokespecial #204
54: astore        5
56: getstatic     #205
59: astore        6
61: aload_3
62: aload         5
64: sipush        -1889
67: aload         6
69: invokevirtual #206
72: istore        7
74: lconst_0
75: iload         7
77: i2l
78: invokestatic  #15
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test069
Start line: 886
End line: 894
Method source code: 
  public void test069()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Locale locale0 = new Locale("Days", "Days", "Days");
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(5, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #61
20: astore_3
21: aload_3
22: invokevirtual #32
25: astore        4
27: new           #38
30: dup
31: ldc           #207
33: ldc           #207
35: ldc           #207
37: invokespecial #208
40: astore        5
42: aload         4
44: aload_1
45: aload         5
47: invokeinterface #91,  3
52: istore        6
54: ldc2_w        #209
57: iload         6
59: i2l
60: invokestatic  #15
63: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test070
Start line: 897
End line: 901
Method source code: 
  public void test070()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-28), (-28), (-28), (-28));
      String string0 = mutablePeriod0.toString();
      assertEquals("PT-28H-28M-28.028S", string0);
  }
Method byte code: 
0: new           #8
3: dup
4: bipush        -28
6: bipush        -28
8: bipush        -28
10: bipush        -28
12: invokespecial #72
15: astore_1
16: aload_1
17: invokevirtual #85
20: astore_2
21: ldc           #211
23: aload_2
24: invokestatic  #26
27: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test071
Start line: 904
End line: 908
Method source code: 
  public void test071()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      String string0 = mutablePeriod0.toString();
      assertEquals("PT0S", string0);
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: aload_1
9: invokevirtual #85
12: astore_2
13: ldc           #212
15: aload_2
16: invokestatic  #26
19: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test072
Start line: 911
End line: 923
Method source code: 
  public void test072()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(">8bd!0");
      periodFormatterBuilder2.appendPrefix(">8bd!0");
      periodFormatterBuilder1.appendMinutes();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("2>8bd!0>8bd!02", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #87
24: astore_3
25: aload_3
26: ldc           #88
28: invokevirtual #89
31: astore        4
33: aload         4
35: ldc           #88
37: invokevirtual #99
40: pop
41: aload_3
42: invokevirtual #213
45: pop
46: aload_2
47: invokevirtual #32
50: astore        5
52: new           #176
55: dup
56: invokespecial #214
59: astore        6
61: aload         5
63: aload         6
65: aload_1
66: aconst_null
67: checkcast     #38
70: invokeinterface #215,  4
75: ldc           #216
77: aload         6
79: invokevirtual #180
82: invokestatic  #26
85: ldc2_w        #217
88: aload         6
90: invokevirtual #174
93: i2l
94: invokestatic  #15
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test073
Start line: 926
End line: 935
Method source code: 
  public void test073()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis3Digit();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("000", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #78
20: pop
21: aload_2
22: invokevirtual #32
25: astore_3
26: new           #176
29: dup
30: invokespecial #214
33: astore        4
35: aload_3
36: aload         4
38: aload_1
39: aconst_null
40: checkcast     #38
43: invokeinterface #215,  4
48: ldc           #219
50: aload         4
52: invokevirtual #180
55: invokestatic  #26
58: ldc2_w        #220
61: aload         4
63: invokevirtual #174
66: i2l
67: invokestatic  #15
70: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test074
Start line: 938
End line: 947
Method source code: 
  public void test074()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals(5, stringBuffer0.length());
      assertEquals("0.000", stringBuffer0.toString());
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #61
20: pop
21: aload_2
22: invokevirtual #32
25: astore_3
26: new           #176
29: dup
30: invokespecial #214
33: astore        4
35: aload_3
36: aload         4
38: aload_1
39: aconst_null
40: checkcast     #38
43: invokeinterface #215,  4
48: ldc2_w        #209
51: aload         4
53: invokevirtual #174
56: i2l
57: invokestatic  #15
60: ldc           #222
62: aload         4
64: invokevirtual #180
67: invokestatic  #26
70: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test075
Start line: 950
End line: 967
Method source code: 
  public void test075()  throws Throwable  {
      Duration duration0 = new Duration((-55L));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime(1175L, dateTimeZone0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateTime0);
      Period period1 = period0.plusYears(5);
      // Undeclared exception!
      try { 
        Days.standardDaysIn(period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P5YT-0.055S
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
Method byte code: 
0: new           #223
3: dup
4: ldc2_w        #224
7: invokespecial #226
10: astore_1
11: invokestatic  #227
14: astore_2
15: new           #228
18: dup
19: ldc2_w        #229
22: aload_2
23: invokespecial #231
26: astore_3
27: aload_1
28: aload_3
29: invokevirtual #232
32: astore        4
34: aload         4
36: iconst_5
37: invokevirtual #233
40: astore        5
42: aload         5
44: invokestatic  #234
47: pop
48: ldc           #111
50: invokestatic  #55
53: goto          65
56: astore        6
58: ldc           #235
60: aload         6
62: invokestatic  #58
65: return
Exception table:
from    to  target type
42    53    56   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test076
Start line: 970
End line: 981
Method source code: 
  public void test076()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-5e n");
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Locale locale0 = Locale.PRC;
      periodPrinter0.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(12, charArrayWriter0.size());
      assertEquals("am-5e n2.002", charArrayWriter0.toString());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: ldc           #92
23: invokevirtual #93
26: pop
27: aload_2
28: invokevirtual #61
31: pop
32: aload_2
33: invokevirtual #32
36: astore_3
37: new           #94
40: dup
41: invokespecial #95
44: astore        4
46: getstatic     #80
49: astore        5
51: aload_3
52: aload         4
54: aload_1
55: aload         5
57: invokeinterface #39,  4
62: ldc2_w        #236
65: aload         4
67: invokevirtual #97
70: i2l
71: invokestatic  #15
74: ldc           #238
76: aload         4
78: invokevirtual #96
81: invokestatic  #26
84: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test077
Start line: 984
End line: 994
Method source code: 
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.appendSuffix(":*5QJn", ":*5QJn");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":*5QJn");
      Locale locale0 = Locale.JAPAN;
      Period period0 = Period.ZERO;
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("JPN", locale0.getISO3Country());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #61
12: astore_2
13: aload_2
14: ldc           #239
16: ldc           #239
18: invokevirtual #123
21: pop
22: aload_1
23: invokevirtual #32
26: astore_3
27: new           #35
30: dup
31: ldc           #239
33: invokespecial #37
36: astore        4
38: getstatic     #71
41: astore        5
43: getstatic     #33
46: astore        6
48: aload_3
49: aload         4
51: aload         6
53: aload         5
55: invokeinterface #39,  4
60: ldc           #240
62: aload         5
64: invokevirtual #65
67: invokestatic  #26
70: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test078
Start line: 997
End line: 1007
Method source code: 
  public void test078()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-18), (-18), (-18), (-18), (-18), (-18), (-18), (-18));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-5eK7WF ni");
      periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.ITALIAN;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "am-5eK7WF ni", (-18), locale0);
      assertEquals((-18), int0);
  }
Method byte code: 
0: new           #8
3: dup
4: bipush        -18
6: bipush        -18
8: bipush        -18
10: bipush        -18
12: bipush        -18
14: bipush        -18
16: bipush        -18
18: bipush        -18
20: invokespecial #9
23: astore_1
24: new           #27
27: dup
28: invokespecial #28
31: astore_2
32: aload_2
33: ldc           #241
35: invokevirtual #93
38: pop
39: aload_2
40: invokevirtual #242
43: pop
44: aload_2
45: invokevirtual #243
48: pop
49: aload_2
50: invokevirtual #32
53: checkcast     #49
56: astore_3
57: getstatic     #244
60: astore        4
62: aload_3
63: aload_1
64: ldc           #241
66: bipush        -18
68: aload         4
70: invokevirtual #184
73: istore        5
75: ldc2_w        #245
78: iload         5
80: i2l
81: invokestatic  #15
84: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test079
Start line: 1010
End line: 1016
Method source code: 
  public void test079()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("p+55d");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-653), (-653), (-653), true, (-653), (PeriodFormatterBuilder.FieldFormatter[]) null, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "NoDays", (-653), locale0);
      assertEquals((-653), int0);
  }
Method byte code: 
0: ldc           #83
2: invokestatic  #84
5: astore_1
6: new           #5
9: dup
10: sipush        -653
13: sipush        -653
16: sipush        -653
19: iconst_1
20: sipush        -653
23: aconst_null
24: checkcast     #6
27: aconst_null
28: checkcast     #247
31: aconst_null
32: checkcast     #247
35: invokespecial #7
38: astore_2
39: getstatic     #63
42: astore_3
43: aload_2
44: aload_1
45: ldc           #248
47: sipush        -653
50: aload_3
51: invokevirtual #148
54: istore        4
56: ldc2_w        #249
59: iload         4
61: i2l
62: invokestatic  #15
65: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test080
Start line: 1019
End line: 1029
Method source code: 
  public void test080()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2, 2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("aE-5e)d");
      periodFormatterBuilder1.rejectSignedValues(true);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder2.toPrinter();
      Locale locale0 = Locale.JAPAN;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "aE-5e)d", 2, locale0);
      assertEquals((-3), int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: iconst_2
9: iconst_2
10: iconst_2
11: iconst_2
12: invokespecial #9
15: astore_1
16: new           #27
19: dup
20: invokespecial #28
23: astore_2
24: aload_2
25: ldc           #251
27: invokevirtual #93
30: astore_3
31: aload_3
32: iconst_1
33: invokevirtual #252
36: pop
37: aload_3
38: invokevirtual #213
41: astore        4
43: aload         4
45: invokevirtual #32
48: checkcast     #49
51: astore        5
53: getstatic     #71
56: astore        6
58: aload         5
60: aload_1
61: ldc           #251
63: iconst_2
64: aload         6
66: invokevirtual #184
69: istore        7
71: ldc2_w        #253
74: iload         7
76: i2l
77: invokestatic  #15
80: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test081
Start line: 1032
End line: 1044
Method source code: 
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p+m5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p+m5\" is malformed at \"+m5\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc           #255
2: invokestatic  #84
5: pop
6: ldc           #111
8: invokestatic  #55
11: goto          21
14: astore_1
15: ldc           #152
17: aload_1
18: invokestatic  #58
21: return
Exception table:
from    to  target type
0    11    14   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test082
Start line: 1047
End line: 1056
Method source code: 
  public void test082()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("+m-%eKF i");
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.CHINESE;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "+m-%eKF i", 2, locale0);
      assertEquals((-3), int0);
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: ldc_w         #256
20: invokevirtual #93
23: astore_3
24: aload_3
25: invokevirtual #61
28: pop
29: aload_2
30: invokevirtual #32
33: checkcast     #49
36: astore        4
38: getstatic     #205
41: astore        5
43: aload         4
45: aload_1
46: ldc_w         #256
49: iconst_2
50: aload         5
52: invokevirtual #184
55: istore        6
57: ldc2_w        #253
60: iload         6
62: i2l
63: invokestatic  #15
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test083
Start line: 1059
End line: 1068
Method source code: 
  public void test083()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-He- ni");
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.forLanguageTag("am-He- ni");
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "am-He- ni", 2, locale0);
      assertEquals((-3), int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: ldc_w         #257
24: invokevirtual #93
27: pop
28: aload_2
29: invokevirtual #61
32: pop
33: aload_2
34: invokevirtual #32
37: checkcast     #49
40: astore_3
41: ldc_w         #257
44: invokestatic  #258
47: astore        4
49: aload_3
50: aload_1
51: ldc_w         #257
54: iconst_2
55: aload         4
57: invokevirtual #184
60: istore        5
62: ldc2_w        #253
65: iload         5
67: i2l
68: invokestatic  #15
71: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test084
Start line: 1071
End line: 1080
Method source code: 
  public void test084()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2, 2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("!)GJ;<&U5");
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = new Locale("!)GJ;<&U5");
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "K[,", 2, locale0);
      assertEquals((-3), int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: iconst_2
9: iconst_2
10: iconst_2
11: iconst_2
12: invokespecial #9
15: astore_1
16: new           #27
19: dup
20: invokespecial #28
23: astore_2
24: aload_2
25: ldc_w         #259
28: invokevirtual #93
31: pop
32: aload_2
33: invokevirtual #61
36: pop
37: aload_2
38: invokevirtual #32
41: checkcast     #49
44: astore_3
45: new           #38
48: dup
49: ldc_w         #259
52: invokespecial #260
55: astore        4
57: aload_3
58: aload_1
59: ldc_w         #261
62: iconst_2
63: aload         4
65: invokevirtual #184
68: istore        5
70: ldc2_w        #253
73: iload         5
75: i2l
76: invokestatic  #15
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test085
Start line: 1083
End line: 1101
Method source code: 
  public void test085()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(".55*", ".55*", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      Locale locale0 = Locale.ENGLISH;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, ".55*", 0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #43
20: astore_3
21: aload_3
22: invokevirtual #32
25: checkcast     #44
28: astore        4
30: new           #49
33: dup
34: ldc           #142
36: ldc           #142
38: aconst_null
39: checkcast     #51
42: aload         4
44: aload         4
46: iconst_1
47: iconst_1
48: invokespecial #52
51: astore        5
53: getstatic     #262
56: astore        6
58: aload         5
60: aload_1
61: ldc           #142
63: iconst_0
64: aload         6
66: invokevirtual #184
69: pop
70: ldc           #54
72: invokestatic  #55
75: goto          87
78: astore        7
80: ldc           #57
82: aload         7
84: invokestatic  #58
87: return
Exception table:
from    to  target type
58    75    78   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test086
Start line: 1104
End line: 1122
Method source code: 
  public void test086()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("I3", "I3", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, ".6.:W+;7D\"I$7&>n:H", 0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #61
20: pop
21: aload_2
22: invokevirtual #32
25: checkcast     #44
28: astore_3
29: new           #49
32: dup
33: ldc_w         #263
36: ldc_w         #263
39: aconst_null
40: checkcast     #51
43: aload_3
44: aload_3
45: iconst_1
46: iconst_1
47: invokespecial #52
50: astore        4
52: getstatic     #63
55: astore        5
57: aload         4
59: aload_1
60: ldc_w         #264
63: iconst_0
64: aload         5
66: invokevirtual #184
69: pop
70: ldc           #54
72: invokestatic  #55
75: goto          87
78: astore        6
80: ldc           #57
82: aload         6
84: invokestatic  #58
87: return
Exception table:
from    to  target type
57    75    78   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test087
Start line: 1125
End line: 1142
Method source code: 
  public void test087()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("I3", "I3", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "2.su!o!^odt=4tns", 0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #61
20: pop
21: aload_2
22: invokevirtual #32
25: checkcast     #44
28: astore_3
29: new           #49
32: dup
33: ldc_w         #263
36: ldc_w         #263
39: aconst_null
40: checkcast     #51
43: aload_3
44: aload_3
45: iconst_1
46: iconst_1
47: invokespecial #52
50: astore        4
52: aload         4
54: aload_1
55: ldc_w         #265
58: iconst_0
59: aconst_null
60: checkcast     #38
63: invokevirtual #184
66: pop
67: ldc           #54
69: invokestatic  #55
72: goto          84
75: astore        5
77: ldc           #57
79: aload         5
81: invokestatic  #58
84: return
Exception table:
from    to  target type
52    72    75   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test088
Start line: 1145
End line: 1163
Method source code: 
  public void test088()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator((String) null, (String) null, (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      Locale locale0 = Locale.JAPANESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, ".455", 0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #61
20: pop
21: aload_2
22: invokevirtual #32
25: checkcast     #44
28: astore_3
29: new           #49
32: dup
33: aconst_null
34: checkcast     #75
37: aconst_null
38: checkcast     #75
41: aconst_null
42: checkcast     #51
45: aload_3
46: aload_3
47: iconst_1
48: iconst_1
49: invokespecial #52
52: astore        4
54: getstatic     #266
57: astore        5
59: aload         4
61: aload_1
62: ldc_w         #267
65: iconst_0
66: aload         5
68: invokevirtual #184
71: pop
72: ldc           #54
74: invokestatic  #55
77: goto          89
80: astore        6
82: ldc           #57
84: aload         6
86: invokestatic  #58
89: return
Exception table:
from    to  target type
59    77    80   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test089
Start line: 1166
End line: 1184
Method source code: 
  public void test089()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.KOREA;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(".5", "%4ml", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "9223372036854775808", 0, locale0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"9223372036\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #61
20: pop
21: aload_2
22: invokevirtual #32
25: checkcast     #44
28: astore_3
29: getstatic     #268
32: astore        4
34: new           #49
37: dup
38: ldc_w         #269
41: ldc_w         #270
44: aconst_null
45: checkcast     #51
48: aload_3
49: aload_3
50: iconst_1
51: iconst_1
52: invokespecial #52
55: astore        5
57: aload         5
59: aload_1
60: ldc_w         #271
63: iconst_0
64: aload         4
66: invokevirtual #184
69: pop
70: ldc_w         #272
73: invokestatic  #55
76: goto          89
79: astore        6
81: ldc_w         #274
84: aload         6
86: invokestatic  #58
89: return
Exception table:
from    to  target type
57    76    79   Class java/lang/NumberFormatException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test090
Start line: 1187
End line: 1194
Method source code: 
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("O1", "O1");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(326565, 326565, 326565, true, 326565, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      Seconds seconds0 = Seconds.ZERO;
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(seconds0);
      assertEquals(9223372036854775807L, long0);
  }
Method byte code: 
0: iconst_0
1: anewarray     #5
4: astore_1
5: new           #16
8: dup
9: ldc_w         #275
12: ldc_w         #275
15: invokespecial #18
18: astore_2
19: new           #5
22: dup
23: ldc_w         #276
26: ldc_w         #276
29: ldc_w         #276
32: iconst_1
33: ldc_w         #276
36: aload_1
37: aload_2
38: aload_2
39: invokespecial #7
42: astore_3
43: getstatic     #277
46: astore        4
48: aload_3
49: aload         4
51: invokevirtual #189
54: lstore        5
56: ldc2_w        #278
59: lload         5
61: invokestatic  #15
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test091
Start line: 1197
End line: 1365
Method source code: 
  public void test091()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("pp,Z{");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(4, 4, 4, false, (-105861870), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      Period period0 = new Period();
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(period0);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("p+55d");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("p+55d");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(7, 7, 7, false, 7, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(mutablePeriod0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s");
      Locale locale0 = new Locale("s", "s", "s");
      Period period0 = new Period();
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("S", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("girtial cannot be null");
      Locale locale0 = Locale.ITALIAN;
      Period period0 = Period.minutes(52);
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("ita", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Literal must not be null");
      Locale locale0 = Locale.JAPAN;
      Period period0 = new Period();
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^6Fn`D4:?3D]!");
      Locale locale0 = Locale.ITALY;
      Period period0 = Period.ZERO;
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) seconds0, locale0);
      assertEquals("it", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendMinutes();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":*5QJn");
      Locale locale0 = Locale.GERMANY;
      Period period0 = Period.ZERO;
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":*5QJn");
      Locale locale0 = Locale.JAPAN;
      LocalTime localTime0 = LocalTime.now();
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(localTime0, localTime0, periodType0);
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("JPN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Days days0 = Days.MIN_VALUE;
      Locale locale0 = Locale.UK;
      int int0 = periodPrinter0.countFieldsToPrint(days0, 7618, locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("P9yMCl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P9yMCl\" is malformed at \"MCl\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p+5m*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p+5m*\" is malformed at \"*\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2, 2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-5eK7WF ni");
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.ITALIAN;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "am-5eK7WF ni", 2, locale0);
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("pt5m");
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",7.4mz9E]@N&G@v}");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(3, 3, 3, false, (-4), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) (-4), (Chronology) julianChronology0);
      Locale locale0 = Locale.GERMANY;
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, ",7.4mz9E]@N&G@v}", (-4), locale0);
Method byte code: 
0: iconst_0
1: anewarray     #5
4: astore_1
5: new           #2
8: dup
9: ldc_w         #280
12: invokespecial #4
15: astore_2
16: new           #5
19: dup
20: iconst_4
21: iconst_4
22: iconst_4
23: iconst_0
24: ldc_w         #281
27: aload_1
28: aload_2
29: aload_2
30: invokespecial #7
33: astore_3
34: new           #47
37: dup
38: invokespecial #48
41: astore        4
43: aload_3
44: aload         4
46: invokevirtual #189
49: lstore        5
51: ldc2_w        #278
54: lload         5
56: invokestatic  #15
59: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test092
Start line: 1207
End line: 1214
Method source code: 
  public void test092()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("p+55d");
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("p+55d");
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(7, 7, 7, false, 7, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      long long0 = periodFormatterBuilder_FieldFormatter0.getFieldValue(mutablePeriod0);
      assertEquals(0L, long0);
  }
Method byte code: 
0: ldc           #83
2: invokestatic  #84
5: astore_1
6: iconst_0
7: anewarray     #5
10: astore_2
11: new           #2
14: dup
15: ldc           #83
17: invokespecial #4
20: astore_3
21: new           #5
24: dup
25: bipush        7
27: bipush        7
29: bipush        7
31: iconst_0
32: bipush        7
34: aload_2
35: aload_3
36: aload_3
37: invokespecial #7
40: astore        4
42: aload         4
44: aload_1
45: invokevirtual #189
48: lstore        5
50: lconst_0
51: lload         5
53: invokestatic  #15
56: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test093
Start line: 1217
End line: 1227
Method source code: 
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("s");
      Locale locale0 = new Locale("s", "s", "s");
      Period period0 = new Period();
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("S", locale0.getCountry());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #61
12: astore_2
13: aload_2
14: invokevirtual #61
17: pop
18: aload_1
19: invokevirtual #32
22: astore_3
23: new           #35
26: dup
27: ldc_w         #282
30: invokespecial #37
33: astore        4
35: new           #38
38: dup
39: ldc_w         #282
42: ldc_w         #282
45: ldc_w         #282
48: invokespecial #208
51: astore        5
53: new           #47
56: dup
57: invokespecial #48
60: astore        6
62: aload_3
63: aload         4
65: aload         6
67: aload         5
69: invokeinterface #39,  4
74: ldc_w         #283
77: aload         5
79: invokevirtual #82
82: invokestatic  #26
85: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test094
Start line: 1230
End line: 1240
Method source code: 
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("girtial cannot be null");
      Locale locale0 = Locale.ITALIAN;
      Period period0 = Period.minutes(52);
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("ita", locale0.getISO3Language());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #42
12: astore_2
13: aload_2
14: invokevirtual #61
17: pop
18: aload_2
19: invokevirtual #32
22: astore_3
23: new           #35
26: dup
27: ldc_w         #284
30: invokespecial #37
33: astore        4
35: getstatic     #244
38: astore        5
40: bipush        52
42: invokestatic  #285
45: astore        6
47: aload_3
48: aload         4
50: aload         6
52: aload         5
54: invokeinterface #39,  4
59: ldc_w         #286
62: aload         5
64: invokevirtual #287
67: invokestatic  #26
70: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test095
Start line: 1243
End line: 1254
Method source code: 
  public void test095()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      periodFormatterBuilder2.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Literal must not be null");
      Locale locale0 = Locale.JAPAN;
      Period period0 = new Period();
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("", locale0.getVariant());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #42
12: astore_2
13: aload_2
14: invokevirtual #61
17: astore_3
18: aload_3
19: invokevirtual #61
22: pop
23: aload_1
24: invokevirtual #32
27: astore        4
29: new           #35
32: dup
33: ldc_w         #288
36: invokespecial #37
39: astore        5
41: getstatic     #71
44: astore        6
46: new           #47
49: dup
50: invokespecial #48
53: astore        7
55: aload         4
57: aload         5
59: aload         7
61: aload         6
63: invokeinterface #39,  4
68: ldc           #73
70: aload         6
72: invokevirtual #74
75: invokestatic  #26
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test096
Start line: 1257
End line: 1268
Method source code: 
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("^6Fn`D4:?3D]!");
      Locale locale0 = Locale.ITALY;
      Period period0 = Period.ZERO;
      Seconds seconds0 = Seconds.standardSecondsIn(period0);
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) seconds0, locale0);
      assertEquals("it", locale0.getLanguage());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #42
12: astore_2
13: aload_2
14: invokevirtual #61
17: pop
18: aload_1
19: invokevirtual #32
22: astore_3
23: new           #35
26: dup
27: ldc           #36
29: invokespecial #37
32: astore        4
34: getstatic     #289
37: astore        5
39: getstatic     #33
42: astore        6
44: aload         6
46: invokestatic  #34
49: astore        7
51: aload_3
52: aload         4
54: aload         7
56: aload         5
58: invokeinterface #39,  4
63: ldc_w         #290
66: aload         5
68: invokevirtual #291
71: invokestatic  #26
74: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test097
Start line: 1271
End line: 1282
Method source code: 
  public void test097()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.printZeroRarelyFirst();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      periodFormatterBuilder0.appendMinutes();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":*5QJn");
      Locale locale0 = Locale.GERMANY;
      Period period0 = Period.ZERO;
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("", locale0.getVariant());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #42
12: pop
13: aload_1
14: invokevirtual #43
17: pop
18: aload_1
19: invokevirtual #213
22: pop
23: aload_1
24: invokevirtual #32
27: astore_2
28: new           #35
31: dup
32: ldc           #239
34: invokespecial #37
37: astore_3
38: getstatic     #292
41: astore        4
43: getstatic     #33
46: astore        5
48: aload_2
49: aload_3
50: aload         5
52: aload         4
54: invokeinterface #39,  4
59: ldc           #73
61: aload         4
63: invokevirtual #74
66: invokestatic  #26
69: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test098
Start line: 1285
End line: 1296
Method source code: 
  public void test098()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":*5QJn");
      Locale locale0 = Locale.JAPAN;
      LocalTime localTime0 = LocalTime.now();
      PeriodType periodType0 = PeriodType.millis();
      Period period0 = new Period(localTime0, localTime0, periodType0);
      periodPrinter0.printTo((Writer) mockPrintWriter0, (ReadablePeriod) period0, locale0);
      assertEquals("JPN", locale0.getISO3Country());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #43
12: pop
13: aload_1
14: invokevirtual #32
17: astore_2
18: new           #35
21: dup
22: ldc           #239
24: invokespecial #37
27: astore_3
28: getstatic     #71
31: astore        4
33: invokestatic  #293
36: astore        5
38: invokestatic  #294
41: astore        6
43: new           #47
46: dup
47: aload         5
49: aload         5
51: aload         6
53: invokespecial #295
56: astore        7
58: aload_2
59: aload_3
60: aload         7
62: aload         4
64: invokeinterface #39,  4
69: ldc           #240
71: aload         4
73: invokevirtual #65
76: invokestatic  #26
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test099
Start line: 1299
End line: 1307
Method source code: 
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Days days0 = Days.MIN_VALUE;
      Locale locale0 = Locale.UK;
      int int0 = periodPrinter0.countFieldsToPrint(days0, 7618, locale0);
      assertEquals(0, int0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #43
12: pop
13: aload_1
14: invokevirtual #32
17: astore_2
18: getstatic     #296
21: astore_3
22: getstatic     #11
25: astore        4
27: aload_2
28: aload_3
29: sipush        7618
32: aload         4
34: invokeinterface #297,  4
39: istore        5
41: lconst_0
42: iload         5
44: i2l
45: invokestatic  #15
48: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test100
Start line: 1310
End line: 1322
Method source code: 
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("P9yMCl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P9yMCl\" is malformed at \"MCl\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc_w         #298
3: invokestatic  #84
6: pop
7: ldc           #111
9: invokestatic  #55
12: goto          22
15: astore_1
16: ldc           #152
18: aload_1
19: invokestatic  #58
22: return
Exception table:
from    to  target type
0    12    15   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test101
Start line: 1325
End line: 1337
Method source code: 
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("p+5m*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"p+5m*\" is malformed at \"*\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }
Method byte code: 
0: ldc_w         #299
3: invokestatic  #84
6: pop
7: ldc           #111
9: invokestatic  #55
12: goto          22
15: astore_1
16: ldc           #152
18: aload_1
19: invokestatic  #58
22: return
Exception table:
from    to  target type
0    12    15   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test102
Start line: 1340
End line: 1349
Method source code: 
  public void test102()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2, 2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("am-5eK7WF ni");
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.ITALIAN;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "am-5eK7WF ni", 2, locale0);
      assertEquals((-3), int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: iconst_2
9: iconst_2
10: iconst_2
11: iconst_2
12: invokespecial #9
15: astore_1
16: new           #27
19: dup
20: invokespecial #28
23: astore_2
24: aload_2
25: ldc           #241
27: invokevirtual #93
30: pop
31: aload_2
32: invokevirtual #243
35: pop
36: aload_2
37: invokevirtual #32
40: checkcast     #49
43: astore_3
44: getstatic     #244
47: astore        4
49: aload_3
50: aload_1
51: ldc           #241
53: iconst_2
54: aload         4
56: invokevirtual #184
59: istore        5
61: ldc2_w        #253
64: iload         5
66: i2l
67: invokestatic  #15
70: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test103
Start line: 1352
End line: 1355
Method source code: 
  public void test103()  throws Throwable  {
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("pt5m");
      assertNotNull(mutablePeriod0);
  }
Method byte code: 
0: ldc_w         #300
3: invokestatic  #84
6: astore_1
7: aload_1
8: invokestatic  #90
11: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test104
Start line: 1358
End line: 1359
Method source code: 
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",7.4mz9E]@N&G@v}");
Method byte code: 
0: new           #2
3: dup
4: ldc           #162
6: invokespecial #4
9: astore_1
10: iconst_1
11: anewarray     #5
14: astore_2
15: new           #5
18: dup
19: iconst_3
20: iconst_3
21: iconst_3
22: iconst_0
23: bipush        -4
25: aload_2
26: aload_1
27: aload_1
28: invokespecial #7
31: astore_3
32: invokestatic  #201
35: astore        4
37: new           #8
40: dup
41: ldc2_w        #156
44: aload         4
46: invokespecial #204
49: astore        5
51: getstatic     #292
54: astore        6
56: aload_3
57: aload         5
59: ldc           #162
61: bipush        -4
63: aload         6
65: invokevirtual #148
68: istore        7
70: ldc2_w        #149
73: iload         7
75: i2l
76: invokestatic  #15
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test105
Start line: 1370
End line: 1377
Method source code: 
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.joda.time.format.ISODateTimeFormat";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("org.joda.time.format.ISODateTimeFormat", "org.joda.time.format.ISODateTimeFormat", stringArray0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #61
12: astore_2
13: iconst_1
14: anewarray     #75
17: astore_3
18: aload_3
19: iconst_0
20: ldc           #76
22: aastore
23: aload_2
24: ldc           #76
26: ldc           #76
28: aload_3
29: invokevirtual #77
32: astore        4
34: aload         4
36: aload_2
37: invokestatic  #30
40: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test106
Start line: 1380
End line: 1390
Method source code: 
  public void test106()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("5P5Y2i");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendMinutes();
      periodFormatterBuilder2.appendSeparatorIfFieldsBefore("5P5Y2i");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, locale0);
      assertEquals(13, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: ldc_w         #301
20: invokevirtual #93
23: astore_3
24: aload_2
25: invokevirtual #213
28: astore        4
30: aload         4
32: ldc_w         #301
35: invokevirtual #68
38: pop
39: aload_3
40: invokevirtual #32
43: astore        5
45: getstatic     #302
48: astore        6
50: aload         5
52: aload_1
53: aload         6
55: invokeinterface #91,  3
60: istore        7
62: ldc2_w        #303
65: iload         7
67: i2l
68: invokestatic  #15
71: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test107
Start line: 1393
End line: 1401
Method source code: 
  public void test107()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendSeparatorIfFieldsAfter("av-5F n");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.forLanguageTag("av-5F n");
      int int0 = periodPrinter0.countFieldsToPrint(mutablePeriod0, 2, locale0);
      assertEquals(0, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: ldc_w         #305
24: invokevirtual #93
27: pop
28: aload_2
29: invokevirtual #32
32: astore_3
33: ldc_w         #305
36: invokestatic  #258
39: astore        4
41: aload_3
42: aload_1
43: iconst_2
44: aload         4
46: invokeinterface #297,  4
51: istore        5
53: lconst_0
54: iload         5
56: i2l
57: invokestatic  #15
60: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test108
Start line: 1404
End line: 1406
Method source code: 
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bI.9e ;}?YYD 0:fV?L";
Method byte code: 
0: iconst_2
1: anewarray     #75
4: astore_1
5: aload_1
6: iconst_0
7: ldc_w         #306
10: aastore
11: aload_1
12: iconst_1
13: ldc_w         #306
16: aastore
17: getstatic     #102
20: astore_2
21: new           #49
24: dup
25: ldc_w         #288
28: ldc_w         #306
31: aload_1
32: aload_2
33: aload_2
34: iconst_1
35: iconst_1
36: invokespecial #52
39: astore_3
40: aload_3
41: aload_2
42: aload_2
43: invokevirtual #143
46: astore        4
48: getstatic     #307
51: astore        5
53: new           #38
56: dup
57: ldc_w         #308
60: ldc_w         #308
63: ldc_w         #308
66: invokespecial #208
69: astore        6
71: aload         4
73: aload         5
75: aload         6
77: invokevirtual #309
80: istore        7
82: lconst_0
83: iload         7
85: i2l
86: invokestatic  #15
89: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test109
Start line: 1418
End line: 1427
Method source code: 
  public void test109()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      periodFormatterBuilder1.appendSeparator(">8bd!0");
      periodFormatterBuilder1.appendMinutes();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      int int0 = periodPrinter0.calculatePrintedLength(mutablePeriod0, (Locale) null);
      assertEquals(8, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #192
24: astore_3
25: aload_3
26: ldc           #88
28: invokevirtual #89
31: pop
32: aload_3
33: invokevirtual #213
36: pop
37: aload_2
38: invokevirtual #32
41: astore        4
43: aload         4
45: aload_1
46: aconst_null
47: checkcast     #38
50: invokeinterface #91,  3
55: istore        5
57: ldc2_w        #310
60: iload         5
62: i2l
63: invokestatic  #15
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test110
Start line: 1430
End line: 1446
Method source code: 
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      periodFormatterBuilder1.appendMillis3Digit();
      periodFormatterBuilder1.appendMonths();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ":*5QJn";
      stringArray0[1] = ":*5QJn";
      stringArray0[2] = "'i";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(":*5QJn", "'i", stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      Months months0 = Months.TEN;
      Locale locale0 = Locale.ITALY;
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(months0, locale0);
      assertEquals(16, int0);
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #242
12: astore_2
13: aload_2
14: invokevirtual #78
17: pop
18: aload_2
19: invokevirtual #312
22: pop
23: aload_2
24: invokevirtual #32
27: checkcast     #44
30: astore_3
31: iconst_3
32: anewarray     #75
35: astore        4
37: aload         4
39: iconst_0
40: ldc           #239
42: aastore
43: aload         4
45: iconst_1
46: ldc           #239
48: aastore
49: aload         4
51: iconst_2
52: ldc_w         #313
55: aastore
56: new           #49
59: dup
60: ldc           #239
62: ldc_w         #313
65: aload         4
67: aload_3
68: aload_3
69: iconst_1
70: iconst_1
71: invokespecial #52
74: astore        5
76: aload         5
78: aload_3
79: aload_3
80: invokevirtual #143
83: astore        6
85: getstatic     #314
88: astore        7
90: getstatic     #289
93: astore        8
95: aload         6
97: aload         7
99: aload         8
101: invokevirtual #309
104: istore        9
106: ldc2_w        #315
109: iload         9
111: i2l
112: invokestatic  #15
115: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test111
Start line: 1449
End line: 0
Method source code: 
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("qy{*;6gX?*37z!ZxV", "qy{*;6gX?*37z!ZxV", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      Minutes minutes0 = Minutes.MIN_VALUE;
      Locale locale0 = Locale.TAIWAN;
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(minutes0, locale0);
      assertEquals(0, int0);
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: iconst_0
5: anewarray     #75
8: astore_2
9: new           #49
12: dup
13: ldc_w         #317
16: ldc_w         #317
19: aload_2
20: aload_1
21: aload_1
22: iconst_0
23: iconst_0
24: invokespecial #52
27: astore_3
28: aload_3
29: aload_1
30: aload_1
31: invokevirtual #143
34: astore        4
36: getstatic     #318
39: astore        5
41: getstatic     #319
44: astore        6
46: aload         4
48: aload         5
50: aload         6
52: invokevirtual #309
55: istore        7
57: lconst_0
58: iload         7
60: i2l
61: invokestatic  #15
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test112
Start line: 1461
End line: 1478
Method source code: 
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No formatter supplied", "No formatter supplied", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Locale locale0 = Locale.CHINESE;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: new           #49
7: dup
8: ldc_w         #320
11: ldc_w         #320
14: aconst_null
15: checkcast     #51
18: aload_1
19: aload_1
20: iconst_1
21: iconst_1
22: invokespecial #52
25: astore_2
26: new           #8
29: dup
30: aconst_null
31: checkcast     #321
34: aconst_null
35: checkcast     #321
38: invokespecial #322
41: astore_3
42: getstatic     #205
45: astore        4
47: new           #176
50: dup
51: invokespecial #214
54: astore        5
56: aload_2
57: aload         5
59: aload_3
60: aload         4
62: invokevirtual #323
65: ldc           #54
67: invokestatic  #55
70: goto          82
73: astore        6
75: ldc           #57
77: aload         6
79: invokestatic  #58
82: return
Exception table:
from    to  target type
56    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test113
Start line: 1481
End line: 1501
Method source code: 
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      Locale locale0 = Locale.JAPAN;
      Period period0 = Period.ZERO;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Illegal instant due to time zone offset transition: ", "#", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #243
12: pop
13: aload_1
14: invokevirtual #32
17: checkcast     #44
20: astore_2
21: getstatic     #71
24: astore_3
25: getstatic     #33
28: astore        4
30: new           #49
33: dup
34: ldc_w         #324
37: ldc_w         #325
40: aconst_null
41: checkcast     #51
44: aload_2
45: aload_2
46: iconst_1
47: iconst_0
48: invokespecial #52
51: astore        5
53: new           #21
56: dup
57: invokespecial #22
60: astore        6
62: aload         6
64: invokevirtual #170
67: astore        7
69: aload         5
71: aload         7
73: aload         4
75: aload_3
76: invokevirtual #323
79: ldc           #54
81: invokestatic  #55
84: goto          96
87: astore        8
89: ldc           #57
91: aload         8
93: invokestatic  #58
96: return
Exception table:
from    to  target type
69    84    87   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test114
Start line: 1504
End line: 1514
Method source code: 
  public void test114()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendSeparator(">8bd!0");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("2", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #87
24: astore_3
25: aload_3
26: ldc           #88
28: invokevirtual #89
31: pop
32: aload_2
33: invokevirtual #32
36: astore        4
38: new           #176
41: dup
42: invokespecial #214
45: astore        5
47: aload         4
49: aload         5
51: aload_1
52: aconst_null
53: checkcast     #38
56: invokeinterface #215,  4
61: ldc           #119
63: aload         5
65: invokevirtual #180
68: invokestatic  #26
71: lconst_1
72: aload         5
74: invokevirtual #174
77: i2l
78: invokestatic  #15
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test115
Start line: 1517
End line: 1529
Method source code: 
  public void test115()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendSeparator("@os=FH");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      periodFormatterBuilder2.appendMillis();
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringBuffer stringBuffer0 = new StringBuffer();
      periodPrinter0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("2@os=FH22", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #87
24: astore_3
25: aload_3
26: ldc_w         #326
29: invokevirtual #89
32: pop
33: aload_3
34: invokevirtual #213
37: astore        4
39: aload         4
41: invokevirtual #87
44: pop
45: aload_2
46: invokevirtual #32
49: astore        5
51: new           #176
54: dup
55: invokespecial #214
58: astore        6
60: aload         5
62: aload         6
64: aload_1
65: aconst_null
66: checkcast     #38
69: invokeinterface #215,  4
74: ldc_w         #327
77: aload         6
79: invokevirtual #180
82: invokestatic  #26
85: ldc2_w        #328
88: aload         6
90: invokevirtual #174
93: i2l
94: invokestatic  #15
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test116
Start line: 1532
End line: 1549
Method source code: 
  public void test116()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No formatter supplied", "No formatter supplied", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Locale locale0 = Locale.CHINESE;
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: getstatic     #102
3: astore_1
4: new           #49
7: dup
8: ldc_w         #320
11: ldc_w         #320
14: aconst_null
15: checkcast     #51
18: aload_1
19: aload_1
20: iconst_0
21: iconst_0
22: invokespecial #52
25: astore_2
26: new           #8
29: dup
30: aconst_null
31: checkcast     #321
34: aconst_null
35: checkcast     #321
38: invokespecial #322
41: astore_3
42: getstatic     #205
45: astore        4
47: new           #176
50: dup
51: invokespecial #214
54: astore        5
56: aload_2
57: aload         5
59: aload_3
60: aload         4
62: invokevirtual #323
65: ldc           #54
67: invokestatic  #55
70: goto          82
73: astore        6
75: ldc           #57
77: aload         6
79: invokestatic  #58
82: return
Exception table:
from    to  target type
56    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test117
Start line: 1552
End line: 1569
Method source code: 
  public void test117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No formatter supplied", "No formatter supplied", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #21
3: dup
4: invokespecial #22
7: astore_1
8: getstatic     #102
11: astore_2
12: new           #49
15: dup
16: ldc_w         #320
19: ldc_w         #320
22: aconst_null
23: checkcast     #51
26: aload_2
27: aload_2
28: iconst_1
29: iconst_1
30: invokespecial #52
33: astore_3
34: new           #8
37: dup
38: aconst_null
39: checkcast     #321
42: aconst_null
43: checkcast     #321
46: invokespecial #322
49: astore        4
51: getstatic     #205
54: astore        5
56: aload_3
57: aload_1
58: aload         4
60: aload         5
62: invokevirtual #53
65: ldc           #54
67: invokestatic  #55
70: goto          82
73: astore        6
75: ldc           #57
77: aload         6
79: invokestatic  #58
82: return
Exception table:
from    to  target type
56    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test118
Start line: 1572
End line: 1581
Method source code: 
  public void test118()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      periodFormatterBuilder1.appendSeparator(">8bd!0");
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      StringWriter stringWriter0 = new StringWriter(2);
      periodPrinter0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("2", stringWriter0.toString());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #192
24: astore_3
25: aload_3
26: ldc           #88
28: invokevirtual #89
31: pop
32: aload_2
33: invokevirtual #32
36: astore        4
38: new           #21
41: dup
42: iconst_2
43: invokespecial #330
46: astore        5
48: aload         4
50: aload         5
52: aload_1
53: aconst_null
54: checkcast     #38
57: invokeinterface #39,  4
62: ldc           #119
64: aload         5
66: invokevirtual #25
69: invokestatic  #26
72: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test119
Start line: 1584
End line: 1595
Method source code: 
  public void test119()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      periodFormatterBuilder0.appendMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(">8bd!0", "}-NvyX-,K=GFl{_4", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder_Separator1.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("2}-NvyX-,K=GFl{_42", charArrayWriter0.toString());
      assertEquals(18, charArrayWriter0.size());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #87
24: pop
25: aload_2
26: invokevirtual #32
29: checkcast     #44
32: astore_3
33: new           #94
36: dup
37: iconst_2
38: invokespecial #331
41: astore        4
43: new           #49
46: dup
47: ldc           #88
49: ldc_w         #332
52: aconst_null
53: checkcast     #51
56: aload_3
57: aload_3
58: iconst_1
59: iconst_1
60: invokespecial #52
63: astore        5
65: aload         5
67: aload_3
68: aload_3
69: invokevirtual #143
72: astore        6
74: aload         6
76: aload         4
78: aload_1
79: aconst_null
80: checkcast     #38
83: invokevirtual #53
86: ldc_w         #333
89: aload         4
91: invokevirtual #96
94: invokestatic  #26
97: ldc2_w        #334
100: aload         4
102: invokevirtual #97
105: i2l
106: invokestatic  #15
109: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test120
Start line: 1598
End line: 1610
Method source code: 
  public void test120()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendMinutes();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(2);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(">8bd!0", "}-NvyX-,K=GFl{_4", (String[]) null, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder_Separator1.printTo((Writer) charArrayWriter0, (ReadablePeriod) mutablePeriod0, (Locale) null);
      assertEquals("22>8bd!022", charArrayWriter0.toString());
      assertEquals(10, charArrayWriter0.size());
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: invokespecial #72
11: astore_1
12: new           #27
15: dup
16: invokespecial #28
19: astore_2
20: aload_2
21: invokevirtual #87
24: astore_3
25: aload_3
26: invokevirtual #213
29: pop
30: aload_2
31: invokevirtual #32
34: checkcast     #44
37: astore        4
39: new           #94
42: dup
43: iconst_2
44: invokespecial #331
47: astore        5
49: new           #49
52: dup
53: ldc           #88
55: ldc_w         #332
58: aconst_null
59: checkcast     #51
62: aload         4
64: aload         4
66: iconst_1
67: iconst_1
68: invokespecial #52
71: astore        6
73: aload         6
75: aload         4
77: aload         4
79: invokevirtual #143
82: astore        7
84: aload         7
86: aload         5
88: aload_1
89: aconst_null
90: checkcast     #38
93: invokevirtual #53
96: ldc_w         #336
99: aload         5
101: invokevirtual #96
104: invokestatic  #26
107: ldc2_w        #337
110: aload         5
112: invokevirtual #97
115: i2l
116: invokestatic  #15
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test121
Start line: 1613
End line: 1630
Method source code: 
  public void test121()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("No formatter supplied", "No formatter supplied", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, false);
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Locale locale0 = Locale.CHINESE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Separator", e);
      }
  }
Method byte code: 
0: new           #21
3: dup
4: invokespecial #22
7: astore_1
8: getstatic     #102
11: astore_2
12: new           #49
15: dup
16: ldc_w         #320
19: ldc_w         #320
22: aconst_null
23: checkcast     #51
26: aload_2
27: aload_2
28: iconst_0
29: iconst_0
30: invokespecial #52
33: astore_3
34: new           #8
37: dup
38: aconst_null
39: checkcast     #321
42: aconst_null
43: checkcast     #321
46: invokespecial #322
49: astore        4
51: getstatic     #205
54: astore        5
56: aload_3
57: aload_1
58: aload         4
60: aload         5
62: invokevirtual #53
65: ldc           #54
67: invokestatic  #55
70: goto          82
73: astore        6
75: ldc           #57
77: aload         6
79: invokestatic  #58
82: return
Exception table:
from    to  target type
56    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test122
Start line: 1633
End line: 1641
Method source code: 
  public void test122()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      periodFormatterBuilder1.appendSeparator("", "");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "-5(7I\"Po,h522@i", 0, (Locale) null);
      assertEquals((-3), int0);
  }
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #27
11: dup
12: invokespecial #28
15: astore_2
16: aload_2
17: invokevirtual #87
20: astore_3
21: aload_3
22: ldc           #73
24: ldc           #73
26: invokevirtual #135
29: pop
30: aload_2
31: invokevirtual #32
34: checkcast     #49
37: astore        4
39: aload         4
41: aload_1
42: ldc_w         #339
45: iconst_0
46: aconst_null
47: checkcast     #38
50: invokevirtual #184
53: istore        5
55: ldc2_w        #253
58: iload         5
60: i2l
61: invokestatic  #15
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test123
Start line: 1644
End line: 1655
Method source code: 
  public void test123()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(2, 2, 2, 2, 2, 2, 2, 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      periodFormatterBuilder0.appendSeparatorIfFieldsBefore("5n)/*w71gtyAvQ&RXE");
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      Locale locale0 = Locale.ENGLISH;
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "am-5e n", 2, locale0);
      assertEquals(4, int0);
  }
Method byte code: 
0: new           #8
3: dup
4: iconst_2
5: iconst_2
6: iconst_2
7: iconst_2
8: iconst_2
9: iconst_2
10: iconst_2
11: iconst_2
12: invokespecial #9
15: astore_1
16: new           #27
19: dup
20: invokespecial #28
23: astore_2
24: getstatic     #102
27: astore_3
28: aload_2
29: aload_3
30: aload_3
31: invokevirtual #104
34: pop
35: aload_2
36: ldc           #67
38: invokevirtual #68
41: pop
42: aload_2
43: invokevirtual #192
46: astore        4
48: aload         4
50: invokevirtual #32
53: checkcast     #49
56: astore        5
58: getstatic     #262
61: astore        6
63: aload         5
65: aload_1
66: ldc           #92
68: iconst_2
69: aload         6
71: invokevirtual #184
74: istore        7
76: ldc2_w        #340
79: iload         7
81: i2l
82: invokestatic  #15
85: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test124
Start line: 1658
End line: 1694
Method source code: 
  public void test124()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.parseInto(mutablePeriod0, "|Pf^c&T#&Yw^.gi{", 2, (Locale) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertTrue(periodFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertTrue(periodFormatter0.isParser());
  }
}
Method byte code: 
0: new           #8
3: dup
4: invokespecial #190
7: astore_1
8: new           #127
11: dup
12: invokespecial #128
15: astore_2
16: new           #44
19: dup
20: aload_2
21: invokespecial #129
24: astore_3
25: aload_3
26: aload_1
27: ldc_w         #342
30: iconst_2
31: aconst_null
32: checkcast     #38
35: invokevirtual #343
38: pop
39: ldc_w         #344
42: invokestatic  #55
45: goto          57
48: astore        4
50: ldc           #175
52: aload         4
54: invokestatic  #58
57: return
Exception table:
from    to  target type
25    45    48   Class java/lang/UnsupportedOperationException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test125
Start line: 1676
End line: 1683
Method source code: 
  public void test125()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertTrue(periodFormatter0.isPrinter());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: invokevirtual #61
12: astore_2
13: aload_1
14: invokevirtual #32
17: checkcast     #44
20: astore_3
21: aload_1
22: aload_3
23: aload_3
24: invokevirtual #104
27: pop
28: aload_2
29: invokevirtual #139
32: astore        4
34: aload         4
36: invokevirtual #140
39: invokestatic  #145
42: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/PeriodFormatterBuilder_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/PeriodFormatterBuilder_ESTest.class
Class name: PeriodFormatterBuilder_ESTest
Method name: test126
Start line: 1686
End line: 1693
Method source code: 
  public void test126()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertTrue(periodFormatter0.isParser());
  }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: new           #127
11: dup
12: invokespecial #128
15: astore_2
16: new           #44
19: dup
20: aload_2
21: invokespecial #129
24: astore_3
25: aload_1
26: aload_3
27: aload_3
28: invokevirtual #104
31: astore        4
33: aload         4
35: invokevirtual #139
38: astore        5
40: aload         5
42: invokevirtual #144
45: invokestatic  #145
48: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestISOPeriodFormat.class
Class name: TestISOPeriodFormat
Method name: testSubclassableConstructor
Start line: 92
End line: 97
Method source code: 
    public void testSubclassableConstructor() {
        ISOPeriodFormat f = new ISOPeriodFormat() {
            // test constructor is protected
        };
        assertNotNull(f);
    }
Method byte code: 
0: new           #37
3: dup
4: aload_0
5: invokespecial #38
8: astore_1
9: aload_1
10: invokestatic  #39
13: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestISOPeriodFormat.class
Class name: TestISOPeriodFormat
Method name: testFormatStandard
Start line: 100
End line: 115
Method source code: 
    public void testFormatStandard() {
        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);
        assertEquals("P1Y2M3W4DT5H6M7.008S", ISOPeriodFormat.standard().print(p));
        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);
        assertEquals("P1Y2M3W4DT5H6M7S", ISOPeriodFormat.standard().print(p));
        
        p = new Period(0);
        assertEquals("PT0S", ISOPeriodFormat.standard().print(p));
        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());
        assertEquals("PT0M", ISOPeriodFormat.standard().print(p));
        
        assertEquals("P1Y4DT5H6M7.008S", ISOPeriodFormat.standard().print(YEAR_DAY_PERIOD));
        assertEquals("PT0S", ISOPeriodFormat.standard().print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals("P1Y2M3W4D", ISOPeriodFormat.standard().print(DATE_PERIOD));
        assertEquals("PT5H6M7.008S", ISOPeriodFormat.standard().print(TIME_PERIOD));
    }
Method byte code: 
0: new           #40
3: dup
4: iconst_1
5: iconst_2
6: iconst_3
7: iconst_4
8: iconst_5
9: bipush        6
11: bipush        7
13: bipush        8
15: invokespecial #41
18: astore_1
19: ldc           #42
21: invokestatic  #43
24: aload_1
25: invokevirtual #44
28: invokestatic  #45
31: new           #40
34: dup
35: iconst_1
36: iconst_2
37: iconst_3
38: iconst_4
39: iconst_5
40: bipush        6
42: bipush        7
44: iconst_0
45: invokespecial #41
48: astore_1
49: ldc           #46
51: invokestatic  #43
54: aload_1
55: invokevirtual #44
58: invokestatic  #45
61: new           #40
64: dup
65: lconst_0
66: invokespecial #47
69: astore_1
70: ldc           #48
72: invokestatic  #43
75: aload_1
76: invokevirtual #44
79: invokestatic  #45
82: new           #40
85: dup
86: lconst_0
87: invokestatic  #49
90: invokevirtual #50
93: invokevirtual #51
96: invokespecial #52
99: astore_1
100: ldc           #53
102: invokestatic  #43
105: aload_1
106: invokevirtual #44
109: invokestatic  #45
112: ldc           #54
114: invokestatic  #43
117: getstatic     #55
120: invokevirtual #44
123: invokestatic  #45
126: ldc           #48
128: invokestatic  #43
131: getstatic     #56
134: invokevirtual #44
137: invokestatic  #45
140: ldc           #57
142: invokestatic  #43
145: getstatic     #58
148: invokevirtual #44
151: invokestatic  #45
154: ldc           #59
156: invokestatic  #43
159: getstatic     #60
162: invokevirtual #44
165: invokestatic  #45
168: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestISOPeriodFormat.class
Class name: TestISOPeriodFormat
Method name: testFormatStandard_negative
Start line: 117
End line: 135
Method source code: 
    public void testFormatStandard_negative() {
        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);
        assertEquals("P-1Y-2M-3W-4DT-5H-6M-7.008S", ISOPeriodFormat.standard().print(p));
        
        p = Period.years(-54);
        assertEquals("P-54Y", ISOPeriodFormat.standard().print(p));
        
        p = Period.seconds(4).withMillis(-8);
        assertEquals("PT3.992S", ISOPeriodFormat.standard().print(p));
        
        p = Period.seconds(-4).withMillis(8);
        assertEquals("PT-3.992S", ISOPeriodFormat.standard().print(p));
        
        p = Period.seconds(-23);
        assertEquals("PT-23S", ISOPeriodFormat.standard().print(p));
        
        p = Period.millis(-8);
        assertEquals("PT-0.008S", ISOPeriodFormat.standard().print(p));
    }
Method byte code: 
0: new           #40
3: dup
4: iconst_m1
5: bipush        -2
7: bipush        -3
9: bipush        -4
11: bipush        -5
13: bipush        -6
15: bipush        -7
17: bipush        -8
19: invokespecial #41
22: astore_1
23: ldc           #61
25: invokestatic  #43
28: aload_1
29: invokevirtual #44
32: invokestatic  #45
35: bipush        -54
37: invokestatic  #62
40: astore_1
41: ldc           #63
43: invokestatic  #43
46: aload_1
47: invokevirtual #44
50: invokestatic  #45
53: iconst_4
54: invokestatic  #64
57: bipush        -8
59: invokevirtual #65
62: astore_1
63: ldc           #66
65: invokestatic  #43
68: aload_1
69: invokevirtual #44
72: invokestatic  #45
75: bipush        -4
77: invokestatic  #64
80: bipush        8
82: invokevirtual #65
85: astore_1
86: ldc           #67
88: invokestatic  #43
91: aload_1
92: invokevirtual #44
95: invokestatic  #45
98: bipush        -23
100: invokestatic  #64
103: astore_1
104: ldc           #68
106: invokestatic  #43
109: aload_1
110: invokevirtual #44
113: invokestatic  #45
116: bipush        -8
118: invokestatic  #69
121: astore_1
122: ldc           #70
124: invokestatic  #43
127: aload_1
128: invokevirtual #44
131: invokestatic  #45
134: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestISOPeriodFormat.class
Class name: TestISOPeriodFormat
Method name: testFormatAlternate
Start line: 138
End line: 153
Method source code: 
    public void testFormatAlternate() {
        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);
        assertEquals("P00010204T050607.008", ISOPeriodFormat.alternate().print(p));
        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);
        assertEquals("P00010204T050607", ISOPeriodFormat.alternate().print(p));
        
        p = new Period(0);
        assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p));
        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());
        assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(p));
        
        assertEquals("P00010004T050607.008", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD));
        assertEquals("P00000000T000000", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals("P00010204T000000", ISOPeriodFormat.alternate().print(DATE_PERIOD));
        assertEquals("P00000000T050607.008", ISOPeriodFormat.alternate().print(TIME_PERIOD));
    }
Method byte code: 
0: new           #40
3: dup
4: iconst_1
5: iconst_2
6: iconst_3
7: iconst_4
8: iconst_5
9: bipush        6
11: bipush        7
13: bipush        8
15: invokespecial #41
18: astore_1
19: ldc           #71
21: invokestatic  #72
24: aload_1
25: invokevirtual #44
28: invokestatic  #45
31: new           #40
34: dup
35: iconst_1
36: iconst_2
37: iconst_3
38: iconst_4
39: iconst_5
40: bipush        6
42: bipush        7
44: iconst_0
45: invokespecial #41
48: astore_1
49: ldc           #73
51: invokestatic  #72
54: aload_1
55: invokevirtual #44
58: invokestatic  #45
61: new           #40
64: dup
65: lconst_0
66: invokespecial #47
69: astore_1
70: ldc           #74
72: invokestatic  #72
75: aload_1
76: invokevirtual #44
79: invokestatic  #45
82: new           #40
85: dup
86: lconst_0
87: invokestatic  #49
90: invokevirtual #50
93: invokevirtual #51
96: invokespecial #52
99: astore_1
100: ldc           #74
102: invokestatic  #72
105: aload_1
106: invokevirtual #44
109: invokestatic  #45
112: ldc           #75
114: invokestatic  #72
117: getstatic     #55
120: invokevirtual #44
123: invokestatic  #45
126: ldc           #74
128: invokestatic  #72
131: getstatic     #56
134: invokevirtual #44
137: invokestatic  #45
140: ldc           #76
142: invokestatic  #72
145: getstatic     #58
148: invokevirtual #44
151: invokestatic  #45
154: ldc           #77
156: invokestatic  #72
159: getstatic     #60
162: invokevirtual #44
165: invokestatic  #45
168: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestISOPeriodFormat.class
Class name: TestISOPeriodFormat
Method name: testFormatAlternateExtended
Start line: 156
End line: 171
Method source code: 
    public void testFormatAlternateExtended() {
        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);
        assertEquals("P0001-02-04T05:06:07.008", ISOPeriodFormat.alternateExtended().print(p));
        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);
        assertEquals("P0001-02-04T05:06:07", ISOPeriodFormat.alternateExtended().print(p));
        
        p = new Period(0);
        assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(p));
        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());
        assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(p));
        
        assertEquals("P0001-00-04T05:06:07.008", ISOPeriodFormat.alternateExtended().print(YEAR_DAY_PERIOD));
        assertEquals("P0000-00-00T00:00:00", ISOPeriodFormat.alternateExtended().print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals("P0001-02-04T00:00:00", ISOPeriodFormat.alternateExtended().print(DATE_PERIOD));
        assertEquals("P0000-00-00T05:06:07.008", ISOPeriodFormat.alternateExtended().print(TIME_PERIOD));
    }
Method byte code: 
0: new           #40
3: dup
4: iconst_1
5: iconst_2
6: iconst_3
7: iconst_4
8: iconst_5
9: bipush        6
11: bipush        7
13: bipush        8
15: invokespecial #41
18: astore_1
19: ldc           #78
21: invokestatic  #79
24: aload_1
25: invokevirtual #44
28: invokestatic  #45
31: new           #40
34: dup
35: iconst_1
36: iconst_2
37: iconst_3
38: iconst_4
39: iconst_5
40: bipush        6
42: bipush        7
44: iconst_0
45: invokespecial #41
48: astore_1
49: ldc           #80
51: invokestatic  #79
54: aload_1
55: invokevirtual #44
58: invokestatic  #45
61: new           #40
64: dup
65: lconst_0
66: invokespecial #47
69: astore_1
70: ldc           #81
72: invokestatic  #79
75: aload_1
76: invokevirtual #44
79: invokestatic  #45
82: new           #40
85: dup
86: lconst_0
87: invokestatic  #49
90: invokevirtual #50
93: invokevirtual #51
96: invokespecial #52
99: astore_1
100: ldc           #81
102: invokestatic  #79
105: aload_1
106: invokevirtual #44
109: invokestatic  #45
112: ldc           #82
114: invokestatic  #79
117: getstatic     #55
120: invokevirtual #44
123: invokestatic  #45
126: ldc           #81
128: invokestatic  #79
131: getstatic     #56
134: invokevirtual #44
137: invokestatic  #45
140: ldc           #83
142: invokestatic  #79
145: getstatic     #58
148: invokevirtual #44
151: invokestatic  #45
154: ldc           #84
156: invokestatic  #79
159: getstatic     #60
162: invokevirtual #44
165: invokestatic  #45
168: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestISOPeriodFormat.class
Class name: TestISOPeriodFormat
Method name: testFormatAlternateWithWeeks
Start line: 174
End line: 189
Method source code: 
    public void testFormatAlternateWithWeeks() {
        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);
        assertEquals("P0001W0304T050607.008", ISOPeriodFormat.alternateWithWeeks().print(p));
        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);
        assertEquals("P0001W0304T050607", ISOPeriodFormat.alternateWithWeeks().print(p));
        
        p = new Period(0);
        assertEquals("P0000W0000T000000", ISOPeriodFormat.alternateWithWeeks().print(p));
        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());
        assertEquals("P0000W0000T000000", ISOPeriodFormat.alternateWithWeeks().print(p));
        
        assertEquals("P0001W0004T050607.008", ISOPeriodFormat.alternateWithWeeks().print(YEAR_DAY_PERIOD));
        assertEquals("P0000W0000T000000", ISOPeriodFormat.alternateWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals("P0001W0304T000000", ISOPeriodFormat.alternateWithWeeks().print(DATE_PERIOD));
        assertEquals("P0000W0000T050607.008", ISOPeriodFormat.alternateWithWeeks().print(TIME_PERIOD));
    }
Method byte code: 
0: new           #40
3: dup
4: iconst_1
5: iconst_2
6: iconst_3
7: iconst_4
8: iconst_5
9: bipush        6
11: bipush        7
13: bipush        8
15: invokespecial #41
18: astore_1
19: ldc           #85
21: invokestatic  #86
24: aload_1
25: invokevirtual #44
28: invokestatic  #45
31: new           #40
34: dup
35: iconst_1
36: iconst_2
37: iconst_3
38: iconst_4
39: iconst_5
40: bipush        6
42: bipush        7
44: iconst_0
45: invokespecial #41
48: astore_1
49: ldc           #87
51: invokestatic  #86
54: aload_1
55: invokevirtual #44
58: invokestatic  #45
61: new           #40
64: dup
65: lconst_0
66: invokespecial #47
69: astore_1
70: ldc           #88
72: invokestatic  #86
75: aload_1
76: invokevirtual #44
79: invokestatic  #45
82: new           #40
85: dup
86: lconst_0
87: invokestatic  #49
90: invokevirtual #50
93: invokevirtual #51
96: invokespecial #52
99: astore_1
100: ldc           #88
102: invokestatic  #86
105: aload_1
106: invokevirtual #44
109: invokestatic  #45
112: ldc           #89
114: invokestatic  #86
117: getstatic     #55
120: invokevirtual #44
123: invokestatic  #45
126: ldc           #88
128: invokestatic  #86
131: getstatic     #56
134: invokevirtual #44
137: invokestatic  #45
140: ldc           #90
142: invokestatic  #86
145: getstatic     #58
148: invokevirtual #44
151: invokestatic  #45
154: ldc           #91
156: invokestatic  #86
159: getstatic     #60
162: invokevirtual #44
165: invokestatic  #45
168: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestISOPeriodFormat.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestISOPeriodFormat.class
Class name: TestISOPeriodFormat
Method name: testFormatAlternateExtendedWithWeeks
Start line: 192
End line: 207
Method source code: 
    public void testFormatAlternateExtendedWithWeeks() {
        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);
        assertEquals("P0001-W03-04T05:06:07.008", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));
        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);
        assertEquals("P0001-W03-04T05:06:07", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));
        
        p = new Period(0);
        assertEquals("P0000-W00-00T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));
        p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());
        assertEquals("P0000-W00-00T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));
        
        assertEquals("P0001-W00-04T05:06:07.008", ISOPeriodFormat.alternateExtendedWithWeeks().print(YEAR_DAY_PERIOD));
        assertEquals("P0000-W00-00T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals("P0001-W03-04T00:00:00", ISOPeriodFormat.alternateExtendedWithWeeks().print(DATE_PERIOD));
        assertEquals("P0000-W00-00T05:06:07.008", ISOPeriodFormat.alternateExtendedWithWeeks().print(TIME_PERIOD));
    }
Method byte code: 
0: new           #40
3: dup
4: iconst_1
5: iconst_2
6: iconst_3
7: iconst_4
8: iconst_5
9: bipush        6
11: bipush        7
13: bipush        8
15: invokespecial #41
18: astore_1
19: ldc           #92
21: invokestatic  #93
24: aload_1
25: invokevirtual #44
28: invokestatic  #45
31: new           #40
34: dup
35: iconst_1
36: iconst_2
37: iconst_3
38: iconst_4
39: iconst_5
40: bipush        6
42: bipush        7
44: iconst_0
45: invokespecial #41
48: astore_1
49: ldc           #94
51: invokestatic  #93
54: aload_1
55: invokevirtual #44
58: invokestatic  #45
61: new           #40
64: dup
65: lconst_0
66: invokespecial #47
69: astore_1
70: ldc           #95
72: invokestatic  #93
75: aload_1
76: invokevirtual #44
79: invokestatic  #45
82: new           #40
85: dup
86: lconst_0
87: invokestatic  #49
90: invokevirtual #50
93: invokevirtual #51
96: invokespecial #52
99: astore_1
100: ldc           #95
102: invokestatic  #93
105: aload_1
106: invokevirtual #44
109: invokestatic  #45
112: ldc           #96
114: invokestatic  #93
117: getstatic     #55
120: invokevirtual #44
123: invokestatic  #45
126: ldc           #95
128: invokestatic  #93
131: getstatic     #56
134: invokevirtual #44
137: invokestatic  #45
140: ldc           #97
142: invokestatic  #93
145: getstatic     #58
148: invokevirtual #44
151: invokestatic  #45
154: ldc           #98
156: invokestatic  #93
159: getstatic     #60
162: invokevirtual #44
165: invokestatic  #45
168: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testToFormatterPrinterParser
Start line: 96
End line: 101
Method source code: 
    public void testToFormatterPrinterParser() {
        builder.appendYears();
        assertNotNull(builder.toFormatter());
        assertNotNull(builder.toPrinter());
        assertNotNull(builder.toParser());
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: pop
8: aload_0
9: getfield      #38
12: invokevirtual #41
15: invokestatic  #42
18: aload_0
19: getfield      #38
22: invokevirtual #43
25: invokestatic  #42
28: aload_0
29: getfield      #38
32: invokevirtual #44
35: invokestatic  #42
38: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatYears
Start line: 104
End line: 114
Method source code: 
    public void testFormatYears() {
        PeriodFormatter f = builder.appendYears().toFormatter();
        assertEquals("1", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: invokevirtual #41
10: astore_1
11: ldc           #45
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatMonths
Start line: 116
End line: 126
Method source code: 
    public void testFormatMonths() {
        PeriodFormatter f = builder.appendMonths().toFormatter();
        assertEquals("2", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #58
7: invokevirtual #41
10: astore_1
11: ldc           #59
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatWeeks
Start line: 128
End line: 138
Method source code: 
    public void testFormatWeeks() {
        PeriodFormatter f = builder.appendWeeks().toFormatter();
        assertEquals("3", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #60
7: invokevirtual #41
10: astore_1
11: ldc           #61
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatDays
Start line: 140
End line: 150
Method source code: 
    public void testFormatDays() {
        PeriodFormatter f = builder.appendDays().toFormatter();
        assertEquals("4", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #62
7: invokevirtual #41
10: astore_1
11: ldc           #63
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatHours
Start line: 152
End line: 162
Method source code: 
    public void testFormatHours() {
        PeriodFormatter f = builder.appendHours().toFormatter();
        assertEquals("5", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #64
7: invokevirtual #41
10: astore_1
11: ldc           #65
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatMinutes
Start line: 164
End line: 174
Method source code: 
    public void testFormatMinutes() {
        PeriodFormatter f = builder.appendMinutes().toFormatter();
        assertEquals("6", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #66
7: invokevirtual #41
10: astore_1
11: ldc           #67
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSeconds
Start line: 176
End line: 186
Method source code: 
    public void testFormatSeconds() {
        PeriodFormatter f = builder.appendSeconds().toFormatter();
        assertEquals("7", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #68
7: invokevirtual #41
10: astore_1
11: ldc           #69
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSecondsWithMillis
Start line: 188
End line: 234
Method source code: 
    public void testFormatSecondsWithMillis() {
        PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter();
        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);
        assertEquals("7.000", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);
        assertEquals("7.001", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);
        assertEquals("7.999", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);
        assertEquals("8.000", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);
        assertEquals("8.001", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);
        assertEquals("6.999", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);
        assertEquals("-6.999", f.print(p));
        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);
        assertEquals("-7.001", f.print(p));
        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0.000", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #70
7: invokevirtual #41
10: astore_1
11: new           #55
14: dup
15: iconst_0
16: iconst_0
17: iconst_0
18: iconst_0
19: iconst_0
20: iconst_0
21: bipush        7
23: iconst_0
24: invokespecial #56
27: astore_2
28: ldc           #71
30: aload_1
31: aload_2
32: invokevirtual #47
35: invokestatic  #48
38: iconst_5
39: aload_1
40: invokevirtual #49
43: aload_2
44: aconst_null
45: invokeinterface #50,  3
50: invokestatic  #51
53: iconst_1
54: aload_1
55: invokevirtual #49
58: aload_2
59: ldc           #53
61: aconst_null
62: invokeinterface #54,  4
67: invokestatic  #51
70: new           #55
73: dup
74: iconst_0
75: iconst_0
76: iconst_0
77: iconst_0
78: iconst_0
79: iconst_0
80: bipush        7
82: iconst_1
83: invokespecial #56
86: astore_2
87: ldc           #72
89: aload_1
90: aload_2
91: invokevirtual #47
94: invokestatic  #48
97: iconst_5
98: aload_1
99: invokevirtual #49
102: aload_2
103: aconst_null
104: invokeinterface #50,  3
109: invokestatic  #51
112: iconst_1
113: aload_1
114: invokevirtual #49
117: aload_2
118: ldc           #53
120: aconst_null
121: invokeinterface #54,  4
126: invokestatic  #51
129: new           #55
132: dup
133: iconst_0
134: iconst_0
135: iconst_0
136: iconst_0
137: iconst_0
138: iconst_0
139: bipush        7
141: sipush        999
144: invokespecial #56
147: astore_2
148: ldc           #73
150: aload_1
151: aload_2
152: invokevirtual #47
155: invokestatic  #48
158: iconst_5
159: aload_1
160: invokevirtual #49
163: aload_2
164: aconst_null
165: invokeinterface #50,  3
170: invokestatic  #51
173: iconst_1
174: aload_1
175: invokevirtual #49
178: aload_2
179: ldc           #53
181: aconst_null
182: invokeinterface #54,  4
187: invokestatic  #51
190: new           #55
193: dup
194: iconst_0
195: iconst_0
196: iconst_0
197: iconst_0
198: iconst_0
199: iconst_0
200: bipush        7
202: sipush        1000
205: invokespecial #56
208: astore_2
209: ldc           #74
211: aload_1
212: aload_2
213: invokevirtual #47
216: invokestatic  #48
219: iconst_5
220: aload_1
221: invokevirtual #49
224: aload_2
225: aconst_null
226: invokeinterface #50,  3
231: invokestatic  #51
234: iconst_1
235: aload_1
236: invokevirtual #49
239: aload_2
240: ldc           #53
242: aconst_null
243: invokeinterface #54,  4
248: invokestatic  #51
251: new           #55
254: dup
255: iconst_0
256: iconst_0
257: iconst_0
258: iconst_0
259: iconst_0
260: iconst_0
261: bipush        7
263: sipush        1001
266: invokespecial #56
269: astore_2
270: ldc           #75
272: aload_1
273: aload_2
274: invokevirtual #47
277: invokestatic  #48
280: iconst_5
281: aload_1
282: invokevirtual #49
285: aload_2
286: aconst_null
287: invokeinterface #50,  3
292: invokestatic  #51
295: iconst_1
296: aload_1
297: invokevirtual #49
300: aload_2
301: ldc           #53
303: aconst_null
304: invokeinterface #54,  4
309: invokestatic  #51
312: new           #55
315: dup
316: iconst_0
317: iconst_0
318: iconst_0
319: iconst_0
320: iconst_0
321: iconst_0
322: bipush        7
324: iconst_m1
325: invokespecial #56
328: astore_2
329: ldc           #76
331: aload_1
332: aload_2
333: invokevirtual #47
336: invokestatic  #48
339: iconst_5
340: aload_1
341: invokevirtual #49
344: aload_2
345: aconst_null
346: invokeinterface #50,  3
351: invokestatic  #51
354: iconst_1
355: aload_1
356: invokevirtual #49
359: aload_2
360: ldc           #53
362: aconst_null
363: invokeinterface #54,  4
368: invokestatic  #51
371: new           #55
374: dup
375: iconst_0
376: iconst_0
377: iconst_0
378: iconst_0
379: iconst_0
380: iconst_0
381: bipush        -7
383: iconst_1
384: invokespecial #56
387: astore_2
388: ldc           #77
390: aload_1
391: aload_2
392: invokevirtual #47
395: invokestatic  #48
398: bipush        6
400: aload_1
401: invokevirtual #49
404: aload_2
405: aconst_null
406: invokeinterface #50,  3
411: invokestatic  #51
414: iconst_1
415: aload_1
416: invokevirtual #49
419: aload_2
420: ldc           #53
422: aconst_null
423: invokeinterface #54,  4
428: invokestatic  #51
431: new           #55
434: dup
435: iconst_0
436: iconst_0
437: iconst_0
438: iconst_0
439: iconst_0
440: iconst_0
441: bipush        -7
443: iconst_m1
444: invokespecial #56
447: astore_2
448: ldc           #78
450: aload_1
451: aload_2
452: invokevirtual #47
455: invokestatic  #48
458: bipush        6
460: aload_1
461: invokevirtual #49
464: aload_2
465: aconst_null
466: invokeinterface #50,  3
471: invokestatic  #51
474: iconst_1
475: aload_1
476: invokevirtual #49
479: aload_2
480: ldc           #53
482: aconst_null
483: invokeinterface #54,  4
488: invokestatic  #51
491: new           #55
494: dup
495: iconst_0
496: iconst_0
497: iconst_0
498: iconst_0
499: iconst_0
500: iconst_0
501: iconst_0
502: iconst_0
503: invokespecial #56
506: astore_2
507: ldc           #79
509: aload_1
510: aload_2
511: invokevirtual #47
514: invokestatic  #48
517: iconst_5
518: aload_1
519: invokevirtual #49
522: aload_2
523: aconst_null
524: invokeinterface #50,  3
529: invokestatic  #51
532: iconst_1
533: aload_1
534: invokevirtual #49
537: aload_2
538: ldc           #53
540: aconst_null
541: invokeinterface #54,  4
546: invokestatic  #51
549: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSecondsWithOptionalMillis
Start line: 236
End line: 282
Method source code: 
    public void testFormatSecondsWithOptionalMillis() {
        PeriodFormatter f = builder.appendSecondsWithOptionalMillis().toFormatter();
        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);
        assertEquals("7", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);
        assertEquals("7.001", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);
        assertEquals("7.999", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);
        assertEquals("8", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);
        assertEquals("8.001", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);
        assertEquals("6.999", f.print(p));
        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);
        assertEquals("-6.999", f.print(p));
        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);
        assertEquals("-7.001", f.print(p));
        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
        
        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #80
7: invokevirtual #41
10: astore_1
11: new           #55
14: dup
15: iconst_0
16: iconst_0
17: iconst_0
18: iconst_0
19: iconst_0
20: iconst_0
21: bipush        7
23: iconst_0
24: invokespecial #56
27: astore_2
28: ldc           #69
30: aload_1
31: aload_2
32: invokevirtual #47
35: invokestatic  #48
38: iconst_1
39: aload_1
40: invokevirtual #49
43: aload_2
44: aconst_null
45: invokeinterface #50,  3
50: invokestatic  #51
53: iconst_1
54: aload_1
55: invokevirtual #49
58: aload_2
59: ldc           #53
61: aconst_null
62: invokeinterface #54,  4
67: invokestatic  #51
70: new           #55
73: dup
74: iconst_0
75: iconst_0
76: iconst_0
77: iconst_0
78: iconst_0
79: iconst_0
80: bipush        7
82: iconst_1
83: invokespecial #56
86: astore_2
87: ldc           #72
89: aload_1
90: aload_2
91: invokevirtual #47
94: invokestatic  #48
97: iconst_5
98: aload_1
99: invokevirtual #49
102: aload_2
103: aconst_null
104: invokeinterface #50,  3
109: invokestatic  #51
112: iconst_1
113: aload_1
114: invokevirtual #49
117: aload_2
118: ldc           #53
120: aconst_null
121: invokeinterface #54,  4
126: invokestatic  #51
129: new           #55
132: dup
133: iconst_0
134: iconst_0
135: iconst_0
136: iconst_0
137: iconst_0
138: iconst_0
139: bipush        7
141: sipush        999
144: invokespecial #56
147: astore_2
148: ldc           #73
150: aload_1
151: aload_2
152: invokevirtual #47
155: invokestatic  #48
158: iconst_5
159: aload_1
160: invokevirtual #49
163: aload_2
164: aconst_null
165: invokeinterface #50,  3
170: invokestatic  #51
173: iconst_1
174: aload_1
175: invokevirtual #49
178: aload_2
179: ldc           #53
181: aconst_null
182: invokeinterface #54,  4
187: invokestatic  #51
190: new           #55
193: dup
194: iconst_0
195: iconst_0
196: iconst_0
197: iconst_0
198: iconst_0
199: iconst_0
200: bipush        7
202: sipush        1000
205: invokespecial #56
208: astore_2
209: ldc           #81
211: aload_1
212: aload_2
213: invokevirtual #47
216: invokestatic  #48
219: iconst_1
220: aload_1
221: invokevirtual #49
224: aload_2
225: aconst_null
226: invokeinterface #50,  3
231: invokestatic  #51
234: iconst_1
235: aload_1
236: invokevirtual #49
239: aload_2
240: ldc           #53
242: aconst_null
243: invokeinterface #54,  4
248: invokestatic  #51
251: new           #55
254: dup
255: iconst_0
256: iconst_0
257: iconst_0
258: iconst_0
259: iconst_0
260: iconst_0
261: bipush        7
263: sipush        1001
266: invokespecial #56
269: astore_2
270: ldc           #75
272: aload_1
273: aload_2
274: invokevirtual #47
277: invokestatic  #48
280: iconst_5
281: aload_1
282: invokevirtual #49
285: aload_2
286: aconst_null
287: invokeinterface #50,  3
292: invokestatic  #51
295: iconst_1
296: aload_1
297: invokevirtual #49
300: aload_2
301: ldc           #53
303: aconst_null
304: invokeinterface #54,  4
309: invokestatic  #51
312: new           #55
315: dup
316: iconst_0
317: iconst_0
318: iconst_0
319: iconst_0
320: iconst_0
321: iconst_0
322: bipush        7
324: iconst_m1
325: invokespecial #56
328: astore_2
329: ldc           #76
331: aload_1
332: aload_2
333: invokevirtual #47
336: invokestatic  #48
339: iconst_5
340: aload_1
341: invokevirtual #49
344: aload_2
345: aconst_null
346: invokeinterface #50,  3
351: invokestatic  #51
354: iconst_1
355: aload_1
356: invokevirtual #49
359: aload_2
360: ldc           #53
362: aconst_null
363: invokeinterface #54,  4
368: invokestatic  #51
371: new           #55
374: dup
375: iconst_0
376: iconst_0
377: iconst_0
378: iconst_0
379: iconst_0
380: iconst_0
381: bipush        -7
383: iconst_1
384: invokespecial #56
387: astore_2
388: ldc           #77
390: aload_1
391: aload_2
392: invokevirtual #47
395: invokestatic  #48
398: bipush        6
400: aload_1
401: invokevirtual #49
404: aload_2
405: aconst_null
406: invokeinterface #50,  3
411: invokestatic  #51
414: iconst_1
415: aload_1
416: invokevirtual #49
419: aload_2
420: ldc           #53
422: aconst_null
423: invokeinterface #54,  4
428: invokestatic  #51
431: new           #55
434: dup
435: iconst_0
436: iconst_0
437: iconst_0
438: iconst_0
439: iconst_0
440: iconst_0
441: bipush        -7
443: iconst_m1
444: invokespecial #56
447: astore_2
448: ldc           #78
450: aload_1
451: aload_2
452: invokevirtual #47
455: invokestatic  #48
458: bipush        6
460: aload_1
461: invokevirtual #49
464: aload_2
465: aconst_null
466: invokeinterface #50,  3
471: invokestatic  #51
474: iconst_1
475: aload_1
476: invokevirtual #49
479: aload_2
480: ldc           #53
482: aconst_null
483: invokeinterface #54,  4
488: invokestatic  #51
491: new           #55
494: dup
495: iconst_0
496: iconst_0
497: iconst_0
498: iconst_0
499: iconst_0
500: iconst_0
501: iconst_0
502: iconst_0
503: invokespecial #56
506: astore_2
507: ldc           #57
509: aload_1
510: aload_2
511: invokevirtual #47
514: invokestatic  #48
517: iconst_1
518: aload_1
519: invokevirtual #49
522: aload_2
523: aconst_null
524: invokeinterface #50,  3
529: invokestatic  #51
532: iconst_1
533: aload_1
534: invokevirtual #49
537: aload_2
538: ldc           #53
540: aconst_null
541: invokeinterface #54,  4
546: invokestatic  #51
549: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatMillis
Start line: 284
End line: 294
Method source code: 
    public void testFormatMillis() {
        PeriodFormatter f = builder.appendMillis().toFormatter();
        assertEquals("8", f.print(PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0", f.print(p));
        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #82
7: invokevirtual #41
10: astore_1
11: ldc           #81
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_1
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #57
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_1
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatMillis3Digit
Start line: 296
End line: 306
Method source code: 
    public void testFormatMillis3Digit() {
        PeriodFormatter f = builder.appendMillis3Digit().toFormatter();
        assertEquals("008", f.print(PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("000", f.print(p));
        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #83
7: invokevirtual #41
10: astore_1
11: ldc           #84
13: aload_1
14: getstatic     #46
17: invokevirtual #47
20: invokestatic  #48
23: iconst_3
24: aload_1
25: invokevirtual #49
28: getstatic     #46
31: aconst_null
32: invokeinterface #50,  3
37: invokestatic  #51
40: iconst_1
41: aload_1
42: invokevirtual #49
45: getstatic     #46
48: ldc           #53
50: aconst_null
51: invokeinterface #54,  4
56: invokestatic  #51
59: new           #55
62: dup
63: iconst_0
64: iconst_0
65: iconst_0
66: iconst_0
67: iconst_0
68: iconst_0
69: iconst_0
70: iconst_0
71: invokespecial #56
74: astore_2
75: ldc           #85
77: aload_1
78: aload_2
79: invokevirtual #47
82: invokestatic  #48
85: iconst_3
86: aload_1
87: invokevirtual #49
90: aload_2
91: aconst_null
92: invokeinterface #50,  3
97: invokestatic  #51
100: iconst_1
101: aload_1
102: invokevirtual #49
105: aload_2
106: ldc           #53
108: aconst_null
109: invokeinterface #54,  4
114: invokestatic  #51
117: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrefixSimple1
Start line: 309
End line: 319
Method source code: 
    public void testFormatPrefixSimple1() {
        PeriodFormatter f = builder.appendPrefix("Years:").appendYears().toFormatter();
        assertEquals("Years:1", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("Years:0", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #86
6: invokevirtual #87
9: invokevirtual #40
12: invokevirtual #41
15: astore_1
16: ldc           #88
18: aload_1
19: getstatic     #46
22: invokevirtual #47
25: invokestatic  #48
28: bipush        7
30: aload_1
31: invokevirtual #49
34: getstatic     #46
37: aconst_null
38: invokeinterface #50,  3
43: invokestatic  #51
46: iconst_1
47: aload_1
48: invokevirtual #49
51: getstatic     #46
54: ldc           #53
56: aconst_null
57: invokeinterface #54,  4
62: invokestatic  #51
65: new           #55
68: dup
69: iconst_0
70: iconst_0
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: invokespecial #56
80: astore_2
81: ldc           #89
83: aload_1
84: aload_2
85: invokevirtual #47
88: invokestatic  #48
91: bipush        7
93: aload_1
94: invokevirtual #49
97: aload_2
98: aconst_null
99: invokeinterface #50,  3
104: invokestatic  #51
107: iconst_1
108: aload_1
109: invokevirtual #49
112: aload_2
113: ldc           #53
115: aconst_null
116: invokeinterface #54,  4
121: invokestatic  #51
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrefixSimple2
Start line: 321
End line: 331
Method source code: 
    public void testFormatPrefixSimple2() {
        PeriodFormatter f = builder.appendPrefix("Hours:").appendHours().toFormatter();
        assertEquals("Hours:5", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("Hours:0", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #90
6: invokevirtual #87
9: invokevirtual #64
12: invokevirtual #41
15: astore_1
16: ldc           #91
18: aload_1
19: getstatic     #46
22: invokevirtual #47
25: invokestatic  #48
28: bipush        7
30: aload_1
31: invokevirtual #49
34: getstatic     #46
37: aconst_null
38: invokeinterface #50,  3
43: invokestatic  #51
46: iconst_1
47: aload_1
48: invokevirtual #49
51: getstatic     #46
54: ldc           #53
56: aconst_null
57: invokeinterface #54,  4
62: invokestatic  #51
65: new           #55
68: dup
69: iconst_0
70: iconst_0
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: invokespecial #56
80: astore_2
81: ldc           #92
83: aload_1
84: aload_2
85: invokevirtual #47
88: invokestatic  #48
91: bipush        7
93: aload_1
94: invokevirtual #49
97: aload_2
98: aconst_null
99: invokeinterface #50,  3
104: invokestatic  #51
107: iconst_1
108: aload_1
109: invokevirtual #49
112: aload_2
113: ldc           #53
115: aconst_null
116: invokeinterface #54,  4
121: invokestatic  #51
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrefixSimple3
Start line: 333
End line: 338
Method source code: 
    public void testFormatPrefixSimple3() {
        try {
            builder.appendPrefix(null);
            fail();
        } catch (IllegalArgumentException ex) {}
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: aconst_null
5: invokevirtual #87
8: pop
9: invokestatic  #93
12: goto          16
15: astore_1
16: return
Exception table:
from    to  target type
0    12    15   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrefixPlural1
Start line: 340
End line: 350
Method source code: 
    public void testFormatPrefixPlural1() {
        PeriodFormatter f = builder.appendPrefix("Year:", "Years:").appendYears().toFormatter();
        assertEquals("Year:1", f.print(PERIOD));
        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("Years:0", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #95
6: ldc           #86
8: invokevirtual #96
11: invokevirtual #40
14: invokevirtual #41
17: astore_1
18: ldc           #97
20: aload_1
21: getstatic     #46
24: invokevirtual #47
27: invokestatic  #48
30: bipush        6
32: aload_1
33: invokevirtual #49
36: getstatic     #46
39: aconst_null
40: invokeinterface #50,  3
45: invokestatic  #51
48: iconst_1
49: aload_1
50: invokevirtual #49
53: getstatic     #46
56: ldc           #53
58: aconst_null
59: invokeinterface #54,  4
64: invokestatic  #51
67: new           #55
70: dup
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: iconst_0
78: iconst_0
79: invokespecial #56
82: astore_2
83: ldc           #89
85: aload_1
86: aload_2
87: invokevirtual #47
90: invokestatic  #48
93: bipush        7
95: aload_1
96: invokevirtual #49
99: aload_2
100: aconst_null
101: invokeinterface #50,  3
106: invokestatic  #51
109: iconst_1
110: aload_1
111: invokevirtual #49
114: aload_2
115: ldc           #53
117: aconst_null
118: invokeinterface #54,  4
123: invokestatic  #51
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrefixPlural2
Start line: 352
End line: 362
Method source code: 
    public void testFormatPrefixPlural2() {
        PeriodFormatter f = builder.appendPrefix("Hour:", "Hours:").appendHours().toFormatter();
        assertEquals("Hours:5", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("Hours:0", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #98
6: ldc           #90
8: invokevirtual #96
11: invokevirtual #64
14: invokevirtual #41
17: astore_1
18: ldc           #91
20: aload_1
21: getstatic     #46
24: invokevirtual #47
27: invokestatic  #48
30: bipush        7
32: aload_1
33: invokevirtual #49
36: getstatic     #46
39: aconst_null
40: invokeinterface #50,  3
45: invokestatic  #51
48: iconst_1
49: aload_1
50: invokevirtual #49
53: getstatic     #46
56: ldc           #53
58: aconst_null
59: invokeinterface #54,  4
64: invokestatic  #51
67: new           #55
70: dup
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: iconst_0
78: iconst_0
79: invokespecial #56
82: astore_2
83: ldc           #92
85: aload_1
86: aload_2
87: invokevirtual #47
90: invokestatic  #48
93: bipush        7
95: aload_1
96: invokevirtual #49
99: aload_2
100: aconst_null
101: invokeinterface #50,  3
106: invokestatic  #51
109: iconst_1
110: aload_1
111: invokevirtual #49
114: aload_2
115: ldc           #53
117: aconst_null
118: invokeinterface #54,  4
123: invokestatic  #51
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrefixPlural3
Start line: 364
End line: 377
Method source code: 
    public void testFormatPrefixPlural3() {
        try {
            builder.appendPrefix(null, "");
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            builder.appendPrefix("", null);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            builder.appendPrefix(null, null);
            fail();
        } catch (IllegalArgumentException ex) {}
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: aconst_null
5: ldc           #99
7: invokevirtual #96
10: pop
11: invokestatic  #93
14: goto          18
17: astore_1
18: aload_0
19: getfield      #38
22: ldc           #99
24: aconst_null
25: invokevirtual #96
28: pop
29: invokestatic  #93
32: goto          36
35: astore_1
36: aload_0
37: getfield      #38
40: aconst_null
41: aconst_null
42: invokevirtual #96
45: pop
46: invokestatic  #93
49: goto          53
52: astore_1
53: return
Exception table:
from    to  target type
0    14    17   Class java/lang/IllegalArgumentException
18    32    35   Class java/lang/IllegalArgumentException
36    49    52   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixSimple1
Start line: 380
End line: 390
Method source code: 
    public void testFormatSuffixSimple1() {
        PeriodFormatter f = builder.appendYears().appendSuffix(" years").toFormatter();
        assertEquals("1 years", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0 years", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: ldc           #100
9: invokevirtual #101
12: invokevirtual #41
15: astore_1
16: ldc           #102
18: aload_1
19: getstatic     #46
22: invokevirtual #47
25: invokestatic  #48
28: bipush        7
30: aload_1
31: invokevirtual #49
34: getstatic     #46
37: aconst_null
38: invokeinterface #50,  3
43: invokestatic  #51
46: iconst_1
47: aload_1
48: invokevirtual #49
51: getstatic     #46
54: ldc           #53
56: aconst_null
57: invokeinterface #54,  4
62: invokestatic  #51
65: new           #55
68: dup
69: iconst_0
70: iconst_0
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: invokespecial #56
80: astore_2
81: ldc           #103
83: aload_1
84: aload_2
85: invokevirtual #47
88: invokestatic  #48
91: bipush        7
93: aload_1
94: invokevirtual #49
97: aload_2
98: aconst_null
99: invokeinterface #50,  3
104: invokestatic  #51
107: iconst_1
108: aload_1
109: invokevirtual #49
112: aload_2
113: ldc           #53
115: aconst_null
116: invokeinterface #54,  4
121: invokestatic  #51
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixSimple2
Start line: 392
End line: 402
Method source code: 
    public void testFormatSuffixSimple2() {
        PeriodFormatter f = builder.appendHours().appendSuffix(" hours").toFormatter();
        assertEquals("5 hours", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0 hours", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #64
7: ldc           #104
9: invokevirtual #101
12: invokevirtual #41
15: astore_1
16: ldc           #105
18: aload_1
19: getstatic     #46
22: invokevirtual #47
25: invokestatic  #48
28: bipush        7
30: aload_1
31: invokevirtual #49
34: getstatic     #46
37: aconst_null
38: invokeinterface #50,  3
43: invokestatic  #51
46: iconst_1
47: aload_1
48: invokevirtual #49
51: getstatic     #46
54: ldc           #53
56: aconst_null
57: invokeinterface #54,  4
62: invokestatic  #51
65: new           #55
68: dup
69: iconst_0
70: iconst_0
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: invokespecial #56
80: astore_2
81: ldc           #106
83: aload_1
84: aload_2
85: invokevirtual #47
88: invokestatic  #48
91: bipush        7
93: aload_1
94: invokevirtual #49
97: aload_2
98: aconst_null
99: invokeinterface #50,  3
104: invokestatic  #51
107: iconst_1
108: aload_1
109: invokevirtual #49
112: aload_2
113: ldc           #53
115: aconst_null
116: invokeinterface #54,  4
121: invokestatic  #51
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixSimple3
Start line: 404
End line: 409
Method source code: 
    public void testFormatSuffixSimple3() {
        try {
            builder.appendSuffix(null);
            fail();
        } catch (IllegalArgumentException ex) {}
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: aconst_null
5: invokevirtual #101
8: pop
9: invokestatic  #93
12: goto          16
15: astore_1
16: return
Exception table:
from    to  target type
0    12    15   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixSimple4
Start line: 411
End line: 416
Method source code: 
    public void testFormatSuffixSimple4() {
        try {
            builder.appendSuffix(" hours");
            fail();
        } catch (IllegalStateException ex) {}
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #104
6: invokevirtual #101
9: pop
10: invokestatic  #93
13: goto          17
16: astore_1
17: return
Exception table:
from    to  target type
0    13    16   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixPlural1
Start line: 418
End line: 428
Method source code: 
    public void testFormatSuffixPlural1() {
        PeriodFormatter f = builder.appendYears().appendSuffix(" year", " years").toFormatter();
        assertEquals("1 year", f.print(PERIOD));
        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0 years", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: ldc           #108
9: ldc           #100
11: invokevirtual #109
14: invokevirtual #41
17: astore_1
18: ldc           #110
20: aload_1
21: getstatic     #46
24: invokevirtual #47
27: invokestatic  #48
30: bipush        6
32: aload_1
33: invokevirtual #49
36: getstatic     #46
39: aconst_null
40: invokeinterface #50,  3
45: invokestatic  #51
48: iconst_1
49: aload_1
50: invokevirtual #49
53: getstatic     #46
56: ldc           #53
58: aconst_null
59: invokeinterface #54,  4
64: invokestatic  #51
67: new           #55
70: dup
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: iconst_0
78: iconst_0
79: invokespecial #56
82: astore_2
83: ldc           #103
85: aload_1
86: aload_2
87: invokevirtual #47
90: invokestatic  #48
93: bipush        7
95: aload_1
96: invokevirtual #49
99: aload_2
100: aconst_null
101: invokeinterface #50,  3
106: invokestatic  #51
109: iconst_1
110: aload_1
111: invokevirtual #49
114: aload_2
115: ldc           #53
117: aconst_null
118: invokeinterface #54,  4
123: invokestatic  #51
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixPlural2
Start line: 430
End line: 440
Method source code: 
    public void testFormatSuffixPlural2() {
        PeriodFormatter f = builder.appendHours().appendSuffix(" hour", " hours").toFormatter();
        assertEquals("5 hours", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("0 hours", f.print(p));
        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #64
7: ldc           #111
9: ldc           #104
11: invokevirtual #109
14: invokevirtual #41
17: astore_1
18: ldc           #105
20: aload_1
21: getstatic     #46
24: invokevirtual #47
27: invokestatic  #48
30: bipush        7
32: aload_1
33: invokevirtual #49
36: getstatic     #46
39: aconst_null
40: invokeinterface #50,  3
45: invokestatic  #51
48: iconst_1
49: aload_1
50: invokevirtual #49
53: getstatic     #46
56: ldc           #53
58: aconst_null
59: invokeinterface #54,  4
64: invokestatic  #51
67: new           #55
70: dup
71: iconst_0
72: iconst_0
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: iconst_0
78: iconst_0
79: invokespecial #56
82: astore_2
83: ldc           #106
85: aload_1
86: aload_2
87: invokevirtual #47
90: invokestatic  #48
93: bipush        7
95: aload_1
96: invokevirtual #49
99: aload_2
100: aconst_null
101: invokeinterface #50,  3
106: invokestatic  #51
109: iconst_1
110: aload_1
111: invokevirtual #49
114: aload_2
115: ldc           #53
117: aconst_null
118: invokeinterface #54,  4
123: invokestatic  #51
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixPlural3
Start line: 442
End line: 455
Method source code: 
    public void testFormatSuffixPlural3() {
        try {
            builder.appendSuffix(null, "");
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            builder.appendSuffix("", null);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            builder.appendSuffix(null, null);
            fail();
        } catch (IllegalArgumentException ex) {}
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: aconst_null
5: ldc           #99
7: invokevirtual #109
10: pop
11: invokestatic  #93
14: goto          18
17: astore_1
18: aload_0
19: getfield      #38
22: ldc           #99
24: aconst_null
25: invokevirtual #109
28: pop
29: invokestatic  #93
32: goto          36
35: astore_1
36: aload_0
37: getfield      #38
40: aconst_null
41: aconst_null
42: invokevirtual #109
45: pop
46: invokestatic  #93
49: goto          53
52: astore_1
53: return
Exception table:
from    to  target type
0    14    17   Class java/lang/IllegalArgumentException
18    32    35   Class java/lang/IllegalArgumentException
36    49    52   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSuffixPlural4
Start line: 457
End line: 462
Method source code: 
    public void testFormatSuffixPlural4() {
        try {
            builder.appendSuffix(" hour", " hours");
            fail();
        } catch (IllegalStateException ex) {}
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #111
6: ldc           #104
8: invokevirtual #109
11: pop
12: invokestatic  #93
15: goto          19
18: astore_1
19: return
Exception table:
from    to  target type
0    15    18   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrefixSuffix
Start line: 465
End line: 475
Method source code: 
    public void testFormatPrefixSuffix() {
        PeriodFormatter f = builder.appendPrefix("P").appendYears().appendSuffix("Y").toFormatter();
        assertEquals("P1Y", f.print(PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);
        assertEquals("P0Y", f.print(p));
        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #112
6: invokevirtual #87
9: invokevirtual #40
12: ldc           #113
14: invokevirtual #101
17: invokevirtual #41
20: astore_1
21: ldc           #114
23: aload_1
24: getstatic     #46
27: invokevirtual #47
30: invokestatic  #48
33: iconst_3
34: aload_1
35: invokevirtual #49
38: getstatic     #46
41: aconst_null
42: invokeinterface #50,  3
47: invokestatic  #51
50: iconst_1
51: aload_1
52: invokevirtual #49
55: getstatic     #46
58: ldc           #53
60: aconst_null
61: invokeinterface #54,  4
66: invokestatic  #51
69: new           #55
72: dup
73: iconst_0
74: iconst_0
75: iconst_0
76: iconst_0
77: iconst_0
78: iconst_0
79: iconst_0
80: iconst_0
81: invokespecial #56
84: astore_2
85: ldc           #115
87: aload_1
88: aload_2
89: invokevirtual #47
92: invokestatic  #48
95: iconst_3
96: aload_1
97: invokevirtual #49
100: aload_2
101: aconst_null
102: invokeinterface #50,  3
107: invokestatic  #51
110: iconst_1
111: aload_1
112: invokevirtual #49
115: aload_2
116: ldc           #53
118: aconst_null
119: invokeinterface #54,  4
124: invokestatic  #51
127: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSeparatorSimple
Start line: 478
End line: 491
Method source code: 
    public void testFormatSeparatorSimple() {
        PeriodFormatter f = builder.appendYears().appendSeparator("T").appendHours().toFormatter();
        assertEquals("1T5", f.print(PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("5", f.print(TIME_PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1", f.print(DATE_PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: ldc           #116
9: invokevirtual #117
12: invokevirtual #64
15: invokevirtual #41
18: astore_1
19: ldc           #118
21: aload_1
22: getstatic     #46
25: invokevirtual #47
28: invokestatic  #48
31: iconst_3
32: aload_1
33: invokevirtual #49
36: getstatic     #46
39: aconst_null
40: invokeinterface #50,  3
45: invokestatic  #51
48: iconst_2
49: aload_1
50: invokevirtual #49
53: getstatic     #46
56: ldc           #53
58: aconst_null
59: invokeinterface #54,  4
64: invokestatic  #51
67: ldc           #65
69: aload_1
70: getstatic     #119
73: invokevirtual #47
76: invokestatic  #48
79: iconst_1
80: aload_1
81: invokevirtual #49
84: getstatic     #119
87: aconst_null
88: invokeinterface #50,  3
93: invokestatic  #51
96: iconst_1
97: aload_1
98: invokevirtual #49
101: getstatic     #119
104: ldc           #53
106: aconst_null
107: invokeinterface #54,  4
112: invokestatic  #51
115: ldc           #45
117: aload_1
118: getstatic     #120
121: invokevirtual #47
124: invokestatic  #48
127: iconst_1
128: aload_1
129: invokevirtual #49
132: getstatic     #120
135: aconst_null
136: invokeinterface #50,  3
141: invokestatic  #51
144: iconst_1
145: aload_1
146: invokevirtual #49
149: getstatic     #120
152: ldc           #53
154: aconst_null
155: invokeinterface #54,  4
160: invokestatic  #51
163: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSeparatorComplex
Start line: 493
End line: 510
Method source code: 
    public void testFormatSeparatorComplex() {
        PeriodFormatter f = builder
            .appendYears().appendSeparator(", ", " and ")
            .appendHours().appendSeparator(", ", " and ")
            .appendMinutes().appendSeparator(", ", " and ")
            .toFormatter();
        assertEquals("1, 5 and 6", f.print(PERIOD));
        assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("5 and 6", f.print(TIME_PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1", f.print(DATE_PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: ldc           #121
9: ldc           #122
11: invokevirtual #123
14: invokevirtual #64
17: ldc           #121
19: ldc           #122
21: invokevirtual #123
24: invokevirtual #66
27: ldc           #121
29: ldc           #122
31: invokevirtual #123
34: invokevirtual #41
37: astore_1
38: ldc           #124
40: aload_1
41: getstatic     #46
44: invokevirtual #47
47: invokestatic  #48
50: bipush        10
52: aload_1
53: invokevirtual #49
56: getstatic     #46
59: aconst_null
60: invokeinterface #50,  3
65: invokestatic  #51
68: iconst_3
69: aload_1
70: invokevirtual #49
73: getstatic     #46
76: ldc           #53
78: aconst_null
79: invokeinterface #54,  4
84: invokestatic  #51
87: ldc           #125
89: aload_1
90: getstatic     #119
93: invokevirtual #47
96: invokestatic  #48
99: bipush        7
101: aload_1
102: invokevirtual #49
105: getstatic     #119
108: aconst_null
109: invokeinterface #50,  3
114: invokestatic  #51
117: iconst_2
118: aload_1
119: invokevirtual #49
122: getstatic     #119
125: ldc           #53
127: aconst_null
128: invokeinterface #54,  4
133: invokestatic  #51
136: ldc           #45
138: aload_1
139: getstatic     #120
142: invokevirtual #47
145: invokestatic  #48
148: iconst_1
149: aload_1
150: invokevirtual #49
153: getstatic     #120
156: aconst_null
157: invokeinterface #50,  3
162: invokestatic  #51
165: iconst_1
166: aload_1
167: invokevirtual #49
170: getstatic     #120
173: ldc           #53
175: aconst_null
176: invokeinterface #54,  4
181: invokestatic  #51
184: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSeparatorIfFieldsAfter
Start line: 512
End line: 525
Method source code: 
    public void testFormatSeparatorIfFieldsAfter() {
        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter("T").appendHours().toFormatter();
        assertEquals("1T5", f.print(PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("T5", f.print(TIME_PERIOD));
        assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1", f.print(DATE_PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: ldc           #116
9: invokevirtual #126
12: invokevirtual #64
15: invokevirtual #41
18: astore_1
19: ldc           #118
21: aload_1
22: getstatic     #46
25: invokevirtual #47
28: invokestatic  #48
31: iconst_3
32: aload_1
33: invokevirtual #49
36: getstatic     #46
39: aconst_null
40: invokeinterface #50,  3
45: invokestatic  #51
48: iconst_2
49: aload_1
50: invokevirtual #49
53: getstatic     #46
56: ldc           #53
58: aconst_null
59: invokeinterface #54,  4
64: invokestatic  #51
67: ldc           #127
69: aload_1
70: getstatic     #119
73: invokevirtual #47
76: invokestatic  #48
79: iconst_2
80: aload_1
81: invokevirtual #49
84: getstatic     #119
87: aconst_null
88: invokeinterface #50,  3
93: invokestatic  #51
96: iconst_1
97: aload_1
98: invokevirtual #49
101: getstatic     #119
104: ldc           #53
106: aconst_null
107: invokeinterface #54,  4
112: invokestatic  #51
115: ldc           #45
117: aload_1
118: getstatic     #120
121: invokevirtual #47
124: invokestatic  #48
127: iconst_1
128: aload_1
129: invokevirtual #49
132: getstatic     #120
135: aconst_null
136: invokeinterface #50,  3
141: invokestatic  #51
144: iconst_1
145: aload_1
146: invokevirtual #49
149: getstatic     #120
152: ldc           #53
154: aconst_null
155: invokeinterface #54,  4
160: invokestatic  #51
163: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatSeparatorIfFieldsBefore
Start line: 527
End line: 540
Method source code: 
    public void testFormatSeparatorIfFieldsBefore() {
        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore("T").appendHours().toFormatter();
        assertEquals("1T5", f.print(PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("5", f.print(TIME_PERIOD));
        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1T", f.print(DATE_PERIOD));
        assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: ldc           #116
9: invokevirtual #128
12: invokevirtual #64
15: invokevirtual #41
18: astore_1
19: ldc           #118
21: aload_1
22: getstatic     #46
25: invokevirtual #47
28: invokestatic  #48
31: iconst_3
32: aload_1
33: invokevirtual #49
36: getstatic     #46
39: aconst_null
40: invokeinterface #50,  3
45: invokestatic  #51
48: iconst_2
49: aload_1
50: invokevirtual #49
53: getstatic     #46
56: ldc           #53
58: aconst_null
59: invokeinterface #54,  4
64: invokestatic  #51
67: ldc           #65
69: aload_1
70: getstatic     #119
73: invokevirtual #47
76: invokestatic  #48
79: iconst_1
80: aload_1
81: invokevirtual #49
84: getstatic     #119
87: aconst_null
88: invokeinterface #50,  3
93: invokestatic  #51
96: iconst_1
97: aload_1
98: invokevirtual #49
101: getstatic     #119
104: ldc           #53
106: aconst_null
107: invokeinterface #54,  4
112: invokestatic  #51
115: ldc           #129
117: aload_1
118: getstatic     #120
121: invokevirtual #47
124: invokestatic  #48
127: iconst_2
128: aload_1
129: invokevirtual #49
132: getstatic     #120
135: aconst_null
136: invokeinterface #50,  3
141: invokestatic  #51
144: iconst_1
145: aload_1
146: invokevirtual #49
149: getstatic     #120
152: ldc           #53
154: aconst_null
155: invokeinterface #54,  4
160: invokestatic  #51
163: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatLiteral
Start line: 543
End line: 548
Method source code: 
    public void testFormatLiteral() {
        PeriodFormatter f = builder.appendLiteral("HELLO").toFormatter();
        assertEquals("HELLO", f.print(PERIOD));
        assertEquals(5, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(0, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: ldc           #130
6: invokevirtual #131
9: invokevirtual #41
12: astore_1
13: ldc           #130
15: aload_1
16: getstatic     #46
19: invokevirtual #47
22: invokestatic  #48
25: iconst_5
26: aload_1
27: invokevirtual #49
30: getstatic     #46
33: aconst_null
34: invokeinterface #50,  3
39: invokestatic  #51
42: iconst_0
43: aload_1
44: invokevirtual #49
47: getstatic     #46
50: ldc           #53
52: aconst_null
53: invokeinterface #54,  4
58: invokestatic  #51
61: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatAppendFormatter
Start line: 550
End line: 556
Method source code: 
    public void testFormatAppendFormatter() {
        PeriodFormatter base = builder.appendYears().appendLiteral("-").toFormatter();
        PeriodFormatter f = new PeriodFormatterBuilder().append(base).appendYears().toFormatter();
        assertEquals("1-1", f.print(PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: aload_0
1: getfield      #38
4: invokevirtual #40
7: ldc           #132
9: invokevirtual #131
12: invokevirtual #41
15: astore_1
16: new           #36
19: dup
20: invokespecial #37
23: aload_1
24: invokevirtual #133
27: invokevirtual #40
30: invokevirtual #41
33: astore_2
34: ldc           #134
36: aload_2
37: getstatic     #46
40: invokevirtual #47
43: invokestatic  #48
46: iconst_3
47: aload_2
48: invokevirtual #49
51: getstatic     #46
54: aconst_null
55: invokeinterface #50,  3
60: invokestatic  #51
63: iconst_2
64: aload_2
65: invokevirtual #49
68: getstatic     #46
71: ldc           #53
73: aconst_null
74: invokeinterface #54,  4
79: invokestatic  #51
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatMinDigits
Start line: 558
End line: 563
Method source code: 
    public void testFormatMinDigits() {
        PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter();
        assertEquals("0001", f.print(PERIOD));
        assertEquals(4, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: iconst_4
8: invokevirtual #135
11: invokevirtual #40
14: invokevirtual #41
17: astore_1
18: ldc           #136
20: aload_1
21: getstatic     #46
24: invokevirtual #47
27: invokestatic  #48
30: iconst_4
31: aload_1
32: invokevirtual #49
35: getstatic     #46
38: aconst_null
39: invokeinterface #50,  3
44: invokestatic  #51
47: iconst_1
48: aload_1
49: invokevirtual #49
52: getstatic     #46
55: ldc           #53
57: aconst_null
58: invokeinterface #54,  4
63: invokestatic  #51
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroDefault
Start line: 566
End line: 596
Method source code: 
    public void testFormatPrintZeroDefault() {
        PeriodFormatter f =
            new PeriodFormatterBuilder()
                .appendYears().appendLiteral("-")
                .appendMonths().appendLiteral("-")
                .appendWeeks().appendLiteral("-")
                .appendDays().toFormatter();
        assertEquals("1-2-3-4", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("---0", f.print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1---4", f.print(YEAR_DAY_PERIOD));
        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("---0", f.print(EMPTY_PERIOD));
        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
        
        // test only last instance of same field is output
        f = new PeriodFormatterBuilder()
                .appendYears().appendLiteral("-")
                .appendYears().toFormatter();
        assertEquals("-0", f.print(EMPTY_PERIOD));
        assertEquals(2, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #40
10: ldc           #132
12: invokevirtual #131
15: invokevirtual #58
18: ldc           #132
20: invokevirtual #131
23: invokevirtual #60
26: ldc           #132
28: invokevirtual #131
31: invokevirtual #62
34: invokevirtual #41
37: astore_1
38: ldc           #137
40: aload_1
41: getstatic     #46
44: invokevirtual #47
47: invokestatic  #48
50: bipush        7
52: aload_1
53: invokevirtual #49
56: getstatic     #46
59: aconst_null
60: invokeinterface #50,  3
65: invokestatic  #51
68: iconst_4
69: aload_1
70: invokevirtual #49
73: getstatic     #46
76: ldc           #53
78: aconst_null
79: invokeinterface #54,  4
84: invokestatic  #51
87: ldc           #138
89: aload_1
90: getstatic     #139
93: invokevirtual #47
96: invokestatic  #48
99: iconst_4
100: aload_1
101: invokevirtual #49
104: getstatic     #139
107: aconst_null
108: invokeinterface #50,  3
113: invokestatic  #51
116: iconst_1
117: aload_1
118: invokevirtual #49
121: getstatic     #139
124: ldc           #53
126: aconst_null
127: invokeinterface #54,  4
132: invokestatic  #51
135: ldc           #140
137: aload_1
138: getstatic     #141
141: invokevirtual #47
144: invokestatic  #48
147: iconst_5
148: aload_1
149: invokevirtual #49
152: getstatic     #141
155: aconst_null
156: invokeinterface #50,  3
161: invokestatic  #51
164: iconst_2
165: aload_1
166: invokevirtual #49
169: getstatic     #141
172: ldc           #53
174: aconst_null
175: invokeinterface #54,  4
180: invokestatic  #51
183: ldc           #138
185: aload_1
186: getstatic     #142
189: invokevirtual #47
192: invokestatic  #48
195: iconst_4
196: aload_1
197: invokevirtual #49
200: getstatic     #142
203: aconst_null
204: invokeinterface #50,  3
209: invokestatic  #51
212: iconst_1
213: aload_1
214: invokevirtual #49
217: getstatic     #142
220: ldc           #53
222: aconst_null
223: invokeinterface #54,  4
228: invokestatic  #51
231: new           #36
234: dup
235: invokespecial #37
238: invokevirtual #40
241: ldc           #132
243: invokevirtual #131
246: invokevirtual #40
249: invokevirtual #41
252: astore_1
253: ldc           #143
255: aload_1
256: getstatic     #142
259: invokevirtual #47
262: invokestatic  #48
265: iconst_2
266: aload_1
267: invokevirtual #49
270: getstatic     #142
273: aconst_null
274: invokeinterface #50,  3
279: invokestatic  #51
282: iconst_1
283: aload_1
284: invokevirtual #49
287: getstatic     #142
290: ldc           #53
292: aconst_null
293: invokeinterface #54,  4
298: invokestatic  #51
301: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyLast
Start line: 598
End line: 621
Method source code: 
    public void testFormatPrintZeroRarelyLast() {
        PeriodFormatter f =
            new PeriodFormatterBuilder()
                .printZeroRarelyLast()
                .appendYears().appendLiteral("-")
                .appendMonths().appendLiteral("-")
                .appendWeeks().appendLiteral("-")
                .appendDays().toFormatter();
        assertEquals("1-2-3-4", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("---0", f.print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1---4", f.print(YEAR_DAY_PERIOD));
        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("---0", f.print(EMPTY_PERIOD));
        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #144
10: invokevirtual #40
13: ldc           #132
15: invokevirtual #131
18: invokevirtual #58
21: ldc           #132
23: invokevirtual #131
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #62
37: invokevirtual #41
40: astore_1
41: ldc           #137
43: aload_1
44: getstatic     #46
47: invokevirtual #47
50: invokestatic  #48
53: bipush        7
55: aload_1
56: invokevirtual #49
59: getstatic     #46
62: aconst_null
63: invokeinterface #50,  3
68: invokestatic  #51
71: iconst_4
72: aload_1
73: invokevirtual #49
76: getstatic     #46
79: ldc           #53
81: aconst_null
82: invokeinterface #54,  4
87: invokestatic  #51
90: ldc           #138
92: aload_1
93: getstatic     #139
96: invokevirtual #47
99: invokestatic  #48
102: iconst_4
103: aload_1
104: invokevirtual #49
107: getstatic     #139
110: aconst_null
111: invokeinterface #50,  3
116: invokestatic  #51
119: iconst_1
120: aload_1
121: invokevirtual #49
124: getstatic     #139
127: ldc           #53
129: aconst_null
130: invokeinterface #54,  4
135: invokestatic  #51
138: ldc           #140
140: aload_1
141: getstatic     #141
144: invokevirtual #47
147: invokestatic  #48
150: iconst_5
151: aload_1
152: invokevirtual #49
155: getstatic     #141
158: aconst_null
159: invokeinterface #50,  3
164: invokestatic  #51
167: iconst_2
168: aload_1
169: invokevirtual #49
172: getstatic     #141
175: ldc           #53
177: aconst_null
178: invokeinterface #54,  4
183: invokestatic  #51
186: ldc           #138
188: aload_1
189: getstatic     #142
192: invokevirtual #47
195: invokestatic  #48
198: iconst_4
199: aload_1
200: invokevirtual #49
203: getstatic     #142
206: aconst_null
207: invokeinterface #50,  3
212: invokestatic  #51
215: iconst_1
216: aload_1
217: invokevirtual #49
220: getstatic     #142
223: ldc           #53
225: aconst_null
226: invokeinterface #54,  4
231: invokestatic  #51
234: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirst
Start line: 623
End line: 646
Method source code: 
    public void testFormatPrintZeroRarelyFirst() {
        PeriodFormatter f =
            new PeriodFormatterBuilder()
                .printZeroRarelyFirst()
                .appendYears().appendLiteral("-")
                .appendMonths().appendLiteral("-")
                .appendWeeks().appendLiteral("-")
                .appendDays().toFormatter();
        assertEquals("1-2-3-4", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("0---", f.print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1---4", f.print(YEAR_DAY_PERIOD));
        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("0---", f.print(EMPTY_PERIOD));
        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));
        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #40
13: ldc           #132
15: invokevirtual #131
18: invokevirtual #58
21: ldc           #132
23: invokevirtual #131
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #62
37: invokevirtual #41
40: astore_1
41: ldc           #137
43: aload_1
44: getstatic     #46
47: invokevirtual #47
50: invokestatic  #48
53: bipush        7
55: aload_1
56: invokevirtual #49
59: getstatic     #46
62: aconst_null
63: invokeinterface #50,  3
68: invokestatic  #51
71: iconst_4
72: aload_1
73: invokevirtual #49
76: getstatic     #46
79: ldc           #53
81: aconst_null
82: invokeinterface #54,  4
87: invokestatic  #51
90: ldc           #146
92: aload_1
93: getstatic     #139
96: invokevirtual #47
99: invokestatic  #48
102: iconst_4
103: aload_1
104: invokevirtual #49
107: getstatic     #139
110: aconst_null
111: invokeinterface #50,  3
116: invokestatic  #51
119: iconst_1
120: aload_1
121: invokevirtual #49
124: getstatic     #139
127: ldc           #53
129: aconst_null
130: invokeinterface #54,  4
135: invokestatic  #51
138: ldc           #140
140: aload_1
141: getstatic     #141
144: invokevirtual #47
147: invokestatic  #48
150: iconst_5
151: aload_1
152: invokevirtual #49
155: getstatic     #141
158: aconst_null
159: invokeinterface #50,  3
164: invokestatic  #51
167: iconst_2
168: aload_1
169: invokevirtual #49
172: getstatic     #141
175: ldc           #53
177: aconst_null
178: invokeinterface #54,  4
183: invokestatic  #51
186: ldc           #146
188: aload_1
189: getstatic     #142
192: invokevirtual #47
195: invokestatic  #48
198: iconst_4
199: aload_1
200: invokevirtual #49
203: getstatic     #142
206: aconst_null
207: invokeinterface #50,  3
212: invokestatic  #51
215: iconst_1
216: aload_1
217: invokevirtual #49
220: getstatic     #142
223: ldc           #53
225: aconst_null
226: invokeinterface #54,  4
231: invokestatic  #51
234: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirstYears
Start line: 648
End line: 653
Method source code: 
    public void testFormatPrintZeroRarelyFirstYears() {
        PeriodFormatter f = new PeriodFormatterBuilder()
            .printZeroRarelyFirst()
            .appendYears().toFormatter();
        assertEquals("0", f.print(EMPTY_PERIOD));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #40
13: invokevirtual #41
16: astore_1
17: ldc           #57
19: aload_1
20: getstatic     #142
23: invokevirtual #47
26: invokestatic  #48
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirstMonths
Start line: 655
End line: 660
Method source code: 
    public void testFormatPrintZeroRarelyFirstMonths() {
        PeriodFormatter f = new PeriodFormatterBuilder()
            .printZeroRarelyFirst()
            .appendMonths().toFormatter();
        assertEquals("0", f.print(EMPTY_PERIOD));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #58
13: invokevirtual #41
16: astore_1
17: ldc           #57
19: aload_1
20: getstatic     #142
23: invokevirtual #47
26: invokestatic  #48
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirstWeeks
Start line: 662
End line: 667
Method source code: 
    public void testFormatPrintZeroRarelyFirstWeeks() {
        PeriodFormatter f = new PeriodFormatterBuilder()
            .printZeroRarelyFirst()
            .appendWeeks().toFormatter();
        assertEquals("0", f.print(EMPTY_PERIOD));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #60
13: invokevirtual #41
16: astore_1
17: ldc           #57
19: aload_1
20: getstatic     #142
23: invokevirtual #47
26: invokestatic  #48
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirstDays
Start line: 669
End line: 674
Method source code: 
    public void testFormatPrintZeroRarelyFirstDays() {
        PeriodFormatter f = new PeriodFormatterBuilder()
            .printZeroRarelyFirst()
            .appendDays().toFormatter();
        assertEquals("0", f.print(EMPTY_PERIOD));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #62
13: invokevirtual #41
16: astore_1
17: ldc           #57
19: aload_1
20: getstatic     #142
23: invokevirtual #47
26: invokestatic  #48
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirstHours
Start line: 676
End line: 681
Method source code: 
    public void testFormatPrintZeroRarelyFirstHours() {
        PeriodFormatter f = new PeriodFormatterBuilder()
            .printZeroRarelyFirst()
            .appendHours().toFormatter();
        assertEquals("0", f.print(EMPTY_PERIOD));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #64
13: invokevirtual #41
16: astore_1
17: ldc           #57
19: aload_1
20: getstatic     #142
23: invokevirtual #47
26: invokestatic  #48
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirstMinutes
Start line: 683
End line: 688
Method source code: 
    public void testFormatPrintZeroRarelyFirstMinutes() {
        PeriodFormatter f = new PeriodFormatterBuilder()
            .printZeroRarelyFirst()
            .appendMinutes().toFormatter();
        assertEquals("0", f.print(EMPTY_PERIOD));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #66
13: invokevirtual #41
16: astore_1
17: ldc           #57
19: aload_1
20: getstatic     #142
23: invokevirtual #47
26: invokestatic  #48
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroRarelyFirstSeconds
Start line: 690
End line: 695
Method source code: 
    public void testFormatPrintZeroRarelyFirstSeconds() {
        PeriodFormatter f = new PeriodFormatterBuilder()
            .printZeroRarelyFirst()
            .appendSeconds().toFormatter();
        assertEquals("0", f.print(EMPTY_PERIOD));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #145
10: invokevirtual #68
13: invokevirtual #41
16: astore_1
17: ldc           #57
19: aload_1
20: getstatic     #142
23: invokevirtual #47
26: invokestatic  #48
29: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroIfSupported
Start line: 697
End line: 720
Method source code: 
    public void testFormatPrintZeroIfSupported() {
        PeriodFormatter f =
            new PeriodFormatterBuilder()
                .printZeroIfSupported()
                .appendYears().appendLiteral("-")
                .appendMonths().appendLiteral("-")
                .appendWeeks().appendLiteral("-")
                .appendDays().toFormatter();
        assertEquals("1-2-3-4", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("0---0", f.print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1---4", f.print(YEAR_DAY_PERIOD));
        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("0-0-0-0", f.print(EMPTY_PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #147
10: invokevirtual #40
13: ldc           #132
15: invokevirtual #131
18: invokevirtual #58
21: ldc           #132
23: invokevirtual #131
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #62
37: invokevirtual #41
40: astore_1
41: ldc           #137
43: aload_1
44: getstatic     #46
47: invokevirtual #47
50: invokestatic  #48
53: bipush        7
55: aload_1
56: invokevirtual #49
59: getstatic     #46
62: aconst_null
63: invokeinterface #50,  3
68: invokestatic  #51
71: iconst_4
72: aload_1
73: invokevirtual #49
76: getstatic     #46
79: ldc           #53
81: aconst_null
82: invokeinterface #54,  4
87: invokestatic  #51
90: ldc           #148
92: aload_1
93: getstatic     #139
96: invokevirtual #47
99: invokestatic  #48
102: iconst_5
103: aload_1
104: invokevirtual #49
107: getstatic     #139
110: aconst_null
111: invokeinterface #50,  3
116: invokestatic  #51
119: iconst_2
120: aload_1
121: invokevirtual #49
124: getstatic     #139
127: ldc           #53
129: aconst_null
130: invokeinterface #54,  4
135: invokestatic  #51
138: ldc           #140
140: aload_1
141: getstatic     #141
144: invokevirtual #47
147: invokestatic  #48
150: iconst_5
151: aload_1
152: invokevirtual #49
155: getstatic     #141
158: aconst_null
159: invokeinterface #50,  3
164: invokestatic  #51
167: iconst_2
168: aload_1
169: invokevirtual #49
172: getstatic     #141
175: ldc           #53
177: aconst_null
178: invokeinterface #54,  4
183: invokestatic  #51
186: ldc           #149
188: aload_1
189: getstatic     #142
192: invokevirtual #47
195: invokestatic  #48
198: bipush        7
200: aload_1
201: invokevirtual #49
204: getstatic     #142
207: aconst_null
208: invokeinterface #50,  3
213: invokestatic  #51
216: iconst_4
217: aload_1
218: invokevirtual #49
221: getstatic     #142
224: ldc           #53
226: aconst_null
227: invokeinterface #54,  4
232: invokestatic  #51
235: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroAlways
Start line: 722
End line: 745
Method source code: 
    public void testFormatPrintZeroAlways() {
        PeriodFormatter f =
            new PeriodFormatterBuilder()
                .printZeroAlways()
                .appendYears().appendLiteral("-")
                .appendMonths().appendLiteral("-")
                .appendWeeks().appendLiteral("-")
                .appendDays().toFormatter();
        assertEquals("1-2-3-4", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("0-0-0-0", f.print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1-0-0-4", f.print(YEAR_DAY_PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("0-0-0-0", f.print(EMPTY_PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #150
10: invokevirtual #40
13: ldc           #132
15: invokevirtual #131
18: invokevirtual #58
21: ldc           #132
23: invokevirtual #131
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #62
37: invokevirtual #41
40: astore_1
41: ldc           #137
43: aload_1
44: getstatic     #46
47: invokevirtual #47
50: invokestatic  #48
53: bipush        7
55: aload_1
56: invokevirtual #49
59: getstatic     #46
62: aconst_null
63: invokeinterface #50,  3
68: invokestatic  #51
71: iconst_4
72: aload_1
73: invokevirtual #49
76: getstatic     #46
79: ldc           #53
81: aconst_null
82: invokeinterface #54,  4
87: invokestatic  #51
90: ldc           #149
92: aload_1
93: getstatic     #139
96: invokevirtual #47
99: invokestatic  #48
102: bipush        7
104: aload_1
105: invokevirtual #49
108: getstatic     #139
111: aconst_null
112: invokeinterface #50,  3
117: invokestatic  #51
120: iconst_4
121: aload_1
122: invokevirtual #49
125: getstatic     #139
128: ldc           #53
130: aconst_null
131: invokeinterface #54,  4
136: invokestatic  #51
139: ldc           #151
141: aload_1
142: getstatic     #141
145: invokevirtual #47
148: invokestatic  #48
151: bipush        7
153: aload_1
154: invokevirtual #49
157: getstatic     #141
160: aconst_null
161: invokeinterface #50,  3
166: invokestatic  #51
169: iconst_4
170: aload_1
171: invokevirtual #49
174: getstatic     #141
177: ldc           #53
179: aconst_null
180: invokeinterface #54,  4
185: invokestatic  #51
188: ldc           #149
190: aload_1
191: getstatic     #142
194: invokevirtual #47
197: invokestatic  #48
200: bipush        7
202: aload_1
203: invokevirtual #49
206: getstatic     #142
209: aconst_null
210: invokeinterface #50,  3
215: invokestatic  #51
218: iconst_4
219: aload_1
220: invokevirtual #49
223: getstatic     #142
226: ldc           #53
228: aconst_null
229: invokeinterface #54,  4
234: invokestatic  #51
237: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatPrintZeroNever
Start line: 747
End line: 770
Method source code: 
    public void testFormatPrintZeroNever() {
        PeriodFormatter f =
            new PeriodFormatterBuilder()
                .printZeroNever()
                .appendYears().appendLiteral("-")
                .appendMonths().appendLiteral("-")
                .appendWeeks().appendLiteral("-")
                .appendDays().toFormatter();
        assertEquals("1-2-3-4", f.print(PERIOD));
        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));
        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("---", f.print(EMPTY_YEAR_DAY_PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));
        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("1---4", f.print(YEAR_DAY_PERIOD));
        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));
        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));
        
        assertEquals("---", f.print(EMPTY_PERIOD));
        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));
        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #152
10: invokevirtual #40
13: ldc           #132
15: invokevirtual #131
18: invokevirtual #58
21: ldc           #132
23: invokevirtual #131
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #62
37: invokevirtual #41
40: astore_1
41: ldc           #137
43: aload_1
44: getstatic     #46
47: invokevirtual #47
50: invokestatic  #48
53: bipush        7
55: aload_1
56: invokevirtual #49
59: getstatic     #46
62: aconst_null
63: invokeinterface #50,  3
68: invokestatic  #51
71: iconst_4
72: aload_1
73: invokevirtual #49
76: getstatic     #46
79: ldc           #53
81: aconst_null
82: invokeinterface #54,  4
87: invokestatic  #51
90: ldc           #153
92: aload_1
93: getstatic     #139
96: invokevirtual #47
99: invokestatic  #48
102: iconst_3
103: aload_1
104: invokevirtual #49
107: getstatic     #139
110: aconst_null
111: invokeinterface #50,  3
116: invokestatic  #51
119: iconst_0
120: aload_1
121: invokevirtual #49
124: getstatic     #139
127: ldc           #53
129: aconst_null
130: invokeinterface #54,  4
135: invokestatic  #51
138: ldc           #140
140: aload_1
141: getstatic     #141
144: invokevirtual #47
147: invokestatic  #48
150: iconst_5
151: aload_1
152: invokevirtual #49
155: getstatic     #141
158: aconst_null
159: invokeinterface #50,  3
164: invokestatic  #51
167: iconst_2
168: aload_1
169: invokevirtual #49
172: getstatic     #141
175: ldc           #53
177: aconst_null
178: invokeinterface #54,  4
183: invokestatic  #51
186: ldc           #153
188: aload_1
189: getstatic     #142
192: invokevirtual #47
195: invokestatic  #48
198: iconst_3
199: aload_1
200: invokevirtual #49
203: getstatic     #142
206: aconst_null
207: invokeinterface #50,  3
212: invokestatic  #51
215: iconst_0
216: aload_1
217: invokevirtual #49
220: getstatic     #142
223: ldc           #53
225: aconst_null
226: invokeinterface #54,  4
231: invokestatic  #51
234: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatAppend_PrinterParser_null_null
Start line: 773
End line: 778
Method source code: 
    public void testFormatAppend_PrinterParser_null_null() {
        try {
            new PeriodFormatterBuilder().append(null, null);
            fail();
        } catch (IllegalArgumentException ex) {}
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: aconst_null
8: aconst_null
9: invokevirtual #154
12: pop
13: invokestatic  #93
16: goto          20
19: astore_1
20: return
Exception table:
from    to  target type
0    16    19   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatAppend_PrinterParser_Printer_null
Start line: 780
End line: 792
Method source code: 
    public void testFormatAppend_PrinterParser_Printer_null() {
        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths();
        assertNotNull(bld.toPrinter());
        assertNull(bld.toParser());
        
        PeriodFormatter f = bld.toFormatter();
        assertEquals("1-2", f.print(PERIOD));
        try {
            f.parsePeriod("1-2");
            fail();
        } catch (UnsupportedOperationException ex) {}
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #40
10: ldc           #132
12: invokevirtual #131
15: invokevirtual #43
18: astore_1
19: new           #36
22: dup
23: invokespecial #37
26: aload_1
27: aconst_null
28: invokevirtual #154
31: invokevirtual #58
34: astore_2
35: aload_2
36: invokevirtual #43
39: invokestatic  #42
42: aload_2
43: invokevirtual #44
46: invokestatic  #155
49: aload_2
50: invokevirtual #41
53: astore_3
54: ldc           #156
56: aload_3
57: getstatic     #46
60: invokevirtual #47
63: invokestatic  #48
66: aload_3
67: ldc           #156
69: invokevirtual #157
72: pop
73: invokestatic  #93
76: goto          81
79: astore        4
81: return
Exception table:
from    to  target type
66    76    79   Class java/lang/UnsupportedOperationException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatAppend_PrinterParser_null_Parser
Start line: 794
End line: 806
Method source code: 
    public void testFormatAppend_PrinterParser_null_Parser() {
        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(null, parser).appendMonths();
        assertNull(bld.toPrinter());
        assertNotNull(bld.toParser());
        
        PeriodFormatter f = bld.toFormatter();
        try {
            f.print(PERIOD);
            fail();
        } catch (UnsupportedOperationException ex) {}
        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2"));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #60
10: ldc           #132
12: invokevirtual #131
15: invokevirtual #44
18: astore_1
19: new           #36
22: dup
23: invokespecial #37
26: aconst_null
27: aload_1
28: invokevirtual #154
31: invokevirtual #58
34: astore_2
35: aload_2
36: invokevirtual #43
39: invokestatic  #155
42: aload_2
43: invokevirtual #44
46: invokestatic  #42
49: aload_2
50: invokevirtual #41
53: astore_3
54: aload_3
55: getstatic     #46
58: invokevirtual #47
61: pop
62: invokestatic  #93
65: goto          70
68: astore        4
70: new           #55
73: dup
74: iconst_0
75: iconst_2
76: iconst_1
77: iconst_0
78: iconst_0
79: iconst_0
80: iconst_0
81: iconst_0
82: invokespecial #56
85: aload_3
86: ldc           #156
88: invokevirtual #157
91: invokestatic  #159
94: return
Exception table:
from    to  target type
54    65    68   Class java/lang/UnsupportedOperationException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatAppend_PrinterParser_PrinterParser
Start line: 808
End line: 818
Method source code: 
    public void testFormatAppend_PrinterParser_PrinterParser() {
        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths();
        assertNotNull(bld.toPrinter());
        assertNotNull(bld.toParser());
        
        PeriodFormatter f = bld.toFormatter();
        assertEquals("1-2", f.print(PERIOD));
        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod("1-2"));
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #40
10: ldc           #132
12: invokevirtual #131
15: invokevirtual #43
18: astore_1
19: new           #36
22: dup
23: invokespecial #37
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #44
37: astore_2
38: new           #36
41: dup
42: invokespecial #37
45: aload_1
46: aload_2
47: invokevirtual #154
50: invokevirtual #58
53: astore_3
54: aload_3
55: invokevirtual #43
58: invokestatic  #42
61: aload_3
62: invokevirtual #44
65: invokestatic  #42
68: aload_3
69: invokevirtual #41
72: astore        4
74: ldc           #156
76: aload         4
78: getstatic     #46
81: invokevirtual #47
84: invokestatic  #48
87: new           #55
90: dup
91: iconst_0
92: iconst_2
93: iconst_1
94: iconst_0
95: iconst_0
96: iconst_0
97: iconst_0
98: iconst_0
99: invokespecial #56
102: aload         4
104: ldc           #156
106: invokevirtual #157
109: invokestatic  #159
112: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatAppend_PrinterParser_Printer_null_null_Parser
Start line: 820
End line: 831
Method source code: 
    public void testFormatAppend_PrinterParser_Printer_null_null_Parser() {
        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);
        assertNull(bld.toPrinter());
        assertNull(bld.toParser());
        
        try {
            bld.toFormatter();
            fail();
        } catch (IllegalStateException ex) {}
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #40
10: ldc           #132
12: invokevirtual #131
15: invokevirtual #43
18: astore_1
19: new           #36
22: dup
23: invokespecial #37
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #44
37: astore_2
38: new           #36
41: dup
42: invokespecial #37
45: aload_1
46: aconst_null
47: invokevirtual #154
50: aconst_null
51: aload_2
52: invokevirtual #154
55: astore_3
56: aload_3
57: invokevirtual #43
60: invokestatic  #155
63: aload_3
64: invokevirtual #44
67: invokestatic  #155
70: aload_3
71: invokevirtual #41
74: pop
75: invokestatic  #93
78: goto          83
81: astore        4
83: return
Exception table:
from    to  target type
70    78    81   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testFormatAppend_PrinterParserThenClear
Start line: 833
End line: 843
Method source code: 
    public void testFormatAppend_PrinterParserThenClear() {
        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral("-").toPrinter();
        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral("-").toParser();
        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);
        assertNull(bld.toPrinter());
        assertNull(bld.toParser());
        bld.clear();
        bld.appendMonths();
        assertNotNull(bld.toPrinter());
        assertNotNull(bld.toParser());
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: invokevirtual #40
10: ldc           #132
12: invokevirtual #131
15: invokevirtual #43
18: astore_1
19: new           #36
22: dup
23: invokespecial #37
26: invokevirtual #60
29: ldc           #132
31: invokevirtual #131
34: invokevirtual #44
37: astore_2
38: new           #36
41: dup
42: invokespecial #37
45: aload_1
46: aconst_null
47: invokevirtual #154
50: aconst_null
51: aload_2
52: invokevirtual #154
55: astore_3
56: aload_3
57: invokevirtual #43
60: invokestatic  #155
63: aload_3
64: invokevirtual #44
67: invokestatic  #155
70: aload_3
71: invokevirtual #160
74: aload_3
75: invokevirtual #58
78: pop
79: aload_3
80: invokevirtual #43
83: invokestatic  #42
86: aload_3
87: invokevirtual #44
90: invokestatic  #42
93: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/time/13/target/test-classes/org/joda/time/format/TestPeriodFormatterBuilder.class
Class name: TestPeriodFormatterBuilder
Method name: testBug2495455
Start line: 845
End line: 869
Method source code: 
    public void testBug2495455() {
        PeriodFormatter pfmt1 = new PeriodFormatterBuilder()
            .appendLiteral("P")
            .appendYears()
            .appendSuffix("Y")
            .appendMonths()
            .appendSuffix("M")
            .appendWeeks()
            .appendSuffix("W")
            .appendDays()
            .appendSuffix("D")
            .appendSeparatorIfFieldsAfter("T")
            .appendHours()
            .appendSuffix("H")
            .appendMinutes()
            .appendSuffix("M")
            .appendSecondsWithOptionalMillis()
            .appendSuffix("S")
            .toFormatter();
        PeriodFormatter pfmt2 = new PeriodFormatterBuilder()
            .append(ISOPeriodFormat.standard())
            .toFormatter();
        pfmt1.parsePeriod("PT1003199059S");
        pfmt2.parsePeriod("PT1003199059S");
    }
Method byte code: 
0: new           #36
3: dup
4: invokespecial #37
7: ldc           #112
9: invokevirtual #131
12: invokevirtual #40
15: ldc           #113
17: invokevirtual #101
20: invokevirtual #58
23: ldc           #161
25: invokevirtual #101
28: invokevirtual #60
31: ldc           #162
33: invokevirtual #101
36: invokevirtual #62
39: ldc           #163
41: invokevirtual #101
44: ldc           #116
46: invokevirtual #126
49: invokevirtual #64
52: ldc           #164
54: invokevirtual #101
57: invokevirtual #66
60: ldc           #161
62: invokevirtual #101
65: invokevirtual #80
68: ldc           #165
70: invokevirtual #101
73: invokevirtual #41
76: astore_1
77: new           #36
80: dup
81: invokespecial #37
84: invokestatic  #166
87: invokevirtual #133
90: invokevirtual #41
93: astore_2
94: aload_1
95: ldc           #167
97: invokevirtual #157
100: pop
101: aload_2
102: ldc           #167
104: invokevirtual #157
107: pop
108: return
